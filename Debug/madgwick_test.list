
madgwick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe4  08005fe4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013060  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025eb  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  000356f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  00036870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221c7  00000000  00000000  00037918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011027  00000000  00000000  00059adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca3ae  00000000  00000000  0006ab06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134eb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000511c  00000000  00000000  00134f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ebc 	.word	0x08005ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ebc 	.word	0x08005ebc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <configure_i3g4250d>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_i3g4250d(void *handle, void* platform_write, void* platform_read)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	61bb      	str	r3, [r7, #24]
	dev_ctx.read_reg = platform_read;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	61fb      	str	r3, [r7, #28]
	dev_ctx.handle = handle;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t who_iam;
	i3g4250d_device_id_get(&dev_ctx, &who_iam);
 800058c:	f107 0217 	add.w	r2, r7, #23
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f004 fc5c 	bl	8004e54 <i3g4250d_device_id_get>
	if(who_iam != I3G4250D_ID){
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	2bd3      	cmp	r3, #211	; 0xd3
 80005a0:	d002      	beq.n	80005a8 <configure_i3g4250d+0x34>
		return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e01a      	b.n	80005de <configure_i3g4250d+0x6a>
	}

	int32_t ret;
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80005ac:	e013      	b.n	80005d6 <configure_i3g4250d+0x62>
		ret = dev_ctx.write_reg(handle, I3G4250D_REGs_ADDR_conf[i], I3G4250D_REGs_VAL_conf + i, 1);
 80005ae:	69bc      	ldr	r4, [r7, #24]
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <configure_i3g4250d+0x74>)
 80005b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005b4:	4413      	add	r3, r2
 80005b6:	7819      	ldrb	r1, [r3, #0]
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <configure_i3g4250d+0x78>)
 80005bc:	441a      	add	r2, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	68f8      	ldr	r0, [r7, #12]
 80005c2:	47a0      	blx	r4
 80005c4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(ret != 0)
 80005c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <configure_i3g4250d+0x5c>
		{
			return ret;
 80005cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ce:	e006      	b.n	80005de <configure_i3g4250d+0x6a>
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 80005d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d2:	3301      	adds	r3, #1
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80005d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d8:	2b05      	cmp	r3, #5
 80005da:	dde8      	ble.n	80005ae <configure_i3g4250d+0x3a>
		}
	}
	return ret;
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3734      	adds	r7, #52	; 0x34
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08005ef8 	.word	0x08005ef8
 80005ec:	08005f00 	.word	0x08005f00

080005f0 <configure_lis331dlh>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis331dlh(void *handle, void* platform_write, void* platform_read)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b08d      	sub	sp, #52	; 0x34
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	617b      	str	r3, [r7, #20]
	dev_ctx.read_reg = platform_read;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	61bb      	str	r3, [r7, #24]
	dev_ctx.handle = handle;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	623b      	str	r3, [r7, #32]

	uint8_t who_iam;
	lis331dlh_device_id_get(&dev_ctx, &who_iam);
 8000608:	f107 0213 	add.w	r2, r7, #19
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4611      	mov	r1, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f004 fc47 	bl	8004ea6 <lis331dlh_device_id_get>
	if(who_iam != LIS331DLH_ID){
 8000618:	7cfb      	ldrb	r3, [r7, #19]
 800061a:	2b32      	cmp	r3, #50	; 0x32
 800061c:	d002      	beq.n	8000624 <configure_lis331dlh+0x34>
		return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000622:	e038      	b.n	8000696 <configure_lis331dlh+0xa6>
	}

	int32_t ret;
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000628:	e031      	b.n	800068e <configure_lis331dlh+0x9e>
		if(LIS331DLH_REGs_ADDR_conf[i] == LIS331DLH_HP_FILTER_RESET){
 800062a:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <configure_lis331dlh+0xb0>)
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b25      	cmp	r3, #37	; 0x25
 8000634:	d116      	bne.n	8000664 <configure_lis331dlh+0x74>
			uint8_t *empty_buff = (uint8_t*)malloc(sizeof(uint8_t));
 8000636:	2001      	movs	r0, #1
 8000638:	f004 fc9a 	bl	8004f70 <malloc>
 800063c:	4603      	mov	r3, r0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
			ret = dev_ctx.read_reg(handle, LIS331DLH_REGs_ADDR_conf[i], empty_buff, 1);
 8000640:	69bc      	ldr	r4, [r7, #24]
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <configure_lis331dlh+0xb0>)
 8000644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000646:	4413      	add	r3, r2
 8000648:	7819      	ldrb	r1, [r3, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	47a0      	blx	r4
 8000652:	62b8      	str	r0, [r7, #40]	; 0x28
			free(empty_buff);
 8000654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000656:	f004 fc93 	bl	8004f80 <free>
			if(ret != 0)
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	2b00      	cmp	r3, #0
 800065e:	d012      	beq.n	8000686 <configure_lis331dlh+0x96>
			{
				return ret;
 8000660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000662:	e018      	b.n	8000696 <configure_lis331dlh+0xa6>
			}
			continue;
		}
		ret = dev_ctx.write_reg(handle, LIS331DLH_REGs_ADDR_conf[i], LIS331DLH_REGs_VAL_conf + i, 1);
 8000664:	697c      	ldr	r4, [r7, #20]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <configure_lis331dlh+0xb0>)
 8000668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066a:	4413      	add	r3, r2
 800066c:	7819      	ldrb	r1, [r3, #0]
 800066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <configure_lis331dlh+0xb4>)
 8000672:	441a      	add	r2, r3
 8000674:	2301      	movs	r3, #1
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	47a0      	blx	r4
 800067a:	62b8      	str	r0, [r7, #40]	; 0x28
		if(ret != 0)
 800067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <configure_lis331dlh+0x98>
		{
			return ret;
 8000682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000684:	e007      	b.n	8000696 <configure_lis331dlh+0xa6>
			continue;
 8000686:	bf00      	nop
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8000688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068a:	3301      	adds	r3, #1
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000690:	2b0c      	cmp	r3, #12
 8000692:	ddca      	ble.n	800062a <configure_lis331dlh+0x3a>
		}
	}
	return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3734      	adds	r7, #52	; 0x34
 800069a:	46bd      	mov	sp, r7
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	bf00      	nop
 80006a0:	08005f08 	.word	0x08005f08
 80006a4:	08005f18 	.word	0x08005f18

080006a8 <configure_lis3mdl>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis3mdl(void *handle, void* platform_write, void* platform_read)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08d      	sub	sp, #52	; 0x34
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	61bb      	str	r3, [r7, #24]
	dev_ctx.read_reg = platform_read;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	61fb      	str	r3, [r7, #28]
	dev_ctx.handle = handle;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t who_iam;
	lis3mdl_device_id_get(&dev_ctx, &who_iam);
 80006c0:	f107 0217 	add.w	r2, r7, #23
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fc14 	bl	8004ef8 <lis3mdl_device_id_get>
	if(who_iam != LIS3MDL_ID){
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	2b3d      	cmp	r3, #61	; 0x3d
 80006d4:	d002      	beq.n	80006dc <configure_lis3mdl+0x34>
		return -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006da:	e01a      	b.n	8000712 <configure_lis3mdl+0x6a>
	}

	int32_t ret;
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e0:	e013      	b.n	800070a <configure_lis3mdl+0x62>
		ret = dev_ctx.write_reg(handle, LIS3MDL_REGs_ADDR_conf[i], LIS3MDL_REGs_VAL_conf + i, 1);
 80006e2:	69bc      	ldr	r4, [r7, #24]
 80006e4:	4a0d      	ldr	r2, [pc, #52]	; (800071c <configure_lis3mdl+0x74>)
 80006e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e8:	4413      	add	r3, r2
 80006ea:	7819      	ldrb	r1, [r3, #0]
 80006ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <configure_lis3mdl+0x78>)
 80006f0:	441a      	add	r2, r3
 80006f2:	2301      	movs	r3, #1
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	47a0      	blx	r4
 80006f8:	62b8      	str	r0, [r7, #40]	; 0x28
		if(ret != 0)
 80006fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <configure_lis3mdl+0x5c>
		{
			return ret;
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	e006      	b.n	8000712 <configure_lis3mdl+0x6a>
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 8000704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000706:	3301      	adds	r3, #1
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070c:	2b02      	cmp	r3, #2
 800070e:	dde8      	ble.n	80006e2 <configure_lis3mdl+0x3a>
		}
	}
	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3734      	adds	r7, #52	; 0x34
 8000716:	46bd      	mov	sp, r7
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	bf00      	nop
 800071c:	08005f24 	.word	0x08005f24
 8000720:	08005f28 	.word	0x08005f28

08000724 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800072c:	1d39      	adds	r1, r7, #4
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000732:	2201      	movs	r2, #1
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <__io_putchar+0x20>)
 8000736:	f004 f800 	bl	800473a <HAL_UART_Transmit>
  return ch;
 800073a:	687b      	ldr	r3, [r7, #4]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e0 	.word	0x200000e0

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074e:	f000 fb65 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000752:	f000 f833 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 f8e7 	bl	8000928 <MX_GPIO_Init>
  MX_I2C1_Init();
 800075a:	f000 f88d 	bl	8000878 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800075e:	f000 f8b9 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int32_t ret;
  ret = configure_lis331dlh(&hi2c1, platform_write, platform_read);
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <main+0x64>)
 8000764:	4912      	ldr	r1, [pc, #72]	; (80007b0 <main+0x68>)
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <main+0x6c>)
 8000768:	f7ff ff42 	bl	80005f0 <configure_lis331dlh>
 800076c:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <main+0x30>
  {
	  Error_Handler();
 8000774:	f000 f962 	bl	8000a3c <Error_Handler>
  }

  ret = configure_i3g4250d(&hi2c1, platform_write, platform_read);
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <main+0x64>)
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <main+0x68>)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <main+0x6c>)
 800077e:	f7ff fef9 	bl	8000574 <configure_i3g4250d>
 8000782:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <main+0x46>
  {
	 Error_Handler();
 800078a:	f000 f957 	bl	8000a3c <Error_Handler>
  }

  ret = configure_lis3mdl(&hi2c1, platform_write, platform_read);
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <main+0x64>)
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <main+0x68>)
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <main+0x6c>)
 8000794:	f7ff ff88 	bl	80006a8 <configure_lis3mdl>
 8000798:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <main+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f94c 	bl	8000a3c <Error_Handler>
  }
  printf("All devices are up");
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <main+0x70>)
 80007a6:	f004 fcdb 	bl	8005160 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x62>
 80007ac:	080009e9 	.word	0x080009e9
 80007b0:	08000995 	.word	0x08000995
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	08005ed4 	.word	0x08005ed4

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b094      	sub	sp, #80	; 0x50
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fbe0 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SystemClock_Config+0xb4>)
 80007ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ee:	6413      	str	r3, [r2, #64]	; 0x40
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemClock_Config+0xb4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <SystemClock_Config+0xb8>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <SystemClock_Config+0xb8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fadf 	bl	8003df0 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000838:	f000 f900 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f003 fd42 	bl	80042e0 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000862:	f000 f8eb 	bl	8000a3c <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_I2C1_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_I2C1_Init+0x58>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008b6:	f000 fe01 	bl	80014bc <HAL_I2C_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f8bc 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	40005400 	.word	0x40005400
 80008d0:	000186a0 	.word	0x000186a0

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f003 fec8 	bl	80046a0 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f891 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000e0 	.word	0x200000e0
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_GPIO_Init+0x68>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <MX_GPIO_Init+0x68>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_GPIO_Init+0x68>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_GPIO_Init+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_GPIO_Init+0x68>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_GPIO_Init+0x68>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_GPIO_Init+0x68>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <MX_GPIO_Init+0x68>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_GPIO_Init+0x68>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af04      	add	r7, sp, #16
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	461a      	mov	r2, r3
 80009a0:	460b      	mov	r3, r1
 80009a2:	72fb      	strb	r3, [r7, #11]
 80009a4:	4613      	mov	r3, r2
 80009a6:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b0:	9302      	str	r3, [sp, #8]
 80009b2:	893b      	ldrh	r3, [r7, #8]
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	2131      	movs	r1, #49	; 0x31
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 fec0 	bl	8001744 <HAL_I2C_Mem_Write>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <platform_write+0x50>)
 80009ca:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <platform_write+0x50>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <platform_write+0x46>
			return -1;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009d8:	e000      	b.n	80009dc <platform_write+0x48>
		}
		return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000124 	.word	0x20000124

080009e8 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	461a      	mov	r2, r3
 80009f4:	460b      	mov	r3, r1
 80009f6:	72fb      	strb	r3, [r7, #11]
 80009f8:	4613      	mov	r3, r2
 80009fa:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	893b      	ldrh	r3, [r7, #8]
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2131      	movs	r1, #49	; 0x31
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 ff90 	bl	8001938 <HAL_I2C_Mem_Read>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <platform_read+0x50>)
 8000a1e:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <platform_read+0x50>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <platform_read+0x46>
		return -1;
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2c:	e000      	b.n	8000a30 <platform_read+0x48>
	}
	return 0;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000124 	.word	0x20000124

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error occurred");
 8000a44:	4801      	ldr	r0, [pc, #4]	; (8000a4c <Error_Handler+0x10>)
 8000a46:	f004 fb8b 	bl	8005160 <iprintf>
 8000a4a:	e7fb      	b.n	8000a44 <Error_Handler+0x8>
 8000a4c:	08005ee8 	.word	0x08005ee8

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <HAL_I2C_MspInit+0xa4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d13b      	bne.n	8000b3a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ade:	23c0      	movs	r3, #192	; 0xc0
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae2:	2312      	movs	r3, #18
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aee:	2304      	movs	r3, #4
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <HAL_I2C_MspInit+0xac>)
 8000afa:	f000 fb43 	bl	8001184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_I2C_MspInit+0xa8>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	201f      	movs	r0, #31
 8000b20:	f000 fac9 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b24:	201f      	movs	r0, #31
 8000b26:	f000 fae2 	bl	80010ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f000 fac1 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b34:	2020      	movs	r0, #32
 8000b36:	f000 fada 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000baa:	230c      	movs	r3, #12
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc6:	f000 fadd 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f948 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f001 f8a3 	bl	8001d84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <I2C1_ER_IRQHandler+0x10>)
 8000c4e:	f001 fa0a 	bl	8002066 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000008c 	.word	0x2000008c

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e009      	b.n	8000cbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fd37 	bl	8000724 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf1      	blt.n	8000ca8 <_write+0x12>
  }
  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_close>:

int _close(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_isatty>:

int _isatty(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f004 f8d8 	bl	8004f1c <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20020000 	.word	0x20020000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20000128 	.word	0x20000128
 8000da0:	20000140 	.word	0x20000140

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ffd7 	bl	8000da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f004 f897 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fca5 	bl	8000748 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e0c:	08005fec 	.word	0x08005fec
  ldr r2, =_sbss
 8000e10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e14:	20000140 	.word	0x20000140

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f92b 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fdfe 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f943 	bl	800110a <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	f000 f90b 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	2000012c 	.word	0x2000012c

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000012c 	.word	0x2000012c

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d004      	beq.n	8001140 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00c      	b.n	800115a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2205      	movs	r2, #5
 8001144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001174:	b2db      	uxtb	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e16b      	b.n	8001478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 815a 	bne.w	8001472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d130      	bne.n	8001238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800120c:	2201      	movs	r2, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 0201 	and.w	r2, r3, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b03      	cmp	r3, #3
 8001242:	d017      	beq.n	8001274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	2203      	movs	r2, #3
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80b4 	beq.w	8001472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b60      	ldr	r3, [pc, #384]	; (8001490 <HAL_GPIO_Init+0x30c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <HAL_GPIO_Init+0x30c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_GPIO_Init+0x310>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x320>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x21a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x324>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x216>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x328>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x212>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x32c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x20e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x20a>
 800138a:	2307      	movs	r3, #7
 800138c:	e00e      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800138e:	2308      	movs	r3, #8
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001392:	2306      	movs	r3, #6
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x310>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae90 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40021c00 	.word	0x40021c00
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e12b      	b.n	8001726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fadc 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001520:	f003 f896 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a81      	ldr	r2, [pc, #516]	; (8001730 <HAL_I2C_Init+0x274>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d807      	bhi.n	8001540 <HAL_I2C_Init+0x84>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a80      	ldr	r2, [pc, #512]	; (8001734 <HAL_I2C_Init+0x278>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e006      	b.n	800154e <HAL_I2C_Init+0x92>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a7d      	ldr	r2, [pc, #500]	; (8001738 <HAL_I2C_Init+0x27c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0e7      	b.n	8001726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_I2C_Init+0x280>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a6a      	ldr	r2, [pc, #424]	; (8001730 <HAL_I2C_Init+0x274>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d802      	bhi.n	8001590 <HAL_I2C_Init+0xd4>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	e009      	b.n	80015a4 <HAL_I2C_Init+0xe8>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_I2C_Init+0x284>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	3301      	adds	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	495c      	ldr	r1, [pc, #368]	; (8001730 <HAL_I2C_Init+0x274>)
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d819      	bhi.n	80015f8 <HAL_I2C_Init+0x13c>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e59      	subs	r1, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <HAL_I2C_Init+0x138>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e59      	subs	r1, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	e051      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e04f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_I2C_Init+0x168>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	e012      	b.n	800164a <HAL_I2C_Init+0x18e>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	0099      	lsls	r1, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x196>
 800164e:	2301      	movs	r3, #1
 8001650:	e022      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10e      	bne.n	8001678 <HAL_I2C_Init+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e58      	subs	r0, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	440b      	add	r3, r1
 8001668:	fbb0 f3f3 	udiv	r3, r0, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001676:	e00f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	6809      	ldr	r1, [r1, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6911      	ldr	r1, [r2, #16]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68d2      	ldr	r2, [r2, #12]
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	000186a0 	.word	0x000186a0
 8001734:	001e847f 	.word	0x001e847f
 8001738:	003d08ff 	.word	0x003d08ff
 800173c:	431bde83 	.word	0x431bde83
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800175e:	f7ff fbc3 	bl	8000ee8 <HAL_GetTick>
 8001762:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b20      	cmp	r3, #32
 800176e:	f040 80d9 	bne.w	8001924 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2319      	movs	r3, #25
 8001778:	2201      	movs	r2, #1
 800177a:	496d      	ldr	r1, [pc, #436]	; (8001930 <HAL_I2C_Mem_Write+0x1ec>)
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f002 f90d 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001788:	2302      	movs	r3, #2
 800178a:	e0cc      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_I2C_Mem_Write+0x56>
 8001796:	2302      	movs	r3, #2
 8001798:	e0c5      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d007      	beq.n	80017c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2221      	movs	r2, #33	; 0x21
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_I2C_Mem_Write+0x1f0>)
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001802:	88f8      	ldrh	r0, [r7, #6]
 8001804:	893a      	ldrh	r2, [r7, #8]
 8001806:	8979      	ldrh	r1, [r7, #10]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4603      	mov	r3, r0
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f001 fe9c 	bl	8003550 <I2C_RequestMemoryWrite>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d052      	beq.n	80018c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e081      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f002 f98e 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b04      	cmp	r3, #4
 8001838:	d107      	bne.n	800184a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06b      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	3b01      	subs	r3, #1
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b04      	cmp	r3, #4
 800188a:	d11b      	bne.n	80018c4 <HAL_I2C_Mem_Write+0x180>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d017      	beq.n	80018c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1aa      	bne.n	8001822 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f002 f97a 	bl	8003bca <I2C_WaitOnBTFFlagUntilTimeout>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d107      	bne.n	80018f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e016      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e000      	b.n	8001926 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001924:	2302      	movs	r3, #2
  }
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	00100002 	.word	0x00100002
 8001934:	ffff0000 	.word	0xffff0000

08001938 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	460b      	mov	r3, r1
 800194c:	813b      	strh	r3, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001952:	f7ff fac9 	bl	8000ee8 <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b20      	cmp	r3, #32
 8001962:	f040 8208 	bne.w	8001d76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	497b      	ldr	r1, [pc, #492]	; (8001b5c <HAL_I2C_Mem_Read+0x224>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f002 f813 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
 800197e:	e1fb      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_I2C_Mem_Read+0x56>
 800198a:	2302      	movs	r3, #2
 800198c:	e1f4      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d007      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2222      	movs	r2, #34	; 0x22
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a5b      	ldr	r2, [pc, #364]	; (8001b60 <HAL_I2C_Mem_Read+0x228>)
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f6:	88f8      	ldrh	r0, [r7, #6]
 80019f8:	893a      	ldrh	r2, [r7, #8]
 80019fa:	8979      	ldrh	r1, [r7, #10]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f001 fe38 	bl	800367c <I2C_RequestMemoryRead>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1b0      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d113      	bne.n	8001a46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e184      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d11b      	bne.n	8001a86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e164      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	e144      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001adc:	e138      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	f200 80f1 	bhi.w	8001cca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d123      	bne.n	8001b38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f002 f8db 	bl	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e139      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b36:	e10b      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d14e      	bne.n	8001bde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b46:	2200      	movs	r2, #0
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <HAL_I2C_Mem_Read+0x22c>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f001 ff26 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e10e      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000
 8001b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bdc:	e0b8      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be4:	2200      	movs	r2, #0
 8001be6:	4966      	ldr	r1, [pc, #408]	; (8001d80 <HAL_I2C_Mem_Read+0x448>)
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f001 fed7 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0bf      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	2200      	movs	r2, #0
 8001c42:	494f      	ldr	r1, [pc, #316]	; (8001d80 <HAL_I2C_Mem_Read+0x448>)
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f001 fea9 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e091      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cc8:	e042      	b.n	8001d50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f001 ffee 	bl	8003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e04c      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d118      	bne.n	8001d50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f aec2 	bne.w	8001ade <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	00010004 	.word	0x00010004

08001d84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d003      	beq.n	8001dbc <HAL_I2C_EV_IRQHandler+0x38>
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	f040 80c1 	bne.w	8001f3e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001ddc:	d003      	beq.n	8001de6 <HAL_I2C_EV_IRQHandler+0x62>
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_EV_IRQHandler+0x66>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_I2C_EV_IRQHandler+0x68>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	f000 8132 	beq.w	8002056 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00c      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x92>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	0a5b      	lsrs	r3, r3, #9
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f001 ffd6 	bl	8003dba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fd83 	bl	800291a <I2C_Master_SB>
 8001e14:	e092      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0xb2>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0a5b      	lsrs	r3, r3, #9
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fdf9 	bl	8002a26 <I2C_Master_ADD10>
 8001e34:	e082      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xd2>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	0a5b      	lsrs	r3, r3, #9
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fe13 	bl	8002a7a <I2C_Master_ADDR>
 8001e54:	e072      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03b      	beq.n	8001eda <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e70:	f000 80f3 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	09db      	lsrs	r3, r3, #7
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00f      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	0a9b      	lsrs	r3, r3, #10
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x11c>
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d103      	bne.n	8001ea0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f9f3 	bl	8002284 <I2C_MasterTransmit_TXE>
 8001e9e:	e04d      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80d6 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	0a5b      	lsrs	r3, r3, #9
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80cf 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	2b21      	cmp	r3, #33	; 0x21
 8001ec0:	d103      	bne.n	8001eca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fa7a 	bl	80023bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec8:	e0c7      	b.n	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	f040 80c4 	bne.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fae8 	bl	80024a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ed8:	e0bf      	b.n	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee8:	f000 80b7 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00f      	beq.n	8001f18 <HAL_I2C_EV_IRQHandler+0x194>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_I2C_EV_IRQHandler+0x194>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d103      	bne.n	8001f18 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 fb5d 	bl	80025d0 <I2C_MasterReceive_RXNE>
 8001f16:	e011      	b.n	8001f3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 809a 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	0a5b      	lsrs	r3, r3, #9
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8093 	beq.w	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fc06 	bl	8002746 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	e08e      	b.n	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f3c:	e08d      	b.n	800205a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e007      	b.n	8001f60 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d012      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x20e>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f88:	69b9      	ldr	r1, [r7, #24]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 ffc4 	bl	8002f18 <I2C_Slave_ADDR>
 8001f90:	e066      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x22e>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	0a5b      	lsrs	r3, r3, #9
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fffe 	bl	8002fac <I2C_Slave_STOPF>
 8001fb0:	e056      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001fb2:	7bbb      	ldrb	r3, [r7, #14]
 8001fb4:	2b21      	cmp	r3, #33	; 0x21
 8001fb6:	d002      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x23a>
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	2b29      	cmp	r3, #41	; 0x29
 8001fbc:	d125      	bne.n	800200a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	09db      	lsrs	r3, r3, #7
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00f      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x266>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	0a9b      	lsrs	r3, r3, #10
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x266>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d103      	bne.n	8001fea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 feda 	bl	8002d9c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe8:	e039      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d033      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0x2da>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	0a5b      	lsrs	r3, r3, #9
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d02d      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 ff07 	bl	8002e16 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002008:	e029      	b.n	800205e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	099b      	lsrs	r3, r3, #6
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00f      	beq.n	8002036 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a9b      	lsrs	r3, r3, #10
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 ff12 	bl	8002e58 <I2C_SlaveReceive_RXNE>
 8002034:	e014      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00e      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	0a5b      	lsrs	r3, r3, #9
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff40 	bl	8002ed4 <I2C_SlaveReceive_BTF>
 8002054:	e004      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002056:	bf00      	nop
 8002058:	e002      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800205a:	bf00      	nop
 800205c:	e000      	b.n	8002060 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08a      	sub	sp, #40	; 0x28
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002088:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <HAL_I2C_ER_IRQHandler+0x4e>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	0a5b      	lsrs	r3, r3, #9
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x78>
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	f043 0302 	orr.w	r3, r3, #2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80020dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	0a9b      	lsrs	r3, r3, #10
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d03f      	beq.n	800216a <HAL_I2C_ER_IRQHandler+0x104>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d039      	beq.n	800216a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80020f6:	7efb      	ldrb	r3, [r7, #27]
 80020f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002110:	7ebb      	ldrb	r3, [r7, #26]
 8002112:	2b20      	cmp	r3, #32
 8002114:	d112      	bne.n	800213c <HAL_I2C_ER_IRQHandler+0xd6>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <HAL_I2C_ER_IRQHandler+0xd6>
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b21      	cmp	r3, #33	; 0x21
 8002120:	d008      	beq.n	8002134 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b29      	cmp	r3, #41	; 0x29
 8002126:	d005      	beq.n	8002134 <HAL_I2C_ER_IRQHandler+0xce>
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b28      	cmp	r3, #40	; 0x28
 800212c:	d106      	bne.n	800213c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b21      	cmp	r3, #33	; 0x21
 8002132:	d103      	bne.n	800213c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 f869 	bl	800320c <I2C_Slave_AF>
 800213a:	e016      	b.n	800216a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002144:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800214e:	7efb      	ldrb	r3, [r7, #27]
 8002150:	2b10      	cmp	r3, #16
 8002152:	d002      	beq.n	800215a <HAL_I2C_ER_IRQHandler+0xf4>
 8002154:	7efb      	ldrb	r3, [r7, #27]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d107      	bne.n	800216a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002168:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	0adb      	lsrs	r3, r3, #11
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00e      	beq.n	8002194 <HAL_I2C_ER_IRQHandler+0x12e>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002192:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f001 f8a0 	bl	80032ec <I2C_ITError>
  }
}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
 8002210:	4613      	mov	r3, r2
 8002212:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d150      	bne.n	800234c <I2C_MasterTransmit_TXE+0xc8>
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b21      	cmp	r3, #33	; 0x21
 80022ae:	d14d      	bne.n	800234c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d01d      	beq.n	80022f2 <I2C_MasterTransmit_TXE+0x6e>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d01a      	beq.n	80022f2 <I2C_MasterTransmit_TXE+0x6e>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c2:	d016      	beq.n	80022f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2211      	movs	r2, #17
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff62 	bl	80021b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022f0:	e060      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002300:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002310:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d107      	bne.n	800233c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff7d 	bl	8002234 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800233a:	e03b      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff35 	bl	80021b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800234a:	e033      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b21      	cmp	r3, #33	; 0x21
 8002350:	d005      	beq.n	800235e <I2C_MasterTransmit_TXE+0xda>
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	2b40      	cmp	r3, #64	; 0x40
 8002356:	d12d      	bne.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b22      	cmp	r3, #34	; 0x22
 800235c:	d12a      	bne.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002376:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002378:	e01c      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d103      	bne.n	800238e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f88e 	bl	80024a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800238c:	e012      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023b2:	e7ff      	b.n	80023b4 <I2C_MasterTransmit_TXE+0x130>
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b21      	cmp	r3, #33	; 0x21
 80023d4:	d164      	bne.n	80024a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002404:	e04c      	b.n	80024a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d01d      	beq.n	8002448 <I2C_MasterTransmit_BTF+0x8c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d01a      	beq.n	8002448 <I2C_MasterTransmit_BTF+0x8c>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002418:	d016      	beq.n	8002448 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002428:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2211      	movs	r2, #17
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff feb7 	bl	80021b4 <HAL_I2C_MasterTxCpltCallback>
}
 8002446:	e02b      	b.n	80024a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002456:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d107      	bne.n	8002492 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fed2 	bl	8002234 <HAL_I2C_MemTxCpltCallback>
}
 8002490:	e006      	b.n	80024a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fe8a 	bl	80021b4 <HAL_I2C_MasterTxCpltCallback>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11d      	bne.n	80024fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10b      	bne.n	80024e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	1c9a      	adds	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80024de:	e073      	b.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	121b      	asrs	r3, r3, #8
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024fa:	e065      	b.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10b      	bne.n	800251c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	b2da      	uxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	651a      	str	r2, [r3, #80]	; 0x50
}
 800251a:	e055      	b.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	2b02      	cmp	r3, #2
 8002522:	d151      	bne.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b22      	cmp	r3, #34	; 0x22
 8002528:	d10d      	bne.n	8002546 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002544:	e040      	b.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b21      	cmp	r3, #33	; 0x21
 8002554:	d112      	bne.n	800257c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800257a:	e025      	b.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d120      	bne.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b21      	cmp	r3, #33	; 0x21
 800258a:	d11d      	bne.n	80025c8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800259a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fe36 	bl	8002234 <HAL_I2C_MemTxCpltCallback>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b22      	cmp	r3, #34	; 0x22
 80025e2:	f040 80ac 	bne.w	800273e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d921      	bls.n	8002638 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b03      	cmp	r3, #3
 8002622:	f040 808c 	bne.w	800273e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002634:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002636:	e082      	b.n	800273e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	2b02      	cmp	r3, #2
 800263e:	d075      	beq.n	800272c <I2C_MasterReceive_RXNE+0x15c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d002      	beq.n	800264c <I2C_MasterReceive_RXNE+0x7c>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d16f      	bne.n	800272c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f001 fafd 	bl	8003c4c <I2C_WaitOnSTOPRequestThroughIT>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d142      	bne.n	80026de <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002676:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d10a      	bne.n	80026c8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fdc1 	bl	8002248 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026c6:	e03a      	b.n	800273e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2212      	movs	r2, #18
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fd76 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026dc:	e02f      	b.n	800273e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fd99 	bl	800225c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800272a:	e008      	b.n	800273e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273a:	605a      	str	r2, [r3, #4]
}
 800273c:	e7ff      	b.n	800273e <I2C_MasterReceive_RXNE+0x16e>
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b04      	cmp	r3, #4
 800275c:	d11b      	bne.n	8002796 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002794:	e0bd      	b.n	8002912 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d129      	bne.n	80027f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00a      	beq.n	80027cc <I2C_MasterReceive_BTF+0x86>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d007      	beq.n	80027cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027f2:	e08e      	b.n	8002912 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d176      	bne.n	80028ec <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d002      	beq.n	800280a <I2C_MasterReceive_BTF+0xc4>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d108      	bne.n	800281c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e019      	b.n	8002850 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b04      	cmp	r3, #4
 8002820:	d002      	beq.n	8002828 <I2C_MasterReceive_BTF+0xe2>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d108      	bne.n	800283a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e00a      	b.n	8002850 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d007      	beq.n	8002850 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d10a      	bne.n	80028d6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fcba 	bl	8002248 <HAL_I2C_MemRxCpltCallback>
}
 80028d4:	e01d      	b.n	8002912 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2212      	movs	r2, #18
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fc6f 	bl	80021c8 <HAL_I2C_MasterRxCpltCallback>
}
 80028ea:	e012      	b.n	8002912 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d117      	bne.n	800295e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002946:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002948:	e067      	b.n	8002a1a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]
}
 800295c:	e05d      	b.n	8002a1a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002966:	d133      	bne.n	80029d0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b21      	cmp	r3, #33	; 0x21
 8002972:	d109      	bne.n	8002988 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	e008      	b.n	800299a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <I2C_Master_SB+0x92>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d108      	bne.n	80029be <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d032      	beq.n	8002a1a <I2C_Master_SB+0x100>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02d      	beq.n	8002a1a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029cc:	605a      	str	r2, [r3, #4]
}
 80029ce:	e024      	b.n	8002a1a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10e      	bne.n	80029f6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	b29b      	uxth	r3, r3
 80029de:	11db      	asrs	r3, r3, #7
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0306 	and.w	r3, r3, #6
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f063 030f 	orn	r3, r3, #15
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]
}
 80029f4:	e011      	b.n	8002a1a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10d      	bne.n	8002a1a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	11db      	asrs	r3, r3, #7
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f003 0306 	and.w	r3, r3, #6
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f063 030e 	orn	r3, r3, #14
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <I2C_Master_ADD10+0x26>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d108      	bne.n	8002a5e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <I2C_Master_ADD10+0x48>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6c:	605a      	str	r2, [r3, #4]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b091      	sub	sp, #68	; 0x44
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	f040 8169 	bne.w	8002d78 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10f      	bne.n	8002ace <I2C_Master_ADDR+0x54>
 8002aae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	d10b      	bne.n	8002ace <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	e160      	b.n	8002d90 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d11d      	bne.n	8002b12 <I2C_Master_ADDR+0x98>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ade:	d118      	bne.n	8002b12 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b04:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b10:	e13e      	b.n	8002d90 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d113      	bne.n	8002b44 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e115      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 808a 	bne.w	8002c64 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b56:	d137      	bne.n	8002bc8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b76:	d113      	bne.n	8002ba0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b86:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	e0e7      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e0d3      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d02e      	beq.n	8002c2c <I2C_Master_ADDR+0x1b2>
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d02b      	beq.n	8002c2c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	2b12      	cmp	r3, #18
 8002bd8:	d102      	bne.n	8002be0 <I2C_Master_ADDR+0x166>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d125      	bne.n	8002c2c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d00e      	beq.n	8002c04 <I2C_Master_ADDR+0x18a>
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d00b      	beq.n	8002c04 <I2C_Master_ADDR+0x18a>
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d008      	beq.n	8002c04 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c12:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	e0a1      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e085      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d14d      	bne.n	8002d0a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d016      	beq.n	8002ca2 <I2C_Master_ADDR+0x228>
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d013      	beq.n	8002ca2 <I2C_Master_ADDR+0x228>
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d010      	beq.n	8002ca2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e007      	b.n	8002cb2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc0:	d117      	bne.n	8002cf2 <I2C_Master_ADDR+0x278>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc8:	d00b      	beq.n	8002ce2 <I2C_Master_ADDR+0x268>
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d008      	beq.n	8002ce2 <I2C_Master_ADDR+0x268>
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d005      	beq.n	8002ce2 <I2C_Master_ADDR+0x268>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d002      	beq.n	8002ce2 <I2C_Master_ADDR+0x268>
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d107      	bne.n	8002cf2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cf0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	e032      	b.n	8002d70 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d18:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d28:	d117      	bne.n	8002d5a <I2C_Master_ADDR+0x2e0>
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d30:	d00b      	beq.n	8002d4a <I2C_Master_ADDR+0x2d0>
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d008      	beq.n	8002d4a <I2C_Master_ADDR+0x2d0>
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d005      	beq.n	8002d4a <I2C_Master_ADDR+0x2d0>
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	d002      	beq.n	8002d4a <I2C_Master_ADDR+0x2d0>
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d107      	bne.n	8002d5a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d76:	e00b      	b.n	8002d90 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	e7ff      	b.n	8002d90 <I2C_Master_ADDR+0x316>
 8002d90:	bf00      	nop
 8002d92:	3744      	adds	r7, #68	; 0x44
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02b      	beq.n	8002e0e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d114      	bne.n	8002e0e <I2C_SlaveTransmit_TXE+0x72>
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b29      	cmp	r3, #41	; 0x29
 8002de8:	d111      	bne.n	8002e0e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2221      	movs	r2, #33	; 0x21
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2228      	movs	r2, #40	; 0x28
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff f9e7 	bl	80021dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d011      	beq.n	8002e4c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d02c      	beq.n	8002ecc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d114      	bne.n	8002ecc <I2C_SlaveReceive_RXNE+0x74>
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ea6:	d111      	bne.n	8002ecc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2222      	movs	r2, #34	; 0x22
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2228      	movs	r2, #40	; 0x28
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f992 	bl	80021f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f32:	2b28      	cmp	r3, #40	; 0x28
 8002f34:	d127      	bne.n	8002f86 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f44:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	089b      	lsrs	r3, r3, #2
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	09db      	lsrs	r3, r3, #7
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	81bb      	strh	r3, [r7, #12]
 8002f68:	e002      	b.n	8002f70 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f78:	89ba      	ldrh	r2, [r7, #12]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff f940 	bl	8002204 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f84:	e00e      	b.n	8002fa4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003008:	d172      	bne.n	80030f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b22      	cmp	r3, #34	; 0x22
 800300e:	d002      	beq.n	8003016 <I2C_Slave_STOPF+0x6a>
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b2a      	cmp	r3, #42	; 0x2a
 8003014:	d135      	bne.n	8003082 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0204 	orr.w	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f889 	bl	8001166 <HAL_DMA_GetState>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d049      	beq.n	80030ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	4a69      	ldr	r2, [pc, #420]	; (8003204 <I2C_Slave_STOPF+0x258>)
 8003060:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f85b 	bl	8001122 <HAL_DMA_Abort_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03d      	beq.n	80030ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800307c:	4610      	mov	r0, r2
 800307e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003080:	e035      	b.n	80030ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	b29a      	uxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0204 	orr.w	r2, r3, #4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f853 	bl	8001166 <HAL_DMA_GetState>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d014      	beq.n	80030f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	4a4e      	ldr	r2, [pc, #312]	; (8003204 <I2C_Slave_STOPF+0x258>)
 80030cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f825 	bl	8001122 <HAL_DMA_Abort_IT>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e8:	4610      	mov	r0, r2
 80030ea:	4798      	blx	r3
 80030ec:	e000      	b.n	80030f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d03e      	beq.n	8003178 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b04      	cmp	r3, #4
 8003106:	d112      	bne.n	800312e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d112      	bne.n	8003162 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0204 	orr.w	r2, r3, #4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8b3 	bl	80032ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003186:	e039      	b.n	80031fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b2a      	cmp	r3, #42	; 0x2a
 800318c:	d109      	bne.n	80031a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2228      	movs	r2, #40	; 0x28
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff f827 	bl	80021f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b28      	cmp	r3, #40	; 0x28
 80031ac:	d111      	bne.n	80031d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <I2C_Slave_STOPF+0x25c>)
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff f828 	bl	8002220 <HAL_I2C_ListenCpltCallback>
}
 80031d0:	e014      	b.n	80031fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b22      	cmp	r3, #34	; 0x22
 80031d8:	d002      	beq.n	80031e0 <I2C_Slave_STOPF+0x234>
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b22      	cmp	r3, #34	; 0x22
 80031de:	d10d      	bne.n	80031fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fffa 	bl	80021f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	0800384d 	.word	0x0800384d
 8003208:	ffff0000 	.word	0xffff0000

0800320c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d002      	beq.n	800322e <I2C_Slave_AF+0x22>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b20      	cmp	r3, #32
 800322c:	d129      	bne.n	8003282 <I2C_Slave_AF+0x76>
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b28      	cmp	r3, #40	; 0x28
 8003232:	d126      	bne.n	8003282 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <I2C_Slave_AF+0xdc>)
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003248:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003252:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003262:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe ffd0 	bl	8002220 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003280:	e02e      	b.n	80032e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b21      	cmp	r3, #33	; 0x21
 8003286:	d126      	bne.n	80032d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <I2C_Slave_AF+0xdc>)
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe ff84 	bl	80021dc <HAL_I2C_SlaveTxCpltCallback>
}
 80032d4:	e004      	b.n	80032e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032de:	615a      	str	r2, [r3, #20]
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	ffff0000 	.word	0xffff0000

080032ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003304:	7bbb      	ldrb	r3, [r7, #14]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d002      	beq.n	8003310 <I2C_ITError+0x24>
 800330a:	7bbb      	ldrb	r3, [r7, #14]
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d10a      	bne.n	8003326 <I2C_ITError+0x3a>
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b22      	cmp	r3, #34	; 0x22
 8003314:	d107      	bne.n	8003326 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003324:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800332c:	2b28      	cmp	r3, #40	; 0x28
 800332e:	d107      	bne.n	8003340 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2228      	movs	r2, #40	; 0x28
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800333e:	e015      	b.n	800336c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334e:	d00a      	beq.n	8003366 <I2C_ITError+0x7a>
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b60      	cmp	r3, #96	; 0x60
 8003354:	d007      	beq.n	8003366 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337a:	d162      	bne.n	8003442 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800338a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d020      	beq.n	80033dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	4a6a      	ldr	r2, [pc, #424]	; (8003548 <I2C_ITError+0x25c>)
 80033a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd febb 	bl	8001122 <HAL_DMA_Abort_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8089 	beq.w	80034c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d6:	4610      	mov	r0, r2
 80033d8:	4798      	blx	r3
 80033da:	e074      	b.n	80034c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	4a59      	ldr	r2, [pc, #356]	; (8003548 <I2C_ITError+0x25c>)
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fe9a 	bl	8001122 <HAL_DMA_Abort_IT>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d068      	beq.n	80034c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d10b      	bne.n	800341a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800343c:	4610      	mov	r0, r2
 800343e:	4798      	blx	r3
 8003440:	e041      	b.n	80034c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b60      	cmp	r3, #96	; 0x60
 800344c:	d125      	bne.n	800349a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d10b      	bne.n	8003482 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe feec 	bl	8002270 <HAL_I2C_AbortCpltCallback>
 8003498:	e015      	b.n	80034c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d10b      	bne.n	80034c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe fecb 	bl	800225c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10e      	bne.n	80034f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003502:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b04      	cmp	r3, #4
 8003516:	d113      	bne.n	8003540 <I2C_ITError+0x254>
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d110      	bne.n	8003540 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <I2C_ITError+0x260>)
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe fe70 	bl	8002220 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	0800384d 	.word	0x0800384d
 800354c:	ffff0000 	.word	0xffff0000

08003550 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fa08 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a0:	d103      	bne.n	80035aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e05f      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	492d      	ldr	r1, [pc, #180]	; (8003678 <I2C_RequestMemoryWrite+0x128>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa40 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e04c      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	6a39      	ldr	r1, [r7, #32]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 faaa 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d107      	bne.n	8003612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02b      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e021      	b.n	800366c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	b29b      	uxth	r3, r3
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	6a39      	ldr	r1, [r7, #32]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fa84 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b04      	cmp	r3, #4
 800364c:	d107      	bne.n	800365e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e005      	b.n	800366e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003662:	893b      	ldrh	r3, [r7, #8]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	00010002 	.word	0x00010002

0800367c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	460b      	mov	r3, r1
 8003690:	813b      	strh	r3, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2200      	movs	r2, #0
 80036be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f96a 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036dc:	d103      	bne.n	80036e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0aa      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036ea:	897b      	ldrh	r3, [r7, #10]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	6a3a      	ldr	r2, [r7, #32]
 80036fe:	4952      	ldr	r1, [pc, #328]	; (8003848 <I2C_RequestMemoryRead+0x1cc>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f9a2 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e097      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa0c 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e076      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003758:	893b      	ldrh	r3, [r7, #8]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	611a      	str	r2, [r3, #16]
 8003762:	e021      	b.n	80037a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	b29b      	uxth	r3, r3
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f9e6 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b04      	cmp	r3, #4
 8003788:	d107      	bne.n	800379a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e050      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	6a39      	ldr	r1, [r7, #32]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f9cb 	bl	8003b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e035      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8d3 	bl	800399c <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d103      	bne.n	8003814 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e013      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	4906      	ldr	r1, [pc, #24]	; (8003848 <I2C_RequestMemoryRead+0x1cc>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f90b 	bl	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	00010002 	.word	0x00010002

0800384c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <I2C_DMAAbort+0x148>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	08db      	lsrs	r3, r3, #3
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <I2C_DMAAbort+0x14c>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a1a      	lsrs	r2, r3, #8
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00da      	lsls	r2, r3, #3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003892:	e00a      	b.n	80038aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3b01      	subs	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d0ea      	beq.n	8003880 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	2200      	movs	r2, #0
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	2200      	movs	r2, #0
 80038c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	2200      	movs	r2, #0
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	2200      	movs	r2, #0
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b60      	cmp	r3, #96	; 0x60
 800391a:	d10e      	bne.n	800393a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7fe fc9c 	bl	8002270 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003938:	e027      	b.n	800398a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003940:	2b28      	cmp	r3, #40	; 0x28
 8003942:	d117      	bne.n	8003974 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003962:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2228      	movs	r2, #40	; 0x28
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003972:	e007      	b.n	8003984 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003984:	6978      	ldr	r0, [r7, #20]
 8003986:	f7fe fc69 	bl	800225c <HAL_I2C_ErrorCallback>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000000 	.word	0x20000000
 8003998:	14f8b589 	.word	0x14f8b589

0800399c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ac:	e025      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b4:	d021      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b6:	f7fd fa97 	bl	8000ee8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d302      	bcc.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d116      	bne.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e023      	b.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	43da      	mvns	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf0c      	ite	eq
 8003a16:	2301      	moveq	r3, #1
 8003a18:	2300      	movne	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	e00c      	b.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d0b6      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a58:	e051      	b.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a68:	d123      	bne.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e046      	b.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab8:	d021      	beq.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fd fa15 	bl	8000ee8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e020      	b.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d10c      	bne.n	8003b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e00b      	b.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d18d      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b54:	e02d      	b.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f900 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e02d      	b.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b6c:	d021      	beq.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd f9bb 	bl	8000ee8 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b80      	cmp	r3, #128	; 0x80
 8003bbe:	d1ca      	bne.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd6:	e02d      	b.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 f8bf 	bl	8003d5c <I2C_IsAcknowledgeFailed>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e02d      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bee:	d021      	beq.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fd f97a 	bl	8000ee8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e007      	b.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d1ca      	bne.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	08db      	lsrs	r3, r3, #3
 8003c5e:	4a13      	ldr	r2, [pc, #76]	; (8003cac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	0a1a      	lsrs	r2, r3, #8
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d107      	bne.n	8003c8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e008      	b.n	8003c9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d0e9      	beq.n	8003c6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	14f8b589 	.word	0x14f8b589

08003cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cbc:	e042      	b.n	8003d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d119      	bne.n	8003d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0210 	mvn.w	r2, #16
 8003cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e029      	b.n	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fd f8f2 	bl	8000ee8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e007      	b.n	8003d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d1b5      	bne.n	8003cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d11b      	bne.n	8003dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003dca:	d103      	bne.n	8003dd4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dd2:	e007      	b.n	8003de4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ddc:	d102      	bne.n	8003de4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2208      	movs	r2, #8
 8003de2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e267      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d075      	beq.n	8003efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d00c      	beq.n	8003e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1a:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d112      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e26:	4b82      	ldr	r3, [pc, #520]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e32:	d10b      	bne.n	8003e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	4b7e      	ldr	r3, [pc, #504]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05b      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x108>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d157      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e242      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d106      	bne.n	8003e64 <HAL_RCC_OscConfig+0x74>
 8003e56:	4b76      	ldr	r3, [pc, #472]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a75      	ldr	r2, [pc, #468]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e01d      	b.n	8003ea0 <HAL_RCC_OscConfig+0xb0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x98>
 8003e6e:	4b70      	ldr	r3, [pc, #448]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a6f      	ldr	r2, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b6d      	ldr	r3, [pc, #436]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6c      	ldr	r2, [pc, #432]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0xb0>
 8003e88:	4b69      	ldr	r3, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fd f81e 	bl	8000ee8 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fd f81a 	bl	8000ee8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e207      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xc0>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f80a 	bl	8000ee8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fd f806 	bl	8000ee8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1f3      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xe8>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d063      	beq.n	8003fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d11c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1e:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d116      	bne.n	8003f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x152>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e1c7      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4937      	ldr	r1, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	e03a      	b.n	8003fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f60:	4b34      	ldr	r3, [pc, #208]	; (8004034 <HAL_RCC_OscConfig+0x244>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f66:	f7fc ffbf 	bl	8000ee8 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fc ffbb 	bl	8000ee8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e1a8      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8c:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4925      	ldr	r1, [pc, #148]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]
 8003fa0:	e015      	b.n	8003fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <HAL_RCC_OscConfig+0x244>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fc ff9e 	bl	8000ee8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fc ff9a 	bl	8000ee8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e187      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d036      	beq.n	8004048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d016      	beq.n	8004010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <HAL_RCC_OscConfig+0x248>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fc ff7e 	bl	8000ee8 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff0:	f7fc ff7a 	bl	8000ee8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e167      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_OscConfig+0x240>)
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x200>
 800400e:	e01b      	b.n	8004048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_OscConfig+0x248>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004016:	f7fc ff67 	bl	8000ee8 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	e00e      	b.n	800403c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401e:	f7fc ff63 	bl	8000ee8 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d907      	bls.n	800403c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e150      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
 8004030:	40023800 	.word	0x40023800
 8004034:	42470000 	.word	0x42470000
 8004038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800403c:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800403e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ea      	bne.n	800401e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8097 	beq.w	8004184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	4b7d      	ldr	r3, [pc, #500]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	4a7c      	ldr	r2, [pc, #496]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004074:	6413      	str	r3, [r2, #64]	; 0x40
 8004076:	4b7a      	ldr	r3, [pc, #488]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004082:	2301      	movs	r3, #1
 8004084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	4b77      	ldr	r3, [pc, #476]	; (8004264 <HAL_RCC_OscConfig+0x474>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d118      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004092:	4b74      	ldr	r3, [pc, #464]	; (8004264 <HAL_RCC_OscConfig+0x474>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a73      	ldr	r2, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x474>)
 8004098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409e:	f7fc ff23 	bl	8000ee8 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a6:	f7fc ff1f 	bl	8000ee8 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e10c      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCC_OscConfig+0x474>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x2ea>
 80040cc:	4b64      	ldr	r3, [pc, #400]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a63      	ldr	r2, [pc, #396]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	e01c      	b.n	8004114 <HAL_RCC_OscConfig+0x324>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x30c>
 80040e2:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a5e      	ldr	r2, [pc, #376]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b5c      	ldr	r3, [pc, #368]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a5b      	ldr	r2, [pc, #364]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_OscConfig+0x324>
 80040fc:	4b58      	ldr	r3, [pc, #352]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	4b55      	ldr	r3, [pc, #340]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a54      	ldr	r2, [pc, #336]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800410e:	f023 0304 	bic.w	r3, r3, #4
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fc fee4 	bl	8000ee8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fc fee0 	bl	8000ee8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0cb      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413a:	4b49      	ldr	r3, [pc, #292]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ee      	beq.n	8004124 <HAL_RCC_OscConfig+0x334>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004148:	f7fc fece 	bl	8000ee8 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414e:	e00a      	b.n	8004166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fc feca 	bl	8000ee8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f241 3288 	movw	r2, #5000	; 0x1388
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0b5      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1ee      	bne.n	8004150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a1 	beq.w	80042d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800418e:	4b34      	ldr	r3, [pc, #208]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 030c 	and.w	r3, r3, #12
 8004196:	2b08      	cmp	r3, #8
 8004198:	d05c      	beq.n	8004254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d141      	bne.n	8004226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b31      	ldr	r3, [pc, #196]	; (8004268 <HAL_RCC_OscConfig+0x478>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fc fe9e 	bl	8000ee8 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fc fe9a 	bl	8000ee8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e087      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	019b      	lsls	r3, r3, #6
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	491b      	ldr	r1, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x478>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fc fe73 	bl	8000ee8 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004206:	f7fc fe6f 	bl	8000ee8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e05c      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004218:	4b11      	ldr	r3, [pc, #68]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x416>
 8004224:	e054      	b.n	80042d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_RCC_OscConfig+0x478>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fc fe5c 	bl	8000ee8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fc fe58 	bl	8000ee8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e045      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_RCC_OscConfig+0x470>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x444>
 8004252:	e03d      	b.n	80042d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e038      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000
 8004268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x4ec>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d028      	beq.n	80042cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d121      	bne.n	80042cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d11a      	bne.n	80042cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800429c:	4013      	ands	r3, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d111      	bne.n	80042cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d001      	beq.n	80042d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800

080042e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0cc      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b68      	ldr	r3, [pc, #416]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d90c      	bls.n	800431c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b65      	ldr	r3, [pc, #404]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0b8      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d020      	beq.n	800436a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004334:	4b59      	ldr	r3, [pc, #356]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a58      	ldr	r2, [pc, #352]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800433e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800434c:	4b53      	ldr	r3, [pc, #332]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a52      	ldr	r2, [pc, #328]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004358:	4b50      	ldr	r3, [pc, #320]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	494d      	ldr	r1, [pc, #308]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d044      	beq.n	8004400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	4b47      	ldr	r3, [pc, #284]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d119      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07f      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d003      	beq.n	800439e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	2b03      	cmp	r3, #3
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	4b3f      	ldr	r3, [pc, #252]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e06f      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e067      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 0203 	bic.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4934      	ldr	r1, [pc, #208]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043d0:	f7fc fd8a 	bl	8000ee8 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fc fd86 	bl	8000ee8 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e04f      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 020c 	and.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1eb      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d20c      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e032      	b.n	800448e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4916      	ldr	r1, [pc, #88]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	490e      	ldr	r1, [pc, #56]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004466:	f000 f821 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 800446a:	4602      	mov	r2, r0
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	490a      	ldr	r1, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	5ccb      	ldrb	r3, [r1, r3]
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fcea 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023c00 	.word	0x40023c00
 800449c:	40023800 	.word	0x40023800
 80044a0:	08005f2c 	.word	0x08005f2c
 80044a4:	20000000 	.word	0x20000000
 80044a8:	20000004 	.word	0x20000004

080044ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b0:	b090      	sub	sp, #64	; 0x40
 80044b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	2300      	movs	r3, #0
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d00d      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x40>
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	f200 80a1 	bhi.w	8004618 <HAL_RCC_GetSysClockFreq+0x16c>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x34>
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044de:	e09b      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e0:	4b53      	ldr	r3, [pc, #332]	; (8004630 <HAL_RCC_GetSysClockFreq+0x184>)
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044e4:	e09b      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044e6:	4b53      	ldr	r3, [pc, #332]	; (8004634 <HAL_RCC_GetSysClockFreq+0x188>)
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044ea:	e098      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ec:	4b4f      	ldr	r3, [pc, #316]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044f6:	4b4d      	ldr	r3, [pc, #308]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d028      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b4a      	ldr	r3, [pc, #296]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	2200      	movs	r2, #0
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	627a      	str	r2, [r7, #36]	; 0x24
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004514:	2100      	movs	r1, #0
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_GetSysClockFreq+0x188>)
 8004518:	fb03 f201 	mul.w	r2, r3, r1
 800451c:	2300      	movs	r3, #0
 800451e:	fb00 f303 	mul.w	r3, r0, r3
 8004522:	4413      	add	r3, r2
 8004524:	4a43      	ldr	r2, [pc, #268]	; (8004634 <HAL_RCC_GetSysClockFreq+0x188>)
 8004526:	fba0 1202 	umull	r1, r2, r0, r2
 800452a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452c:	460a      	mov	r2, r1
 800452e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004532:	4413      	add	r3, r2
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004538:	2200      	movs	r2, #0
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	61fa      	str	r2, [r7, #28]
 800453e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004546:	f7fb fe93 	bl	8000270 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4613      	mov	r3, r2
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004552:	e053      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004554:	4b35      	ldr	r3, [pc, #212]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	2200      	movs	r2, #0
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	617a      	str	r2, [r7, #20]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004566:	f04f 0b00 	mov.w	fp, #0
 800456a:	4652      	mov	r2, sl
 800456c:	465b      	mov	r3, fp
 800456e:	f04f 0000 	mov.w	r0, #0
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	0159      	lsls	r1, r3, #5
 8004578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800457c:	0150      	lsls	r0, r2, #5
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	ebb2 080a 	subs.w	r8, r2, sl
 8004586:	eb63 090b 	sbc.w	r9, r3, fp
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004596:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800459a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800459e:	ebb2 0408 	subs.w	r4, r2, r8
 80045a2:	eb63 0509 	sbc.w	r5, r3, r9
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	00eb      	lsls	r3, r5, #3
 80045b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b4:	00e2      	lsls	r2, r4, #3
 80045b6:	4614      	mov	r4, r2
 80045b8:	461d      	mov	r5, r3
 80045ba:	eb14 030a 	adds.w	r3, r4, sl
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	eb45 030b 	adc.w	r3, r5, fp
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045d2:	4629      	mov	r1, r5
 80045d4:	028b      	lsls	r3, r1, #10
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045dc:	4621      	mov	r1, r4
 80045de:	028a      	lsls	r2, r1, #10
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e6:	2200      	movs	r2, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	60fa      	str	r2, [r7, #12]
 80045ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f0:	f7fb fe3e 	bl	8000270 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_GetSysClockFreq+0x180>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800460c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetSysClockFreq+0x184>)
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004620:	4618      	mov	r0, r3
 8004622:	3740      	adds	r7, #64	; 0x40
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400
 8004634:	017d7840 	.word	0x017d7840

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_RCC_GetHCLKFreq+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000000 	.word	0x20000000

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004654:	f7ff fff0 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08005f3c 	.word	0x08005f3c

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800467c:	f7ff ffdc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0b5b      	lsrs	r3, r3, #13
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	; (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08005f3c 	.word	0x08005f3c

080046a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e03f      	b.n	8004732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fa42 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f929 	bl	800493c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af02      	add	r7, sp, #8
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b20      	cmp	r3, #32
 8004758:	d17c      	bne.n	8004854 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_UART_Transmit+0x2c>
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e075      	b.n	8004856 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit+0x3e>
 8004774:	2302      	movs	r3, #2
 8004776:	e06e      	b.n	8004856 <HAL_UART_Transmit+0x11c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478e:	f7fc fbab 	bl	8000ee8 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d108      	bne.n	80047bc <HAL_UART_Transmit+0x82>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e003      	b.n	80047c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047cc:	e02a      	b.n	8004824 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f840 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e036      	b.n	8004856 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3302      	adds	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e007      	b.n	8004816 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1cf      	bne.n	80047ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	2140      	movs	r1, #64	; 0x40
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f810 	bl	800485e <UART_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b090      	sub	sp, #64	; 0x40
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4613      	mov	r3, r2
 800486c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486e:	e050      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004876:	d04c      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x30>
 800487e:	f7fc fb33 	bl	8000ee8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800488a:	429a      	cmp	r2, r3
 800488c:	d241      	bcs.n	8004912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ae:	637a      	str	r2, [r7, #52]	; 0x34
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	613b      	str	r3, [r7, #16]
   return(result);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e2:	623a      	str	r2, [r7, #32]
 80048e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e5      	bne.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	429a      	cmp	r2, r3
 800492e:	d09f      	beq.n	8004870 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3740      	adds	r7, #64	; 0x40
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b0c0      	sub	sp, #256	; 0x100
 8004942:	af00      	add	r7, sp, #0
 8004944:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	68d9      	ldr	r1, [r3, #12]
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	ea40 0301 	orr.w	r3, r0, r1
 8004964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004994:	f021 010c 	bic.w	r1, r1, #12
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049a2:	430b      	orrs	r3, r1
 80049a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	6999      	ldr	r1, [r3, #24]
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	ea40 0301 	orr.w	r3, r0, r1
 80049c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b8f      	ldr	r3, [pc, #572]	; (8004c08 <UART_SetConfig+0x2cc>)
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d005      	beq.n	80049dc <UART_SetConfig+0xa0>
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b8d      	ldr	r3, [pc, #564]	; (8004c0c <UART_SetConfig+0x2d0>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d104      	bne.n	80049e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7ff fe4c 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 80049e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049e4:	e003      	b.n	80049ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e6:	f7ff fe33 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 80049ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	f040 810c 	bne.w	8004c14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a16:	415b      	adcs	r3, r3
 8004a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a1e:	4621      	mov	r1, r4
 8004a20:	eb12 0801 	adds.w	r8, r2, r1
 8004a24:	4629      	mov	r1, r5
 8004a26:	eb43 0901 	adc.w	r9, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3e:	4690      	mov	r8, r2
 8004a40:	4699      	mov	r9, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	eb18 0303 	adds.w	r3, r8, r3
 8004a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	eb49 0303 	adc.w	r3, r9, r3
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	18db      	adds	r3, r3, r3
 8004a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a70:	4613      	mov	r3, r2
 8004a72:	eb42 0303 	adc.w	r3, r2, r3
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
 8004a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a80:	f7fb fbf6 	bl	8000270 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011c      	lsls	r4, r3, #4
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aac:	415b      	adcs	r3, r3
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	eb12 0a01 	adds.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004acc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad4:	4692      	mov	sl, r2
 8004ad6:	469b      	mov	fp, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	eb1a 0303 	adds.w	r3, sl, r3
 8004ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004af8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004afc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b00:	460b      	mov	r3, r1
 8004b02:	18db      	adds	r3, r3, r3
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
 8004b06:	4613      	mov	r3, r2
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b16:	f7fb fbab 	bl	8000270 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004b22:	fba3 2301 	umull	r2, r3, r3, r1
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2264      	movs	r2, #100	; 0x64
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	1acb      	subs	r3, r1, r3
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b36:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004b38:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b44:	441c      	add	r4, r3
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b60:	415b      	adcs	r3, r3
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b68:	4641      	mov	r1, r8
 8004b6a:	1851      	adds	r1, r2, r1
 8004b6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b6e:	4649      	mov	r1, r9
 8004b70:	414b      	adcs	r3, r1
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b80:	4659      	mov	r1, fp
 8004b82:	00cb      	lsls	r3, r1, #3
 8004b84:	4651      	mov	r1, sl
 8004b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	00ca      	lsls	r2, r1, #3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	4642      	mov	r2, r8
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bd2:	f7fb fb4d 	bl	8000270 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	; 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	3332      	adds	r3, #50	; 0x32
 8004bee:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <UART_SetConfig+0x2d4>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 0207 	and.w	r2, r3, #7
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4422      	add	r2, r4
 8004c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c04:	e105      	b.n	8004e12 <UART_SetConfig+0x4d6>
 8004c06:	bf00      	nop
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40011400 	.word	0x40011400
 8004c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c26:	4642      	mov	r2, r8
 8004c28:	464b      	mov	r3, r9
 8004c2a:	1891      	adds	r1, r2, r2
 8004c2c:	6239      	str	r1, [r7, #32]
 8004c2e:	415b      	adcs	r3, r3
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
 8004c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c36:	4641      	mov	r1, r8
 8004c38:	1854      	adds	r4, r2, r1
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	eb43 0501 	adc.w	r5, r3, r1
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	00eb      	lsls	r3, r5, #3
 8004c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4e:	00e2      	lsls	r2, r4, #3
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	eb45 0303 	adc.w	r3, r5, r3
 8004c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c82:	4629      	mov	r1, r5
 8004c84:	008b      	lsls	r3, r1, #2
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	008a      	lsls	r2, r1, #2
 8004c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c94:	f7fb faec 	bl	8000270 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b60      	ldr	r3, [pc, #384]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	011c      	lsls	r4, r3, #4
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	61b9      	str	r1, [r7, #24]
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6139      	str	r1, [r7, #16]
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	460a      	mov	r2, r1
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d20:	4649      	mov	r1, r9
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	4641      	mov	r1, r8
 8004d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	008a      	lsls	r2, r1, #2
 8004d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d32:	f7fb fa9d 	bl	8000270 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a34      	ldr	r2, [pc, #208]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d5a:	441c      	add	r4, r3
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	673b      	str	r3, [r7, #112]	; 0x70
 8004d64:	677a      	str	r2, [r7, #116]	; 0x74
 8004d66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d6a:	4642      	mov	r2, r8
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	1891      	adds	r1, r2, r2
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	415b      	adcs	r3, r3
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	1851      	adds	r1, r2, r1
 8004d7e:	6039      	str	r1, [r7, #0]
 8004d80:	4649      	mov	r1, r9
 8004d82:	414b      	adcs	r3, r1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d92:	4659      	mov	r1, fp
 8004d94:	00cb      	lsls	r3, r1, #3
 8004d96:	4651      	mov	r1, sl
 8004d98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9c:	4651      	mov	r1, sl
 8004d9e:	00ca      	lsls	r2, r1, #3
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	4603      	mov	r3, r0
 8004da6:	4642      	mov	r2, r8
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dac:	464b      	mov	r3, r9
 8004dae:	460a      	mov	r2, r1
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc0:	667a      	str	r2, [r7, #100]	; 0x64
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dce:	4649      	mov	r1, r9
 8004dd0:	008b      	lsls	r3, r1, #2
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd8:	4641      	mov	r1, r8
 8004dda:	008a      	lsls	r2, r1, #2
 8004ddc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004de0:	f7fb fa46 	bl	8000270 <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004dea:	fba3 1302 	umull	r1, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2164      	movs	r1, #100	; 0x64
 8004df2:	fb01 f303 	mul.w	r3, r1, r3
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	3332      	adds	r3, #50	; 0x32
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <UART_SetConfig+0x4e4>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4422      	add	r2, r4
 8004e10:	609a      	str	r2, [r3, #8]
}
 8004e12:	bf00      	nop
 8004e14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	51eb851f 	.word	0x51eb851f

08004e24 <i3g4250d_read_reg>:
  *
  */
int32_t __weak i3g4250d_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	460b      	mov	r3, r1
 8004e32:	72fb      	strb	r3, [r7, #11]
 8004e34:	4613      	mov	r3, r2
 8004e36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685c      	ldr	r4, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68d8      	ldr	r0, [r3, #12]
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	7af9      	ldrb	r1, [r7, #11]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	47a0      	blx	r4
 8004e48:	6178      	str	r0, [r7, #20]

  return ret;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd90      	pop	{r4, r7, pc}

08004e54 <i3g4250d_device_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = i3g4250d_read_reg(ctx, I3G4250D_WHO_AM_I, buff, 1);
 8004e5e:	2301      	movs	r3, #1
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	210f      	movs	r1, #15
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ffdd 	bl	8004e24 <i3g4250d_read_reg>
 8004e6a:	60f8      	str	r0, [r7, #12]

  return ret;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8004e76:	b590      	push	{r4, r7, lr}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	461a      	mov	r2, r3
 8004e82:	460b      	mov	r3, r1
 8004e84:	72fb      	strb	r3, [r7, #11]
 8004e86:	4613      	mov	r3, r2
 8004e88:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685c      	ldr	r4, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	68d8      	ldr	r0, [r3, #12]
 8004e92:	893b      	ldrh	r3, [r7, #8]
 8004e94:	7af9      	ldrb	r1, [r7, #11]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	47a0      	blx	r4
 8004e9a:	6178      	str	r0, [r7, #20]

  return ret;
 8004e9c:	697b      	ldr	r3, [r7, #20]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}

08004ea6 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	210f      	movs	r1, #15
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffdd 	bl	8004e76 <lis331dlh_read_reg>
 8004ebc:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	72fb      	strb	r3, [r7, #11]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685c      	ldr	r4, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	68d8      	ldr	r0, [r3, #12]
 8004ee4:	893b      	ldrh	r3, [r7, #8]
 8004ee6:	7af9      	ldrb	r1, [r7, #11]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	47a0      	blx	r4
 8004eec:	6178      	str	r0, [r7, #20]

  return ret;
 8004eee:	697b      	ldr	r3, [r7, #20]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd90      	pop	{r4, r7, pc}

08004ef8 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 8004f02:	2301      	movs	r3, #1
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	210f      	movs	r1, #15
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ffdd 	bl	8004ec8 <lis3mdl_read_reg>
 8004f0e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000000c 	.word	0x2000000c

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 ffbe 	bl	8005ebc <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005fe4 	.word	0x08005fe4
 8004f64:	08005fe4 	.word	0x08005fe4
 8004f68:	08005fe4 	.word	0x08005fe4
 8004f6c:	08005fe8 	.word	0x08005fe8

08004f70 <malloc>:
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <malloc+0xc>)
 8004f72:	4601      	mov	r1, r0
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f000 b87f 	b.w	8005078 <_malloc_r>
 8004f7a:	bf00      	nop
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <free>:
 8004f80:	4b02      	ldr	r3, [pc, #8]	; (8004f8c <free+0xc>)
 8004f82:	4601      	mov	r1, r0
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	f000 b80b 	b.w	8004fa0 <_free_r>
 8004f8a:	bf00      	nop
 8004f8c:	2000000c 	.word	0x2000000c

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <_free_r>:
 8004fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d044      	beq.n	8005030 <_free_r+0x90>
 8004fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004faa:	9001      	str	r0, [sp, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f1a1 0404 	sub.w	r4, r1, #4
 8004fb2:	bfb8      	it	lt
 8004fb4:	18e4      	addlt	r4, r4, r3
 8004fb6:	f000 f9f3 	bl	80053a0 <__malloc_lock>
 8004fba:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <_free_r+0x94>)
 8004fbc:	9801      	ldr	r0, [sp, #4]
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	b933      	cbnz	r3, 8004fd0 <_free_r+0x30>
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	6014      	str	r4, [r2, #0]
 8004fc6:	b003      	add	sp, #12
 8004fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fcc:	f000 b9ee 	b.w	80053ac <__malloc_unlock>
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d908      	bls.n	8004fe6 <_free_r+0x46>
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf01      	itttt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1949      	addeq	r1, r1, r5
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	e7ed      	b.n	8004fc2 <_free_r+0x22>
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	b10b      	cbz	r3, 8004ff0 <_free_r+0x50>
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d9fa      	bls.n	8004fe6 <_free_r+0x46>
 8004ff0:	6811      	ldr	r1, [r2, #0]
 8004ff2:	1855      	adds	r5, r2, r1
 8004ff4:	42a5      	cmp	r5, r4
 8004ff6:	d10b      	bne.n	8005010 <_free_r+0x70>
 8004ff8:	6824      	ldr	r4, [r4, #0]
 8004ffa:	4421      	add	r1, r4
 8004ffc:	1854      	adds	r4, r2, r1
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	d1e0      	bne.n	8004fc6 <_free_r+0x26>
 8005004:	681c      	ldr	r4, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	6053      	str	r3, [r2, #4]
 800500a:	4421      	add	r1, r4
 800500c:	6011      	str	r1, [r2, #0]
 800500e:	e7da      	b.n	8004fc6 <_free_r+0x26>
 8005010:	d902      	bls.n	8005018 <_free_r+0x78>
 8005012:	230c      	movs	r3, #12
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	e7d6      	b.n	8004fc6 <_free_r+0x26>
 8005018:	6825      	ldr	r5, [r4, #0]
 800501a:	1961      	adds	r1, r4, r5
 800501c:	428b      	cmp	r3, r1
 800501e:	bf04      	itt	eq
 8005020:	6819      	ldreq	r1, [r3, #0]
 8005022:	685b      	ldreq	r3, [r3, #4]
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	bf04      	itt	eq
 8005028:	1949      	addeq	r1, r1, r5
 800502a:	6021      	streq	r1, [r4, #0]
 800502c:	6054      	str	r4, [r2, #4]
 800502e:	e7ca      	b.n	8004fc6 <_free_r+0x26>
 8005030:	b003      	add	sp, #12
 8005032:	bd30      	pop	{r4, r5, pc}
 8005034:	20000130 	.word	0x20000130

08005038 <sbrk_aligned>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4e0e      	ldr	r6, [pc, #56]	; (8005074 <sbrk_aligned+0x3c>)
 800503c:	460c      	mov	r4, r1
 800503e:	6831      	ldr	r1, [r6, #0]
 8005040:	4605      	mov	r5, r0
 8005042:	b911      	cbnz	r1, 800504a <sbrk_aligned+0x12>
 8005044:	f000 f8a4 	bl	8005190 <_sbrk_r>
 8005048:	6030      	str	r0, [r6, #0]
 800504a:	4621      	mov	r1, r4
 800504c:	4628      	mov	r0, r5
 800504e:	f000 f89f 	bl	8005190 <_sbrk_r>
 8005052:	1c43      	adds	r3, r0, #1
 8005054:	d00a      	beq.n	800506c <sbrk_aligned+0x34>
 8005056:	1cc4      	adds	r4, r0, #3
 8005058:	f024 0403 	bic.w	r4, r4, #3
 800505c:	42a0      	cmp	r0, r4
 800505e:	d007      	beq.n	8005070 <sbrk_aligned+0x38>
 8005060:	1a21      	subs	r1, r4, r0
 8005062:	4628      	mov	r0, r5
 8005064:	f000 f894 	bl	8005190 <_sbrk_r>
 8005068:	3001      	adds	r0, #1
 800506a:	d101      	bne.n	8005070 <sbrk_aligned+0x38>
 800506c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005070:	4620      	mov	r0, r4
 8005072:	bd70      	pop	{r4, r5, r6, pc}
 8005074:	20000134 	.word	0x20000134

08005078 <_malloc_r>:
 8005078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507c:	1ccd      	adds	r5, r1, #3
 800507e:	f025 0503 	bic.w	r5, r5, #3
 8005082:	3508      	adds	r5, #8
 8005084:	2d0c      	cmp	r5, #12
 8005086:	bf38      	it	cc
 8005088:	250c      	movcc	r5, #12
 800508a:	2d00      	cmp	r5, #0
 800508c:	4607      	mov	r7, r0
 800508e:	db01      	blt.n	8005094 <_malloc_r+0x1c>
 8005090:	42a9      	cmp	r1, r5
 8005092:	d905      	bls.n	80050a0 <_malloc_r+0x28>
 8005094:	230c      	movs	r3, #12
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	2600      	movs	r6, #0
 800509a:	4630      	mov	r0, r6
 800509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a0:	4e2e      	ldr	r6, [pc, #184]	; (800515c <_malloc_r+0xe4>)
 80050a2:	f000 f97d 	bl	80053a0 <__malloc_lock>
 80050a6:	6833      	ldr	r3, [r6, #0]
 80050a8:	461c      	mov	r4, r3
 80050aa:	bb34      	cbnz	r4, 80050fa <_malloc_r+0x82>
 80050ac:	4629      	mov	r1, r5
 80050ae:	4638      	mov	r0, r7
 80050b0:	f7ff ffc2 	bl	8005038 <sbrk_aligned>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	4604      	mov	r4, r0
 80050b8:	d14d      	bne.n	8005156 <_malloc_r+0xde>
 80050ba:	6834      	ldr	r4, [r6, #0]
 80050bc:	4626      	mov	r6, r4
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d140      	bne.n	8005144 <_malloc_r+0xcc>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	4631      	mov	r1, r6
 80050c6:	4638      	mov	r0, r7
 80050c8:	eb04 0803 	add.w	r8, r4, r3
 80050cc:	f000 f860 	bl	8005190 <_sbrk_r>
 80050d0:	4580      	cmp	r8, r0
 80050d2:	d13a      	bne.n	800514a <_malloc_r+0xd2>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	3503      	adds	r5, #3
 80050d8:	1a6d      	subs	r5, r5, r1
 80050da:	f025 0503 	bic.w	r5, r5, #3
 80050de:	3508      	adds	r5, #8
 80050e0:	2d0c      	cmp	r5, #12
 80050e2:	bf38      	it	cc
 80050e4:	250c      	movcc	r5, #12
 80050e6:	4629      	mov	r1, r5
 80050e8:	4638      	mov	r0, r7
 80050ea:	f7ff ffa5 	bl	8005038 <sbrk_aligned>
 80050ee:	3001      	adds	r0, #1
 80050f0:	d02b      	beq.n	800514a <_malloc_r+0xd2>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	442b      	add	r3, r5
 80050f6:	6023      	str	r3, [r4, #0]
 80050f8:	e00e      	b.n	8005118 <_malloc_r+0xa0>
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	1b52      	subs	r2, r2, r5
 80050fe:	d41e      	bmi.n	800513e <_malloc_r+0xc6>
 8005100:	2a0b      	cmp	r2, #11
 8005102:	d916      	bls.n	8005132 <_malloc_r+0xba>
 8005104:	1961      	adds	r1, r4, r5
 8005106:	42a3      	cmp	r3, r4
 8005108:	6025      	str	r5, [r4, #0]
 800510a:	bf18      	it	ne
 800510c:	6059      	strne	r1, [r3, #4]
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	bf08      	it	eq
 8005112:	6031      	streq	r1, [r6, #0]
 8005114:	5162      	str	r2, [r4, r5]
 8005116:	604b      	str	r3, [r1, #4]
 8005118:	4638      	mov	r0, r7
 800511a:	f104 060b 	add.w	r6, r4, #11
 800511e:	f000 f945 	bl	80053ac <__malloc_unlock>
 8005122:	f026 0607 	bic.w	r6, r6, #7
 8005126:	1d23      	adds	r3, r4, #4
 8005128:	1af2      	subs	r2, r6, r3
 800512a:	d0b6      	beq.n	800509a <_malloc_r+0x22>
 800512c:	1b9b      	subs	r3, r3, r6
 800512e:	50a3      	str	r3, [r4, r2]
 8005130:	e7b3      	b.n	800509a <_malloc_r+0x22>
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	42a3      	cmp	r3, r4
 8005136:	bf0c      	ite	eq
 8005138:	6032      	streq	r2, [r6, #0]
 800513a:	605a      	strne	r2, [r3, #4]
 800513c:	e7ec      	b.n	8005118 <_malloc_r+0xa0>
 800513e:	4623      	mov	r3, r4
 8005140:	6864      	ldr	r4, [r4, #4]
 8005142:	e7b2      	b.n	80050aa <_malloc_r+0x32>
 8005144:	4634      	mov	r4, r6
 8005146:	6876      	ldr	r6, [r6, #4]
 8005148:	e7b9      	b.n	80050be <_malloc_r+0x46>
 800514a:	230c      	movs	r3, #12
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4638      	mov	r0, r7
 8005150:	f000 f92c 	bl	80053ac <__malloc_unlock>
 8005154:	e7a1      	b.n	800509a <_malloc_r+0x22>
 8005156:	6025      	str	r5, [r4, #0]
 8005158:	e7de      	b.n	8005118 <_malloc_r+0xa0>
 800515a:	bf00      	nop
 800515c:	20000130 	.word	0x20000130

08005160 <iprintf>:
 8005160:	b40f      	push	{r0, r1, r2, r3}
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <iprintf+0x2c>)
 8005164:	b513      	push	{r0, r1, r4, lr}
 8005166:	681c      	ldr	r4, [r3, #0]
 8005168:	b124      	cbz	r4, 8005174 <iprintf+0x14>
 800516a:	69a3      	ldr	r3, [r4, #24]
 800516c:	b913      	cbnz	r3, 8005174 <iprintf+0x14>
 800516e:	4620      	mov	r0, r4
 8005170:	f000 f876 	bl	8005260 <__sinit>
 8005174:	ab05      	add	r3, sp, #20
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	68a1      	ldr	r1, [r4, #8]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f945 	bl	800540c <_vfiprintf_r>
 8005182:	b002      	add	sp, #8
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	b004      	add	sp, #16
 800518a:	4770      	bx	lr
 800518c:	2000000c 	.word	0x2000000c

08005190 <_sbrk_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d06      	ldr	r5, [pc, #24]	; (80051ac <_sbrk_r+0x1c>)
 8005194:	2300      	movs	r3, #0
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	f7fb fdcc 	bl	8000d38 <_sbrk>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_sbrk_r+0x1a>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_sbrk_r+0x1a>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	2000013c 	.word	0x2000013c

080051b0 <std>:
 80051b0:	2300      	movs	r3, #0
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051be:	6083      	str	r3, [r0, #8]
 80051c0:	8181      	strh	r1, [r0, #12]
 80051c2:	6643      	str	r3, [r0, #100]	; 0x64
 80051c4:	81c2      	strh	r2, [r0, #14]
 80051c6:	6183      	str	r3, [r0, #24]
 80051c8:	4619      	mov	r1, r3
 80051ca:	2208      	movs	r2, #8
 80051cc:	305c      	adds	r0, #92	; 0x5c
 80051ce:	f7ff fedf 	bl	8004f90 <memset>
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <std+0x38>)
 80051d4:	6263      	str	r3, [r4, #36]	; 0x24
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <std+0x3c>)
 80051d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <std+0x40>)
 80051dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <std+0x44>)
 80051e0:	6224      	str	r4, [r4, #32]
 80051e2:	6323      	str	r3, [r4, #48]	; 0x30
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	bf00      	nop
 80051e8:	08005995 	.word	0x08005995
 80051ec:	080059b7 	.word	0x080059b7
 80051f0:	080059ef 	.word	0x080059ef
 80051f4:	08005a13 	.word	0x08005a13

080051f8 <_cleanup_r>:
 80051f8:	4901      	ldr	r1, [pc, #4]	; (8005200 <_cleanup_r+0x8>)
 80051fa:	f000 b8af 	b.w	800535c <_fwalk_reent>
 80051fe:	bf00      	nop
 8005200:	08005ced 	.word	0x08005ced

08005204 <__sfmoreglue>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	2268      	movs	r2, #104	; 0x68
 8005208:	1e4d      	subs	r5, r1, #1
 800520a:	4355      	muls	r5, r2
 800520c:	460e      	mov	r6, r1
 800520e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005212:	f7ff ff31 	bl	8005078 <_malloc_r>
 8005216:	4604      	mov	r4, r0
 8005218:	b140      	cbz	r0, 800522c <__sfmoreglue+0x28>
 800521a:	2100      	movs	r1, #0
 800521c:	e9c0 1600 	strd	r1, r6, [r0]
 8005220:	300c      	adds	r0, #12
 8005222:	60a0      	str	r0, [r4, #8]
 8005224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005228:	f7ff feb2 	bl	8004f90 <memset>
 800522c:	4620      	mov	r0, r4
 800522e:	bd70      	pop	{r4, r5, r6, pc}

08005230 <__sfp_lock_acquire>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__sfp_lock_acquire+0x8>)
 8005232:	f000 b8b3 	b.w	800539c <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	20000139 	.word	0x20000139

0800523c <__sfp_lock_release>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__sfp_lock_release+0x8>)
 800523e:	f000 b8ae 	b.w	800539e <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	20000139 	.word	0x20000139

08005248 <__sinit_lock_acquire>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__sinit_lock_acquire+0x8>)
 800524a:	f000 b8a7 	b.w	800539c <__retarget_lock_acquire_recursive>
 800524e:	bf00      	nop
 8005250:	2000013a 	.word	0x2000013a

08005254 <__sinit_lock_release>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__sinit_lock_release+0x8>)
 8005256:	f000 b8a2 	b.w	800539e <__retarget_lock_release_recursive>
 800525a:	bf00      	nop
 800525c:	2000013a 	.word	0x2000013a

08005260 <__sinit>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4604      	mov	r4, r0
 8005264:	f7ff fff0 	bl	8005248 <__sinit_lock_acquire>
 8005268:	69a3      	ldr	r3, [r4, #24]
 800526a:	b11b      	cbz	r3, 8005274 <__sinit+0x14>
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005270:	f7ff bff0 	b.w	8005254 <__sinit_lock_release>
 8005274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005278:	6523      	str	r3, [r4, #80]	; 0x50
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <__sinit+0x68>)
 800527c:	4a13      	ldr	r2, [pc, #76]	; (80052cc <__sinit+0x6c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	62a2      	str	r2, [r4, #40]	; 0x28
 8005282:	42a3      	cmp	r3, r4
 8005284:	bf04      	itt	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	61a3      	streq	r3, [r4, #24]
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f820 	bl	80052d0 <__sfp>
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	4620      	mov	r0, r4
 8005294:	f000 f81c 	bl	80052d0 <__sfp>
 8005298:	60a0      	str	r0, [r4, #8]
 800529a:	4620      	mov	r0, r4
 800529c:	f000 f818 	bl	80052d0 <__sfp>
 80052a0:	2200      	movs	r2, #0
 80052a2:	60e0      	str	r0, [r4, #12]
 80052a4:	2104      	movs	r1, #4
 80052a6:	6860      	ldr	r0, [r4, #4]
 80052a8:	f7ff ff82 	bl	80051b0 <std>
 80052ac:	68a0      	ldr	r0, [r4, #8]
 80052ae:	2201      	movs	r2, #1
 80052b0:	2109      	movs	r1, #9
 80052b2:	f7ff ff7d 	bl	80051b0 <std>
 80052b6:	68e0      	ldr	r0, [r4, #12]
 80052b8:	2202      	movs	r2, #2
 80052ba:	2112      	movs	r1, #18
 80052bc:	f7ff ff78 	bl	80051b0 <std>
 80052c0:	2301      	movs	r3, #1
 80052c2:	61a3      	str	r3, [r4, #24]
 80052c4:	e7d2      	b.n	800526c <__sinit+0xc>
 80052c6:	bf00      	nop
 80052c8:	08005f44 	.word	0x08005f44
 80052cc:	080051f9 	.word	0x080051f9

080052d0 <__sfp>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	4607      	mov	r7, r0
 80052d4:	f7ff ffac 	bl	8005230 <__sfp_lock_acquire>
 80052d8:	4b1e      	ldr	r3, [pc, #120]	; (8005354 <__sfp+0x84>)
 80052da:	681e      	ldr	r6, [r3, #0]
 80052dc:	69b3      	ldr	r3, [r6, #24]
 80052de:	b913      	cbnz	r3, 80052e6 <__sfp+0x16>
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7ff ffbd 	bl	8005260 <__sinit>
 80052e6:	3648      	adds	r6, #72	; 0x48
 80052e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	d503      	bpl.n	80052f8 <__sfp+0x28>
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	b30b      	cbz	r3, 8005338 <__sfp+0x68>
 80052f4:	6836      	ldr	r6, [r6, #0]
 80052f6:	e7f7      	b.n	80052e8 <__sfp+0x18>
 80052f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052fc:	b9d5      	cbnz	r5, 8005334 <__sfp+0x64>
 80052fe:	4b16      	ldr	r3, [pc, #88]	; (8005358 <__sfp+0x88>)
 8005300:	60e3      	str	r3, [r4, #12]
 8005302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005306:	6665      	str	r5, [r4, #100]	; 0x64
 8005308:	f000 f847 	bl	800539a <__retarget_lock_init_recursive>
 800530c:	f7ff ff96 	bl	800523c <__sfp_lock_release>
 8005310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005318:	6025      	str	r5, [r4, #0]
 800531a:	61a5      	str	r5, [r4, #24]
 800531c:	2208      	movs	r2, #8
 800531e:	4629      	mov	r1, r5
 8005320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005324:	f7ff fe34 	bl	8004f90 <memset>
 8005328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800532c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005330:	4620      	mov	r0, r4
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005334:	3468      	adds	r4, #104	; 0x68
 8005336:	e7d9      	b.n	80052ec <__sfp+0x1c>
 8005338:	2104      	movs	r1, #4
 800533a:	4638      	mov	r0, r7
 800533c:	f7ff ff62 	bl	8005204 <__sfmoreglue>
 8005340:	4604      	mov	r4, r0
 8005342:	6030      	str	r0, [r6, #0]
 8005344:	2800      	cmp	r0, #0
 8005346:	d1d5      	bne.n	80052f4 <__sfp+0x24>
 8005348:	f7ff ff78 	bl	800523c <__sfp_lock_release>
 800534c:	230c      	movs	r3, #12
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	e7ee      	b.n	8005330 <__sfp+0x60>
 8005352:	bf00      	nop
 8005354:	08005f44 	.word	0x08005f44
 8005358:	ffff0001 	.word	0xffff0001

0800535c <_fwalk_reent>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4606      	mov	r6, r0
 8005362:	4688      	mov	r8, r1
 8005364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005368:	2700      	movs	r7, #0
 800536a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800536e:	f1b9 0901 	subs.w	r9, r9, #1
 8005372:	d505      	bpl.n	8005380 <_fwalk_reent+0x24>
 8005374:	6824      	ldr	r4, [r4, #0]
 8005376:	2c00      	cmp	r4, #0
 8005378:	d1f7      	bne.n	800536a <_fwalk_reent+0xe>
 800537a:	4638      	mov	r0, r7
 800537c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005380:	89ab      	ldrh	r3, [r5, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d907      	bls.n	8005396 <_fwalk_reent+0x3a>
 8005386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800538a:	3301      	adds	r3, #1
 800538c:	d003      	beq.n	8005396 <_fwalk_reent+0x3a>
 800538e:	4629      	mov	r1, r5
 8005390:	4630      	mov	r0, r6
 8005392:	47c0      	blx	r8
 8005394:	4307      	orrs	r7, r0
 8005396:	3568      	adds	r5, #104	; 0x68
 8005398:	e7e9      	b.n	800536e <_fwalk_reent+0x12>

0800539a <__retarget_lock_init_recursive>:
 800539a:	4770      	bx	lr

0800539c <__retarget_lock_acquire_recursive>:
 800539c:	4770      	bx	lr

0800539e <__retarget_lock_release_recursive>:
 800539e:	4770      	bx	lr

080053a0 <__malloc_lock>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__malloc_lock+0x8>)
 80053a2:	f7ff bffb 	b.w	800539c <__retarget_lock_acquire_recursive>
 80053a6:	bf00      	nop
 80053a8:	20000138 	.word	0x20000138

080053ac <__malloc_unlock>:
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <__malloc_unlock+0x8>)
 80053ae:	f7ff bff6 	b.w	800539e <__retarget_lock_release_recursive>
 80053b2:	bf00      	nop
 80053b4:	20000138 	.word	0x20000138

080053b8 <__sfputc_r>:
 80053b8:	6893      	ldr	r3, [r2, #8]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	b410      	push	{r4}
 80053c0:	6093      	str	r3, [r2, #8]
 80053c2:	da08      	bge.n	80053d6 <__sfputc_r+0x1e>
 80053c4:	6994      	ldr	r4, [r2, #24]
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	db01      	blt.n	80053ce <__sfputc_r+0x16>
 80053ca:	290a      	cmp	r1, #10
 80053cc:	d103      	bne.n	80053d6 <__sfputc_r+0x1e>
 80053ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053d2:	f000 bb23 	b.w	8005a1c <__swbuf_r>
 80053d6:	6813      	ldr	r3, [r2, #0]
 80053d8:	1c58      	adds	r0, r3, #1
 80053da:	6010      	str	r0, [r2, #0]
 80053dc:	7019      	strb	r1, [r3, #0]
 80053de:	4608      	mov	r0, r1
 80053e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <__sfputs_r>:
 80053e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	4614      	mov	r4, r2
 80053ee:	18d5      	adds	r5, r2, r3
 80053f0:	42ac      	cmp	r4, r5
 80053f2:	d101      	bne.n	80053f8 <__sfputs_r+0x12>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e007      	b.n	8005408 <__sfputs_r+0x22>
 80053f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fc:	463a      	mov	r2, r7
 80053fe:	4630      	mov	r0, r6
 8005400:	f7ff ffda 	bl	80053b8 <__sfputc_r>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d1f3      	bne.n	80053f0 <__sfputs_r+0xa>
 8005408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800540c <_vfiprintf_r>:
 800540c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005410:	460d      	mov	r5, r1
 8005412:	b09d      	sub	sp, #116	; 0x74
 8005414:	4614      	mov	r4, r2
 8005416:	4698      	mov	r8, r3
 8005418:	4606      	mov	r6, r0
 800541a:	b118      	cbz	r0, 8005424 <_vfiprintf_r+0x18>
 800541c:	6983      	ldr	r3, [r0, #24]
 800541e:	b90b      	cbnz	r3, 8005424 <_vfiprintf_r+0x18>
 8005420:	f7ff ff1e 	bl	8005260 <__sinit>
 8005424:	4b89      	ldr	r3, [pc, #548]	; (800564c <_vfiprintf_r+0x240>)
 8005426:	429d      	cmp	r5, r3
 8005428:	d11b      	bne.n	8005462 <_vfiprintf_r+0x56>
 800542a:	6875      	ldr	r5, [r6, #4]
 800542c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800542e:	07d9      	lsls	r1, r3, #31
 8005430:	d405      	bmi.n	800543e <_vfiprintf_r+0x32>
 8005432:	89ab      	ldrh	r3, [r5, #12]
 8005434:	059a      	lsls	r2, r3, #22
 8005436:	d402      	bmi.n	800543e <_vfiprintf_r+0x32>
 8005438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800543a:	f7ff ffaf 	bl	800539c <__retarget_lock_acquire_recursive>
 800543e:	89ab      	ldrh	r3, [r5, #12]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	d501      	bpl.n	8005448 <_vfiprintf_r+0x3c>
 8005444:	692b      	ldr	r3, [r5, #16]
 8005446:	b9eb      	cbnz	r3, 8005484 <_vfiprintf_r+0x78>
 8005448:	4629      	mov	r1, r5
 800544a:	4630      	mov	r0, r6
 800544c:	f000 fb4a 	bl	8005ae4 <__swsetup_r>
 8005450:	b1c0      	cbz	r0, 8005484 <_vfiprintf_r+0x78>
 8005452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005454:	07dc      	lsls	r4, r3, #31
 8005456:	d50e      	bpl.n	8005476 <_vfiprintf_r+0x6a>
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	b01d      	add	sp, #116	; 0x74
 800545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005462:	4b7b      	ldr	r3, [pc, #492]	; (8005650 <_vfiprintf_r+0x244>)
 8005464:	429d      	cmp	r5, r3
 8005466:	d101      	bne.n	800546c <_vfiprintf_r+0x60>
 8005468:	68b5      	ldr	r5, [r6, #8]
 800546a:	e7df      	b.n	800542c <_vfiprintf_r+0x20>
 800546c:	4b79      	ldr	r3, [pc, #484]	; (8005654 <_vfiprintf_r+0x248>)
 800546e:	429d      	cmp	r5, r3
 8005470:	bf08      	it	eq
 8005472:	68f5      	ldreq	r5, [r6, #12]
 8005474:	e7da      	b.n	800542c <_vfiprintf_r+0x20>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	0598      	lsls	r0, r3, #22
 800547a:	d4ed      	bmi.n	8005458 <_vfiprintf_r+0x4c>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f7ff ff8e 	bl	800539e <__retarget_lock_release_recursive>
 8005482:	e7e9      	b.n	8005458 <_vfiprintf_r+0x4c>
 8005484:	2300      	movs	r3, #0
 8005486:	9309      	str	r3, [sp, #36]	; 0x24
 8005488:	2320      	movs	r3, #32
 800548a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800548e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005492:	2330      	movs	r3, #48	; 0x30
 8005494:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005658 <_vfiprintf_r+0x24c>
 8005498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800549c:	f04f 0901 	mov.w	r9, #1
 80054a0:	4623      	mov	r3, r4
 80054a2:	469a      	mov	sl, r3
 80054a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a8:	b10a      	cbz	r2, 80054ae <_vfiprintf_r+0xa2>
 80054aa:	2a25      	cmp	r2, #37	; 0x25
 80054ac:	d1f9      	bne.n	80054a2 <_vfiprintf_r+0x96>
 80054ae:	ebba 0b04 	subs.w	fp, sl, r4
 80054b2:	d00b      	beq.n	80054cc <_vfiprintf_r+0xc0>
 80054b4:	465b      	mov	r3, fp
 80054b6:	4622      	mov	r2, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7ff ff93 	bl	80053e6 <__sfputs_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	f000 80aa 	beq.w	800561a <_vfiprintf_r+0x20e>
 80054c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c8:	445a      	add	r2, fp
 80054ca:	9209      	str	r2, [sp, #36]	; 0x24
 80054cc:	f89a 3000 	ldrb.w	r3, [sl]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80a2 	beq.w	800561a <_vfiprintf_r+0x20e>
 80054d6:	2300      	movs	r3, #0
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054e0:	f10a 0a01 	add.w	sl, sl, #1
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	9307      	str	r3, [sp, #28]
 80054e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ec:	931a      	str	r3, [sp, #104]	; 0x68
 80054ee:	4654      	mov	r4, sl
 80054f0:	2205      	movs	r2, #5
 80054f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f6:	4858      	ldr	r0, [pc, #352]	; (8005658 <_vfiprintf_r+0x24c>)
 80054f8:	f7fa fe6a 	bl	80001d0 <memchr>
 80054fc:	9a04      	ldr	r2, [sp, #16]
 80054fe:	b9d8      	cbnz	r0, 8005538 <_vfiprintf_r+0x12c>
 8005500:	06d1      	lsls	r1, r2, #27
 8005502:	bf44      	itt	mi
 8005504:	2320      	movmi	r3, #32
 8005506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550a:	0713      	lsls	r3, r2, #28
 800550c:	bf44      	itt	mi
 800550e:	232b      	movmi	r3, #43	; 0x2b
 8005510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005514:	f89a 3000 	ldrb.w	r3, [sl]
 8005518:	2b2a      	cmp	r3, #42	; 0x2a
 800551a:	d015      	beq.n	8005548 <_vfiprintf_r+0x13c>
 800551c:	9a07      	ldr	r2, [sp, #28]
 800551e:	4654      	mov	r4, sl
 8005520:	2000      	movs	r0, #0
 8005522:	f04f 0c0a 	mov.w	ip, #10
 8005526:	4621      	mov	r1, r4
 8005528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800552c:	3b30      	subs	r3, #48	; 0x30
 800552e:	2b09      	cmp	r3, #9
 8005530:	d94e      	bls.n	80055d0 <_vfiprintf_r+0x1c4>
 8005532:	b1b0      	cbz	r0, 8005562 <_vfiprintf_r+0x156>
 8005534:	9207      	str	r2, [sp, #28]
 8005536:	e014      	b.n	8005562 <_vfiprintf_r+0x156>
 8005538:	eba0 0308 	sub.w	r3, r0, r8
 800553c:	fa09 f303 	lsl.w	r3, r9, r3
 8005540:	4313      	orrs	r3, r2
 8005542:	9304      	str	r3, [sp, #16]
 8005544:	46a2      	mov	sl, r4
 8005546:	e7d2      	b.n	80054ee <_vfiprintf_r+0xe2>
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	1d19      	adds	r1, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	9103      	str	r1, [sp, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	bfbb      	ittet	lt
 8005554:	425b      	neglt	r3, r3
 8005556:	f042 0202 	orrlt.w	r2, r2, #2
 800555a:	9307      	strge	r3, [sp, #28]
 800555c:	9307      	strlt	r3, [sp, #28]
 800555e:	bfb8      	it	lt
 8005560:	9204      	strlt	r2, [sp, #16]
 8005562:	7823      	ldrb	r3, [r4, #0]
 8005564:	2b2e      	cmp	r3, #46	; 0x2e
 8005566:	d10c      	bne.n	8005582 <_vfiprintf_r+0x176>
 8005568:	7863      	ldrb	r3, [r4, #1]
 800556a:	2b2a      	cmp	r3, #42	; 0x2a
 800556c:	d135      	bne.n	80055da <_vfiprintf_r+0x1ce>
 800556e:	9b03      	ldr	r3, [sp, #12]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	9203      	str	r2, [sp, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	bfb8      	it	lt
 800557a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800557e:	3402      	adds	r4, #2
 8005580:	9305      	str	r3, [sp, #20]
 8005582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005668 <_vfiprintf_r+0x25c>
 8005586:	7821      	ldrb	r1, [r4, #0]
 8005588:	2203      	movs	r2, #3
 800558a:	4650      	mov	r0, sl
 800558c:	f7fa fe20 	bl	80001d0 <memchr>
 8005590:	b140      	cbz	r0, 80055a4 <_vfiprintf_r+0x198>
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	eba0 000a 	sub.w	r0, r0, sl
 8005598:	fa03 f000 	lsl.w	r0, r3, r0
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	4303      	orrs	r3, r0
 80055a0:	3401      	adds	r4, #1
 80055a2:	9304      	str	r3, [sp, #16]
 80055a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a8:	482c      	ldr	r0, [pc, #176]	; (800565c <_vfiprintf_r+0x250>)
 80055aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ae:	2206      	movs	r2, #6
 80055b0:	f7fa fe0e 	bl	80001d0 <memchr>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d03f      	beq.n	8005638 <_vfiprintf_r+0x22c>
 80055b8:	4b29      	ldr	r3, [pc, #164]	; (8005660 <_vfiprintf_r+0x254>)
 80055ba:	bb1b      	cbnz	r3, 8005604 <_vfiprintf_r+0x1f8>
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	3307      	adds	r3, #7
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	3308      	adds	r3, #8
 80055c6:	9303      	str	r3, [sp, #12]
 80055c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ca:	443b      	add	r3, r7
 80055cc:	9309      	str	r3, [sp, #36]	; 0x24
 80055ce:	e767      	b.n	80054a0 <_vfiprintf_r+0x94>
 80055d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80055d4:	460c      	mov	r4, r1
 80055d6:	2001      	movs	r0, #1
 80055d8:	e7a5      	b.n	8005526 <_vfiprintf_r+0x11a>
 80055da:	2300      	movs	r3, #0
 80055dc:	3401      	adds	r4, #1
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f04f 0c0a 	mov.w	ip, #10
 80055e6:	4620      	mov	r0, r4
 80055e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ec:	3a30      	subs	r2, #48	; 0x30
 80055ee:	2a09      	cmp	r2, #9
 80055f0:	d903      	bls.n	80055fa <_vfiprintf_r+0x1ee>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0c5      	beq.n	8005582 <_vfiprintf_r+0x176>
 80055f6:	9105      	str	r1, [sp, #20]
 80055f8:	e7c3      	b.n	8005582 <_vfiprintf_r+0x176>
 80055fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80055fe:	4604      	mov	r4, r0
 8005600:	2301      	movs	r3, #1
 8005602:	e7f0      	b.n	80055e6 <_vfiprintf_r+0x1da>
 8005604:	ab03      	add	r3, sp, #12
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	462a      	mov	r2, r5
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <_vfiprintf_r+0x258>)
 800560c:	a904      	add	r1, sp, #16
 800560e:	4630      	mov	r0, r6
 8005610:	f3af 8000 	nop.w
 8005614:	4607      	mov	r7, r0
 8005616:	1c78      	adds	r0, r7, #1
 8005618:	d1d6      	bne.n	80055c8 <_vfiprintf_r+0x1bc>
 800561a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800561c:	07d9      	lsls	r1, r3, #31
 800561e:	d405      	bmi.n	800562c <_vfiprintf_r+0x220>
 8005620:	89ab      	ldrh	r3, [r5, #12]
 8005622:	059a      	lsls	r2, r3, #22
 8005624:	d402      	bmi.n	800562c <_vfiprintf_r+0x220>
 8005626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005628:	f7ff feb9 	bl	800539e <__retarget_lock_release_recursive>
 800562c:	89ab      	ldrh	r3, [r5, #12]
 800562e:	065b      	lsls	r3, r3, #25
 8005630:	f53f af12 	bmi.w	8005458 <_vfiprintf_r+0x4c>
 8005634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005636:	e711      	b.n	800545c <_vfiprintf_r+0x50>
 8005638:	ab03      	add	r3, sp, #12
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	462a      	mov	r2, r5
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <_vfiprintf_r+0x258>)
 8005640:	a904      	add	r1, sp, #16
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f880 	bl	8005748 <_printf_i>
 8005648:	e7e4      	b.n	8005614 <_vfiprintf_r+0x208>
 800564a:	bf00      	nop
 800564c:	08005f68 	.word	0x08005f68
 8005650:	08005f88 	.word	0x08005f88
 8005654:	08005f48 	.word	0x08005f48
 8005658:	08005fa8 	.word	0x08005fa8
 800565c:	08005fb2 	.word	0x08005fb2
 8005660:	00000000 	.word	0x00000000
 8005664:	080053e7 	.word	0x080053e7
 8005668:	08005fae 	.word	0x08005fae

0800566c <_printf_common>:
 800566c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	4616      	mov	r6, r2
 8005672:	4699      	mov	r9, r3
 8005674:	688a      	ldr	r2, [r1, #8]
 8005676:	690b      	ldr	r3, [r1, #16]
 8005678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800567c:	4293      	cmp	r3, r2
 800567e:	bfb8      	it	lt
 8005680:	4613      	movlt	r3, r2
 8005682:	6033      	str	r3, [r6, #0]
 8005684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005688:	4607      	mov	r7, r0
 800568a:	460c      	mov	r4, r1
 800568c:	b10a      	cbz	r2, 8005692 <_printf_common+0x26>
 800568e:	3301      	adds	r3, #1
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	0699      	lsls	r1, r3, #26
 8005696:	bf42      	ittt	mi
 8005698:	6833      	ldrmi	r3, [r6, #0]
 800569a:	3302      	addmi	r3, #2
 800569c:	6033      	strmi	r3, [r6, #0]
 800569e:	6825      	ldr	r5, [r4, #0]
 80056a0:	f015 0506 	ands.w	r5, r5, #6
 80056a4:	d106      	bne.n	80056b4 <_printf_common+0x48>
 80056a6:	f104 0a19 	add.w	sl, r4, #25
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	6832      	ldr	r2, [r6, #0]
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	dc26      	bgt.n	8005702 <_printf_common+0x96>
 80056b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056b8:	1e13      	subs	r3, r2, #0
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	bf18      	it	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	0692      	lsls	r2, r2, #26
 80056c2:	d42b      	bmi.n	800571c <_printf_common+0xb0>
 80056c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c8:	4649      	mov	r1, r9
 80056ca:	4638      	mov	r0, r7
 80056cc:	47c0      	blx	r8
 80056ce:	3001      	adds	r0, #1
 80056d0:	d01e      	beq.n	8005710 <_printf_common+0xa4>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	68e5      	ldr	r5, [r4, #12]
 80056d6:	6832      	ldr	r2, [r6, #0]
 80056d8:	f003 0306 	and.w	r3, r3, #6
 80056dc:	2b04      	cmp	r3, #4
 80056de:	bf08      	it	eq
 80056e0:	1aad      	subeq	r5, r5, r2
 80056e2:	68a3      	ldr	r3, [r4, #8]
 80056e4:	6922      	ldr	r2, [r4, #16]
 80056e6:	bf0c      	ite	eq
 80056e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056ec:	2500      	movne	r5, #0
 80056ee:	4293      	cmp	r3, r2
 80056f0:	bfc4      	itt	gt
 80056f2:	1a9b      	subgt	r3, r3, r2
 80056f4:	18ed      	addgt	r5, r5, r3
 80056f6:	2600      	movs	r6, #0
 80056f8:	341a      	adds	r4, #26
 80056fa:	42b5      	cmp	r5, r6
 80056fc:	d11a      	bne.n	8005734 <_printf_common+0xc8>
 80056fe:	2000      	movs	r0, #0
 8005700:	e008      	b.n	8005714 <_printf_common+0xa8>
 8005702:	2301      	movs	r3, #1
 8005704:	4652      	mov	r2, sl
 8005706:	4649      	mov	r1, r9
 8005708:	4638      	mov	r0, r7
 800570a:	47c0      	blx	r8
 800570c:	3001      	adds	r0, #1
 800570e:	d103      	bne.n	8005718 <_printf_common+0xac>
 8005710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005718:	3501      	adds	r5, #1
 800571a:	e7c6      	b.n	80056aa <_printf_common+0x3e>
 800571c:	18e1      	adds	r1, r4, r3
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	2030      	movs	r0, #48	; 0x30
 8005722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005726:	4422      	add	r2, r4
 8005728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800572c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005730:	3302      	adds	r3, #2
 8005732:	e7c7      	b.n	80056c4 <_printf_common+0x58>
 8005734:	2301      	movs	r3, #1
 8005736:	4622      	mov	r2, r4
 8005738:	4649      	mov	r1, r9
 800573a:	4638      	mov	r0, r7
 800573c:	47c0      	blx	r8
 800573e:	3001      	adds	r0, #1
 8005740:	d0e6      	beq.n	8005710 <_printf_common+0xa4>
 8005742:	3601      	adds	r6, #1
 8005744:	e7d9      	b.n	80056fa <_printf_common+0x8e>
	...

08005748 <_printf_i>:
 8005748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	7e0f      	ldrb	r7, [r1, #24]
 800574e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005750:	2f78      	cmp	r7, #120	; 0x78
 8005752:	4691      	mov	r9, r2
 8005754:	4680      	mov	r8, r0
 8005756:	460c      	mov	r4, r1
 8005758:	469a      	mov	sl, r3
 800575a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800575e:	d807      	bhi.n	8005770 <_printf_i+0x28>
 8005760:	2f62      	cmp	r7, #98	; 0x62
 8005762:	d80a      	bhi.n	800577a <_printf_i+0x32>
 8005764:	2f00      	cmp	r7, #0
 8005766:	f000 80d8 	beq.w	800591a <_printf_i+0x1d2>
 800576a:	2f58      	cmp	r7, #88	; 0x58
 800576c:	f000 80a3 	beq.w	80058b6 <_printf_i+0x16e>
 8005770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005778:	e03a      	b.n	80057f0 <_printf_i+0xa8>
 800577a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800577e:	2b15      	cmp	r3, #21
 8005780:	d8f6      	bhi.n	8005770 <_printf_i+0x28>
 8005782:	a101      	add	r1, pc, #4	; (adr r1, 8005788 <_printf_i+0x40>)
 8005784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005788:	080057e1 	.word	0x080057e1
 800578c:	080057f5 	.word	0x080057f5
 8005790:	08005771 	.word	0x08005771
 8005794:	08005771 	.word	0x08005771
 8005798:	08005771 	.word	0x08005771
 800579c:	08005771 	.word	0x08005771
 80057a0:	080057f5 	.word	0x080057f5
 80057a4:	08005771 	.word	0x08005771
 80057a8:	08005771 	.word	0x08005771
 80057ac:	08005771 	.word	0x08005771
 80057b0:	08005771 	.word	0x08005771
 80057b4:	08005901 	.word	0x08005901
 80057b8:	08005825 	.word	0x08005825
 80057bc:	080058e3 	.word	0x080058e3
 80057c0:	08005771 	.word	0x08005771
 80057c4:	08005771 	.word	0x08005771
 80057c8:	08005923 	.word	0x08005923
 80057cc:	08005771 	.word	0x08005771
 80057d0:	08005825 	.word	0x08005825
 80057d4:	08005771 	.word	0x08005771
 80057d8:	08005771 	.word	0x08005771
 80057dc:	080058eb 	.word	0x080058eb
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	602a      	str	r2, [r5, #0]
 80057e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0a3      	b.n	800593c <_printf_i+0x1f4>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	6829      	ldr	r1, [r5, #0]
 80057f8:	0606      	lsls	r6, r0, #24
 80057fa:	f101 0304 	add.w	r3, r1, #4
 80057fe:	d50a      	bpl.n	8005816 <_printf_i+0xce>
 8005800:	680e      	ldr	r6, [r1, #0]
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	2e00      	cmp	r6, #0
 8005806:	da03      	bge.n	8005810 <_printf_i+0xc8>
 8005808:	232d      	movs	r3, #45	; 0x2d
 800580a:	4276      	negs	r6, r6
 800580c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005810:	485e      	ldr	r0, [pc, #376]	; (800598c <_printf_i+0x244>)
 8005812:	230a      	movs	r3, #10
 8005814:	e019      	b.n	800584a <_printf_i+0x102>
 8005816:	680e      	ldr	r6, [r1, #0]
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800581e:	bf18      	it	ne
 8005820:	b236      	sxthne	r6, r6
 8005822:	e7ef      	b.n	8005804 <_printf_i+0xbc>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	6029      	str	r1, [r5, #0]
 800582c:	0601      	lsls	r1, r0, #24
 800582e:	d501      	bpl.n	8005834 <_printf_i+0xec>
 8005830:	681e      	ldr	r6, [r3, #0]
 8005832:	e002      	b.n	800583a <_printf_i+0xf2>
 8005834:	0646      	lsls	r6, r0, #25
 8005836:	d5fb      	bpl.n	8005830 <_printf_i+0xe8>
 8005838:	881e      	ldrh	r6, [r3, #0]
 800583a:	4854      	ldr	r0, [pc, #336]	; (800598c <_printf_i+0x244>)
 800583c:	2f6f      	cmp	r7, #111	; 0x6f
 800583e:	bf0c      	ite	eq
 8005840:	2308      	moveq	r3, #8
 8005842:	230a      	movne	r3, #10
 8005844:	2100      	movs	r1, #0
 8005846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800584a:	6865      	ldr	r5, [r4, #4]
 800584c:	60a5      	str	r5, [r4, #8]
 800584e:	2d00      	cmp	r5, #0
 8005850:	bfa2      	ittt	ge
 8005852:	6821      	ldrge	r1, [r4, #0]
 8005854:	f021 0104 	bicge.w	r1, r1, #4
 8005858:	6021      	strge	r1, [r4, #0]
 800585a:	b90e      	cbnz	r6, 8005860 <_printf_i+0x118>
 800585c:	2d00      	cmp	r5, #0
 800585e:	d04d      	beq.n	80058fc <_printf_i+0x1b4>
 8005860:	4615      	mov	r5, r2
 8005862:	fbb6 f1f3 	udiv	r1, r6, r3
 8005866:	fb03 6711 	mls	r7, r3, r1, r6
 800586a:	5dc7      	ldrb	r7, [r0, r7]
 800586c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005870:	4637      	mov	r7, r6
 8005872:	42bb      	cmp	r3, r7
 8005874:	460e      	mov	r6, r1
 8005876:	d9f4      	bls.n	8005862 <_printf_i+0x11a>
 8005878:	2b08      	cmp	r3, #8
 800587a:	d10b      	bne.n	8005894 <_printf_i+0x14c>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07de      	lsls	r6, r3, #31
 8005880:	d508      	bpl.n	8005894 <_printf_i+0x14c>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	6861      	ldr	r1, [r4, #4]
 8005886:	4299      	cmp	r1, r3
 8005888:	bfde      	ittt	le
 800588a:	2330      	movle	r3, #48	; 0x30
 800588c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005890:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005894:	1b52      	subs	r2, r2, r5
 8005896:	6122      	str	r2, [r4, #16]
 8005898:	f8cd a000 	str.w	sl, [sp]
 800589c:	464b      	mov	r3, r9
 800589e:	aa03      	add	r2, sp, #12
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff fee2 	bl	800566c <_printf_common>
 80058a8:	3001      	adds	r0, #1
 80058aa:	d14c      	bne.n	8005946 <_printf_i+0x1fe>
 80058ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b0:	b004      	add	sp, #16
 80058b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b6:	4835      	ldr	r0, [pc, #212]	; (800598c <_printf_i+0x244>)
 80058b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058bc:	6829      	ldr	r1, [r5, #0]
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80058c4:	6029      	str	r1, [r5, #0]
 80058c6:	061d      	lsls	r5, r3, #24
 80058c8:	d514      	bpl.n	80058f4 <_printf_i+0x1ac>
 80058ca:	07df      	lsls	r7, r3, #31
 80058cc:	bf44      	itt	mi
 80058ce:	f043 0320 	orrmi.w	r3, r3, #32
 80058d2:	6023      	strmi	r3, [r4, #0]
 80058d4:	b91e      	cbnz	r6, 80058de <_printf_i+0x196>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f023 0320 	bic.w	r3, r3, #32
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	2310      	movs	r3, #16
 80058e0:	e7b0      	b.n	8005844 <_printf_i+0xfc>
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f043 0320 	orr.w	r3, r3, #32
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	2378      	movs	r3, #120	; 0x78
 80058ec:	4828      	ldr	r0, [pc, #160]	; (8005990 <_printf_i+0x248>)
 80058ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058f2:	e7e3      	b.n	80058bc <_printf_i+0x174>
 80058f4:	0659      	lsls	r1, r3, #25
 80058f6:	bf48      	it	mi
 80058f8:	b2b6      	uxthmi	r6, r6
 80058fa:	e7e6      	b.n	80058ca <_printf_i+0x182>
 80058fc:	4615      	mov	r5, r2
 80058fe:	e7bb      	b.n	8005878 <_printf_i+0x130>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	6826      	ldr	r6, [r4, #0]
 8005904:	6961      	ldr	r1, [r4, #20]
 8005906:	1d18      	adds	r0, r3, #4
 8005908:	6028      	str	r0, [r5, #0]
 800590a:	0635      	lsls	r5, r6, #24
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	d501      	bpl.n	8005914 <_printf_i+0x1cc>
 8005910:	6019      	str	r1, [r3, #0]
 8005912:	e002      	b.n	800591a <_printf_i+0x1d2>
 8005914:	0670      	lsls	r0, r6, #25
 8005916:	d5fb      	bpl.n	8005910 <_printf_i+0x1c8>
 8005918:	8019      	strh	r1, [r3, #0]
 800591a:	2300      	movs	r3, #0
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	4615      	mov	r5, r2
 8005920:	e7ba      	b.n	8005898 <_printf_i+0x150>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	1d1a      	adds	r2, r3, #4
 8005926:	602a      	str	r2, [r5, #0]
 8005928:	681d      	ldr	r5, [r3, #0]
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	2100      	movs	r1, #0
 800592e:	4628      	mov	r0, r5
 8005930:	f7fa fc4e 	bl	80001d0 <memchr>
 8005934:	b108      	cbz	r0, 800593a <_printf_i+0x1f2>
 8005936:	1b40      	subs	r0, r0, r5
 8005938:	6060      	str	r0, [r4, #4]
 800593a:	6863      	ldr	r3, [r4, #4]
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	2300      	movs	r3, #0
 8005940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005944:	e7a8      	b.n	8005898 <_printf_i+0x150>
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	462a      	mov	r2, r5
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	47d0      	blx	sl
 8005950:	3001      	adds	r0, #1
 8005952:	d0ab      	beq.n	80058ac <_printf_i+0x164>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	079b      	lsls	r3, r3, #30
 8005958:	d413      	bmi.n	8005982 <_printf_i+0x23a>
 800595a:	68e0      	ldr	r0, [r4, #12]
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	4298      	cmp	r0, r3
 8005960:	bfb8      	it	lt
 8005962:	4618      	movlt	r0, r3
 8005964:	e7a4      	b.n	80058b0 <_printf_i+0x168>
 8005966:	2301      	movs	r3, #1
 8005968:	4632      	mov	r2, r6
 800596a:	4649      	mov	r1, r9
 800596c:	4640      	mov	r0, r8
 800596e:	47d0      	blx	sl
 8005970:	3001      	adds	r0, #1
 8005972:	d09b      	beq.n	80058ac <_printf_i+0x164>
 8005974:	3501      	adds	r5, #1
 8005976:	68e3      	ldr	r3, [r4, #12]
 8005978:	9903      	ldr	r1, [sp, #12]
 800597a:	1a5b      	subs	r3, r3, r1
 800597c:	42ab      	cmp	r3, r5
 800597e:	dcf2      	bgt.n	8005966 <_printf_i+0x21e>
 8005980:	e7eb      	b.n	800595a <_printf_i+0x212>
 8005982:	2500      	movs	r5, #0
 8005984:	f104 0619 	add.w	r6, r4, #25
 8005988:	e7f5      	b.n	8005976 <_printf_i+0x22e>
 800598a:	bf00      	nop
 800598c:	08005fb9 	.word	0x08005fb9
 8005990:	08005fca 	.word	0x08005fca

08005994 <__sread>:
 8005994:	b510      	push	{r4, lr}
 8005996:	460c      	mov	r4, r1
 8005998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599c:	f000 fa5a 	bl	8005e54 <_read_r>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	bfab      	itete	ge
 80059a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059a6:	89a3      	ldrhlt	r3, [r4, #12]
 80059a8:	181b      	addge	r3, r3, r0
 80059aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ae:	bfac      	ite	ge
 80059b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80059b2:	81a3      	strhlt	r3, [r4, #12]
 80059b4:	bd10      	pop	{r4, pc}

080059b6 <__swrite>:
 80059b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ba:	461f      	mov	r7, r3
 80059bc:	898b      	ldrh	r3, [r1, #12]
 80059be:	05db      	lsls	r3, r3, #23
 80059c0:	4605      	mov	r5, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	4616      	mov	r6, r2
 80059c6:	d505      	bpl.n	80059d4 <__swrite+0x1e>
 80059c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059cc:	2302      	movs	r3, #2
 80059ce:	2200      	movs	r2, #0
 80059d0:	f000 f9c8 	bl	8005d64 <_lseek_r>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	4632      	mov	r2, r6
 80059e2:	463b      	mov	r3, r7
 80059e4:	4628      	mov	r0, r5
 80059e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	f000 b869 	b.w	8005ac0 <_write_r>

080059ee <__sseek>:
 80059ee:	b510      	push	{r4, lr}
 80059f0:	460c      	mov	r4, r1
 80059f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f6:	f000 f9b5 	bl	8005d64 <_lseek_r>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	bf15      	itete	ne
 8005a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a0a:	81a3      	strheq	r3, [r4, #12]
 8005a0c:	bf18      	it	ne
 8005a0e:	81a3      	strhne	r3, [r4, #12]
 8005a10:	bd10      	pop	{r4, pc}

08005a12 <__sclose>:
 8005a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a16:	f000 b8d3 	b.w	8005bc0 <_close_r>
	...

08005a1c <__swbuf_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	460e      	mov	r6, r1
 8005a20:	4614      	mov	r4, r2
 8005a22:	4605      	mov	r5, r0
 8005a24:	b118      	cbz	r0, 8005a2e <__swbuf_r+0x12>
 8005a26:	6983      	ldr	r3, [r0, #24]
 8005a28:	b90b      	cbnz	r3, 8005a2e <__swbuf_r+0x12>
 8005a2a:	f7ff fc19 	bl	8005260 <__sinit>
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <__swbuf_r+0x98>)
 8005a30:	429c      	cmp	r4, r3
 8005a32:	d12b      	bne.n	8005a8c <__swbuf_r+0x70>
 8005a34:	686c      	ldr	r4, [r5, #4]
 8005a36:	69a3      	ldr	r3, [r4, #24]
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	071a      	lsls	r2, r3, #28
 8005a3e:	d52f      	bpl.n	8005aa0 <__swbuf_r+0x84>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	b36b      	cbz	r3, 8005aa0 <__swbuf_r+0x84>
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1ac0      	subs	r0, r0, r3
 8005a4a:	6963      	ldr	r3, [r4, #20]
 8005a4c:	b2f6      	uxtb	r6, r6
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	4637      	mov	r7, r6
 8005a52:	dc04      	bgt.n	8005a5e <__swbuf_r+0x42>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f948 	bl	8005cec <_fflush_r>
 8005a5c:	bb30      	cbnz	r0, 8005aac <__swbuf_r+0x90>
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	60a3      	str	r3, [r4, #8]
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	701e      	strb	r6, [r3, #0]
 8005a6c:	6963      	ldr	r3, [r4, #20]
 8005a6e:	3001      	adds	r0, #1
 8005a70:	4283      	cmp	r3, r0
 8005a72:	d004      	beq.n	8005a7e <__swbuf_r+0x62>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	07db      	lsls	r3, r3, #31
 8005a78:	d506      	bpl.n	8005a88 <__swbuf_r+0x6c>
 8005a7a:	2e0a      	cmp	r6, #10
 8005a7c:	d104      	bne.n	8005a88 <__swbuf_r+0x6c>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4628      	mov	r0, r5
 8005a82:	f000 f933 	bl	8005cec <_fflush_r>
 8005a86:	b988      	cbnz	r0, 8005aac <__swbuf_r+0x90>
 8005a88:	4638      	mov	r0, r7
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <__swbuf_r+0x9c>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d101      	bne.n	8005a96 <__swbuf_r+0x7a>
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	e7cf      	b.n	8005a36 <__swbuf_r+0x1a>
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <__swbuf_r+0xa0>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	bf08      	it	eq
 8005a9c:	68ec      	ldreq	r4, [r5, #12]
 8005a9e:	e7ca      	b.n	8005a36 <__swbuf_r+0x1a>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 f81e 	bl	8005ae4 <__swsetup_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d0cb      	beq.n	8005a44 <__swbuf_r+0x28>
 8005aac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ab0:	e7ea      	b.n	8005a88 <__swbuf_r+0x6c>
 8005ab2:	bf00      	nop
 8005ab4:	08005f68 	.word	0x08005f68
 8005ab8:	08005f88 	.word	0x08005f88
 8005abc:	08005f48 	.word	0x08005f48

08005ac0 <_write_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	; (8005ae0 <_write_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fb f8e1 	bl	8000c96 <_write>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_write_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_write_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	2000013c 	.word	0x2000013c

08005ae4 <__swsetup_r>:
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <__swsetup_r+0xcc>)
 8005ae6:	b570      	push	{r4, r5, r6, lr}
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	4606      	mov	r6, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	b125      	cbz	r5, 8005afa <__swsetup_r+0x16>
 8005af0:	69ab      	ldr	r3, [r5, #24]
 8005af2:	b913      	cbnz	r3, 8005afa <__swsetup_r+0x16>
 8005af4:	4628      	mov	r0, r5
 8005af6:	f7ff fbb3 	bl	8005260 <__sinit>
 8005afa:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <__swsetup_r+0xd0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d10f      	bne.n	8005b20 <__swsetup_r+0x3c>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	d42c      	bmi.n	8005b66 <__swsetup_r+0x82>
 8005b0c:	06dd      	lsls	r5, r3, #27
 8005b0e:	d411      	bmi.n	8005b34 <__swsetup_r+0x50>
 8005b10:	2309      	movs	r3, #9
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b1e:	e03e      	b.n	8005b9e <__swsetup_r+0xba>
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <__swsetup_r+0xd4>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d101      	bne.n	8005b2a <__swsetup_r+0x46>
 8005b26:	68ac      	ldr	r4, [r5, #8]
 8005b28:	e7eb      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <__swsetup_r+0xd8>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	bf08      	it	eq
 8005b30:	68ec      	ldreq	r4, [r5, #12]
 8005b32:	e7e6      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b34:	0758      	lsls	r0, r3, #29
 8005b36:	d512      	bpl.n	8005b5e <__swsetup_r+0x7a>
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	b141      	cbz	r1, 8005b4e <__swsetup_r+0x6a>
 8005b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <__swsetup_r+0x66>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fa2b 	bl	8004fa0 <_free_r>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f043 0308 	orr.w	r3, r3, #8
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b94b      	cbnz	r3, 8005b7e <__swsetup_r+0x9a>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b74:	d003      	beq.n	8005b7e <__swsetup_r+0x9a>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 f92b 	bl	8005dd4 <__smakebuf_r>
 8005b7e:	89a0      	ldrh	r0, [r4, #12]
 8005b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b84:	f010 0301 	ands.w	r3, r0, #1
 8005b88:	d00a      	beq.n	8005ba0 <__swsetup_r+0xbc>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	425b      	negs	r3, r3
 8005b92:	61a3      	str	r3, [r4, #24]
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	b943      	cbnz	r3, 8005baa <__swsetup_r+0xc6>
 8005b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b9c:	d1ba      	bne.n	8005b14 <__swsetup_r+0x30>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	0781      	lsls	r1, r0, #30
 8005ba2:	bf58      	it	pl
 8005ba4:	6963      	ldrpl	r3, [r4, #20]
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	e7f4      	b.n	8005b94 <__swsetup_r+0xb0>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e7f7      	b.n	8005b9e <__swsetup_r+0xba>
 8005bae:	bf00      	nop
 8005bb0:	2000000c 	.word	0x2000000c
 8005bb4:	08005f68 	.word	0x08005f68
 8005bb8:	08005f88 	.word	0x08005f88
 8005bbc:	08005f48 	.word	0x08005f48

08005bc0 <_close_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d06      	ldr	r5, [pc, #24]	; (8005bdc <_close_r+0x1c>)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	602b      	str	r3, [r5, #0]
 8005bcc:	f7fb f87f 	bl	8000cce <_close>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_close_r+0x1a>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_close_r+0x1a>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	2000013c 	.word	0x2000013c

08005be0 <__sflush_r>:
 8005be0:	898a      	ldrh	r2, [r1, #12]
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	4605      	mov	r5, r0
 8005be8:	0710      	lsls	r0, r2, #28
 8005bea:	460c      	mov	r4, r1
 8005bec:	d458      	bmi.n	8005ca0 <__sflush_r+0xc0>
 8005bee:	684b      	ldr	r3, [r1, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	dc05      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	dc02      	bgt.n	8005c00 <__sflush_r+0x20>
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d0f9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c0c:	682f      	ldr	r7, [r5, #0]
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	d032      	beq.n	8005c78 <__sflush_r+0x98>
 8005c12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	075a      	lsls	r2, r3, #29
 8005c18:	d505      	bpl.n	8005c26 <__sflush_r+0x46>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	1ac0      	subs	r0, r0, r3
 8005c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c20:	b10b      	cbz	r3, 8005c26 <__sflush_r+0x46>
 8005c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c24:	1ac0      	subs	r0, r0, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b0      	blx	r6
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	d106      	bne.n	8005c46 <__sflush_r+0x66>
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	291d      	cmp	r1, #29
 8005c3c:	d82c      	bhi.n	8005c98 <__sflush_r+0xb8>
 8005c3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ce8 <__sflush_r+0x108>)
 8005c40:	40ca      	lsrs	r2, r1
 8005c42:	07d6      	lsls	r6, r2, #31
 8005c44:	d528      	bpl.n	8005c98 <__sflush_r+0xb8>
 8005c46:	2200      	movs	r2, #0
 8005c48:	6062      	str	r2, [r4, #4]
 8005c4a:	04d9      	lsls	r1, r3, #19
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	d504      	bpl.n	8005c5c <__sflush_r+0x7c>
 8005c52:	1c42      	adds	r2, r0, #1
 8005c54:	d101      	bne.n	8005c5a <__sflush_r+0x7a>
 8005c56:	682b      	ldr	r3, [r5, #0]
 8005c58:	b903      	cbnz	r3, 8005c5c <__sflush_r+0x7c>
 8005c5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5e:	602f      	str	r7, [r5, #0]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d0ca      	beq.n	8005bfa <__sflush_r+0x1a>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <__sflush_r+0x92>
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7ff f997 	bl	8004fa0 <_free_r>
 8005c72:	2000      	movs	r0, #0
 8005c74:	6360      	str	r0, [r4, #52]	; 0x34
 8005c76:	e7c1      	b.n	8005bfc <__sflush_r+0x1c>
 8005c78:	6a21      	ldr	r1, [r4, #32]
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	1c41      	adds	r1, r0, #1
 8005c82:	d1c7      	bne.n	8005c14 <__sflush_r+0x34>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c4      	beq.n	8005c14 <__sflush_r+0x34>
 8005c8a:	2b1d      	cmp	r3, #29
 8005c8c:	d001      	beq.n	8005c92 <__sflush_r+0xb2>
 8005c8e:	2b16      	cmp	r3, #22
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0xb6>
 8005c92:	602f      	str	r7, [r5, #0]
 8005c94:	e7b1      	b.n	8005bfa <__sflush_r+0x1a>
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	e7ad      	b.n	8005bfc <__sflush_r+0x1c>
 8005ca0:	690f      	ldr	r7, [r1, #16]
 8005ca2:	2f00      	cmp	r7, #0
 8005ca4:	d0a9      	beq.n	8005bfa <__sflush_r+0x1a>
 8005ca6:	0793      	lsls	r3, r2, #30
 8005ca8:	680e      	ldr	r6, [r1, #0]
 8005caa:	bf08      	it	eq
 8005cac:	694b      	ldreq	r3, [r1, #20]
 8005cae:	600f      	str	r7, [r1, #0]
 8005cb0:	bf18      	it	ne
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	eba6 0807 	sub.w	r8, r6, r7
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	dd9c      	ble.n	8005bfa <__sflush_r+0x1a>
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4628      	mov	r0, r5
 8005cca:	47b0      	blx	r6
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	dc06      	bgt.n	8005cde <__sflush_r+0xfe>
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cdc:	e78e      	b.n	8005bfc <__sflush_r+0x1c>
 8005cde:	4407      	add	r7, r0
 8005ce0:	eba8 0800 	sub.w	r8, r8, r0
 8005ce4:	e7e9      	b.n	8005cba <__sflush_r+0xda>
 8005ce6:	bf00      	nop
 8005ce8:	20400001 	.word	0x20400001

08005cec <_fflush_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	690b      	ldr	r3, [r1, #16]
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b913      	cbnz	r3, 8005cfc <_fflush_r+0x10>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	b118      	cbz	r0, 8005d06 <_fflush_r+0x1a>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <_fflush_r+0x1a>
 8005d02:	f7ff faad 	bl	8005260 <__sinit>
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <_fflush_r+0x6c>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d11b      	bne.n	8005d44 <_fflush_r+0x58>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ef      	beq.n	8005cf6 <_fflush_r+0xa>
 8005d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d404      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d1c:	0599      	lsls	r1, r3, #22
 8005d1e:	d402      	bmi.n	8005d26 <_fflush_r+0x3a>
 8005d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d22:	f7ff fb3b 	bl	800539c <__retarget_lock_acquire_recursive>
 8005d26:	4628      	mov	r0, r5
 8005d28:	4621      	mov	r1, r4
 8005d2a:	f7ff ff59 	bl	8005be0 <__sflush_r>
 8005d2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d30:	07da      	lsls	r2, r3, #31
 8005d32:	4605      	mov	r5, r0
 8005d34:	d4e0      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	059b      	lsls	r3, r3, #22
 8005d3a:	d4dd      	bmi.n	8005cf8 <_fflush_r+0xc>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f7ff fb2e 	bl	800539e <__retarget_lock_release_recursive>
 8005d42:	e7d9      	b.n	8005cf8 <_fflush_r+0xc>
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_fflush_r+0x70>)
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d101      	bne.n	8005d4e <_fflush_r+0x62>
 8005d4a:	68ac      	ldr	r4, [r5, #8]
 8005d4c:	e7df      	b.n	8005d0e <_fflush_r+0x22>
 8005d4e:	4b04      	ldr	r3, [pc, #16]	; (8005d60 <_fflush_r+0x74>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	bf08      	it	eq
 8005d54:	68ec      	ldreq	r4, [r5, #12]
 8005d56:	e7da      	b.n	8005d0e <_fflush_r+0x22>
 8005d58:	08005f68 	.word	0x08005f68
 8005d5c:	08005f88 	.word	0x08005f88
 8005d60:	08005f48 	.word	0x08005f48

08005d64 <_lseek_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4d07      	ldr	r5, [pc, #28]	; (8005d84 <_lseek_r+0x20>)
 8005d68:	4604      	mov	r4, r0
 8005d6a:	4608      	mov	r0, r1
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	2200      	movs	r2, #0
 8005d70:	602a      	str	r2, [r5, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f7fa ffd2 	bl	8000d1c <_lseek>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d102      	bne.n	8005d82 <_lseek_r+0x1e>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	b103      	cbz	r3, 8005d82 <_lseek_r+0x1e>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	2000013c 	.word	0x2000013c

08005d88 <__swhatbuf_r>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d90:	2900      	cmp	r1, #0
 8005d92:	b096      	sub	sp, #88	; 0x58
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	da08      	bge.n	8005dac <__swhatbuf_r+0x24>
 8005d9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	061a      	lsls	r2, r3, #24
 8005da4:	d410      	bmi.n	8005dc8 <__swhatbuf_r+0x40>
 8005da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005daa:	e00e      	b.n	8005dca <__swhatbuf_r+0x42>
 8005dac:	466a      	mov	r2, sp
 8005dae:	f000 f863 	bl	8005e78 <_fstat_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	dbf1      	blt.n	8005d9a <__swhatbuf_r+0x12>
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dc0:	425a      	negs	r2, r3
 8005dc2:	415a      	adcs	r2, r3
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	e7ee      	b.n	8005da6 <__swhatbuf_r+0x1e>
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	2000      	movs	r0, #0
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	b016      	add	sp, #88	; 0x58
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dd4 <__smakebuf_r>:
 8005dd4:	898b      	ldrh	r3, [r1, #12]
 8005dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dd8:	079d      	lsls	r5, r3, #30
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	d507      	bpl.n	8005df0 <__smakebuf_r+0x1c>
 8005de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	2301      	movs	r3, #1
 8005dea:	6163      	str	r3, [r4, #20]
 8005dec:	b002      	add	sp, #8
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	ab01      	add	r3, sp, #4
 8005df2:	466a      	mov	r2, sp
 8005df4:	f7ff ffc8 	bl	8005d88 <__swhatbuf_r>
 8005df8:	9900      	ldr	r1, [sp, #0]
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7ff f93b 	bl	8005078 <_malloc_r>
 8005e02:	b948      	cbnz	r0, 8005e18 <__smakebuf_r+0x44>
 8005e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e08:	059a      	lsls	r2, r3, #22
 8005e0a:	d4ef      	bmi.n	8005dec <__smakebuf_r+0x18>
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	e7e3      	b.n	8005de0 <__smakebuf_r+0xc>
 8005e18:	4b0d      	ldr	r3, [pc, #52]	; (8005e50 <__smakebuf_r+0x7c>)
 8005e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	6020      	str	r0, [r4, #0]
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	9b00      	ldr	r3, [sp, #0]
 8005e28:	6163      	str	r3, [r4, #20]
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	6120      	str	r0, [r4, #16]
 8005e2e:	b15b      	cbz	r3, 8005e48 <__smakebuf_r+0x74>
 8005e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 f831 	bl	8005e9c <_isatty_r>
 8005e3a:	b128      	cbz	r0, 8005e48 <__smakebuf_r+0x74>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	89a0      	ldrh	r0, [r4, #12]
 8005e4a:	4305      	orrs	r5, r0
 8005e4c:	81a5      	strh	r5, [r4, #12]
 8005e4e:	e7cd      	b.n	8005dec <__smakebuf_r+0x18>
 8005e50:	080051f9 	.word	0x080051f9

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	; (8005e74 <_read_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fa fefa 	bl	8000c5c <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	2000013c 	.word	0x2000013c

08005e78 <_fstat_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	; (8005e98 <_fstat_r+0x20>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	f7fa ff2e 	bl	8000ce6 <_fstat>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d102      	bne.n	8005e94 <_fstat_r+0x1c>
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	b103      	cbz	r3, 8005e94 <_fstat_r+0x1c>
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	bd38      	pop	{r3, r4, r5, pc}
 8005e96:	bf00      	nop
 8005e98:	2000013c 	.word	0x2000013c

08005e9c <_isatty_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d06      	ldr	r5, [pc, #24]	; (8005eb8 <_isatty_r+0x1c>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	f7fa ff2d 	bl	8000d06 <_isatty>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_isatty_r+0x1a>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_isatty_r+0x1a>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	2000013c 	.word	0x2000013c

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
