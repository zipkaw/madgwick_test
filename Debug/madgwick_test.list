
madgwick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006124  08006124  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800612c  0800612c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800612c  0800612c  0001612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000140  20000140  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001424d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002715  00000000  00000000  000342ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00036a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227ce  00000000  00000000  00038c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000119e9  00000000  00000000  0005b43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca3de  00000000  00000000  0006ce27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137205  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051ac  00000000  00000000  00137258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006004 	.word	0x08006004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006004 	.word	0x08006004

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <i3g4250d_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t i3g4250d_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af04      	add	r7, sp, #16
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	607a      	str	r2, [r7, #4]
 800057e:	461a      	mov	r2, r3
 8000580:	460b      	mov	r3, r1
 8000582:	72fb      	strb	r3, [r7, #11]
 8000584:	4613      	mov	r3, r2
 8000586:	813b      	strh	r3, [r7, #8]

	halstatus = HAL_I2C_Mem_Write(handle, I3G4250D_I2C_ADD_L, reg,
 8000588:	7afb      	ldrb	r3, [r7, #11]
 800058a:	b29a      	uxth	r2, r3
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	9302      	str	r3, [sp, #8]
 8000592:	893b      	ldrh	r3, [r7, #8]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2301      	movs	r3, #1
 800059c:	21d1      	movs	r1, #209	; 0xd1
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f001 f974 	bl	800188c <HAL_I2C_Mem_Write>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <i3g4250d_write+0x50>)
 80005aa:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <i3g4250d_write+0x50>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <i3g4250d_write+0x46>
			return -1;
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b8:	e000      	b.n	80005bc <i3g4250d_write+0x48>
		}
		return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <i3g4250d_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
int32_t i3g4250d_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	461a      	mov	r2, r3
 80005d4:	460b      	mov	r3, r1
 80005d6:	72fb      	strb	r3, [r7, #11]
 80005d8:	4613      	mov	r3, r2
 80005da:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, I3G4250D_I2C_ADD_L, reg,
 80005dc:	7afb      	ldrb	r3, [r7, #11]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	21d1      	movs	r1, #209	; 0xd1
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f001 fa44 	bl	8001a80 <HAL_I2C_Mem_Read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <i3g4250d_read+0x50>)
 80005fe:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <i3g4250d_read+0x50>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <i3g4250d_read+0x46>
		return -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	e000      	b.n	8000610 <i3g4250d_read+0x48>
	}
	return 0;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000008c 	.word	0x2000008c

0800061c <configure_i3g4250d>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_i3g4250d(void *handle)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = i3g4250d_write;
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <configure_i3g4250d+0x70>)
 8000626:	613b      	str	r3, [r7, #16]
	dev_ctx.read_reg = i3g4250d_read;
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <configure_i3g4250d+0x74>)
 800062a:	617b      	str	r3, [r7, #20]
	dev_ctx.handle = handle;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	61fb      	str	r3, [r7, #28]

	uint8_t who_iam;
	i3g4250d_device_id_get(&dev_ctx, &who_iam);
 8000630:	f107 020f 	add.w	r2, r7, #15
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fcae 	bl	8004f9c <i3g4250d_device_id_get>
	if(who_iam != I3G4250D_ID){
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2bd3      	cmp	r3, #211	; 0xd3
 8000644:	d002      	beq.n	800064c <configure_i3g4250d+0x30>
		return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064a:	e01a      	b.n	8000682 <configure_i3g4250d+0x66>
	}

	int32_t ret;
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
 8000650:	e013      	b.n	800067a <configure_i3g4250d+0x5e>
		ret = dev_ctx.write_reg(handle, I3G4250D_REGs_ADDR_conf[i], I3G4250D_REGs_VAL_conf + i, 1);
 8000652:	693c      	ldr	r4, [r7, #16]
 8000654:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <configure_i3g4250d+0x78>)
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	4413      	add	r3, r2
 800065a:	7819      	ldrb	r1, [r3, #0]
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <configure_i3g4250d+0x7c>)
 8000660:	441a      	add	r2, r3
 8000662:	2301      	movs	r3, #1
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	47a0      	blx	r4
 8000668:	6278      	str	r0, [r7, #36]	; 0x24
		if(ret != 0)
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <configure_i3g4250d+0x58>
		{
			return ret;
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	e006      	b.n	8000682 <configure_i3g4250d+0x66>
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	3301      	adds	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
 800067a:	6a3b      	ldr	r3, [r7, #32]
 800067c:	2b05      	cmp	r3, #5
 800067e:	dde8      	ble.n	8000652 <configure_i3g4250d+0x36>
		}
	}
	return ret;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000682:	4618      	mov	r0, r3
 8000684:	372c      	adds	r7, #44	; 0x2c
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	bf00      	nop
 800068c:	08000575 	.word	0x08000575
 8000690:	080005c9 	.word	0x080005c9
 8000694:	08006040 	.word	0x08006040
 8000698:	08006048 	.word	0x08006048

0800069c <lis331dlh_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis331dlh_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	461a      	mov	r2, r3
 80006a8:	460b      	mov	r3, r1
 80006aa:	72fb      	strb	r3, [r7, #11]
 80006ac:	4613      	mov	r3, r2
 80006ae:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 80006b0:	7afb      	ldrb	r3, [r7, #11]
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	893b      	ldrh	r3, [r7, #8]
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	2131      	movs	r1, #49	; 0x31
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	f001 f8e0 	bl	800188c <HAL_I2C_Mem_Write>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <lis331dlh_write+0x50>)
 80006d2:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <lis331dlh_write+0x50>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <lis331dlh_write+0x46>
			return -1;
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e0:	e000      	b.n	80006e4 <lis331dlh_write+0x48>
		}
		return 0;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000008d 	.word	0x2000008d

080006f0 <lis331dlh_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis331dlh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af04      	add	r7, sp, #16
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	607a      	str	r2, [r7, #4]
 80006fa:	461a      	mov	r2, r3
 80006fc:	460b      	mov	r3, r1
 80006fe:	72fb      	strb	r3, [r7, #11]
 8000700:	4613      	mov	r3, r2
 8000702:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	b29a      	uxth	r2, r3
 8000708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	893b      	ldrh	r3, [r7, #8]
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	2131      	movs	r1, #49	; 0x31
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f001 f9b0 	bl	8001a80 <HAL_I2C_Mem_Read>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <lis331dlh_read+0x50>)
 8000726:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <lis331dlh_read+0x50>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <lis331dlh_read+0x46>
		return -1;
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000734:	e000      	b.n	8000738 <lis331dlh_read+0x48>
	}
	return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000008d 	.word	0x2000008d

08000744 <configure_lis331dlh>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis331dlh(void *handle)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b08b      	sub	sp, #44	; 0x2c
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = lis331dlh_write;
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <configure_lis331dlh+0xac>)
 800074e:	60fb      	str	r3, [r7, #12]
	dev_ctx.read_reg = lis331dlh_read;
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <configure_lis331dlh+0xb0>)
 8000752:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = handle;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	61bb      	str	r3, [r7, #24]

	uint8_t who_iam;
	lis331dlh_device_id_get(&dev_ctx, &who_iam);
 8000758:	f107 020b 	add.w	r2, r7, #11
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fc43 	bl	8004fee <lis331dlh_device_id_get>
	if(who_iam != LIS331DLH_ID){
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	2b32      	cmp	r3, #50	; 0x32
 800076c:	d002      	beq.n	8000774 <configure_lis331dlh+0x30>
		return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000772:	e038      	b.n	80007e6 <configure_lis331dlh+0xa2>
	}

	int32_t ret;
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
 8000778:	e031      	b.n	80007de <configure_lis331dlh+0x9a>
		if(LIS331DLH_REGs_ADDR_conf[i] == LIS331DLH_HP_FILTER_RESET){
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <configure_lis331dlh+0xb4>)
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b25      	cmp	r3, #37	; 0x25
 8000784:	d116      	bne.n	80007b4 <configure_lis331dlh+0x70>
			uint8_t *empty_buff = (uint8_t*)malloc(sizeof(uint8_t));
 8000786:	2001      	movs	r0, #1
 8000788:	f004 fc96 	bl	80050b8 <malloc>
 800078c:	4603      	mov	r3, r0
 800078e:	61fb      	str	r3, [r7, #28]
			ret = dev_ctx.read_reg(handle, LIS331DLH_REGs_ADDR_conf[i], empty_buff, 1);
 8000790:	693c      	ldr	r4, [r7, #16]
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <configure_lis331dlh+0xb4>)
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	4413      	add	r3, r2
 8000798:	7819      	ldrb	r1, [r3, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	47a0      	blx	r4
 80007a2:	6238      	str	r0, [r7, #32]
			free(empty_buff);
 80007a4:	69f8      	ldr	r0, [r7, #28]
 80007a6:	f004 fc8f 	bl	80050c8 <free>
			if(ret != 0)
 80007aa:	6a3b      	ldr	r3, [r7, #32]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d012      	beq.n	80007d6 <configure_lis331dlh+0x92>
			{
				return ret;
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	e018      	b.n	80007e6 <configure_lis331dlh+0xa2>
			}
			continue;
		}
		ret = dev_ctx.write_reg(handle, LIS331DLH_REGs_ADDR_conf[i], LIS331DLH_REGs_VAL_conf + i, 1);
 80007b4:	68fc      	ldr	r4, [r7, #12]
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <configure_lis331dlh+0xb4>)
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	4413      	add	r3, r2
 80007bc:	7819      	ldrb	r1, [r3, #0]
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <configure_lis331dlh+0xb8>)
 80007c2:	441a      	add	r2, r3
 80007c4:	2301      	movs	r3, #1
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	47a0      	blx	r4
 80007ca:	6238      	str	r0, [r7, #32]
		if(ret != 0)
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d002      	beq.n	80007d8 <configure_lis331dlh+0x94>
		{
			return ret;
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	e007      	b.n	80007e6 <configure_lis331dlh+0xa2>
			continue;
 80007d6:	bf00      	nop
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	3301      	adds	r3, #1
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
 80007de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e0:	2b0c      	cmp	r3, #12
 80007e2:	ddca      	ble.n	800077a <configure_lis331dlh+0x36>
		}
	}
	return 0;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	372c      	adds	r7, #44	; 0x2c
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	0800069d 	.word	0x0800069d
 80007f4:	080006f1 	.word	0x080006f1
 80007f8:	08006050 	.word	0x08006050
 80007fc:	08006060 	.word	0x08006060

08000800 <lis3mdl_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis3mdl_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af04      	add	r7, sp, #16
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	461a      	mov	r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	72fb      	strb	r3, [r7, #11]
 8000810:	4613      	mov	r3, r2
 8000812:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS3MDL_I2C_ADD_L, reg,
 8000814:	7afb      	ldrb	r3, [r7, #11]
 8000816:	b29a      	uxth	r2, r3
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	893b      	ldrh	r3, [r7, #8]
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	2139      	movs	r1, #57	; 0x39
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f001 f82e 	bl	800188c <HAL_I2C_Mem_Write>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <lis3mdl_write+0x50>)
 8000836:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <lis3mdl_write+0x50>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <lis3mdl_write+0x46>
			return -1;
 8000840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000844:	e000      	b.n	8000848 <lis3mdl_write+0x48>
		}
		return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000008e 	.word	0x2000008e

08000854 <lis3mdl_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis3mdl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af04      	add	r7, sp, #16
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	461a      	mov	r2, r3
 8000860:	460b      	mov	r3, r1
 8000862:	72fb      	strb	r3, [r7, #11]
 8000864:	4613      	mov	r3, r2
 8000866:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS3MDL_I2C_ADD_L, reg,
 8000868:	7afb      	ldrb	r3, [r7, #11]
 800086a:	b29a      	uxth	r2, r3
 800086c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	893b      	ldrh	r3, [r7, #8]
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	2139      	movs	r1, #57	; 0x39
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f001 f8fe 	bl	8001a80 <HAL_I2C_Mem_Read>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <lis3mdl_read+0x50>)
 800088a:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <lis3mdl_read+0x50>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <lis3mdl_read+0x46>
		return -1;
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000898:	e000      	b.n	800089c <lis3mdl_read+0x48>
	}
	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000008e 	.word	0x2000008e

080008a8 <configure_lis3mdl>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis3mdl(void *handle)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b08b      	sub	sp, #44	; 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = lis3mdl_write;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <configure_lis3mdl+0x70>)
 80008b2:	613b      	str	r3, [r7, #16]
	dev_ctx.read_reg = lis3mdl_read;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <configure_lis3mdl+0x74>)
 80008b6:	617b      	str	r3, [r7, #20]
	dev_ctx.handle = handle;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	61fb      	str	r3, [r7, #28]

	uint8_t who_iam;
	lis3mdl_device_id_get(&dev_ctx, &who_iam);
 80008bc:	f107 020f 	add.w	r2, r7, #15
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fbba 	bl	8005040 <lis3mdl_device_id_get>
	if(who_iam != LIS3MDL_ID){
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	2b3d      	cmp	r3, #61	; 0x3d
 80008d0:	d002      	beq.n	80008d8 <configure_lis3mdl+0x30>
		return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d6:	e01a      	b.n	800090e <configure_lis3mdl+0x66>
	}

	int32_t ret;
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
 80008dc:	e013      	b.n	8000906 <configure_lis3mdl+0x5e>
		ret = dev_ctx.write_reg(handle, LIS3MDL_REGs_ADDR_conf[i], LIS3MDL_REGs_VAL_conf + i, 1);
 80008de:	693c      	ldr	r4, [r7, #16]
 80008e0:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <configure_lis3mdl+0x78>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	4413      	add	r3, r2
 80008e6:	7819      	ldrb	r1, [r3, #0]
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <configure_lis3mdl+0x7c>)
 80008ec:	441a      	add	r2, r3
 80008ee:	2301      	movs	r3, #1
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	47a0      	blx	r4
 80008f4:	6238      	str	r0, [r7, #32]
		if(ret != 0)
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <configure_lis3mdl+0x58>
		{
			return ret;
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	e006      	b.n	800090e <configure_lis3mdl+0x66>
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	3301      	adds	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	2b02      	cmp	r3, #2
 800090a:	dde8      	ble.n	80008de <configure_lis3mdl+0x36>
		}
	}
	return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	372c      	adds	r7, #44	; 0x2c
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	08000801 	.word	0x08000801
 800091c:	08000855 	.word	0x08000855
 8000920:	0800606c 	.word	0x0800606c
 8000924:	08006070 	.word	0x08006070

08000928 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000936:	2201      	movs	r2, #1
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <__io_putchar+0x20>)
 800093a:	f003 ffa2 	bl	8004882 <HAL_UART_Transmit>
  return ch;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000e4 	.word	0x200000e4

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 fb07 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f829 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f8dd 	bl	8000b18 <MX_GPIO_Init>
  MX_I2C1_Init();
 800095e:	f000 f883 	bl	8000a68 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000962:	f000 f8af 	bl	8000ac4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int32_t ret;
  ret = configure_lis331dlh(&hi2c1);
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <main+0x58>)
 8000968:	f7ff feec 	bl	8000744 <configure_lis331dlh>
 800096c:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <main+0x2c>
  {
	  Error_Handler();
 8000974:	f000 f906 	bl	8000b84 <Error_Handler>
  }

  ret = configure_i3g4250d(&hi2c1);
 8000978:	480a      	ldr	r0, [pc, #40]	; (80009a4 <main+0x58>)
 800097a:	f7ff fe4f 	bl	800061c <configure_i3g4250d>
 800097e:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <main+0x3e>
  {
	 Error_Handler();
 8000986:	f000 f8fd 	bl	8000b84 <Error_Handler>
  }

  ret = configure_lis3mdl(&hi2c1);
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <main+0x58>)
 800098c:	f7ff ff8c 	bl	80008a8 <configure_lis3mdl>
 8000990:	6078      	str	r0, [r7, #4]
  if(ret != 0)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <main+0x50>
  {
    Error_Handler();
 8000998:	f000 f8f4 	bl	8000b84 <Error_Handler>
  }
  printf("All devices are up");
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <main+0x5c>)
 800099e:	f004 fc83 	bl	80052a8 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x56>
 80009a4:	20000090 	.word	0x20000090
 80009a8:	0800601c 	.word	0x0800601c

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fb8c 	bl	80050d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <SystemClock_Config+0xb4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemClock_Config+0xb4>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemClock_Config+0xb4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <SystemClock_Config+0xb8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <SystemClock_Config+0xb8>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <SystemClock_Config+0xb8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	2310      	movs	r3, #16
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fa8b 	bl	8003f38 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a28:	f000 f8ac 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fcee 	bl	8004428 <HAL_RCC_ClockConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a52:	f000 f897 	bl	8000b84 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	3750      	adds	r7, #80	; 0x50
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_I2C1_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2C1_Init+0x50>)
 8000aa6:	f000 fdad 	bl	8001604 <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 f868 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000090 	.word	0x20000090
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_USART2_UART_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART2_UART_Init+0x4c>)
 8000afc:	f003 fe74 	bl	80047e8 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f83d 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000e4 	.word	0x200000e4
 8000b14:	40004400 	.word	0x40004400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x68>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error occurred");
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <Error_Handler+0x10>)
 8000b8e:	f004 fb8b 	bl	80052a8 <iprintf>
 8000b92:	e7fb      	b.n	8000b8c <Error_Handler+0x8>
 8000b94:	08006030 	.word	0x08006030

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <HAL_I2C_MspInit+0xa4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d13b      	bne.n	8000c82 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c26:	23c0      	movs	r3, #192	; 0xc0
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2a:	2312      	movs	r3, #18
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c36:	2304      	movs	r3, #4
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <HAL_I2C_MspInit+0xac>)
 8000c42:	f000 fb43 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_I2C_MspInit+0xa8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201f      	movs	r0, #31
 8000c68:	f000 fac9 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c6c:	201f      	movs	r0, #31
 8000c6e:	f000 fae2 	bl	8001236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2020      	movs	r0, #32
 8000c78:	f000 fac1 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c7c:	2020      	movs	r0, #32
 8000c7e:	f000 fada 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 fadd 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f948 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <I2C1_EV_IRQHandler+0x10>)
 8000d82:	f001 f8a3 	bl	8001ecc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000090 	.word	0x20000090

08000d90 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <I2C1_ER_IRQHandler+0x10>)
 8000d96:	f001 fa0a 	bl	80021ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000090 	.word	0x20000090

08000da4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	e00a      	b.n	8000dcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db6:	f3af 8000 	nop.w
 8000dba:	4601      	mov	r1, r0
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	b2ca      	uxtb	r2, r1
 8000dc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dbf0      	blt.n	8000db6 <_read+0x12>
  }

  return len;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	60f8      	str	r0, [r7, #12]
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e009      	b.n	8000e04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fd95 	bl	8000928 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf1      	blt.n	8000df0 <_write+0x12>
  }
  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_close>:

int _close(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_isatty>:

int _isatty(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f004 f8d8 	bl	8005064 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20020000 	.word	0x20020000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000128 	.word	0x20000128
 8000ee8:	20000140 	.word	0x20000140

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f2c:	4c0b      	ldr	r4, [pc, #44]	; (8000f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3a:	f7ff ffd7 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f004 f897 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fd03 	bl	800094c <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f54:	08006134 	.word	0x08006134
  ldr r2, =_sbss
 8000f58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f5c:	20000140 	.word	0x20000140

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_Init+0x40>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_Init+0x40>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x40>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f92b 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fdfe 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f943 	bl	8001252 <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe4:	f000 f90b 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	2000012c 	.word	0x2000012c

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000012c 	.word	0x2000012c

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d004      	beq.n	8001288 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e00c      	b.n	80012a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2205      	movs	r2, #5
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e12b      	b.n	800186e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fadc 	bl	8000be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	; 0x24
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001668:	f003 f896 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a81      	ldr	r2, [pc, #516]	; (8001878 <HAL_I2C_Init+0x274>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d807      	bhi.n	8001688 <HAL_I2C_Init+0x84>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a80      	ldr	r2, [pc, #512]	; (800187c <HAL_I2C_Init+0x278>)
 800167c:	4293      	cmp	r3, r2
 800167e:	bf94      	ite	ls
 8001680:	2301      	movls	r3, #1
 8001682:	2300      	movhi	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	e006      	b.n	8001696 <HAL_I2C_Init+0x92>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a7d      	ldr	r2, [pc, #500]	; (8001880 <HAL_I2C_Init+0x27c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	bf94      	ite	ls
 8001690:	2301      	movls	r3, #1
 8001692:	2300      	movhi	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0e7      	b.n	800186e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4a78      	ldr	r2, [pc, #480]	; (8001884 <HAL_I2C_Init+0x280>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0c9b      	lsrs	r3, r3, #18
 80016a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_I2C_Init+0x274>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d802      	bhi.n	80016d8 <HAL_I2C_Init+0xd4>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3301      	adds	r3, #1
 80016d6:	e009      	b.n	80016ec <HAL_I2C_Init+0xe8>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	4a69      	ldr	r2, [pc, #420]	; (8001888 <HAL_I2C_Init+0x284>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	3301      	adds	r3, #1
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	495c      	ldr	r1, [pc, #368]	; (8001878 <HAL_I2C_Init+0x274>)
 8001708:	428b      	cmp	r3, r1
 800170a:	d819      	bhi.n	8001740 <HAL_I2C_Init+0x13c>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1e59      	subs	r1, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fbb1 f3f3 	udiv	r3, r1, r3
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001720:	400b      	ands	r3, r1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <HAL_I2C_Init+0x138>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1e59      	subs	r1, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fbb1 f3f3 	udiv	r3, r1, r3
 8001734:	3301      	adds	r3, #1
 8001736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173a:	e051      	b.n	80017e0 <HAL_I2C_Init+0x1dc>
 800173c:	2304      	movs	r3, #4
 800173e:	e04f      	b.n	80017e0 <HAL_I2C_Init+0x1dc>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d111      	bne.n	800176c <HAL_I2C_Init+0x168>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e58      	subs	r0, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	440b      	add	r3, r1
 8001756:	fbb0 f3f3 	udiv	r3, r0, r3
 800175a:	3301      	adds	r3, #1
 800175c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001760:	2b00      	cmp	r3, #0
 8001762:	bf0c      	ite	eq
 8001764:	2301      	moveq	r3, #1
 8001766:	2300      	movne	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	e012      	b.n	8001792 <HAL_I2C_Init+0x18e>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e58      	subs	r0, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	0099      	lsls	r1, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001782:	3301      	adds	r3, #1
 8001784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Init+0x196>
 8001796:	2301      	movs	r3, #1
 8001798:	e022      	b.n	80017e0 <HAL_I2C_Init+0x1dc>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10e      	bne.n	80017c0 <HAL_I2C_Init+0x1bc>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1e58      	subs	r0, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6859      	ldr	r1, [r3, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	440b      	add	r3, r1
 80017b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017be:	e00f      	b.n	80017e0 <HAL_I2C_Init+0x1dc>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	0099      	lsls	r1, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d6:	3301      	adds	r3, #1
 80017d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	6809      	ldr	r1, [r1, #0]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800180e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6911      	ldr	r1, [r2, #16]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	68d2      	ldr	r2, [r2, #12]
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	000186a0 	.word	0x000186a0
 800187c:	001e847f 	.word	0x001e847f
 8001880:	003d08ff 	.word	0x003d08ff
 8001884:	431bde83 	.word	0x431bde83
 8001888:	10624dd3 	.word	0x10624dd3

0800188c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	460b      	mov	r3, r1
 80018a0:	813b      	strh	r3, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fbc3 	bl	8001030 <HAL_GetTick>
 80018aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	f040 80d9 	bne.w	8001a6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2319      	movs	r3, #25
 80018c0:	2201      	movs	r2, #1
 80018c2:	496d      	ldr	r1, [pc, #436]	; (8001a78 <HAL_I2C_Mem_Write+0x1ec>)
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f002 f90d 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0cc      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_I2C_Mem_Write+0x56>
 80018de:	2302      	movs	r3, #2
 80018e0:	e0c5      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d007      	beq.n	8001908 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2221      	movs	r2, #33	; 0x21
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <HAL_I2C_Mem_Write+0x1f0>)
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800194a:	88f8      	ldrh	r0, [r7, #6]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4603      	mov	r3, r0
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f001 fe9c 	bl	8003698 <I2C_RequestMemoryWrite>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d052      	beq.n	8001a0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e081      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f002 f98e 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2b04      	cmp	r3, #4
 8001980:	d107      	bne.n	8001992 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e06b      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d11b      	bne.n	8001a0c <HAL_I2C_Mem_Write+0x180>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1aa      	bne.n	800196a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f002 f97a 	bl	8003d12 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00d      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e016      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
  }
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	00100002 	.word	0x00100002
 8001a7c:	ffff0000 	.word	0xffff0000

08001a80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	817b      	strh	r3, [r7, #10]
 8001a92:	460b      	mov	r3, r1
 8001a94:	813b      	strh	r3, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a9a:	f7ff fac9 	bl	8001030 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b20      	cmp	r3, #32
 8001aaa:	f040 8208 	bne.w	8001ebe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2319      	movs	r3, #25
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	497b      	ldr	r1, [pc, #492]	; (8001ca4 <HAL_I2C_Mem_Read+0x224>)
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f002 f813 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e1fb      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_I2C_Mem_Read+0x56>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e1f4      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d007      	beq.n	8001afc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2222      	movs	r2, #34	; 0x22
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ca8 <HAL_I2C_Mem_Read+0x228>)
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b3e:	88f8      	ldrh	r0, [r7, #6]
 8001b40:	893a      	ldrh	r2, [r7, #8]
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f001 fe38 	bl	80037c4 <I2C_RequestMemoryRead>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1b0      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d113      	bne.n	8001b8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	623b      	str	r3, [r7, #32]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e184      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11b      	bne.n	8001bce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e164      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d11b      	bne.n	8001c0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	e144      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c24:	e138      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f200 80f1 	bhi.w	8001e12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d123      	bne.n	8001c80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f002 f8db 	bl	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e139      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c7e:	e10b      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d14e      	bne.n	8001d26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <HAL_I2C_Mem_Read+0x22c>)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f001 ff26 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e10e      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
 8001ca2:	bf00      	nop
 8001ca4:	00100002 	.word	0x00100002
 8001ca8:	ffff0000 	.word	0xffff0000
 8001cac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d24:	e0b8      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4966      	ldr	r1, [pc, #408]	; (8001ec8 <HAL_I2C_Mem_Read+0x448>)
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f001 fed7 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0bf      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	494f      	ldr	r1, [pc, #316]	; (8001ec8 <HAL_I2C_Mem_Read+0x448>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f001 fea9 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e091      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e10:	e042      	b.n	8001e98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f001 ffee 	bl	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e04c      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d118      	bne.n	8001e98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f aec2 	bne.w	8001c26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	00010004 	.word	0x00010004

08001ecc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d003      	beq.n	8001f04 <HAL_I2C_EV_IRQHandler+0x38>
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	f040 80c1 	bne.w	8002086 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <HAL_I2C_EV_IRQHandler+0x6e>
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f24:	d003      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x62>
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_EV_IRQHandler+0x66>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_I2C_EV_IRQHandler+0x68>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f000 8132 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00c      	beq.n	8001f5e <HAL_I2C_EV_IRQHandler+0x92>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	0a5b      	lsrs	r3, r3, #9
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f001 ffd6 	bl	8003f02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fd83 	bl	8002a62 <I2C_Master_SB>
 8001f5c:	e092      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_I2C_EV_IRQHandler+0xb2>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	0a5b      	lsrs	r3, r3, #9
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fdf9 	bl	8002b6e <I2C_Master_ADD10>
 8001f7c:	e082      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0xd2>
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	0a5b      	lsrs	r3, r3, #9
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fe13 	bl	8002bc2 <I2C_Master_ADDR>
 8001f9c:	e072      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03b      	beq.n	8002022 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb8:	f000 80f3 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	09db      	lsrs	r3, r3, #7
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00f      	beq.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	0a9b      	lsrs	r3, r3, #10
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9f3 	bl	80023cc <I2C_MasterTransmit_TXE>
 8001fe6:	e04d      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80d6 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	0a5b      	lsrs	r3, r3, #9
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80cf 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	2b21      	cmp	r3, #33	; 0x21
 8002008:	d103      	bne.n	8002012 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fa7a 	bl	8002504 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002010:	e0c7      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	f040 80c4 	bne.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fae8 	bl	80025f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002020:	e0bf      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800202c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002030:	f000 80b7 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00f      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x194>
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	0a9b      	lsrs	r3, r3, #10
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_I2C_EV_IRQHandler+0x194>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fb5d 	bl	8002718 <I2C_MasterReceive_RXNE>
 800205e:	e011      	b.n	8002084 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 809a 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	0a5b      	lsrs	r3, r3, #9
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8093 	beq.w	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fc06 	bl	800288e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002082:	e08e      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002084:	e08d      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e007      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_I2C_EV_IRQHandler+0x20e>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	0a5b      	lsrs	r3, r3, #9
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020d0:	69b9      	ldr	r1, [r7, #24]
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 ffc4 	bl	8003060 <I2C_Slave_ADDR>
 80020d8:	e066      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_I2C_EV_IRQHandler+0x22e>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	0a5b      	lsrs	r3, r3, #9
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fffe 	bl	80030f4 <I2C_Slave_STOPF>
 80020f8:	e056      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d002      	beq.n	8002106 <HAL_I2C_EV_IRQHandler+0x23a>
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b29      	cmp	r3, #41	; 0x29
 8002104:	d125      	bne.n	8002152 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	09db      	lsrs	r3, r3, #7
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00f      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x266>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	0a9b      	lsrs	r3, r3, #10
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x266>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 feda 	bl	8002ee4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002130:	e039      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d033      	beq.n	80021a6 <HAL_I2C_EV_IRQHandler+0x2da>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0a5b      	lsrs	r3, r3, #9
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02d      	beq.n	80021a6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 ff07 	bl	8002f5e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002150:	e029      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00f      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x2b2>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	0a9b      	lsrs	r3, r3, #10
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x2b2>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 ff12 	bl	8002fa0 <I2C_SlaveReceive_RXNE>
 800217c:	e014      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	0a5b      	lsrs	r3, r3, #9
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d008      	beq.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 ff40 	bl	800301c <I2C_SlaveReceive_BTF>
 800219c:	e004      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b08a      	sub	sp, #40	; 0x28
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <HAL_I2C_ER_IRQHandler+0x4e>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00e      	beq.n	8002226 <HAL_I2C_ER_IRQHandler+0x78>
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002224:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	0a9b      	lsrs	r3, r3, #10
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03f      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x104>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d039      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800223e:	7efb      	ldrb	r3, [r7, #27]
 8002240:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002258:	7ebb      	ldrb	r3, [r7, #26]
 800225a:	2b20      	cmp	r3, #32
 800225c:	d112      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xd6>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xd6>
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b21      	cmp	r3, #33	; 0x21
 8002268:	d008      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b29      	cmp	r3, #41	; 0x29
 800226e:	d005      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0xce>
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b28      	cmp	r3, #40	; 0x28
 8002274:	d106      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b21      	cmp	r3, #33	; 0x21
 800227a:	d103      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 f869 	bl	8003354 <I2C_Slave_AF>
 8002282:	e016      	b.n	80022b2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800228c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002296:	7efb      	ldrb	r3, [r7, #27]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d002      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0xf4>
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d107      	bne.n	80022b2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	0adb      	lsrs	r3, r3, #11
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00e      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0x12e>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f001 f8a0 	bl	8003434 <I2C_ITError>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
 8002358:	4613      	mov	r3, r2
 800235a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d150      	bne.n	8002494 <I2C_MasterTransmit_TXE+0xc8>
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b21      	cmp	r3, #33	; 0x21
 80023f6:	d14d      	bne.n	8002494 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d01d      	beq.n	800243a <I2C_MasterTransmit_TXE+0x6e>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b20      	cmp	r3, #32
 8002402:	d01a      	beq.n	800243a <I2C_MasterTransmit_TXE+0x6e>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800240a:	d016      	beq.n	800243a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800241a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2211      	movs	r2, #17
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff62 	bl	80022fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002438:	e060      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002448:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002458:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d107      	bne.n	8002484 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff7d 	bl	800237c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002482:	e03b      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff35 	bl	80022fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002492:	e033      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b21      	cmp	r3, #33	; 0x21
 8002498:	d005      	beq.n	80024a6 <I2C_MasterTransmit_TXE+0xda>
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d12d      	bne.n	80024fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b22      	cmp	r3, #34	; 0x22
 80024a4:	d12a      	bne.n	80024fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024c0:	e01c      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d103      	bne.n	80024d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f88e 	bl	80025f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80024d4:	e012      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024fa:	e7ff      	b.n	80024fc <I2C_MasterTransmit_TXE+0x130>
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b21      	cmp	r3, #33	; 0x21
 800251c:	d164      	bne.n	80025e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d012      	beq.n	800254e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800254c:	e04c      	b.n	80025e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d01d      	beq.n	8002590 <I2C_MasterTransmit_BTF+0x8c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b20      	cmp	r3, #32
 8002558:	d01a      	beq.n	8002590 <I2C_MasterTransmit_BTF+0x8c>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002560:	d016      	beq.n	8002590 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002570:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2211      	movs	r2, #17
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff feb7 	bl	80022fc <HAL_I2C_MasterTxCpltCallback>
}
 800258e:	e02b      	b.n	80025e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800259e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d107      	bne.n	80025da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fed2 	bl	800237c <HAL_I2C_MemTxCpltCallback>
}
 80025d8:	e006      	b.n	80025e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fe8a 	bl	80022fc <HAL_I2C_MasterTxCpltCallback>
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	2b00      	cmp	r3, #0
 8002606:	d11d      	bne.n	8002644 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10b      	bne.n	8002628 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002620:	1c9a      	adds	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002626:	e073      	b.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	b29b      	uxth	r3, r3
 800262e:	121b      	asrs	r3, r3, #8
 8002630:	b2da      	uxtb	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002642:	e065      	b.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10b      	bne.n	8002664 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	b2da      	uxtb	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002662:	e055      	b.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	2b02      	cmp	r3, #2
 800266a:	d151      	bne.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b22      	cmp	r3, #34	; 0x22
 8002670:	d10d      	bne.n	800268e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002680:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800268c:	e040      	b.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b21      	cmp	r3, #33	; 0x21
 800269c:	d112      	bne.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026c2:	e025      	b.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d120      	bne.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b21      	cmp	r3, #33	; 0x21
 80026d2:	d11d      	bne.n	8002710 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fe36 	bl	800237c <HAL_I2C_MemTxCpltCallback>
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b22      	cmp	r3, #34	; 0x22
 800272a:	f040 80ac 	bne.w	8002886 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d921      	bls.n	8002780 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b03      	cmp	r3, #3
 800276a:	f040 808c 	bne.w	8002886 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800277e:	e082      	b.n	8002886 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b02      	cmp	r3, #2
 8002786:	d075      	beq.n	8002874 <I2C_MasterReceive_RXNE+0x15c>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d002      	beq.n	8002794 <I2C_MasterReceive_RXNE+0x7c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d16f      	bne.n	8002874 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f001 fafd 	bl	8003d94 <I2C_WaitOnSTOPRequestThroughIT>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d142      	bne.n	8002826 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d10a      	bne.n	8002810 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fdc1 	bl	8002390 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800280e:	e03a      	b.n	8002886 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2212      	movs	r2, #18
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fd76 	bl	8002310 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002824:	e02f      	b.n	8002886 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002834:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fd99 	bl	80023a4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002872:	e008      	b.n	8002886 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002882:	605a      	str	r2, [r3, #4]
}
 8002884:	e7ff      	b.n	8002886 <I2C_MasterReceive_RXNE+0x16e>
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d11b      	bne.n	80028de <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028dc:	e0bd      	b.n	8002a5a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d129      	bne.n	800293c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00a      	beq.n	8002914 <I2C_MasterReceive_BTF+0x86>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d007      	beq.n	8002914 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800293a:	e08e      	b.n	8002a5a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d176      	bne.n	8002a34 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d002      	beq.n	8002952 <I2C_MasterReceive_BTF+0xc4>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b10      	cmp	r3, #16
 8002950:	d108      	bne.n	8002964 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e019      	b.n	8002998 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d002      	beq.n	8002970 <I2C_MasterReceive_BTF+0xe2>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d108      	bne.n	8002982 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e00a      	b.n	8002998 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b10      	cmp	r3, #16
 8002986:	d007      	beq.n	8002998 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d10a      	bne.n	8002a1e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fcba 	bl	8002390 <HAL_I2C_MemRxCpltCallback>
}
 8002a1c:	e01d      	b.n	8002a5a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2212      	movs	r2, #18
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fc6f 	bl	8002310 <HAL_I2C_MasterRxCpltCallback>
}
 8002a32:	e012      	b.n	8002a5a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d117      	bne.n	8002aa6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a8e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a90:	e067      	b.n	8002b62 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]
}
 8002aa4:	e05d      	b.n	8002b62 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aae:	d133      	bne.n	8002b18 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b21      	cmp	r3, #33	; 0x21
 8002aba:	d109      	bne.n	8002ad0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e008      	b.n	8002ae2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <I2C_Master_SB+0x92>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d108      	bne.n	8002b06 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d032      	beq.n	8002b62 <I2C_Master_SB+0x100>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02d      	beq.n	8002b62 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b14:	605a      	str	r2, [r3, #4]
}
 8002b16:	e024      	b.n	8002b62 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	11db      	asrs	r3, r3, #7
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 0306 	and.w	r3, r3, #6
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f063 030f 	orn	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]
}
 8002b3c:	e011      	b.n	8002b62 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d10d      	bne.n	8002b62 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	11db      	asrs	r3, r3, #7
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f003 0306 	and.w	r3, r3, #6
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f063 030e 	orn	r3, r3, #14
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	611a      	str	r2, [r3, #16]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <I2C_Master_ADD10+0x26>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00c      	beq.n	8002bb6 <I2C_Master_ADD10+0x48>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb4:	605a      	str	r2, [r3, #4]
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b091      	sub	sp, #68	; 0x44
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b22      	cmp	r3, #34	; 0x22
 8002bea:	f040 8169 	bne.w	8002ec0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <I2C_Master_ADDR+0x54>
 8002bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10b      	bne.n	8002c16 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	e160      	b.n	8002ed8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11d      	bne.n	8002c5a <I2C_Master_ADDR+0x98>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c26:	d118      	bne.n	8002c5a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	651a      	str	r2, [r3, #80]	; 0x50
 8002c58:	e13e      	b.n	8002ed8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d113      	bne.n	8002c8c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e115      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	f040 808a 	bne.w	8002dac <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c9e:	d137      	bne.n	8002d10 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbe:	d113      	bne.n	8002ce8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	e0e7      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e0d3      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d02e      	beq.n	8002d74 <I2C_Master_ADDR+0x1b2>
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d02b      	beq.n	8002d74 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1e:	2b12      	cmp	r3, #18
 8002d20:	d102      	bne.n	8002d28 <I2C_Master_ADDR+0x166>
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d125      	bne.n	8002d74 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00e      	beq.n	8002d4c <I2C_Master_ADDR+0x18a>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d00b      	beq.n	8002d4c <I2C_Master_ADDR+0x18a>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d008      	beq.n	8002d4c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d5a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	e0a1      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e085      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d14d      	bne.n	8002e52 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d016      	beq.n	8002dea <I2C_Master_ADDR+0x228>
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d013      	beq.n	8002dea <I2C_Master_ADDR+0x228>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d010      	beq.n	8002dea <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e007      	b.n	8002dfa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e08:	d117      	bne.n	8002e3a <I2C_Master_ADDR+0x278>
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e10:	d00b      	beq.n	8002e2a <I2C_Master_ADDR+0x268>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d008      	beq.n	8002e2a <I2C_Master_ADDR+0x268>
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d005      	beq.n	8002e2a <I2C_Master_ADDR+0x268>
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d002      	beq.n	8002e2a <I2C_Master_ADDR+0x268>
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d107      	bne.n	8002e3a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e032      	b.n	8002eb8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e60:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e70:	d117      	bne.n	8002ea2 <I2C_Master_ADDR+0x2e0>
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e78:	d00b      	beq.n	8002e92 <I2C_Master_ADDR+0x2d0>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d008      	beq.n	8002e92 <I2C_Master_ADDR+0x2d0>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d005      	beq.n	8002e92 <I2C_Master_ADDR+0x2d0>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d002      	beq.n	8002e92 <I2C_Master_ADDR+0x2d0>
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d107      	bne.n	8002ea2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ebe:	e00b      	b.n	8002ed8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	e7ff      	b.n	8002ed8 <I2C_Master_ADDR+0x316>
 8002ed8:	bf00      	nop
 8002eda:	3744      	adds	r7, #68	; 0x44
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02b      	beq.n	8002f56 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d114      	bne.n	8002f56 <I2C_SlaveTransmit_TXE+0x72>
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b29      	cmp	r3, #41	; 0x29
 8002f30:	d111      	bne.n	8002f56 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2221      	movs	r2, #33	; 0x21
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2228      	movs	r2, #40	; 0x28
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff f9e7 	bl	8002324 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02c      	beq.n	8003014 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d114      	bne.n	8003014 <I2C_SlaveReceive_RXNE+0x74>
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b2a      	cmp	r3, #42	; 0x2a
 8002fee:	d111      	bne.n	8003014 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2222      	movs	r2, #34	; 0x22
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2228      	movs	r2, #40	; 0x28
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff f992 	bl	8002338 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800307a:	2b28      	cmp	r3, #40	; 0x28
 800307c:	d127      	bne.n	80030ce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	09db      	lsrs	r3, r3, #7
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	81bb      	strh	r3, [r7, #12]
 80030b0:	e002      	b.n	80030b8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030c0:	89ba      	ldrh	r2, [r7, #12]
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff f940 	bl	800234c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030cc:	e00e      	b.n	80030ec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80030ec:	bf00      	nop
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003112:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d172      	bne.n	8003238 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b22      	cmp	r3, #34	; 0x22
 8003156:	d002      	beq.n	800315e <I2C_Slave_STOPF+0x6a>
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b2a      	cmp	r3, #42	; 0x2a
 800315c:	d135      	bne.n	80031ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003190:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f889 	bl	80012ae <HAL_DMA_GetState>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d049      	beq.n	8003236 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	4a69      	ldr	r2, [pc, #420]	; (800334c <I2C_Slave_STOPF+0x258>)
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe f85b 	bl	800126a <HAL_DMA_Abort_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03d      	beq.n	8003236 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031c8:	e035      	b.n	8003236 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f043 0204 	orr.w	r2, r3, #4
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f853 	bl	80012ae <HAL_DMA_GetState>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d014      	beq.n	8003238 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	4a4e      	ldr	r2, [pc, #312]	; (800334c <I2C_Slave_STOPF+0x258>)
 8003214:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe f825 	bl	800126a <HAL_DMA_Abort_IT>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003230:	4610      	mov	r0, r2
 8003232:	4798      	blx	r3
 8003234:	e000      	b.n	8003238 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003236:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03e      	beq.n	80032c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b04      	cmp	r3, #4
 800324e:	d112      	bne.n	8003276 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d112      	bne.n	80032aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8b3 	bl	8003434 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032ce:	e039      	b.n	8003344 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b2a      	cmp	r3, #42	; 0x2a
 80032d4:	d109      	bne.n	80032ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2228      	movs	r2, #40	; 0x28
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff f827 	bl	8002338 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b28      	cmp	r3, #40	; 0x28
 80032f4:	d111      	bne.n	800331a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <I2C_Slave_STOPF+0x25c>)
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff f828 	bl	8002368 <HAL_I2C_ListenCpltCallback>
}
 8003318:	e014      	b.n	8003344 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	2b22      	cmp	r3, #34	; 0x22
 8003320:	d002      	beq.n	8003328 <I2C_Slave_STOPF+0x234>
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b22      	cmp	r3, #34	; 0x22
 8003326:	d10d      	bne.n	8003344 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fffa 	bl	8002338 <HAL_I2C_SlaveRxCpltCallback>
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	08003995 	.word	0x08003995
 8003350:	ffff0000 	.word	0xffff0000

08003354 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d002      	beq.n	8003376 <I2C_Slave_AF+0x22>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b20      	cmp	r3, #32
 8003374:	d129      	bne.n	80033ca <I2C_Slave_AF+0x76>
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b28      	cmp	r3, #40	; 0x28
 800337a:	d126      	bne.n	80033ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <I2C_Slave_AF+0xdc>)
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003390:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800339a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fe ffd0 	bl	8002368 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033c8:	e02e      	b.n	8003428 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b21      	cmp	r3, #33	; 0x21
 80033ce:	d126      	bne.n	800341e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <I2C_Slave_AF+0xdc>)
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2221      	movs	r2, #33	; 0x21
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003404:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003414:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe ff84 	bl	8002324 <HAL_I2C_SlaveTxCpltCallback>
}
 800341c:	e004      	b.n	8003428 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003426:	615a      	str	r2, [r3, #20]
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ffff0000 	.word	0xffff0000

08003434 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d002      	beq.n	8003458 <I2C_ITError+0x24>
 8003452:	7bbb      	ldrb	r3, [r7, #14]
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d10a      	bne.n	800346e <I2C_ITError+0x3a>
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b22      	cmp	r3, #34	; 0x22
 800345c:	d107      	bne.n	800346e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003474:	2b28      	cmp	r3, #40	; 0x28
 8003476:	d107      	bne.n	8003488 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2228      	movs	r2, #40	; 0x28
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003486:	e015      	b.n	80034b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d00a      	beq.n	80034ae <I2C_ITError+0x7a>
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b60      	cmp	r3, #96	; 0x60
 800349c:	d007      	beq.n	80034ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c2:	d162      	bne.n	800358a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d020      	beq.n	8003524 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	4a6a      	ldr	r2, [pc, #424]	; (8003690 <I2C_ITError+0x25c>)
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd febb 	bl	800126a <HAL_DMA_Abort_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8089 	beq.w	800360e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800351e:	4610      	mov	r0, r2
 8003520:	4798      	blx	r3
 8003522:	e074      	b.n	800360e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	4a59      	ldr	r2, [pc, #356]	; (8003690 <I2C_ITError+0x25c>)
 800352a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fe9a 	bl	800126a <HAL_DMA_Abort_IT>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d068      	beq.n	800360e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d10b      	bne.n	8003562 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003584:	4610      	mov	r0, r2
 8003586:	4798      	blx	r3
 8003588:	e041      	b.n	800360e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b60      	cmp	r3, #96	; 0x60
 8003594:	d125      	bne.n	80035e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d10b      	bne.n	80035ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe feec 	bl	80023b8 <HAL_I2C_AbortCpltCallback>
 80035e0:	e015      	b.n	800360e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d10b      	bne.n	8003608 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fe fecb 	bl	80023a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10e      	bne.n	800363c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d113      	bne.n	8003688 <I2C_ITError+0x254>
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b28      	cmp	r3, #40	; 0x28
 8003664:	d110      	bne.n	8003688 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <I2C_ITError+0x260>)
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fe70 	bl	8002368 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	08003995 	.word	0x08003995
 8003694:	ffff0000 	.word	0xffff0000

08003698 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	4608      	mov	r0, r1
 80036a2:	4611      	mov	r1, r2
 80036a4:	461a      	mov	r2, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	460b      	mov	r3, r1
 80036ac:	813b      	strh	r3, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fa08 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e8:	d103      	bne.n	80036f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e05f      	b.n	80037b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	492d      	ldr	r1, [pc, #180]	; (80037c0 <I2C_RequestMemoryWrite+0x128>)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa40 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04c      	b.n	80037b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	6a39      	ldr	r1, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 faaa 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b04      	cmp	r3, #4
 8003748:	d107      	bne.n	800375a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e02b      	b.n	80037b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003764:	893b      	ldrh	r3, [r7, #8]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	611a      	str	r2, [r3, #16]
 800376e:	e021      	b.n	80037b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003770:	893b      	ldrh	r3, [r7, #8]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	b29b      	uxth	r3, r3
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fa84 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b04      	cmp	r3, #4
 8003794:	d107      	bne.n	80037a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e005      	b.n	80037b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037aa:	893b      	ldrh	r3, [r7, #8]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	00010002 	.word	0x00010002

080037c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	2200      	movs	r2, #0
 8003806:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f96a 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003824:	d103      	bne.n	800382e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0aa      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003840:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	4952      	ldr	r1, [pc, #328]	; (8003990 <I2C_RequestMemoryRead+0x1cc>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f9a2 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e097      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003870:	6a39      	ldr	r1, [r7, #32]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fa0c 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b04      	cmp	r3, #4
 8003884:	d107      	bne.n	8003896 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003894:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e076      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038a0:	893b      	ldrh	r3, [r7, #8]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]
 80038aa:	e021      	b.n	80038f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038ac:	893b      	ldrh	r3, [r7, #8]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	6a39      	ldr	r1, [r7, #32]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f9e6 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d107      	bne.n	80038e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e050      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038e6:	893b      	ldrh	r3, [r7, #8]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f2:	6a39      	ldr	r1, [r7, #32]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f9cb 	bl	8003c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b04      	cmp	r3, #4
 8003906:	d107      	bne.n	8003918 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003916:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e035      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2200      	movs	r2, #0
 8003934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8d3 	bl	8003ae4 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003952:	d103      	bne.n	800395c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e013      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003960:	897b      	ldrh	r3, [r7, #10]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	4906      	ldr	r1, [pc, #24]	; (8003990 <I2C_RequestMemoryRead+0x1cc>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f90b 	bl	8003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	00010002 	.word	0x00010002

08003994 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039ae:	4b4b      	ldr	r3, [pc, #300]	; (8003adc <I2C_DMAAbort+0x148>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	08db      	lsrs	r3, r3, #3
 80039b4:	4a4a      	ldr	r2, [pc, #296]	; (8003ae0 <I2C_DMAAbort+0x14c>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0a1a      	lsrs	r2, r3, #8
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00da      	lsls	r2, r3, #3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039da:	e00a      	b.n	80039f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f0:	d0ea      	beq.n	80039c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	2200      	movs	r2, #0
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	2200      	movs	r2, #0
 8003a10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	2200      	movs	r2, #0
 8003a36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b60      	cmp	r3, #96	; 0x60
 8003a62:	d10e      	bne.n	8003a82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7fe fc9c 	bl	80023b8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a80:	e027      	b.n	8003ad2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a88:	2b28      	cmp	r3, #40	; 0x28
 8003a8a:	d117      	bne.n	8003abc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2228      	movs	r2, #40	; 0x28
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aba:	e007      	b.n	8003acc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f7fe fc69 	bl	80023a4 <HAL_I2C_ErrorCallback>
}
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	14f8b589 	.word	0x14f8b589

08003ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af4:	e025      	b.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afc:	d021      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fd fa97 	bl	8001030 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d116      	bne.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0220 	orr.w	r2, r3, #32
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e023      	b.n	8003b8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10d      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	e00c      	b.n	8003b82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d0b6      	beq.n	8003af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ba0:	e051      	b.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb0:	d123      	bne.n	8003bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f043 0204 	orr.w	r2, r3, #4
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e046      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c00:	d021      	beq.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fd fa15 	bl	8001030 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0220 	orr.w	r2, r3, #32
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e020      	b.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10c      	bne.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf14      	ite	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	2300      	moveq	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e00b      	b.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d18d      	bne.n	8003ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c9c:	e02d      	b.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f900 	bl	8003ea4 <I2C_IsAcknowledgeFailed>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e02d      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb4:	d021      	beq.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fd f9bb 	bl	8001030 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d116      	bne.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e007      	b.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d1ca      	bne.n	8003c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d1e:	e02d      	b.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8bf 	bl	8003ea4 <I2C_IsAcknowledgeFailed>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e02d      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d36:	d021      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d38:	f7fd f97a 	bl	8001030 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d302      	bcc.n	8003d4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e007      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d1ca      	bne.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	08db      	lsrs	r3, r3, #3
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	0a1a      	lsrs	r2, r3, #8
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e008      	b.n	8003de4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de0:	d0e9      	beq.n	8003db6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000000 	.word	0x20000000
 8003df4:	14f8b589 	.word	0x14f8b589

08003df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e04:	e042      	b.n	8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d119      	bne.n	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e029      	b.n	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e48:	f7fd f8f2 	bl	8001030 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d116      	bne.n	8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e007      	b.n	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d1b5      	bne.n	8003e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d11b      	bne.n	8003ef4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ec4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f12:	d103      	bne.n	8003f1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f1a:	e007      	b.n	8003f2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f24:	d102      	bne.n	8003f2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e267      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d075      	beq.n	8004042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d00c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b82      	ldr	r3, [pc, #520]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	4b7e      	ldr	r3, [pc, #504]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d05b      	beq.n	8004040 <HAL_RCC_OscConfig+0x108>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d157      	bne.n	8004040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e242      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCC_OscConfig+0x74>
 8003f9e:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a75      	ldr	r2, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xb0>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x98>
 8003fb6:	4b70      	ldr	r3, [pc, #448]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xb0>
 8003fd0:	4b69      	ldr	r3, [pc, #420]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a68      	ldr	r2, [pc, #416]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b66      	ldr	r3, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd f81e 	bl	8001030 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f81a 	bl	8001030 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e207      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xc0>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fd f80a 	bl	8001030 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd f806 	bl	8001030 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1f3      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0xe8>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004066:	4b44      	ldr	r3, [pc, #272]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x152>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e1c7      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4937      	ldr	r1, [pc, #220]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	e03a      	b.n	8004116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_RCC_OscConfig+0x244>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ae:	f7fc ffbf 	bl	8001030 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b6:	f7fc ffbb 	bl	8001030 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1a8      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4925      	ldr	r1, [pc, #148]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x244>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fc ff9e 	bl	8001030 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f8:	f7fc ff9a 	bl	8001030 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e187      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d036      	beq.n	8004190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412a:	4b15      	ldr	r3, [pc, #84]	; (8004180 <HAL_RCC_OscConfig+0x248>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fc ff7e 	bl	8001030 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004138:	f7fc ff7a 	bl	8001030 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e167      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_OscConfig+0x240>)
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x200>
 8004156:	e01b      	b.n	8004190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004158:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_OscConfig+0x248>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415e:	f7fc ff67 	bl	8001030 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	e00e      	b.n	8004184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004166:	f7fc ff63 	bl	8001030 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d907      	bls.n	8004184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e150      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	42470000 	.word	0x42470000
 8004180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	4b88      	ldr	r3, [pc, #544]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ea      	bne.n	8004166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8097 	beq.w	80042cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	4b7d      	ldr	r3, [pc, #500]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	4a7c      	ldr	r2, [pc, #496]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6413      	str	r3, [r2, #64]	; 0x40
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	60bb      	str	r3, [r7, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ce:	4b77      	ldr	r3, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d118      	bne.n	800420c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041da:	4b74      	ldr	r3, [pc, #464]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a73      	ldr	r2, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7fc ff23 	bl	8001030 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fc ff1f 	bl	8001030 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e10c      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x474>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d106      	bne.n	8004222 <HAL_RCC_OscConfig+0x2ea>
 8004214:	4b64      	ldr	r3, [pc, #400]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a63      	ldr	r2, [pc, #396]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e01c      	b.n	800425c <HAL_RCC_OscConfig+0x324>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0x30c>
 800422a:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a5e      	ldr	r2, [pc, #376]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004230:	f043 0304 	orr.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423a:	4a5b      	ldr	r2, [pc, #364]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6713      	str	r3, [r2, #112]	; 0x70
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0x324>
 8004244:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a57      	ldr	r2, [pc, #348]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fc fee4 	bl	8001030 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fc fee0 	bl	8001030 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0cb      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	4b49      	ldr	r3, [pc, #292]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ee      	beq.n	800426c <HAL_RCC_OscConfig+0x334>
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fc fece 	bl	8001030 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fc feca 	bl	8001030 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0b5      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1ee      	bne.n	8004298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	4a38      	ldr	r2, [pc, #224]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a1 	beq.w	8004418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d6:	4b34      	ldr	r3, [pc, #208]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d05c      	beq.n	800439c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d141      	bne.n	800436e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fc fe9e 	bl	8001030 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fc fe9a 	bl	8001030 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e087      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	019b      	lsls	r3, r3, #6
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	3b01      	subs	r3, #1
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	491b      	ldr	r1, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 8004342:	2201      	movs	r2, #1
 8004344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004346:	f7fc fe73 	bl	8001030 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fc fe6f 	bl	8001030 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e05c      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x416>
 800436c:	e054      	b.n	8004418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <HAL_RCC_OscConfig+0x478>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fc fe5c 	bl	8001030 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7fc fe58 	bl	8001030 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e045      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <HAL_RCC_OscConfig+0x470>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x444>
 800439a:	e03d      	b.n	8004418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e038      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40007000 	.word	0x40007000
 80043b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x4ec>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d028      	beq.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d121      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11a      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d111      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800

08004428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0cc      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d90c      	bls.n	8004464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b65      	ldr	r3, [pc, #404]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	4b63      	ldr	r3, [pc, #396]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d001      	beq.n	8004464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0b8      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d020      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004494:	4b53      	ldr	r3, [pc, #332]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800449e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	494d      	ldr	r1, [pc, #308]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d044      	beq.n	8004548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d119      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e07f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e6:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e067      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4934      	ldr	r1, [pc, #208]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004518:	f7fc fd8a 	bl	8001030 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	e00a      	b.n	8004536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004520:	f7fc fd86 	bl	8001030 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e04f      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 020c 	and.w	r2, r3, #12
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	429a      	cmp	r2, r3
 8004546:	d1eb      	bne.n	8004520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004548:	4b25      	ldr	r3, [pc, #148]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d20c      	bcs.n	8004570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e032      	b.n	80045d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4916      	ldr	r1, [pc, #88]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	490e      	ldr	r1, [pc, #56]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ae:	f000 f821 	bl	80045f4 <HAL_RCC_GetSysClockFreq>
 80045b2:	4602      	mov	r2, r0
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	490a      	ldr	r1, [pc, #40]	; (80045e8 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	5ccb      	ldrb	r3, [r1, r3]
 80045c2:	fa22 f303 	lsr.w	r3, r2, r3
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fc fcea 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023c00 	.word	0x40023c00
 80045e4:	40023800 	.word	0x40023800
 80045e8:	08006074 	.word	0x08006074
 80045ec:	20000000 	.word	0x20000000
 80045f0:	20000004 	.word	0x20000004

080045f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f8:	b090      	sub	sp, #64	; 0x40
 80045fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004600:	2300      	movs	r3, #0
 8004602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004604:	2300      	movs	r3, #0
 8004606:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	2b08      	cmp	r3, #8
 8004616:	d00d      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x40>
 8004618:	2b08      	cmp	r3, #8
 800461a:	f200 80a1 	bhi.w	8004760 <HAL_RCC_GetSysClockFreq+0x16c>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x34>
 8004622:	2b04      	cmp	r3, #4
 8004624:	d003      	beq.n	800462e <HAL_RCC_GetSysClockFreq+0x3a>
 8004626:	e09b      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b53      	ldr	r3, [pc, #332]	; (8004778 <HAL_RCC_GetSysClockFreq+0x184>)
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800462c:	e09b      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800462e:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_GetSysClockFreq+0x188>)
 8004630:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004632:	e098      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800463e:	4b4d      	ldr	r3, [pc, #308]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b4a      	ldr	r3, [pc, #296]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	2200      	movs	r2, #0
 8004652:	623b      	str	r3, [r7, #32]
 8004654:	627a      	str	r2, [r7, #36]	; 0x24
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800465c:	2100      	movs	r1, #0
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_GetSysClockFreq+0x188>)
 8004660:	fb03 f201 	mul.w	r2, r3, r1
 8004664:	2300      	movs	r3, #0
 8004666:	fb00 f303 	mul.w	r3, r0, r3
 800466a:	4413      	add	r3, r2
 800466c:	4a43      	ldr	r2, [pc, #268]	; (800477c <HAL_RCC_GetSysClockFreq+0x188>)
 800466e:	fba0 1202 	umull	r1, r2, r0, r2
 8004672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004674:	460a      	mov	r2, r1
 8004676:	62ba      	str	r2, [r7, #40]	; 0x28
 8004678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800467a:	4413      	add	r3, r2
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	2200      	movs	r2, #0
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	61fa      	str	r2, [r7, #28]
 8004686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800468e:	f7fb fdef 	bl	8000270 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4613      	mov	r3, r2
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469a:	e053      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469c:	4b35      	ldr	r3, [pc, #212]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	2200      	movs	r2, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	617a      	str	r2, [r7, #20]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046ae:	f04f 0b00 	mov.w	fp, #0
 80046b2:	4652      	mov	r2, sl
 80046b4:	465b      	mov	r3, fp
 80046b6:	f04f 0000 	mov.w	r0, #0
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	0159      	lsls	r1, r3, #5
 80046c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c4:	0150      	lsls	r0, r2, #5
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	ebb2 080a 	subs.w	r8, r2, sl
 80046ce:	eb63 090b 	sbc.w	r9, r3, fp
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046e6:	ebb2 0408 	subs.w	r4, r2, r8
 80046ea:	eb63 0509 	sbc.w	r5, r3, r9
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	00eb      	lsls	r3, r5, #3
 80046f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fc:	00e2      	lsls	r2, r4, #3
 80046fe:	4614      	mov	r4, r2
 8004700:	461d      	mov	r5, r3
 8004702:	eb14 030a 	adds.w	r3, r4, sl
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	eb45 030b 	adc.w	r3, r5, fp
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471a:	4629      	mov	r1, r5
 800471c:	028b      	lsls	r3, r1, #10
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004724:	4621      	mov	r1, r4
 8004726:	028a      	lsls	r2, r1, #10
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	2200      	movs	r2, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	60fa      	str	r2, [r7, #12]
 8004734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004738:	f7fb fd9a 	bl	8000270 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_GetSysClockFreq+0x180>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800475e:	e002      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetSysClockFreq+0x184>)
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004768:	4618      	mov	r0, r3
 800476a:	3740      	adds	r7, #64	; 0x40
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400
 800477c:	017d7840 	.word	0x017d7840

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	08006084 	.word	0x08006084

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08006084 	.word	0x08006084

080047e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e03f      	b.n	800487a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fa42 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2224      	movs	r2, #36	; 0x24
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800482a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f929 	bl	8004a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b08a      	sub	sp, #40	; 0x28
 8004886:	af02      	add	r7, sp, #8
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d17c      	bne.n	800499c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_UART_Transmit+0x2c>
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e075      	b.n	800499e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Transmit+0x3e>
 80048bc:	2302      	movs	r3, #2
 80048be:	e06e      	b.n	800499e <HAL_UART_Transmit+0x11c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	; 0x21
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d6:	f7fc fbab 	bl	8001030 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d108      	bne.n	8004904 <HAL_UART_Transmit+0x82>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e003      	b.n	800490c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004914:	e02a      	b.n	800496c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f840 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e036      	b.n	800499e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3302      	adds	r3, #2
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e007      	b.n	800495e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1cf      	bne.n	8004916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	; 0x40
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f810 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e006      	b.n	800499e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b090      	sub	sp, #64	; 0x40
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	e050      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d04c      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049c6:	f7fc fb33 	bl	8001030 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d241      	bcs.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f6:	637a      	str	r2, [r7, #52]	; 0x34
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2a:	623a      	str	r2, [r7, #32]
 8004a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	69f9      	ldr	r1, [r7, #28]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e00f      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d09f      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3740      	adds	r7, #64	; 0x40
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b0c0      	sub	sp, #256	; 0x100
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	ea40 0301 	orr.w	r3, r0, r1
 8004aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004adc:	f021 010c 	bic.w	r1, r1, #12
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aea:	430b      	orrs	r3, r1
 8004aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	6999      	ldr	r1, [r3, #24]
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	ea40 0301 	orr.w	r3, r0, r1
 8004b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b8f      	ldr	r3, [pc, #572]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d005      	beq.n	8004b24 <UART_SetConfig+0xa0>
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b8d      	ldr	r3, [pc, #564]	; (8004d54 <UART_SetConfig+0x2d0>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d104      	bne.n	8004b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7ff fe4c 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8004b28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b2c:	e003      	b.n	8004b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b2e:	f7ff fe33 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8004b32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b40:	f040 810c 	bne.w	8004d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b56:	4622      	mov	r2, r4
 8004b58:	462b      	mov	r3, r5
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b66:	4621      	mov	r1, r4
 8004b68:	eb12 0801 	adds.w	r8, r2, r1
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	eb43 0901 	adc.w	r9, r3, r1
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b86:	4690      	mov	r8, r2
 8004b88:	4699      	mov	r9, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	eb18 0303 	adds.w	r3, r8, r3
 8004b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b94:	462b      	mov	r3, r5
 8004b96:	eb49 0303 	adc.w	r3, r9, r3
 8004b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004baa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	18db      	adds	r3, r3, r3
 8004bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8004bb8:	4613      	mov	r3, r2
 8004bba:	eb42 0303 	adc.w	r3, r2, r3
 8004bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bc8:	f7fb fb52 	bl	8000270 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4b61      	ldr	r3, [pc, #388]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	011c      	lsls	r4, r3, #4
 8004bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bde:	2200      	movs	r2, #0
 8004be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8004c02:	4649      	mov	r1, r9
 8004c04:	eb43 0b01 	adc.w	fp, r3, r1
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c1c:	4692      	mov	sl, r2
 8004c1e:	469b      	mov	fp, r3
 8004c20:	4643      	mov	r3, r8
 8004c22:	eb1a 0303 	adds.w	r3, sl, r3
 8004c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	18db      	adds	r3, r3, r3
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c4e:	4613      	mov	r3, r2
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	647b      	str	r3, [r7, #68]	; 0x44
 8004c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c5e:	f7fb fb07 	bl	8000270 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2264      	movs	r2, #100	; 0x64
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	1acb      	subs	r3, r1, r3
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004c80:	fba3 2302 	umull	r2, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d1a:	f7fb faa9 	bl	8000270 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 0207 	and.w	r2, r3, #7
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4422      	add	r2, r4
 8004d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d4c:	e105      	b.n	8004f5a <UART_SetConfig+0x4d6>
 8004d4e:	bf00      	nop
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40011400 	.word	0x40011400
 8004d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d6e:	4642      	mov	r2, r8
 8004d70:	464b      	mov	r3, r9
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	6239      	str	r1, [r7, #32]
 8004d76:	415b      	adcs	r3, r3
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d7e:	4641      	mov	r1, r8
 8004d80:	1854      	adds	r4, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb43 0501 	adc.w	r5, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	00eb      	lsls	r3, r5, #3
 8004d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d96:	00e2      	lsls	r2, r4, #3
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	18e3      	adds	r3, r4, r3
 8004da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004da4:	464b      	mov	r3, r9
 8004da6:	eb45 0303 	adc.w	r3, r5, r3
 8004daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dca:	4629      	mov	r1, r5
 8004dcc:	008b      	lsls	r3, r1, #2
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	008a      	lsls	r2, r1, #2
 8004dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ddc:	f7fb fa48 	bl	8000270 <__aeabi_uldivmod>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <UART_SetConfig+0x4e4>)
 8004de6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	011c      	lsls	r4, r3, #4
 8004dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	61b9      	str	r1, [r7, #24]
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e10:	4641      	mov	r1, r8
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	6139      	str	r1, [r7, #16]
 8004e16:	4649      	mov	r1, r9
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e28:	4659      	mov	r1, fp
 8004e2a:	00cb      	lsls	r3, r1, #3
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e32:	4651      	mov	r1, sl
 8004e34:	00ca      	lsls	r2, r1, #3
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e44:	464b      	mov	r3, r9
 8004e46:	460a      	mov	r2, r1
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e68:	4649      	mov	r1, r9
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e72:	4641      	mov	r1, r8
 8004e74:	008a      	lsls	r2, r1, #2
 8004e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e7a:	f7fb f9f9 	bl	8000270 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <UART_SetConfig+0x4e4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a34      	ldr	r2, [pc, #208]	; (8004f68 <UART_SetConfig+0x4e4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea2:	441c      	add	r4, r3
 8004ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8004eac:	677a      	str	r2, [r7, #116]	; 0x74
 8004eae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	1891      	adds	r1, r2, r2
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	415b      	adcs	r3, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	1851      	adds	r1, r2, r1
 8004ec6:	6039      	str	r1, [r7, #0]
 8004ec8:	4649      	mov	r1, r9
 8004eca:	414b      	adcs	r3, r1
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004eda:	4659      	mov	r1, fp
 8004edc:	00cb      	lsls	r3, r1, #3
 8004ede:	4651      	mov	r1, sl
 8004ee0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	00ca      	lsls	r2, r1, #3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	4603      	mov	r3, r0
 8004eee:	4642      	mov	r2, r8
 8004ef0:	189b      	adds	r3, r3, r2
 8004ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	663b      	str	r3, [r7, #96]	; 0x60
 8004f08:	667a      	str	r2, [r7, #100]	; 0x64
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f16:	4649      	mov	r1, r9
 8004f18:	008b      	lsls	r3, r1, #2
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f20:	4641      	mov	r1, r8
 8004f22:	008a      	lsls	r2, r1, #2
 8004f24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f28:	f7fb f9a2 	bl	8000270 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <UART_SetConfig+0x4e4>)
 8004f32:	fba3 1302 	umull	r1, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2164      	movs	r1, #100	; 0x64
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	3332      	adds	r3, #50	; 0x32
 8004f44:	4a08      	ldr	r2, [pc, #32]	; (8004f68 <UART_SetConfig+0x4e4>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4422      	add	r2, r4
 8004f58:	609a      	str	r2, [r3, #8]
}
 8004f5a:	bf00      	nop
 8004f5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f66:	bf00      	nop
 8004f68:	51eb851f 	.word	0x51eb851f

08004f6c <i3g4250d_read_reg>:
  *
  */
int32_t __weak i3g4250d_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	461a      	mov	r2, r3
 8004f78:	460b      	mov	r3, r1
 8004f7a:	72fb      	strb	r3, [r7, #11]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685c      	ldr	r4, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68d8      	ldr	r0, [r3, #12]
 8004f88:	893b      	ldrh	r3, [r7, #8]
 8004f8a:	7af9      	ldrb	r1, [r7, #11]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	47a0      	blx	r4
 8004f90:	6178      	str	r0, [r7, #20]

  return ret;
 8004f92:	697b      	ldr	r3, [r7, #20]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd90      	pop	{r4, r7, pc}

08004f9c <i3g4250d_device_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = i3g4250d_read_reg(ctx, I3G4250D_WHO_AM_I, buff, 1);
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	210f      	movs	r1, #15
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff ffdd 	bl	8004f6c <i3g4250d_read_reg>
 8004fb2:	60f8      	str	r0, [r7, #12]

  return ret;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8004fbe:	b590      	push	{r4, r7, lr}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	460b      	mov	r3, r1
 8004fcc:	72fb      	strb	r3, [r7, #11]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685c      	ldr	r4, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68d8      	ldr	r0, [r3, #12]
 8004fda:	893b      	ldrh	r3, [r7, #8]
 8004fdc:	7af9      	ldrb	r1, [r7, #11]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	47a0      	blx	r4
 8004fe2:	6178      	str	r0, [r7, #20]

  return ret;
 8004fe4:	697b      	ldr	r3, [r7, #20]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}

08004fee <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ffdd 	bl	8004fbe <lis331dlh_read_reg>
 8005004:	60f8      	str	r0, [r7, #12]

  return ret;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	461a      	mov	r2, r3
 800501c:	460b      	mov	r3, r1
 800501e:	72fb      	strb	r3, [r7, #11]
 8005020:	4613      	mov	r3, r2
 8005022:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685c      	ldr	r4, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	68d8      	ldr	r0, [r3, #12]
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	7af9      	ldrb	r1, [r7, #11]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	47a0      	blx	r4
 8005034:	6178      	str	r0, [r7, #20]

  return ret;
 8005036:	697b      	ldr	r3, [r7, #20]
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd90      	pop	{r4, r7, pc}

08005040 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800504a:	2301      	movs	r3, #1
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	210f      	movs	r1, #15
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff ffdd 	bl	8005010 <lis3mdl_read_reg>
 8005056:	60f8      	str	r0, [r7, #12]

  return ret;
 8005058:	68fb      	ldr	r3, [r7, #12]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <__errno>:
 8005064:	4b01      	ldr	r3, [pc, #4]	; (800506c <__errno+0x8>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	2000000c 	.word	0x2000000c

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f000 ffbe 	bl	8006004 <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	0800612c 	.word	0x0800612c
 80050ac:	0800612c 	.word	0x0800612c
 80050b0:	0800612c 	.word	0x0800612c
 80050b4:	08006130 	.word	0x08006130

080050b8 <malloc>:
 80050b8:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <malloc+0xc>)
 80050ba:	4601      	mov	r1, r0
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f000 b87f 	b.w	80051c0 <_malloc_r>
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <free>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	; (80050d4 <free+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f000 b80b 	b.w	80050e8 <_free_r>
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c

080050d8 <memset>:
 80050d8:	4402      	add	r2, r0
 80050da:	4603      	mov	r3, r0
 80050dc:	4293      	cmp	r3, r2
 80050de:	d100      	bne.n	80050e2 <memset+0xa>
 80050e0:	4770      	bx	lr
 80050e2:	f803 1b01 	strb.w	r1, [r3], #1
 80050e6:	e7f9      	b.n	80050dc <memset+0x4>

080050e8 <_free_r>:
 80050e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ea:	2900      	cmp	r1, #0
 80050ec:	d044      	beq.n	8005178 <_free_r+0x90>
 80050ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f2:	9001      	str	r0, [sp, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f1a1 0404 	sub.w	r4, r1, #4
 80050fa:	bfb8      	it	lt
 80050fc:	18e4      	addlt	r4, r4, r3
 80050fe:	f000 f9f3 	bl	80054e8 <__malloc_lock>
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <_free_r+0x94>)
 8005104:	9801      	ldr	r0, [sp, #4]
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	b933      	cbnz	r3, 8005118 <_free_r+0x30>
 800510a:	6063      	str	r3, [r4, #4]
 800510c:	6014      	str	r4, [r2, #0]
 800510e:	b003      	add	sp, #12
 8005110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005114:	f000 b9ee 	b.w	80054f4 <__malloc_unlock>
 8005118:	42a3      	cmp	r3, r4
 800511a:	d908      	bls.n	800512e <_free_r+0x46>
 800511c:	6825      	ldr	r5, [r4, #0]
 800511e:	1961      	adds	r1, r4, r5
 8005120:	428b      	cmp	r3, r1
 8005122:	bf01      	itttt	eq
 8005124:	6819      	ldreq	r1, [r3, #0]
 8005126:	685b      	ldreq	r3, [r3, #4]
 8005128:	1949      	addeq	r1, r1, r5
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	e7ed      	b.n	800510a <_free_r+0x22>
 800512e:	461a      	mov	r2, r3
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b10b      	cbz	r3, 8005138 <_free_r+0x50>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d9fa      	bls.n	800512e <_free_r+0x46>
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	1855      	adds	r5, r2, r1
 800513c:	42a5      	cmp	r5, r4
 800513e:	d10b      	bne.n	8005158 <_free_r+0x70>
 8005140:	6824      	ldr	r4, [r4, #0]
 8005142:	4421      	add	r1, r4
 8005144:	1854      	adds	r4, r2, r1
 8005146:	42a3      	cmp	r3, r4
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	d1e0      	bne.n	800510e <_free_r+0x26>
 800514c:	681c      	ldr	r4, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	6053      	str	r3, [r2, #4]
 8005152:	4421      	add	r1, r4
 8005154:	6011      	str	r1, [r2, #0]
 8005156:	e7da      	b.n	800510e <_free_r+0x26>
 8005158:	d902      	bls.n	8005160 <_free_r+0x78>
 800515a:	230c      	movs	r3, #12
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	e7d6      	b.n	800510e <_free_r+0x26>
 8005160:	6825      	ldr	r5, [r4, #0]
 8005162:	1961      	adds	r1, r4, r5
 8005164:	428b      	cmp	r3, r1
 8005166:	bf04      	itt	eq
 8005168:	6819      	ldreq	r1, [r3, #0]
 800516a:	685b      	ldreq	r3, [r3, #4]
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	bf04      	itt	eq
 8005170:	1949      	addeq	r1, r1, r5
 8005172:	6021      	streq	r1, [r4, #0]
 8005174:	6054      	str	r4, [r2, #4]
 8005176:	e7ca      	b.n	800510e <_free_r+0x26>
 8005178:	b003      	add	sp, #12
 800517a:	bd30      	pop	{r4, r5, pc}
 800517c:	20000130 	.word	0x20000130

08005180 <sbrk_aligned>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	4e0e      	ldr	r6, [pc, #56]	; (80051bc <sbrk_aligned+0x3c>)
 8005184:	460c      	mov	r4, r1
 8005186:	6831      	ldr	r1, [r6, #0]
 8005188:	4605      	mov	r5, r0
 800518a:	b911      	cbnz	r1, 8005192 <sbrk_aligned+0x12>
 800518c:	f000 f8a4 	bl	80052d8 <_sbrk_r>
 8005190:	6030      	str	r0, [r6, #0]
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 f89f 	bl	80052d8 <_sbrk_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	d00a      	beq.n	80051b4 <sbrk_aligned+0x34>
 800519e:	1cc4      	adds	r4, r0, #3
 80051a0:	f024 0403 	bic.w	r4, r4, #3
 80051a4:	42a0      	cmp	r0, r4
 80051a6:	d007      	beq.n	80051b8 <sbrk_aligned+0x38>
 80051a8:	1a21      	subs	r1, r4, r0
 80051aa:	4628      	mov	r0, r5
 80051ac:	f000 f894 	bl	80052d8 <_sbrk_r>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d101      	bne.n	80051b8 <sbrk_aligned+0x38>
 80051b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051b8:	4620      	mov	r0, r4
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	20000134 	.word	0x20000134

080051c0 <_malloc_r>:
 80051c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c4:	1ccd      	adds	r5, r1, #3
 80051c6:	f025 0503 	bic.w	r5, r5, #3
 80051ca:	3508      	adds	r5, #8
 80051cc:	2d0c      	cmp	r5, #12
 80051ce:	bf38      	it	cc
 80051d0:	250c      	movcc	r5, #12
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	4607      	mov	r7, r0
 80051d6:	db01      	blt.n	80051dc <_malloc_r+0x1c>
 80051d8:	42a9      	cmp	r1, r5
 80051da:	d905      	bls.n	80051e8 <_malloc_r+0x28>
 80051dc:	230c      	movs	r3, #12
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	2600      	movs	r6, #0
 80051e2:	4630      	mov	r0, r6
 80051e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e8:	4e2e      	ldr	r6, [pc, #184]	; (80052a4 <_malloc_r+0xe4>)
 80051ea:	f000 f97d 	bl	80054e8 <__malloc_lock>
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	461c      	mov	r4, r3
 80051f2:	bb34      	cbnz	r4, 8005242 <_malloc_r+0x82>
 80051f4:	4629      	mov	r1, r5
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7ff ffc2 	bl	8005180 <sbrk_aligned>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	4604      	mov	r4, r0
 8005200:	d14d      	bne.n	800529e <_malloc_r+0xde>
 8005202:	6834      	ldr	r4, [r6, #0]
 8005204:	4626      	mov	r6, r4
 8005206:	2e00      	cmp	r6, #0
 8005208:	d140      	bne.n	800528c <_malloc_r+0xcc>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	4631      	mov	r1, r6
 800520e:	4638      	mov	r0, r7
 8005210:	eb04 0803 	add.w	r8, r4, r3
 8005214:	f000 f860 	bl	80052d8 <_sbrk_r>
 8005218:	4580      	cmp	r8, r0
 800521a:	d13a      	bne.n	8005292 <_malloc_r+0xd2>
 800521c:	6821      	ldr	r1, [r4, #0]
 800521e:	3503      	adds	r5, #3
 8005220:	1a6d      	subs	r5, r5, r1
 8005222:	f025 0503 	bic.w	r5, r5, #3
 8005226:	3508      	adds	r5, #8
 8005228:	2d0c      	cmp	r5, #12
 800522a:	bf38      	it	cc
 800522c:	250c      	movcc	r5, #12
 800522e:	4629      	mov	r1, r5
 8005230:	4638      	mov	r0, r7
 8005232:	f7ff ffa5 	bl	8005180 <sbrk_aligned>
 8005236:	3001      	adds	r0, #1
 8005238:	d02b      	beq.n	8005292 <_malloc_r+0xd2>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	442b      	add	r3, r5
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	e00e      	b.n	8005260 <_malloc_r+0xa0>
 8005242:	6822      	ldr	r2, [r4, #0]
 8005244:	1b52      	subs	r2, r2, r5
 8005246:	d41e      	bmi.n	8005286 <_malloc_r+0xc6>
 8005248:	2a0b      	cmp	r2, #11
 800524a:	d916      	bls.n	800527a <_malloc_r+0xba>
 800524c:	1961      	adds	r1, r4, r5
 800524e:	42a3      	cmp	r3, r4
 8005250:	6025      	str	r5, [r4, #0]
 8005252:	bf18      	it	ne
 8005254:	6059      	strne	r1, [r3, #4]
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	bf08      	it	eq
 800525a:	6031      	streq	r1, [r6, #0]
 800525c:	5162      	str	r2, [r4, r5]
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	4638      	mov	r0, r7
 8005262:	f104 060b 	add.w	r6, r4, #11
 8005266:	f000 f945 	bl	80054f4 <__malloc_unlock>
 800526a:	f026 0607 	bic.w	r6, r6, #7
 800526e:	1d23      	adds	r3, r4, #4
 8005270:	1af2      	subs	r2, r6, r3
 8005272:	d0b6      	beq.n	80051e2 <_malloc_r+0x22>
 8005274:	1b9b      	subs	r3, r3, r6
 8005276:	50a3      	str	r3, [r4, r2]
 8005278:	e7b3      	b.n	80051e2 <_malloc_r+0x22>
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	42a3      	cmp	r3, r4
 800527e:	bf0c      	ite	eq
 8005280:	6032      	streq	r2, [r6, #0]
 8005282:	605a      	strne	r2, [r3, #4]
 8005284:	e7ec      	b.n	8005260 <_malloc_r+0xa0>
 8005286:	4623      	mov	r3, r4
 8005288:	6864      	ldr	r4, [r4, #4]
 800528a:	e7b2      	b.n	80051f2 <_malloc_r+0x32>
 800528c:	4634      	mov	r4, r6
 800528e:	6876      	ldr	r6, [r6, #4]
 8005290:	e7b9      	b.n	8005206 <_malloc_r+0x46>
 8005292:	230c      	movs	r3, #12
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4638      	mov	r0, r7
 8005298:	f000 f92c 	bl	80054f4 <__malloc_unlock>
 800529c:	e7a1      	b.n	80051e2 <_malloc_r+0x22>
 800529e:	6025      	str	r5, [r4, #0]
 80052a0:	e7de      	b.n	8005260 <_malloc_r+0xa0>
 80052a2:	bf00      	nop
 80052a4:	20000130 	.word	0x20000130

080052a8 <iprintf>:
 80052a8:	b40f      	push	{r0, r1, r2, r3}
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <iprintf+0x2c>)
 80052ac:	b513      	push	{r0, r1, r4, lr}
 80052ae:	681c      	ldr	r4, [r3, #0]
 80052b0:	b124      	cbz	r4, 80052bc <iprintf+0x14>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	b913      	cbnz	r3, 80052bc <iprintf+0x14>
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f876 	bl	80053a8 <__sinit>
 80052bc:	ab05      	add	r3, sp, #20
 80052be:	9a04      	ldr	r2, [sp, #16]
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 f945 	bl	8005554 <_vfiprintf_r>
 80052ca:	b002      	add	sp, #8
 80052cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d0:	b004      	add	sp, #16
 80052d2:	4770      	bx	lr
 80052d4:	2000000c 	.word	0x2000000c

080052d8 <_sbrk_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	; (80052f4 <_sbrk_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb fdcc 	bl	8000e80 <_sbrk>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_sbrk_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_sbrk_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	2000013c 	.word	0x2000013c

080052f8 <std>:
 80052f8:	2300      	movs	r3, #0
 80052fa:	b510      	push	{r4, lr}
 80052fc:	4604      	mov	r4, r0
 80052fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005306:	6083      	str	r3, [r0, #8]
 8005308:	8181      	strh	r1, [r0, #12]
 800530a:	6643      	str	r3, [r0, #100]	; 0x64
 800530c:	81c2      	strh	r2, [r0, #14]
 800530e:	6183      	str	r3, [r0, #24]
 8005310:	4619      	mov	r1, r3
 8005312:	2208      	movs	r2, #8
 8005314:	305c      	adds	r0, #92	; 0x5c
 8005316:	f7ff fedf 	bl	80050d8 <memset>
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <std+0x38>)
 800531c:	6263      	str	r3, [r4, #36]	; 0x24
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <std+0x3c>)
 8005320:	62a3      	str	r3, [r4, #40]	; 0x28
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <std+0x40>)
 8005324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <std+0x44>)
 8005328:	6224      	str	r4, [r4, #32]
 800532a:	6323      	str	r3, [r4, #48]	; 0x30
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop
 8005330:	08005add 	.word	0x08005add
 8005334:	08005aff 	.word	0x08005aff
 8005338:	08005b37 	.word	0x08005b37
 800533c:	08005b5b 	.word	0x08005b5b

08005340 <_cleanup_r>:
 8005340:	4901      	ldr	r1, [pc, #4]	; (8005348 <_cleanup_r+0x8>)
 8005342:	f000 b8af 	b.w	80054a4 <_fwalk_reent>
 8005346:	bf00      	nop
 8005348:	08005e35 	.word	0x08005e35

0800534c <__sfmoreglue>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	2268      	movs	r2, #104	; 0x68
 8005350:	1e4d      	subs	r5, r1, #1
 8005352:	4355      	muls	r5, r2
 8005354:	460e      	mov	r6, r1
 8005356:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800535a:	f7ff ff31 	bl	80051c0 <_malloc_r>
 800535e:	4604      	mov	r4, r0
 8005360:	b140      	cbz	r0, 8005374 <__sfmoreglue+0x28>
 8005362:	2100      	movs	r1, #0
 8005364:	e9c0 1600 	strd	r1, r6, [r0]
 8005368:	300c      	adds	r0, #12
 800536a:	60a0      	str	r0, [r4, #8]
 800536c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005370:	f7ff feb2 	bl	80050d8 <memset>
 8005374:	4620      	mov	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}

08005378 <__sfp_lock_acquire>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__sfp_lock_acquire+0x8>)
 800537a:	f000 b8b3 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	20000139 	.word	0x20000139

08005384 <__sfp_lock_release>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__sfp_lock_release+0x8>)
 8005386:	f000 b8ae 	b.w	80054e6 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	20000139 	.word	0x20000139

08005390 <__sinit_lock_acquire>:
 8005390:	4801      	ldr	r0, [pc, #4]	; (8005398 <__sinit_lock_acquire+0x8>)
 8005392:	f000 b8a7 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 8005396:	bf00      	nop
 8005398:	2000013a 	.word	0x2000013a

0800539c <__sinit_lock_release>:
 800539c:	4801      	ldr	r0, [pc, #4]	; (80053a4 <__sinit_lock_release+0x8>)
 800539e:	f000 b8a2 	b.w	80054e6 <__retarget_lock_release_recursive>
 80053a2:	bf00      	nop
 80053a4:	2000013a 	.word	0x2000013a

080053a8 <__sinit>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	f7ff fff0 	bl	8005390 <__sinit_lock_acquire>
 80053b0:	69a3      	ldr	r3, [r4, #24]
 80053b2:	b11b      	cbz	r3, 80053bc <__sinit+0x14>
 80053b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b8:	f7ff bff0 	b.w	800539c <__sinit_lock_release>
 80053bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053c0:	6523      	str	r3, [r4, #80]	; 0x50
 80053c2:	4b13      	ldr	r3, [pc, #76]	; (8005410 <__sinit+0x68>)
 80053c4:	4a13      	ldr	r2, [pc, #76]	; (8005414 <__sinit+0x6c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	bf04      	itt	eq
 80053ce:	2301      	moveq	r3, #1
 80053d0:	61a3      	streq	r3, [r4, #24]
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f820 	bl	8005418 <__sfp>
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 f81c 	bl	8005418 <__sfp>
 80053e0:	60a0      	str	r0, [r4, #8]
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f818 	bl	8005418 <__sfp>
 80053e8:	2200      	movs	r2, #0
 80053ea:	60e0      	str	r0, [r4, #12]
 80053ec:	2104      	movs	r1, #4
 80053ee:	6860      	ldr	r0, [r4, #4]
 80053f0:	f7ff ff82 	bl	80052f8 <std>
 80053f4:	68a0      	ldr	r0, [r4, #8]
 80053f6:	2201      	movs	r2, #1
 80053f8:	2109      	movs	r1, #9
 80053fa:	f7ff ff7d 	bl	80052f8 <std>
 80053fe:	68e0      	ldr	r0, [r4, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff ff78 	bl	80052f8 <std>
 8005408:	2301      	movs	r3, #1
 800540a:	61a3      	str	r3, [r4, #24]
 800540c:	e7d2      	b.n	80053b4 <__sinit+0xc>
 800540e:	bf00      	nop
 8005410:	0800608c 	.word	0x0800608c
 8005414:	08005341 	.word	0x08005341

08005418 <__sfp>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	4607      	mov	r7, r0
 800541c:	f7ff ffac 	bl	8005378 <__sfp_lock_acquire>
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <__sfp+0x84>)
 8005422:	681e      	ldr	r6, [r3, #0]
 8005424:	69b3      	ldr	r3, [r6, #24]
 8005426:	b913      	cbnz	r3, 800542e <__sfp+0x16>
 8005428:	4630      	mov	r0, r6
 800542a:	f7ff ffbd 	bl	80053a8 <__sinit>
 800542e:	3648      	adds	r6, #72	; 0x48
 8005430:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005434:	3b01      	subs	r3, #1
 8005436:	d503      	bpl.n	8005440 <__sfp+0x28>
 8005438:	6833      	ldr	r3, [r6, #0]
 800543a:	b30b      	cbz	r3, 8005480 <__sfp+0x68>
 800543c:	6836      	ldr	r6, [r6, #0]
 800543e:	e7f7      	b.n	8005430 <__sfp+0x18>
 8005440:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005444:	b9d5      	cbnz	r5, 800547c <__sfp+0x64>
 8005446:	4b16      	ldr	r3, [pc, #88]	; (80054a0 <__sfp+0x88>)
 8005448:	60e3      	str	r3, [r4, #12]
 800544a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800544e:	6665      	str	r5, [r4, #100]	; 0x64
 8005450:	f000 f847 	bl	80054e2 <__retarget_lock_init_recursive>
 8005454:	f7ff ff96 	bl	8005384 <__sfp_lock_release>
 8005458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800545c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005460:	6025      	str	r5, [r4, #0]
 8005462:	61a5      	str	r5, [r4, #24]
 8005464:	2208      	movs	r2, #8
 8005466:	4629      	mov	r1, r5
 8005468:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800546c:	f7ff fe34 	bl	80050d8 <memset>
 8005470:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005474:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005478:	4620      	mov	r0, r4
 800547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800547c:	3468      	adds	r4, #104	; 0x68
 800547e:	e7d9      	b.n	8005434 <__sfp+0x1c>
 8005480:	2104      	movs	r1, #4
 8005482:	4638      	mov	r0, r7
 8005484:	f7ff ff62 	bl	800534c <__sfmoreglue>
 8005488:	4604      	mov	r4, r0
 800548a:	6030      	str	r0, [r6, #0]
 800548c:	2800      	cmp	r0, #0
 800548e:	d1d5      	bne.n	800543c <__sfp+0x24>
 8005490:	f7ff ff78 	bl	8005384 <__sfp_lock_release>
 8005494:	230c      	movs	r3, #12
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	e7ee      	b.n	8005478 <__sfp+0x60>
 800549a:	bf00      	nop
 800549c:	0800608c 	.word	0x0800608c
 80054a0:	ffff0001 	.word	0xffff0001

080054a4 <_fwalk_reent>:
 80054a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a8:	4606      	mov	r6, r0
 80054aa:	4688      	mov	r8, r1
 80054ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054b0:	2700      	movs	r7, #0
 80054b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054b6:	f1b9 0901 	subs.w	r9, r9, #1
 80054ba:	d505      	bpl.n	80054c8 <_fwalk_reent+0x24>
 80054bc:	6824      	ldr	r4, [r4, #0]
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d1f7      	bne.n	80054b2 <_fwalk_reent+0xe>
 80054c2:	4638      	mov	r0, r7
 80054c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c8:	89ab      	ldrh	r3, [r5, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d907      	bls.n	80054de <_fwalk_reent+0x3a>
 80054ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d2:	3301      	adds	r3, #1
 80054d4:	d003      	beq.n	80054de <_fwalk_reent+0x3a>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4630      	mov	r0, r6
 80054da:	47c0      	blx	r8
 80054dc:	4307      	orrs	r7, r0
 80054de:	3568      	adds	r5, #104	; 0x68
 80054e0:	e7e9      	b.n	80054b6 <_fwalk_reent+0x12>

080054e2 <__retarget_lock_init_recursive>:
 80054e2:	4770      	bx	lr

080054e4 <__retarget_lock_acquire_recursive>:
 80054e4:	4770      	bx	lr

080054e6 <__retarget_lock_release_recursive>:
 80054e6:	4770      	bx	lr

080054e8 <__malloc_lock>:
 80054e8:	4801      	ldr	r0, [pc, #4]	; (80054f0 <__malloc_lock+0x8>)
 80054ea:	f7ff bffb 	b.w	80054e4 <__retarget_lock_acquire_recursive>
 80054ee:	bf00      	nop
 80054f0:	20000138 	.word	0x20000138

080054f4 <__malloc_unlock>:
 80054f4:	4801      	ldr	r0, [pc, #4]	; (80054fc <__malloc_unlock+0x8>)
 80054f6:	f7ff bff6 	b.w	80054e6 <__retarget_lock_release_recursive>
 80054fa:	bf00      	nop
 80054fc:	20000138 	.word	0x20000138

08005500 <__sfputc_r>:
 8005500:	6893      	ldr	r3, [r2, #8]
 8005502:	3b01      	subs	r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	b410      	push	{r4}
 8005508:	6093      	str	r3, [r2, #8]
 800550a:	da08      	bge.n	800551e <__sfputc_r+0x1e>
 800550c:	6994      	ldr	r4, [r2, #24]
 800550e:	42a3      	cmp	r3, r4
 8005510:	db01      	blt.n	8005516 <__sfputc_r+0x16>
 8005512:	290a      	cmp	r1, #10
 8005514:	d103      	bne.n	800551e <__sfputc_r+0x1e>
 8005516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551a:	f000 bb23 	b.w	8005b64 <__swbuf_r>
 800551e:	6813      	ldr	r3, [r2, #0]
 8005520:	1c58      	adds	r0, r3, #1
 8005522:	6010      	str	r0, [r2, #0]
 8005524:	7019      	strb	r1, [r3, #0]
 8005526:	4608      	mov	r0, r1
 8005528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552c:	4770      	bx	lr

0800552e <__sfputs_r>:
 800552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005530:	4606      	mov	r6, r0
 8005532:	460f      	mov	r7, r1
 8005534:	4614      	mov	r4, r2
 8005536:	18d5      	adds	r5, r2, r3
 8005538:	42ac      	cmp	r4, r5
 800553a:	d101      	bne.n	8005540 <__sfputs_r+0x12>
 800553c:	2000      	movs	r0, #0
 800553e:	e007      	b.n	8005550 <__sfputs_r+0x22>
 8005540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005544:	463a      	mov	r2, r7
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ffda 	bl	8005500 <__sfputc_r>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d1f3      	bne.n	8005538 <__sfputs_r+0xa>
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005554 <_vfiprintf_r>:
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	460d      	mov	r5, r1
 800555a:	b09d      	sub	sp, #116	; 0x74
 800555c:	4614      	mov	r4, r2
 800555e:	4698      	mov	r8, r3
 8005560:	4606      	mov	r6, r0
 8005562:	b118      	cbz	r0, 800556c <_vfiprintf_r+0x18>
 8005564:	6983      	ldr	r3, [r0, #24]
 8005566:	b90b      	cbnz	r3, 800556c <_vfiprintf_r+0x18>
 8005568:	f7ff ff1e 	bl	80053a8 <__sinit>
 800556c:	4b89      	ldr	r3, [pc, #548]	; (8005794 <_vfiprintf_r+0x240>)
 800556e:	429d      	cmp	r5, r3
 8005570:	d11b      	bne.n	80055aa <_vfiprintf_r+0x56>
 8005572:	6875      	ldr	r5, [r6, #4]
 8005574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005576:	07d9      	lsls	r1, r3, #31
 8005578:	d405      	bmi.n	8005586 <_vfiprintf_r+0x32>
 800557a:	89ab      	ldrh	r3, [r5, #12]
 800557c:	059a      	lsls	r2, r3, #22
 800557e:	d402      	bmi.n	8005586 <_vfiprintf_r+0x32>
 8005580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005582:	f7ff ffaf 	bl	80054e4 <__retarget_lock_acquire_recursive>
 8005586:	89ab      	ldrh	r3, [r5, #12]
 8005588:	071b      	lsls	r3, r3, #28
 800558a:	d501      	bpl.n	8005590 <_vfiprintf_r+0x3c>
 800558c:	692b      	ldr	r3, [r5, #16]
 800558e:	b9eb      	cbnz	r3, 80055cc <_vfiprintf_r+0x78>
 8005590:	4629      	mov	r1, r5
 8005592:	4630      	mov	r0, r6
 8005594:	f000 fb4a 	bl	8005c2c <__swsetup_r>
 8005598:	b1c0      	cbz	r0, 80055cc <_vfiprintf_r+0x78>
 800559a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800559c:	07dc      	lsls	r4, r3, #31
 800559e:	d50e      	bpl.n	80055be <_vfiprintf_r+0x6a>
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a4:	b01d      	add	sp, #116	; 0x74
 80055a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055aa:	4b7b      	ldr	r3, [pc, #492]	; (8005798 <_vfiprintf_r+0x244>)
 80055ac:	429d      	cmp	r5, r3
 80055ae:	d101      	bne.n	80055b4 <_vfiprintf_r+0x60>
 80055b0:	68b5      	ldr	r5, [r6, #8]
 80055b2:	e7df      	b.n	8005574 <_vfiprintf_r+0x20>
 80055b4:	4b79      	ldr	r3, [pc, #484]	; (800579c <_vfiprintf_r+0x248>)
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf08      	it	eq
 80055ba:	68f5      	ldreq	r5, [r6, #12]
 80055bc:	e7da      	b.n	8005574 <_vfiprintf_r+0x20>
 80055be:	89ab      	ldrh	r3, [r5, #12]
 80055c0:	0598      	lsls	r0, r3, #22
 80055c2:	d4ed      	bmi.n	80055a0 <_vfiprintf_r+0x4c>
 80055c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055c6:	f7ff ff8e 	bl	80054e6 <__retarget_lock_release_recursive>
 80055ca:	e7e9      	b.n	80055a0 <_vfiprintf_r+0x4c>
 80055cc:	2300      	movs	r3, #0
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	2320      	movs	r3, #32
 80055d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80055da:	2330      	movs	r3, #48	; 0x30
 80055dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057a0 <_vfiprintf_r+0x24c>
 80055e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055e4:	f04f 0901 	mov.w	r9, #1
 80055e8:	4623      	mov	r3, r4
 80055ea:	469a      	mov	sl, r3
 80055ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055f0:	b10a      	cbz	r2, 80055f6 <_vfiprintf_r+0xa2>
 80055f2:	2a25      	cmp	r2, #37	; 0x25
 80055f4:	d1f9      	bne.n	80055ea <_vfiprintf_r+0x96>
 80055f6:	ebba 0b04 	subs.w	fp, sl, r4
 80055fa:	d00b      	beq.n	8005614 <_vfiprintf_r+0xc0>
 80055fc:	465b      	mov	r3, fp
 80055fe:	4622      	mov	r2, r4
 8005600:	4629      	mov	r1, r5
 8005602:	4630      	mov	r0, r6
 8005604:	f7ff ff93 	bl	800552e <__sfputs_r>
 8005608:	3001      	adds	r0, #1
 800560a:	f000 80aa 	beq.w	8005762 <_vfiprintf_r+0x20e>
 800560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005610:	445a      	add	r2, fp
 8005612:	9209      	str	r2, [sp, #36]	; 0x24
 8005614:	f89a 3000 	ldrb.w	r3, [sl]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80a2 	beq.w	8005762 <_vfiprintf_r+0x20e>
 800561e:	2300      	movs	r3, #0
 8005620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005628:	f10a 0a01 	add.w	sl, sl, #1
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	9307      	str	r3, [sp, #28]
 8005630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005634:	931a      	str	r3, [sp, #104]	; 0x68
 8005636:	4654      	mov	r4, sl
 8005638:	2205      	movs	r2, #5
 800563a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800563e:	4858      	ldr	r0, [pc, #352]	; (80057a0 <_vfiprintf_r+0x24c>)
 8005640:	f7fa fdc6 	bl	80001d0 <memchr>
 8005644:	9a04      	ldr	r2, [sp, #16]
 8005646:	b9d8      	cbnz	r0, 8005680 <_vfiprintf_r+0x12c>
 8005648:	06d1      	lsls	r1, r2, #27
 800564a:	bf44      	itt	mi
 800564c:	2320      	movmi	r3, #32
 800564e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005652:	0713      	lsls	r3, r2, #28
 8005654:	bf44      	itt	mi
 8005656:	232b      	movmi	r3, #43	; 0x2b
 8005658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800565c:	f89a 3000 	ldrb.w	r3, [sl]
 8005660:	2b2a      	cmp	r3, #42	; 0x2a
 8005662:	d015      	beq.n	8005690 <_vfiprintf_r+0x13c>
 8005664:	9a07      	ldr	r2, [sp, #28]
 8005666:	4654      	mov	r4, sl
 8005668:	2000      	movs	r0, #0
 800566a:	f04f 0c0a 	mov.w	ip, #10
 800566e:	4621      	mov	r1, r4
 8005670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005674:	3b30      	subs	r3, #48	; 0x30
 8005676:	2b09      	cmp	r3, #9
 8005678:	d94e      	bls.n	8005718 <_vfiprintf_r+0x1c4>
 800567a:	b1b0      	cbz	r0, 80056aa <_vfiprintf_r+0x156>
 800567c:	9207      	str	r2, [sp, #28]
 800567e:	e014      	b.n	80056aa <_vfiprintf_r+0x156>
 8005680:	eba0 0308 	sub.w	r3, r0, r8
 8005684:	fa09 f303 	lsl.w	r3, r9, r3
 8005688:	4313      	orrs	r3, r2
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	46a2      	mov	sl, r4
 800568e:	e7d2      	b.n	8005636 <_vfiprintf_r+0xe2>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	1d19      	adds	r1, r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	9103      	str	r1, [sp, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	bfbb      	ittet	lt
 800569c:	425b      	neglt	r3, r3
 800569e:	f042 0202 	orrlt.w	r2, r2, #2
 80056a2:	9307      	strge	r3, [sp, #28]
 80056a4:	9307      	strlt	r3, [sp, #28]
 80056a6:	bfb8      	it	lt
 80056a8:	9204      	strlt	r2, [sp, #16]
 80056aa:	7823      	ldrb	r3, [r4, #0]
 80056ac:	2b2e      	cmp	r3, #46	; 0x2e
 80056ae:	d10c      	bne.n	80056ca <_vfiprintf_r+0x176>
 80056b0:	7863      	ldrb	r3, [r4, #1]
 80056b2:	2b2a      	cmp	r3, #42	; 0x2a
 80056b4:	d135      	bne.n	8005722 <_vfiprintf_r+0x1ce>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	9203      	str	r2, [sp, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfb8      	it	lt
 80056c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056c6:	3402      	adds	r4, #2
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057b0 <_vfiprintf_r+0x25c>
 80056ce:	7821      	ldrb	r1, [r4, #0]
 80056d0:	2203      	movs	r2, #3
 80056d2:	4650      	mov	r0, sl
 80056d4:	f7fa fd7c 	bl	80001d0 <memchr>
 80056d8:	b140      	cbz	r0, 80056ec <_vfiprintf_r+0x198>
 80056da:	2340      	movs	r3, #64	; 0x40
 80056dc:	eba0 000a 	sub.w	r0, r0, sl
 80056e0:	fa03 f000 	lsl.w	r0, r3, r0
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	4303      	orrs	r3, r0
 80056e8:	3401      	adds	r4, #1
 80056ea:	9304      	str	r3, [sp, #16]
 80056ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f0:	482c      	ldr	r0, [pc, #176]	; (80057a4 <_vfiprintf_r+0x250>)
 80056f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056f6:	2206      	movs	r2, #6
 80056f8:	f7fa fd6a 	bl	80001d0 <memchr>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d03f      	beq.n	8005780 <_vfiprintf_r+0x22c>
 8005700:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <_vfiprintf_r+0x254>)
 8005702:	bb1b      	cbnz	r3, 800574c <_vfiprintf_r+0x1f8>
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	3307      	adds	r3, #7
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	3308      	adds	r3, #8
 800570e:	9303      	str	r3, [sp, #12]
 8005710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005712:	443b      	add	r3, r7
 8005714:	9309      	str	r3, [sp, #36]	; 0x24
 8005716:	e767      	b.n	80055e8 <_vfiprintf_r+0x94>
 8005718:	fb0c 3202 	mla	r2, ip, r2, r3
 800571c:	460c      	mov	r4, r1
 800571e:	2001      	movs	r0, #1
 8005720:	e7a5      	b.n	800566e <_vfiprintf_r+0x11a>
 8005722:	2300      	movs	r3, #0
 8005724:	3401      	adds	r4, #1
 8005726:	9305      	str	r3, [sp, #20]
 8005728:	4619      	mov	r1, r3
 800572a:	f04f 0c0a 	mov.w	ip, #10
 800572e:	4620      	mov	r0, r4
 8005730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005734:	3a30      	subs	r2, #48	; 0x30
 8005736:	2a09      	cmp	r2, #9
 8005738:	d903      	bls.n	8005742 <_vfiprintf_r+0x1ee>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0c5      	beq.n	80056ca <_vfiprintf_r+0x176>
 800573e:	9105      	str	r1, [sp, #20]
 8005740:	e7c3      	b.n	80056ca <_vfiprintf_r+0x176>
 8005742:	fb0c 2101 	mla	r1, ip, r1, r2
 8005746:	4604      	mov	r4, r0
 8005748:	2301      	movs	r3, #1
 800574a:	e7f0      	b.n	800572e <_vfiprintf_r+0x1da>
 800574c:	ab03      	add	r3, sp, #12
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	462a      	mov	r2, r5
 8005752:	4b16      	ldr	r3, [pc, #88]	; (80057ac <_vfiprintf_r+0x258>)
 8005754:	a904      	add	r1, sp, #16
 8005756:	4630      	mov	r0, r6
 8005758:	f3af 8000 	nop.w
 800575c:	4607      	mov	r7, r0
 800575e:	1c78      	adds	r0, r7, #1
 8005760:	d1d6      	bne.n	8005710 <_vfiprintf_r+0x1bc>
 8005762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005764:	07d9      	lsls	r1, r3, #31
 8005766:	d405      	bmi.n	8005774 <_vfiprintf_r+0x220>
 8005768:	89ab      	ldrh	r3, [r5, #12]
 800576a:	059a      	lsls	r2, r3, #22
 800576c:	d402      	bmi.n	8005774 <_vfiprintf_r+0x220>
 800576e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005770:	f7ff feb9 	bl	80054e6 <__retarget_lock_release_recursive>
 8005774:	89ab      	ldrh	r3, [r5, #12]
 8005776:	065b      	lsls	r3, r3, #25
 8005778:	f53f af12 	bmi.w	80055a0 <_vfiprintf_r+0x4c>
 800577c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800577e:	e711      	b.n	80055a4 <_vfiprintf_r+0x50>
 8005780:	ab03      	add	r3, sp, #12
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	462a      	mov	r2, r5
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <_vfiprintf_r+0x258>)
 8005788:	a904      	add	r1, sp, #16
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f880 	bl	8005890 <_printf_i>
 8005790:	e7e4      	b.n	800575c <_vfiprintf_r+0x208>
 8005792:	bf00      	nop
 8005794:	080060b0 	.word	0x080060b0
 8005798:	080060d0 	.word	0x080060d0
 800579c:	08006090 	.word	0x08006090
 80057a0:	080060f0 	.word	0x080060f0
 80057a4:	080060fa 	.word	0x080060fa
 80057a8:	00000000 	.word	0x00000000
 80057ac:	0800552f 	.word	0x0800552f
 80057b0:	080060f6 	.word	0x080060f6

080057b4 <_printf_common>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	4616      	mov	r6, r2
 80057ba:	4699      	mov	r9, r3
 80057bc:	688a      	ldr	r2, [r1, #8]
 80057be:	690b      	ldr	r3, [r1, #16]
 80057c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bfb8      	it	lt
 80057c8:	4613      	movlt	r3, r2
 80057ca:	6033      	str	r3, [r6, #0]
 80057cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d0:	4607      	mov	r7, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	b10a      	cbz	r2, 80057da <_printf_common+0x26>
 80057d6:	3301      	adds	r3, #1
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	0699      	lsls	r1, r3, #26
 80057de:	bf42      	ittt	mi
 80057e0:	6833      	ldrmi	r3, [r6, #0]
 80057e2:	3302      	addmi	r3, #2
 80057e4:	6033      	strmi	r3, [r6, #0]
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	f015 0506 	ands.w	r5, r5, #6
 80057ec:	d106      	bne.n	80057fc <_printf_common+0x48>
 80057ee:	f104 0a19 	add.w	sl, r4, #25
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	6832      	ldr	r2, [r6, #0]
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	dc26      	bgt.n	800584a <_printf_common+0x96>
 80057fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005800:	1e13      	subs	r3, r2, #0
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	bf18      	it	ne
 8005806:	2301      	movne	r3, #1
 8005808:	0692      	lsls	r2, r2, #26
 800580a:	d42b      	bmi.n	8005864 <_printf_common+0xb0>
 800580c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d01e      	beq.n	8005858 <_printf_common+0xa4>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	68e5      	ldr	r5, [r4, #12]
 800581e:	6832      	ldr	r2, [r6, #0]
 8005820:	f003 0306 	and.w	r3, r3, #6
 8005824:	2b04      	cmp	r3, #4
 8005826:	bf08      	it	eq
 8005828:	1aad      	subeq	r5, r5, r2
 800582a:	68a3      	ldr	r3, [r4, #8]
 800582c:	6922      	ldr	r2, [r4, #16]
 800582e:	bf0c      	ite	eq
 8005830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005834:	2500      	movne	r5, #0
 8005836:	4293      	cmp	r3, r2
 8005838:	bfc4      	itt	gt
 800583a:	1a9b      	subgt	r3, r3, r2
 800583c:	18ed      	addgt	r5, r5, r3
 800583e:	2600      	movs	r6, #0
 8005840:	341a      	adds	r4, #26
 8005842:	42b5      	cmp	r5, r6
 8005844:	d11a      	bne.n	800587c <_printf_common+0xc8>
 8005846:	2000      	movs	r0, #0
 8005848:	e008      	b.n	800585c <_printf_common+0xa8>
 800584a:	2301      	movs	r3, #1
 800584c:	4652      	mov	r2, sl
 800584e:	4649      	mov	r1, r9
 8005850:	4638      	mov	r0, r7
 8005852:	47c0      	blx	r8
 8005854:	3001      	adds	r0, #1
 8005856:	d103      	bne.n	8005860 <_printf_common+0xac>
 8005858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005860:	3501      	adds	r5, #1
 8005862:	e7c6      	b.n	80057f2 <_printf_common+0x3e>
 8005864:	18e1      	adds	r1, r4, r3
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	2030      	movs	r0, #48	; 0x30
 800586a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800586e:	4422      	add	r2, r4
 8005870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005878:	3302      	adds	r3, #2
 800587a:	e7c7      	b.n	800580c <_printf_common+0x58>
 800587c:	2301      	movs	r3, #1
 800587e:	4622      	mov	r2, r4
 8005880:	4649      	mov	r1, r9
 8005882:	4638      	mov	r0, r7
 8005884:	47c0      	blx	r8
 8005886:	3001      	adds	r0, #1
 8005888:	d0e6      	beq.n	8005858 <_printf_common+0xa4>
 800588a:	3601      	adds	r6, #1
 800588c:	e7d9      	b.n	8005842 <_printf_common+0x8e>
	...

08005890 <_printf_i>:
 8005890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	7e0f      	ldrb	r7, [r1, #24]
 8005896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005898:	2f78      	cmp	r7, #120	; 0x78
 800589a:	4691      	mov	r9, r2
 800589c:	4680      	mov	r8, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	469a      	mov	sl, r3
 80058a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058a6:	d807      	bhi.n	80058b8 <_printf_i+0x28>
 80058a8:	2f62      	cmp	r7, #98	; 0x62
 80058aa:	d80a      	bhi.n	80058c2 <_printf_i+0x32>
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	f000 80d8 	beq.w	8005a62 <_printf_i+0x1d2>
 80058b2:	2f58      	cmp	r7, #88	; 0x58
 80058b4:	f000 80a3 	beq.w	80059fe <_printf_i+0x16e>
 80058b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058c0:	e03a      	b.n	8005938 <_printf_i+0xa8>
 80058c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058c6:	2b15      	cmp	r3, #21
 80058c8:	d8f6      	bhi.n	80058b8 <_printf_i+0x28>
 80058ca:	a101      	add	r1, pc, #4	; (adr r1, 80058d0 <_printf_i+0x40>)
 80058cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d0:	08005929 	.word	0x08005929
 80058d4:	0800593d 	.word	0x0800593d
 80058d8:	080058b9 	.word	0x080058b9
 80058dc:	080058b9 	.word	0x080058b9
 80058e0:	080058b9 	.word	0x080058b9
 80058e4:	080058b9 	.word	0x080058b9
 80058e8:	0800593d 	.word	0x0800593d
 80058ec:	080058b9 	.word	0x080058b9
 80058f0:	080058b9 	.word	0x080058b9
 80058f4:	080058b9 	.word	0x080058b9
 80058f8:	080058b9 	.word	0x080058b9
 80058fc:	08005a49 	.word	0x08005a49
 8005900:	0800596d 	.word	0x0800596d
 8005904:	08005a2b 	.word	0x08005a2b
 8005908:	080058b9 	.word	0x080058b9
 800590c:	080058b9 	.word	0x080058b9
 8005910:	08005a6b 	.word	0x08005a6b
 8005914:	080058b9 	.word	0x080058b9
 8005918:	0800596d 	.word	0x0800596d
 800591c:	080058b9 	.word	0x080058b9
 8005920:	080058b9 	.word	0x080058b9
 8005924:	08005a33 	.word	0x08005a33
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	602a      	str	r2, [r5, #0]
 8005930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005938:	2301      	movs	r3, #1
 800593a:	e0a3      	b.n	8005a84 <_printf_i+0x1f4>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	6829      	ldr	r1, [r5, #0]
 8005940:	0606      	lsls	r6, r0, #24
 8005942:	f101 0304 	add.w	r3, r1, #4
 8005946:	d50a      	bpl.n	800595e <_printf_i+0xce>
 8005948:	680e      	ldr	r6, [r1, #0]
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	2e00      	cmp	r6, #0
 800594e:	da03      	bge.n	8005958 <_printf_i+0xc8>
 8005950:	232d      	movs	r3, #45	; 0x2d
 8005952:	4276      	negs	r6, r6
 8005954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005958:	485e      	ldr	r0, [pc, #376]	; (8005ad4 <_printf_i+0x244>)
 800595a:	230a      	movs	r3, #10
 800595c:	e019      	b.n	8005992 <_printf_i+0x102>
 800595e:	680e      	ldr	r6, [r1, #0]
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005966:	bf18      	it	ne
 8005968:	b236      	sxthne	r6, r6
 800596a:	e7ef      	b.n	800594c <_printf_i+0xbc>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	6029      	str	r1, [r5, #0]
 8005974:	0601      	lsls	r1, r0, #24
 8005976:	d501      	bpl.n	800597c <_printf_i+0xec>
 8005978:	681e      	ldr	r6, [r3, #0]
 800597a:	e002      	b.n	8005982 <_printf_i+0xf2>
 800597c:	0646      	lsls	r6, r0, #25
 800597e:	d5fb      	bpl.n	8005978 <_printf_i+0xe8>
 8005980:	881e      	ldrh	r6, [r3, #0]
 8005982:	4854      	ldr	r0, [pc, #336]	; (8005ad4 <_printf_i+0x244>)
 8005984:	2f6f      	cmp	r7, #111	; 0x6f
 8005986:	bf0c      	ite	eq
 8005988:	2308      	moveq	r3, #8
 800598a:	230a      	movne	r3, #10
 800598c:	2100      	movs	r1, #0
 800598e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	2d00      	cmp	r5, #0
 8005998:	bfa2      	ittt	ge
 800599a:	6821      	ldrge	r1, [r4, #0]
 800599c:	f021 0104 	bicge.w	r1, r1, #4
 80059a0:	6021      	strge	r1, [r4, #0]
 80059a2:	b90e      	cbnz	r6, 80059a8 <_printf_i+0x118>
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d04d      	beq.n	8005a44 <_printf_i+0x1b4>
 80059a8:	4615      	mov	r5, r2
 80059aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ae:	fb03 6711 	mls	r7, r3, r1, r6
 80059b2:	5dc7      	ldrb	r7, [r0, r7]
 80059b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059b8:	4637      	mov	r7, r6
 80059ba:	42bb      	cmp	r3, r7
 80059bc:	460e      	mov	r6, r1
 80059be:	d9f4      	bls.n	80059aa <_printf_i+0x11a>
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d10b      	bne.n	80059dc <_printf_i+0x14c>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07de      	lsls	r6, r3, #31
 80059c8:	d508      	bpl.n	80059dc <_printf_i+0x14c>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	bfde      	ittt	le
 80059d2:	2330      	movle	r3, #48	; 0x30
 80059d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059dc:	1b52      	subs	r2, r2, r5
 80059de:	6122      	str	r2, [r4, #16]
 80059e0:	f8cd a000 	str.w	sl, [sp]
 80059e4:	464b      	mov	r3, r9
 80059e6:	aa03      	add	r2, sp, #12
 80059e8:	4621      	mov	r1, r4
 80059ea:	4640      	mov	r0, r8
 80059ec:	f7ff fee2 	bl	80057b4 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d14c      	bne.n	8005a8e <_printf_i+0x1fe>
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059f8:	b004      	add	sp, #16
 80059fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fe:	4835      	ldr	r0, [pc, #212]	; (8005ad4 <_printf_i+0x244>)
 8005a00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a04:	6829      	ldr	r1, [r5, #0]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a0c:	6029      	str	r1, [r5, #0]
 8005a0e:	061d      	lsls	r5, r3, #24
 8005a10:	d514      	bpl.n	8005a3c <_printf_i+0x1ac>
 8005a12:	07df      	lsls	r7, r3, #31
 8005a14:	bf44      	itt	mi
 8005a16:	f043 0320 	orrmi.w	r3, r3, #32
 8005a1a:	6023      	strmi	r3, [r4, #0]
 8005a1c:	b91e      	cbnz	r6, 8005a26 <_printf_i+0x196>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f023 0320 	bic.w	r3, r3, #32
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	2310      	movs	r3, #16
 8005a28:	e7b0      	b.n	800598c <_printf_i+0xfc>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	2378      	movs	r3, #120	; 0x78
 8005a34:	4828      	ldr	r0, [pc, #160]	; (8005ad8 <_printf_i+0x248>)
 8005a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a3a:	e7e3      	b.n	8005a04 <_printf_i+0x174>
 8005a3c:	0659      	lsls	r1, r3, #25
 8005a3e:	bf48      	it	mi
 8005a40:	b2b6      	uxthmi	r6, r6
 8005a42:	e7e6      	b.n	8005a12 <_printf_i+0x182>
 8005a44:	4615      	mov	r5, r2
 8005a46:	e7bb      	b.n	80059c0 <_printf_i+0x130>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	6826      	ldr	r6, [r4, #0]
 8005a4c:	6961      	ldr	r1, [r4, #20]
 8005a4e:	1d18      	adds	r0, r3, #4
 8005a50:	6028      	str	r0, [r5, #0]
 8005a52:	0635      	lsls	r5, r6, #24
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0x1cc>
 8005a58:	6019      	str	r1, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0x1d2>
 8005a5c:	0670      	lsls	r0, r6, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0x1c8>
 8005a60:	8019      	strh	r1, [r3, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	4615      	mov	r5, r2
 8005a68:	e7ba      	b.n	80059e0 <_printf_i+0x150>
 8005a6a:	682b      	ldr	r3, [r5, #0]
 8005a6c:	1d1a      	adds	r2, r3, #4
 8005a6e:	602a      	str	r2, [r5, #0]
 8005a70:	681d      	ldr	r5, [r3, #0]
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	2100      	movs	r1, #0
 8005a76:	4628      	mov	r0, r5
 8005a78:	f7fa fbaa 	bl	80001d0 <memchr>
 8005a7c:	b108      	cbz	r0, 8005a82 <_printf_i+0x1f2>
 8005a7e:	1b40      	subs	r0, r0, r5
 8005a80:	6060      	str	r0, [r4, #4]
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	2300      	movs	r3, #0
 8005a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8c:	e7a8      	b.n	80059e0 <_printf_i+0x150>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	462a      	mov	r2, r5
 8005a92:	4649      	mov	r1, r9
 8005a94:	4640      	mov	r0, r8
 8005a96:	47d0      	blx	sl
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d0ab      	beq.n	80059f4 <_printf_i+0x164>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	079b      	lsls	r3, r3, #30
 8005aa0:	d413      	bmi.n	8005aca <_printf_i+0x23a>
 8005aa2:	68e0      	ldr	r0, [r4, #12]
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	bfb8      	it	lt
 8005aaa:	4618      	movlt	r0, r3
 8005aac:	e7a4      	b.n	80059f8 <_printf_i+0x168>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	47d0      	blx	sl
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d09b      	beq.n	80059f4 <_printf_i+0x164>
 8005abc:	3501      	adds	r5, #1
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	9903      	ldr	r1, [sp, #12]
 8005ac2:	1a5b      	subs	r3, r3, r1
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dcf2      	bgt.n	8005aae <_printf_i+0x21e>
 8005ac8:	e7eb      	b.n	8005aa2 <_printf_i+0x212>
 8005aca:	2500      	movs	r5, #0
 8005acc:	f104 0619 	add.w	r6, r4, #25
 8005ad0:	e7f5      	b.n	8005abe <_printf_i+0x22e>
 8005ad2:	bf00      	nop
 8005ad4:	08006101 	.word	0x08006101
 8005ad8:	08006112 	.word	0x08006112

08005adc <__sread>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	460c      	mov	r4, r1
 8005ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae4:	f000 fa5a 	bl	8005f9c <_read_r>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	bfab      	itete	ge
 8005aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005aee:	89a3      	ldrhlt	r3, [r4, #12]
 8005af0:	181b      	addge	r3, r3, r0
 8005af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005af6:	bfac      	ite	ge
 8005af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005afa:	81a3      	strhlt	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__swrite>:
 8005afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b02:	461f      	mov	r7, r3
 8005b04:	898b      	ldrh	r3, [r1, #12]
 8005b06:	05db      	lsls	r3, r3, #23
 8005b08:	4605      	mov	r5, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	d505      	bpl.n	8005b1c <__swrite+0x1e>
 8005b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b14:	2302      	movs	r3, #2
 8005b16:	2200      	movs	r2, #0
 8005b18:	f000 f9c8 	bl	8005eac <_lseek_r>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	4632      	mov	r2, r6
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b32:	f000 b869 	b.w	8005c08 <_write_r>

08005b36 <__sseek>:
 8005b36:	b510      	push	{r4, lr}
 8005b38:	460c      	mov	r4, r1
 8005b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3e:	f000 f9b5 	bl	8005eac <_lseek_r>
 8005b42:	1c43      	adds	r3, r0, #1
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	bf15      	itete	ne
 8005b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b52:	81a3      	strheq	r3, [r4, #12]
 8005b54:	bf18      	it	ne
 8005b56:	81a3      	strhne	r3, [r4, #12]
 8005b58:	bd10      	pop	{r4, pc}

08005b5a <__sclose>:
 8005b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5e:	f000 b8d3 	b.w	8005d08 <_close_r>
	...

08005b64 <__swbuf_r>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	460e      	mov	r6, r1
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b118      	cbz	r0, 8005b76 <__swbuf_r+0x12>
 8005b6e:	6983      	ldr	r3, [r0, #24]
 8005b70:	b90b      	cbnz	r3, 8005b76 <__swbuf_r+0x12>
 8005b72:	f7ff fc19 	bl	80053a8 <__sinit>
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <__swbuf_r+0x98>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	d12b      	bne.n	8005bd4 <__swbuf_r+0x70>
 8005b7c:	686c      	ldr	r4, [r5, #4]
 8005b7e:	69a3      	ldr	r3, [r4, #24]
 8005b80:	60a3      	str	r3, [r4, #8]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	071a      	lsls	r2, r3, #28
 8005b86:	d52f      	bpl.n	8005be8 <__swbuf_r+0x84>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b36b      	cbz	r3, 8005be8 <__swbuf_r+0x84>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1ac0      	subs	r0, r0, r3
 8005b92:	6963      	ldr	r3, [r4, #20]
 8005b94:	b2f6      	uxtb	r6, r6
 8005b96:	4283      	cmp	r3, r0
 8005b98:	4637      	mov	r7, r6
 8005b9a:	dc04      	bgt.n	8005ba6 <__swbuf_r+0x42>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 f948 	bl	8005e34 <_fflush_r>
 8005ba4:	bb30      	cbnz	r0, 8005bf4 <__swbuf_r+0x90>
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	60a3      	str	r3, [r4, #8]
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	6022      	str	r2, [r4, #0]
 8005bb2:	701e      	strb	r6, [r3, #0]
 8005bb4:	6963      	ldr	r3, [r4, #20]
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	4283      	cmp	r3, r0
 8005bba:	d004      	beq.n	8005bc6 <__swbuf_r+0x62>
 8005bbc:	89a3      	ldrh	r3, [r4, #12]
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	d506      	bpl.n	8005bd0 <__swbuf_r+0x6c>
 8005bc2:	2e0a      	cmp	r6, #10
 8005bc4:	d104      	bne.n	8005bd0 <__swbuf_r+0x6c>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 f933 	bl	8005e34 <_fflush_r>
 8005bce:	b988      	cbnz	r0, 8005bf4 <__swbuf_r+0x90>
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <__swbuf_r+0x9c>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <__swbuf_r+0x7a>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7cf      	b.n	8005b7e <__swbuf_r+0x1a>
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <__swbuf_r+0xa0>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7ca      	b.n	8005b7e <__swbuf_r+0x1a>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f81e 	bl	8005c2c <__swsetup_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d0cb      	beq.n	8005b8c <__swbuf_r+0x28>
 8005bf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bf8:	e7ea      	b.n	8005bd0 <__swbuf_r+0x6c>
 8005bfa:	bf00      	nop
 8005bfc:	080060b0 	.word	0x080060b0
 8005c00:	080060d0 	.word	0x080060d0
 8005c04:	08006090 	.word	0x08006090

08005c08 <_write_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	; (8005c28 <_write_r+0x20>)
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	4608      	mov	r0, r1
 8005c10:	4611      	mov	r1, r2
 8005c12:	2200      	movs	r2, #0
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f7fb f8e1 	bl	8000dde <_write>
 8005c1c:	1c43      	adds	r3, r0, #1
 8005c1e:	d102      	bne.n	8005c26 <_write_r+0x1e>
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	b103      	cbz	r3, 8005c26 <_write_r+0x1e>
 8005c24:	6023      	str	r3, [r4, #0]
 8005c26:	bd38      	pop	{r3, r4, r5, pc}
 8005c28:	2000013c 	.word	0x2000013c

08005c2c <__swsetup_r>:
 8005c2c:	4b32      	ldr	r3, [pc, #200]	; (8005cf8 <__swsetup_r+0xcc>)
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	681d      	ldr	r5, [r3, #0]
 8005c32:	4606      	mov	r6, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	b125      	cbz	r5, 8005c42 <__swsetup_r+0x16>
 8005c38:	69ab      	ldr	r3, [r5, #24]
 8005c3a:	b913      	cbnz	r3, 8005c42 <__swsetup_r+0x16>
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f7ff fbb3 	bl	80053a8 <__sinit>
 8005c42:	4b2e      	ldr	r3, [pc, #184]	; (8005cfc <__swsetup_r+0xd0>)
 8005c44:	429c      	cmp	r4, r3
 8005c46:	d10f      	bne.n	8005c68 <__swsetup_r+0x3c>
 8005c48:	686c      	ldr	r4, [r5, #4]
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c50:	0719      	lsls	r1, r3, #28
 8005c52:	d42c      	bmi.n	8005cae <__swsetup_r+0x82>
 8005c54:	06dd      	lsls	r5, r3, #27
 8005c56:	d411      	bmi.n	8005c7c <__swsetup_r+0x50>
 8005c58:	2309      	movs	r3, #9
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c66:	e03e      	b.n	8005ce6 <__swsetup_r+0xba>
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <__swsetup_r+0xd4>)
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	d101      	bne.n	8005c72 <__swsetup_r+0x46>
 8005c6e:	68ac      	ldr	r4, [r5, #8]
 8005c70:	e7eb      	b.n	8005c4a <__swsetup_r+0x1e>
 8005c72:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <__swsetup_r+0xd8>)
 8005c74:	429c      	cmp	r4, r3
 8005c76:	bf08      	it	eq
 8005c78:	68ec      	ldreq	r4, [r5, #12]
 8005c7a:	e7e6      	b.n	8005c4a <__swsetup_r+0x1e>
 8005c7c:	0758      	lsls	r0, r3, #29
 8005c7e:	d512      	bpl.n	8005ca6 <__swsetup_r+0x7a>
 8005c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c82:	b141      	cbz	r1, 8005c96 <__swsetup_r+0x6a>
 8005c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c88:	4299      	cmp	r1, r3
 8005c8a:	d002      	beq.n	8005c92 <__swsetup_r+0x66>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff fa2b 	bl	80050e8 <_free_r>
 8005c92:	2300      	movs	r3, #0
 8005c94:	6363      	str	r3, [r4, #52]	; 0x34
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6063      	str	r3, [r4, #4]
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	b94b      	cbnz	r3, 8005cc6 <__swsetup_r+0x9a>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d003      	beq.n	8005cc6 <__swsetup_r+0x9a>
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f000 f92b 	bl	8005f1c <__smakebuf_r>
 8005cc6:	89a0      	ldrh	r0, [r4, #12]
 8005cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ccc:	f010 0301 	ands.w	r3, r0, #1
 8005cd0:	d00a      	beq.n	8005ce8 <__swsetup_r+0xbc>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6963      	ldr	r3, [r4, #20]
 8005cd8:	425b      	negs	r3, r3
 8005cda:	61a3      	str	r3, [r4, #24]
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	b943      	cbnz	r3, 8005cf2 <__swsetup_r+0xc6>
 8005ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ce4:	d1ba      	bne.n	8005c5c <__swsetup_r+0x30>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	0781      	lsls	r1, r0, #30
 8005cea:	bf58      	it	pl
 8005cec:	6963      	ldrpl	r3, [r4, #20]
 8005cee:	60a3      	str	r3, [r4, #8]
 8005cf0:	e7f4      	b.n	8005cdc <__swsetup_r+0xb0>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7f7      	b.n	8005ce6 <__swsetup_r+0xba>
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	080060b0 	.word	0x080060b0
 8005d00:	080060d0 	.word	0x080060d0
 8005d04:	08006090 	.word	0x08006090

08005d08 <_close_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4d06      	ldr	r5, [pc, #24]	; (8005d24 <_close_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb f87f 	bl	8000e16 <_close>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_close_r+0x1a>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_close_r+0x1a>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	2000013c 	.word	0x2000013c

08005d28 <__sflush_r>:
 8005d28:	898a      	ldrh	r2, [r1, #12]
 8005d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2e:	4605      	mov	r5, r0
 8005d30:	0710      	lsls	r0, r2, #28
 8005d32:	460c      	mov	r4, r1
 8005d34:	d458      	bmi.n	8005de8 <__sflush_r+0xc0>
 8005d36:	684b      	ldr	r3, [r1, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	dc05      	bgt.n	8005d48 <__sflush_r+0x20>
 8005d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dc02      	bgt.n	8005d48 <__sflush_r+0x20>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	d0f9      	beq.n	8005d42 <__sflush_r+0x1a>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d54:	682f      	ldr	r7, [r5, #0]
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	d032      	beq.n	8005dc0 <__sflush_r+0x98>
 8005d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	075a      	lsls	r2, r3, #29
 8005d60:	d505      	bpl.n	8005d6e <__sflush_r+0x46>
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	1ac0      	subs	r0, r0, r3
 8005d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d68:	b10b      	cbz	r3, 8005d6e <__sflush_r+0x46>
 8005d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d6c:	1ac0      	subs	r0, r0, r3
 8005d6e:	2300      	movs	r3, #0
 8005d70:	4602      	mov	r2, r0
 8005d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d74:	6a21      	ldr	r1, [r4, #32]
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b0      	blx	r6
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	d106      	bne.n	8005d8e <__sflush_r+0x66>
 8005d80:	6829      	ldr	r1, [r5, #0]
 8005d82:	291d      	cmp	r1, #29
 8005d84:	d82c      	bhi.n	8005de0 <__sflush_r+0xb8>
 8005d86:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <__sflush_r+0x108>)
 8005d88:	40ca      	lsrs	r2, r1
 8005d8a:	07d6      	lsls	r6, r2, #31
 8005d8c:	d528      	bpl.n	8005de0 <__sflush_r+0xb8>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	6062      	str	r2, [r4, #4]
 8005d92:	04d9      	lsls	r1, r3, #19
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	6022      	str	r2, [r4, #0]
 8005d98:	d504      	bpl.n	8005da4 <__sflush_r+0x7c>
 8005d9a:	1c42      	adds	r2, r0, #1
 8005d9c:	d101      	bne.n	8005da2 <__sflush_r+0x7a>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b903      	cbnz	r3, 8005da4 <__sflush_r+0x7c>
 8005da2:	6560      	str	r0, [r4, #84]	; 0x54
 8005da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005da6:	602f      	str	r7, [r5, #0]
 8005da8:	2900      	cmp	r1, #0
 8005daa:	d0ca      	beq.n	8005d42 <__sflush_r+0x1a>
 8005dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005db0:	4299      	cmp	r1, r3
 8005db2:	d002      	beq.n	8005dba <__sflush_r+0x92>
 8005db4:	4628      	mov	r0, r5
 8005db6:	f7ff f997 	bl	80050e8 <_free_r>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8005dbe:	e7c1      	b.n	8005d44 <__sflush_r+0x1c>
 8005dc0:	6a21      	ldr	r1, [r4, #32]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	47b0      	blx	r6
 8005dc8:	1c41      	adds	r1, r0, #1
 8005dca:	d1c7      	bne.n	8005d5c <__sflush_r+0x34>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0c4      	beq.n	8005d5c <__sflush_r+0x34>
 8005dd2:	2b1d      	cmp	r3, #29
 8005dd4:	d001      	beq.n	8005dda <__sflush_r+0xb2>
 8005dd6:	2b16      	cmp	r3, #22
 8005dd8:	d101      	bne.n	8005dde <__sflush_r+0xb6>
 8005dda:	602f      	str	r7, [r5, #0]
 8005ddc:	e7b1      	b.n	8005d42 <__sflush_r+0x1a>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7ad      	b.n	8005d44 <__sflush_r+0x1c>
 8005de8:	690f      	ldr	r7, [r1, #16]
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	d0a9      	beq.n	8005d42 <__sflush_r+0x1a>
 8005dee:	0793      	lsls	r3, r2, #30
 8005df0:	680e      	ldr	r6, [r1, #0]
 8005df2:	bf08      	it	eq
 8005df4:	694b      	ldreq	r3, [r1, #20]
 8005df6:	600f      	str	r7, [r1, #0]
 8005df8:	bf18      	it	ne
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	eba6 0807 	sub.w	r8, r6, r7
 8005e00:	608b      	str	r3, [r1, #8]
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	dd9c      	ble.n	8005d42 <__sflush_r+0x1a>
 8005e08:	6a21      	ldr	r1, [r4, #32]
 8005e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	463a      	mov	r2, r7
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b0      	blx	r6
 8005e14:	2800      	cmp	r0, #0
 8005e16:	dc06      	bgt.n	8005e26 <__sflush_r+0xfe>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e24:	e78e      	b.n	8005d44 <__sflush_r+0x1c>
 8005e26:	4407      	add	r7, r0
 8005e28:	eba8 0800 	sub.w	r8, r8, r0
 8005e2c:	e7e9      	b.n	8005e02 <__sflush_r+0xda>
 8005e2e:	bf00      	nop
 8005e30:	20400001 	.word	0x20400001

08005e34 <_fflush_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	690b      	ldr	r3, [r1, #16]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	b913      	cbnz	r3, 8005e44 <_fflush_r+0x10>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	4628      	mov	r0, r5
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	b118      	cbz	r0, 8005e4e <_fflush_r+0x1a>
 8005e46:	6983      	ldr	r3, [r0, #24]
 8005e48:	b90b      	cbnz	r3, 8005e4e <_fflush_r+0x1a>
 8005e4a:	f7ff faad 	bl	80053a8 <__sinit>
 8005e4e:	4b14      	ldr	r3, [pc, #80]	; (8005ea0 <_fflush_r+0x6c>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d11b      	bne.n	8005e8c <_fflush_r+0x58>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ef      	beq.n	8005e3e <_fflush_r+0xa>
 8005e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e60:	07d0      	lsls	r0, r2, #31
 8005e62:	d404      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e64:	0599      	lsls	r1, r3, #22
 8005e66:	d402      	bmi.n	8005e6e <_fflush_r+0x3a>
 8005e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e6a:	f7ff fb3b 	bl	80054e4 <__retarget_lock_acquire_recursive>
 8005e6e:	4628      	mov	r0, r5
 8005e70:	4621      	mov	r1, r4
 8005e72:	f7ff ff59 	bl	8005d28 <__sflush_r>
 8005e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e78:	07da      	lsls	r2, r3, #31
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	d4e0      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	059b      	lsls	r3, r3, #22
 8005e82:	d4dd      	bmi.n	8005e40 <_fflush_r+0xc>
 8005e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e86:	f7ff fb2e 	bl	80054e6 <__retarget_lock_release_recursive>
 8005e8a:	e7d9      	b.n	8005e40 <_fflush_r+0xc>
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_fflush_r+0x70>)
 8005e8e:	429c      	cmp	r4, r3
 8005e90:	d101      	bne.n	8005e96 <_fflush_r+0x62>
 8005e92:	68ac      	ldr	r4, [r5, #8]
 8005e94:	e7df      	b.n	8005e56 <_fflush_r+0x22>
 8005e96:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <_fflush_r+0x74>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	bf08      	it	eq
 8005e9c:	68ec      	ldreq	r4, [r5, #12]
 8005e9e:	e7da      	b.n	8005e56 <_fflush_r+0x22>
 8005ea0:	080060b0 	.word	0x080060b0
 8005ea4:	080060d0 	.word	0x080060d0
 8005ea8:	08006090 	.word	0x08006090

08005eac <_lseek_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	; (8005ecc <_lseek_r+0x20>)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fa ffd2 	bl	8000e64 <_lseek>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_lseek_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_lseek_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	2000013c 	.word	0x2000013c

08005ed0 <__swhatbuf_r>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	460e      	mov	r6, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	b096      	sub	sp, #88	; 0x58
 8005edc:	4614      	mov	r4, r2
 8005ede:	461d      	mov	r5, r3
 8005ee0:	da08      	bge.n	8005ef4 <__swhatbuf_r+0x24>
 8005ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	602a      	str	r2, [r5, #0]
 8005eea:	061a      	lsls	r2, r3, #24
 8005eec:	d410      	bmi.n	8005f10 <__swhatbuf_r+0x40>
 8005eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef2:	e00e      	b.n	8005f12 <__swhatbuf_r+0x42>
 8005ef4:	466a      	mov	r2, sp
 8005ef6:	f000 f863 	bl	8005fc0 <_fstat_r>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	dbf1      	blt.n	8005ee2 <__swhatbuf_r+0x12>
 8005efe:	9a01      	ldr	r2, [sp, #4]
 8005f00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f08:	425a      	negs	r2, r3
 8005f0a:	415a      	adcs	r2, r3
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	e7ee      	b.n	8005eee <__swhatbuf_r+0x1e>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	2000      	movs	r0, #0
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	b016      	add	sp, #88	; 0x58
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f1c <__smakebuf_r>:
 8005f1c:	898b      	ldrh	r3, [r1, #12]
 8005f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f20:	079d      	lsls	r5, r3, #30
 8005f22:	4606      	mov	r6, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	d507      	bpl.n	8005f38 <__smakebuf_r+0x1c>
 8005f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	2301      	movs	r3, #1
 8005f32:	6163      	str	r3, [r4, #20]
 8005f34:	b002      	add	sp, #8
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	ab01      	add	r3, sp, #4
 8005f3a:	466a      	mov	r2, sp
 8005f3c:	f7ff ffc8 	bl	8005ed0 <__swhatbuf_r>
 8005f40:	9900      	ldr	r1, [sp, #0]
 8005f42:	4605      	mov	r5, r0
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7ff f93b 	bl	80051c0 <_malloc_r>
 8005f4a:	b948      	cbnz	r0, 8005f60 <__smakebuf_r+0x44>
 8005f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f50:	059a      	lsls	r2, r3, #22
 8005f52:	d4ef      	bmi.n	8005f34 <__smakebuf_r+0x18>
 8005f54:	f023 0303 	bic.w	r3, r3, #3
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7e3      	b.n	8005f28 <__smakebuf_r+0xc>
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <__smakebuf_r+0x7c>)
 8005f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	6163      	str	r3, [r4, #20]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	6120      	str	r0, [r4, #16]
 8005f76:	b15b      	cbz	r3, 8005f90 <__smakebuf_r+0x74>
 8005f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 f831 	bl	8005fe4 <_isatty_r>
 8005f82:	b128      	cbz	r0, 8005f90 <__smakebuf_r+0x74>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	89a0      	ldrh	r0, [r4, #12]
 8005f92:	4305      	orrs	r5, r0
 8005f94:	81a5      	strh	r5, [r4, #12]
 8005f96:	e7cd      	b.n	8005f34 <__smakebuf_r+0x18>
 8005f98:	08005341 	.word	0x08005341

08005f9c <_read_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	; (8005fbc <_read_r+0x20>)
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fa fefa 	bl	8000da4 <_read>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_read_r+0x1e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_read_r+0x1e>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	2000013c 	.word	0x2000013c

08005fc0 <_fstat_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	; (8005fe0 <_fstat_r+0x20>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	f7fa ff2e 	bl	8000e2e <_fstat>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	d102      	bne.n	8005fdc <_fstat_r+0x1c>
 8005fd6:	682b      	ldr	r3, [r5, #0]
 8005fd8:	b103      	cbz	r3, 8005fdc <_fstat_r+0x1c>
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
 8005fde:	bf00      	nop
 8005fe0:	2000013c 	.word	0x2000013c

08005fe4 <_isatty_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d06      	ldr	r5, [pc, #24]	; (8006000 <_isatty_r+0x1c>)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4608      	mov	r0, r1
 8005fee:	602b      	str	r3, [r5, #0]
 8005ff0:	f7fa ff2d 	bl	8000e4e <_isatty>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_isatty_r+0x1a>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_isatty_r+0x1a>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	2000013c 	.word	0x2000013c

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
