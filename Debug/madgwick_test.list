
madgwick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c64c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800c7e0  0800c7e0  0001c7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d08c  0800d08c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d094  0800d094  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d094  0800d094  0001d094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d098  0800d098  0001d098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000578  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000754  20000754  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e7a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c94  00000000  00000000  00036086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00038d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003a058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff9  00000000  00000000  0003b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001362c  00000000  00000000  0005e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4c8  00000000  00000000  000718bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cd85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000678c  00000000  00000000  0013cdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7c4 	.word	0x0800c7c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c7c4 	.word	0x0800c7c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <i3g4250d_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t i3g4250d_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	72fb      	strb	r3, [r7, #11]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	813b      	strh	r3, [r7, #8]

	halstatus = HAL_I2C_Mem_Write(handle, I3G4250D_I2C_ADD_L, reg,
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	893b      	ldrh	r3, [r7, #8]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	21d1      	movs	r1, #209	; 0xd1
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f001 fc62 	bl	80027a0 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <i3g4250d_write+0x50>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <i3g4250d_write+0x50>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <i3g4250d_write+0x46>
			return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	e000      	b.n	8000ef4 <i3g4250d_write+0x48>
		}
		return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <i3g4250d_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
int32_t i3g4250d_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
 8000f10:	4613      	mov	r3, r2
 8000f12:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, I3G4250D_I2C_ADD_L, reg,
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	21d1      	movs	r1, #209	; 0xd1
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f001 fd32 	bl	8002994 <HAL_I2C_Mem_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <i3g4250d_read+0x50>)
 8000f36:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <i3g4250d_read+0x50>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <i3g4250d_read+0x46>
		return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f44:	e000      	b.n	8000f48 <i3g4250d_read+0x48>
	}
	return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <configure_i3g4250d>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_i3g4250d(void *handle, stmdev_ctx_t* dev_ctx)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = i3g4250d_write;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <configure_i3g4250d+0x74>)
 8000f62:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = i3g4250d_read;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <configure_i3g4250d+0x78>)
 8000f68:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	i3g4250d_device_id_get(dev_ctx, &who_iam);
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	4619      	mov	r1, r3
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f006 ffb5 	bl	8007ee6 <i3g4250d_device_id_get>
	if(who_iam != I3G4250D_ID){
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2bd3      	cmp	r3, #211	; 0xd3
 8000f80:	d002      	beq.n	8000f88 <configure_i3g4250d+0x34>
		return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f86:	e01b      	b.n	8000fc0 <configure_i3g4250d+0x6c>
	}

	int32_t ret;
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e014      	b.n	8000fb8 <configure_i3g4250d+0x64>
		ret = dev_ctx->write_reg(handle, I3G4250D_REGs_ADDR_conf[i], I3G4250D_REGs_VAL_conf + i, 1);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681c      	ldr	r4, [r3, #0]
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <configure_i3g4250d+0x7c>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4413      	add	r3, r2
 8000f98:	7819      	ldrb	r1, [r3, #0]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <configure_i3g4250d+0x80>)
 8000f9e:	441a      	add	r2, r3
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	47a0      	blx	r4
 8000fa6:	6178      	str	r0, [r7, #20]
		if(ret != 0)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <configure_i3g4250d+0x5e>
		{
			return ret;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	e006      	b.n	8000fc0 <configure_i3g4250d+0x6c>
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	dde7      	ble.n	8000f8e <configure_i3g4250d+0x3a>
		}
	}
	return ret;
 8000fbe:	697b      	ldr	r3, [r7, #20]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	08000ead 	.word	0x08000ead
 8000fcc:	08000f01 	.word	0x08000f01
 8000fd0:	0800c848 	.word	0x0800c848
 8000fd4:	0800c850 	.word	0x0800c850

08000fd8 <read_gyroscope_data_fifo>:
 * @param dev_ctx    		device structure
 * @param accel_data 		acceleration of device(x,y,z)
 *
 */
int32_t read_gyroscope_data_fifo(stmdev_ctx_t *dev_ctx, float* gyro_data)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 	 int16_t raw_gyro_data[3];
 	 memset(raw_gyro_data, 0x00, 3 * sizeof(int16_t));
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f007 f8f2 	bl	80081d4 <memset>
	 int ret = i3g4250d_angular_rate_raw_get(dev_ctx, raw_gyro_data);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 ff2a 	bl	8007e50 <i3g4250d_angular_rate_raw_get>
 8000ffc:	6138      	str	r0, [r7, #16]
	 if(ret == 0){
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d119      	bne.n	8001038 <read_gyroscope_data_fifo+0x60>
		 for(int i = 0; i<3; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e013      	b.n	8001032 <read_gyroscope_data_fifo+0x5a>
		 {
			 gyro_data[i] = i3g4250d_from_fs245dps_to_mdps(
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	3318      	adds	r3, #24
 8001010:	443b      	add	r3, r7
 8001012:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	18d4      	adds	r4, r2, r3
 800101e:	4608      	mov	r0, r1
 8001020:	f006 fefe 	bl	8007e20 <i3g4250d_from_fs245dps_to_mdps>
 8001024:	eef0 7a40 	vmov.f32	s15, s0
 8001028:	edc4 7a00 	vstr	s15, [r4]
		 for(int i = 0; i<3; i++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b02      	cmp	r3, #2
 8001036:	dde8      	ble.n	800100a <read_gyroscope_data_fifo+0x32>
											  raw_gyro_data[i]);
		 }
	 }
	 return ret;
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	4618      	mov	r0, r3
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
	...

08001044 <lis331dlh_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis331dlh_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	4613      	mov	r3, r2
 8001056:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	b29a      	uxth	r2, r3
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	893b      	ldrh	r3, [r7, #8]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2131      	movs	r1, #49	; 0x31
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f001 fb96 	bl	80027a0 <HAL_I2C_Mem_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <lis331dlh_write+0x50>)
 800107a:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <lis331dlh_write+0x50>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <lis331dlh_write+0x46>
			return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001088:	e000      	b.n	800108c <lis331dlh_write+0x48>
		}
		return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001f9 	.word	0x200001f9

08001098 <lis331dlh_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis331dlh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	461a      	mov	r2, r3
 80010a4:	460b      	mov	r3, r1
 80010a6:	72fb      	strb	r3, [r7, #11]
 80010a8:	4613      	mov	r3, r2
 80010aa:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	893b      	ldrh	r3, [r7, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2131      	movs	r1, #49	; 0x31
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 fc66 	bl	8002994 <HAL_I2C_Mem_Read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <lis331dlh_read+0x50>)
 80010ce:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <lis331dlh_read+0x50>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <lis331dlh_read+0x46>
		return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	e000      	b.n	80010e0 <lis331dlh_read+0x48>
	}
	return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001f9 	.word	0x200001f9

080010ec <configure_lis331dlh>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis331dlh(void *handle, stmdev_ctx_t *dev_ctx)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = lis331dlh_write;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <configure_lis331dlh+0xb4>)
 80010fa:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = lis331dlh_read;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <configure_lis331dlh+0xb8>)
 8001100:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	lis331dlh_device_id_get(dev_ctx, &who_iam);
 8001108:	f107 030b 	add.w	r3, r7, #11
 800110c:	4619      	mov	r1, r3
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f006 ff86 	bl	8008020 <lis331dlh_device_id_get>
	if(who_iam != LIS331DLH_ID){
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2b32      	cmp	r3, #50	; 0x32
 8001118:	d002      	beq.n	8001120 <configure_lis331dlh+0x34>
		return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e03a      	b.n	8001196 <configure_lis331dlh+0xaa>
	}

	int32_t ret;
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e033      	b.n	800118e <configure_lis331dlh+0xa2>
		if(LIS331DLH_REGs_ADDR_conf[i] == LIS331DLH_HP_FILTER_RESET){
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b25      	cmp	r3, #37	; 0x25
 8001130:	d117      	bne.n	8001162 <configure_lis331dlh+0x76>
			uint8_t *empty_buff = (uint8_t*)malloc(sizeof(uint8_t));
 8001132:	2001      	movs	r0, #1
 8001134:	f007 f83e 	bl	80081b4 <malloc>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
			ret = dev_ctx->read_reg(handle, LIS331DLH_REGs_ADDR_conf[i], empty_buff, 1);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685c      	ldr	r4, [r3, #4]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	7819      	ldrb	r1, [r3, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	47a0      	blx	r4
 8001150:	6138      	str	r0, [r7, #16]
			free(empty_buff);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f007 f836 	bl	80081c4 <free>
			if(ret != 0)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <configure_lis331dlh+0x9a>
			{
				return ret;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	e019      	b.n	8001196 <configure_lis331dlh+0xaa>
			}
			continue;
		}
		ret = dev_ctx->write_reg(handle, LIS331DLH_REGs_ADDR_conf[i], LIS331DLH_REGs_VAL_conf + i, 1);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681c      	ldr	r4, [r3, #0]
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	4413      	add	r3, r2
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <configure_lis331dlh+0xc0>)
 8001172:	441a      	add	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	47a0      	blx	r4
 800117a:	6138      	str	r0, [r7, #16]
		if(ret != 0)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <configure_lis331dlh+0x9c>
		{
			return ret;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	e007      	b.n	8001196 <configure_lis331dlh+0xaa>
			continue;
 8001186:	bf00      	nop
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b0c      	cmp	r3, #12
 8001192:	ddc8      	ble.n	8001126 <configure_lis331dlh+0x3a>
		}
	}
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	08001045 	.word	0x08001045
 80011a4:	08001099 	.word	0x08001099
 80011a8:	0800c858 	.word	0x0800c858
 80011ac:	0800c868 	.word	0x0800c868

080011b0 <read_acceleration_data>:
 * @param dev_ctx    		device structure
 * @param accel_data 		acceleration of device(x,y,z)
 *
 */
int32_t read_acceleration_data(stmdev_ctx_t *dev_ctx, float* accel_data)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	lis331dlh_status_reg_t status_reg;
	lis331dlh_status_reg_get(dev_ctx, &status_reg);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f006 fed1 	bl	8007f68 <lis331dlh_status_reg_get>
	int32_t ret;
	int16_t raw_accel_data[3];
	memset(raw_accel_data, 0x00, 3 * sizeof(int16_t));
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2206      	movs	r2, #6
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f800 	bl	80081d4 <memset>
	while(1){
		if(status_reg.zyxda != 0)
 80011d4:	7d3b      	ldrb	r3, [r7, #20]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d100      	bne.n	80011e2 <read_acceleration_data+0x32>
 80011e0:	e7f8      	b.n	80011d4 <read_acceleration_data+0x24>
			break;
 80011e2:	bf00      	nop
	}
	ret = lis331dlh_acceleration_raw_get(dev_ctx, raw_accel_data);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f006 fecd 	bl	8007f8a <lis331dlh_acceleration_raw_get>
 80011f0:	61b8      	str	r0, [r7, #24]
	if(ret == 0){
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d119      	bne.n	800122c <read_acceleration_data+0x7c>
		for(int i = 0; i<3; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e013      	b.n	8001226 <read_acceleration_data+0x76>
		 {
			 accel_data[i] = lis331dlh_from_fs2_to_mg(raw_accel_data[i]);
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3320      	adds	r3, #32
 8001204:	443b      	add	r3, r7
 8001206:	f933 1c14 	ldrsh.w	r1, [r3, #-20]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	4608      	mov	r0, r1
 8001214:	f006 fe90 	bl	8007f38 <lis331dlh_from_fs2_to_mg>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<3; i++)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	dde8      	ble.n	80011fe <read_acceleration_data+0x4e>
		 }
	}

	return ret;
 800122c:	69bb      	ldr	r3, [r7, #24]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
	...

08001238 <lis3mdl_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis3mdl_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af04      	add	r7, sp, #16
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	72fb      	strb	r3, [r7, #11]
 8001248:	4613      	mov	r3, r2
 800124a:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS3MDL_I2C_ADD_L, reg,
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	b29a      	uxth	r2, r3
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	893b      	ldrh	r3, [r7, #8]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2139      	movs	r1, #57	; 0x39
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f001 fa9c 	bl	80027a0 <HAL_I2C_Mem_Write>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <lis3mdl_write+0x50>)
 800126e:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <lis3mdl_write+0x50>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <lis3mdl_write+0x46>
			return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	e000      	b.n	8001280 <lis3mdl_write+0x48>
		}
		return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001fa 	.word	0x200001fa

0800128c <lis3mdl_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis3mdl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	72fb      	strb	r3, [r7, #11]
 800129c:	4613      	mov	r3, r2
 800129e:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS3MDL_I2C_ADD_L, reg,
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	893b      	ldrh	r3, [r7, #8]
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2139      	movs	r1, #57	; 0x39
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f001 fb6c 	bl	8002994 <HAL_I2C_Mem_Read>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <lis3mdl_read+0x50>)
 80012c2:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <lis3mdl_read+0x50>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <lis3mdl_read+0x46>
		return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d0:	e000      	b.n	80012d4 <lis3mdl_read+0x48>
	}
	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001fa 	.word	0x200001fa

080012e0 <configure_lis3mdl>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis3mdl(void *handle, stmdev_ctx_t *dev_ctx)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = lis3mdl_write;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <configure_lis3mdl+0x74>)
 80012ee:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = lis3mdl_read;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <configure_lis3mdl+0x78>)
 80012f4:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	lis3mdl_device_id_get(dev_ctx, &who_iam);
 80012fc:	f107 030f 	add.w	r3, r7, #15
 8001300:	4619      	mov	r1, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f006 ff1b 	bl	800813e <lis3mdl_device_id_get>
	if(who_iam != LIS3MDL_ID){
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b3d      	cmp	r3, #61	; 0x3d
 800130c:	d002      	beq.n	8001314 <configure_lis3mdl+0x34>
		return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001312:	e01b      	b.n	800134c <configure_lis3mdl+0x6c>
	}

	int32_t ret;
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e014      	b.n	8001344 <configure_lis3mdl+0x64>
		ret = dev_ctx->write_reg(handle, LIS3MDL_REGs_ADDR_conf[i], LIS3MDL_REGs_VAL_conf + i, 1);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681c      	ldr	r4, [r3, #0]
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <configure_lis3mdl+0x7c>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4413      	add	r3, r2
 8001324:	7819      	ldrb	r1, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <configure_lis3mdl+0x80>)
 800132a:	441a      	add	r2, r3
 800132c:	2301      	movs	r3, #1
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	47a0      	blx	r4
 8001332:	6138      	str	r0, [r7, #16]
		if(ret != 0)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <configure_lis3mdl+0x5e>
		{
			return ret;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	e006      	b.n	800134c <configure_lis3mdl+0x6c>
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b02      	cmp	r3, #2
 8001348:	dde7      	ble.n	800131a <configure_lis3mdl+0x3a>
		}
	}
	return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	08001239 	.word	0x08001239
 8001358:	0800128d 	.word	0x0800128d
 800135c:	0800c874 	.word	0x0800c874
 8001360:	0800c878 	.word	0x0800c878

08001364 <read_mag_data>:
 * @param dev_ctx    		device structure
 * @param mag_data 			magnetic data
 *
 */
int32_t read_mag_data(stmdev_ctx_t *dev_ctx, float* mag_data)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	int32_t ret;
	int16_t raw_mag_data[3];
	memset(raw_mag_data, 0x00, 3 * sizeof(int16_t));
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2206      	movs	r2, #6
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f006 ff2c 	bl	80081d4 <memset>
	ret = lis3mdl_magnetic_raw_get(dev_ctx, raw_mag_data);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f006 fe90 	bl	80080a8 <lis3mdl_magnetic_raw_get>
 8001388:	6138      	str	r0, [r7, #16]
	if(ret == 0){
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11d      	bne.n	80013cc <read_mag_data+0x68>
		for(int i = 0; i<3; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e017      	b.n	80013c6 <read_mag_data+0x62>
		{
			mag_data[i] = 1000 * lis3mdl_from_fs16_to_gauss(raw_mag_data[i]);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3318      	adds	r3, #24
 800139c:	443b      	add	r3, r7
 800139e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fe66 	bl	8008074 <lis3mdl_from_fs16_to_gauss>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013d8 <read_mag_data+0x74>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i<3; i++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	dde4      	ble.n	8001396 <read_mag_data+0x32>
		}
	}
	return ret;
 80013cc:	693b      	ldr	r3, [r7, #16]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	447a0000 	.word	0x447a0000

080013dc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001400 <FusionRadiansToDegrees+0x24>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	42652ee0 	.word	0x42652ee0

08001404 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 800140e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001412:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d802      	bhi.n	8001426 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001420:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001454 <FusionAsin+0x50>
 8001424:	e011      	b.n	800144a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8001426:	edd7 7a01 	vldr	s15, [r7, #4]
 800142a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	db02      	blt.n	800143e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8001438:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001458 <FusionAsin+0x54>
 800143c:	e005      	b.n	800144a <FusionAsin+0x46>
    }
    return asinf(value);
 800143e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001442:	f009 fec3 	bl	800b1cc <asinf>
 8001446:	eef0 7a40 	vmov.f32	s15, s0
}
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	bfc90fdb 	.word	0xbfc90fdb
 8001458:	3fc90fdb 	.word	0x3fc90fdb

0800145c <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b090      	sub	sp, #64	; 0x40
 8001460:	af00      	add	r7, sp, #0
 8001462:	eeb0 6a40 	vmov.f32	s12, s0
 8001466:	eef0 6a60 	vmov.f32	s13, s1
 800146a:	eeb0 7a41 	vmov.f32	s14, s2
 800146e:	eef0 7a61 	vmov.f32	s15, s3
 8001472:	ed87 6a04 	vstr	s12, [r7, #16]
 8001476:	edc7 6a05 	vstr	s13, [r7, #20]
 800147a:	ed87 7a06 	vstr	s14, [r7, #24]
 800147e:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001482:	ed97 7a06 	vldr	s14, [r7, #24]
 8001486:	edd7 7a06 	vldr	s15, [r7, #24]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800149a:	ed97 7a04 	vldr	s14, [r7, #16]
 800149e:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80014aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	eef0 0a67 	vmov.f32	s1, s15
 80014ce:	eeb0 0a66 	vmov.f32	s0, s13
 80014d2:	f009 fea7 	bl	800b224 <atan2f>
 80014d6:	eef0 7a40 	vmov.f32	s15, s0
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f7ff ff7d 	bl	80013dc <FusionRadiansToDegrees>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80014ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	f7ff ff79 	bl	8001404 <FusionAsin>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f7ff ff5f 	bl	80013dc <FusionRadiansToDegrees>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001522:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8001526:	ed97 7a04 	vldr	s14, [r7, #16]
 800152a:	edd7 7a07 	vldr	s15, [r7, #28]
 800152e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001532:	edd7 6a05 	vldr	s13, [r7, #20]
 8001536:	edd7 7a06 	vldr	s15, [r7, #24]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	edd7 7a07 	vldr	s15, [r7, #28]
 800154a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	eeb0 0a66 	vmov.f32	s0, s13
 800155e:	f009 fe61 	bl	800b224 <atan2f>
 8001562:	eef0 7a40 	vmov.f32	s15, s0
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f7ff ff37 	bl	80013dc <FusionRadiansToDegrees>
 800156e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001572:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800157e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158a:	ee06 1a90 	vmov	s13, r1
 800158e:	ee07 2a10 	vmov	s14, r2
 8001592:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001596:	eeb0 0a66 	vmov.f32	s0, s13
 800159a:	eef0 0a47 	vmov.f32	s1, s14
 800159e:	eeb0 1a67 	vmov.f32	s2, s15
 80015a2:	3740      	adds	r7, #64	; 0x40
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b0:	1d39      	adds	r1, r7, #4
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b6:	2201      	movs	r2, #1
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <__io_putchar+0x20>)
 80015ba:	f004 f8ec 	bl	8005796 <HAL_UART_Transmit>
  return ch;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000250 	.word	0x20000250

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d0:	b094      	sub	sp, #80	; 0x50
 80015d2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fc50 	bl	8001e78 <HAL_Init>

  /* USER CODE BEGIN Init */
  FusionAhrsInitialise(&ahrs);
 80015d8:	4875      	ldr	r0, [pc, #468]	; (80017b0 <main+0x1e4>)
 80015da:	f005 f901 	bl	80067e0 <FusionAhrsInitialise>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f903 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f000 f9b7 	bl	8001954 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e6:	f000 f95d 	bl	80018a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015ea:	f000 f989 	bl	8001900 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ret = configure_lis331dlh(&hi2c1, &lis331dlh_ctx);
 80015ee:	4971      	ldr	r1, [pc, #452]	; (80017b4 <main+0x1e8>)
 80015f0:	4871      	ldr	r0, [pc, #452]	; (80017b8 <main+0x1ec>)
 80015f2:	f7ff fd7b 	bl	80010ec <configure_lis331dlh>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a70      	ldr	r2, [pc, #448]	; (80017bc <main+0x1f0>)
 80015fa:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 80015fc:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <main+0x1f0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <main+0x3c>
  {
	  Error_Handler();
 8001604:	f000 fa26 	bl	8001a54 <Error_Handler>
  }

  ret = configure_i3g4250d(&hi2c1, &i3g4250d_ctx);
 8001608:	496d      	ldr	r1, [pc, #436]	; (80017c0 <main+0x1f4>)
 800160a:	486b      	ldr	r0, [pc, #428]	; (80017b8 <main+0x1ec>)
 800160c:	f7ff fca2 	bl	8000f54 <configure_i3g4250d>
 8001610:	4603      	mov	r3, r0
 8001612:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <main+0x1f0>)
 8001614:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 8001616:	4b69      	ldr	r3, [pc, #420]	; (80017bc <main+0x1f0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <main+0x56>
  {
	 Error_Handler();
 800161e:	f000 fa19 	bl	8001a54 <Error_Handler>
  }

  ret = configure_lis3mdl(&hi2c1, &lis3mdl_ctx);
 8001622:	4968      	ldr	r1, [pc, #416]	; (80017c4 <main+0x1f8>)
 8001624:	4864      	ldr	r0, [pc, #400]	; (80017b8 <main+0x1ec>)
 8001626:	f7ff fe5b 	bl	80012e0 <configure_lis3mdl>
 800162a:	4603      	mov	r3, r0
 800162c:	4a63      	ldr	r2, [pc, #396]	; (80017bc <main+0x1f0>)
 800162e:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <main+0x1f0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <main+0x70>
  {
    Error_Handler();
 8001638:	f000 fa0c 	bl	8001a54 <Error_Handler>
  }
  sprintf((char *)tx_buffer, "All devices are up!");
 800163c:	4962      	ldr	r1, [pc, #392]	; (80017c8 <main+0x1fc>)
 800163e:	4863      	ldr	r0, [pc, #396]	; (80017cc <main+0x200>)
 8001640:	f007 fbb8 	bl	8008db4 <siprintf>
  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001644:	4861      	ldr	r0, [pc, #388]	; (80017cc <main+0x200>)
 8001646:	f7fe fdc3 	bl	80001d0 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	485e      	ldr	r0, [pc, #376]	; (80017cc <main+0x200>)
 8001652:	f000 f9eb 	bl	8001a2c <tx_com>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	printf("helloworld!\n");
 8001656:	485e      	ldr	r0, [pc, #376]	; (80017d0 <main+0x204>)
 8001658:	f007 fb94 	bl	8008d84 <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ret = read_acceleration_data(&lis331dlh_ctx, acceleration_data);
 800165c:	495d      	ldr	r1, [pc, #372]	; (80017d4 <main+0x208>)
 800165e:	4855      	ldr	r0, [pc, #340]	; (80017b4 <main+0x1e8>)
 8001660:	f7ff fda6 	bl	80011b0 <read_acceleration_data>
 8001664:	4603      	mov	r3, r0
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <main+0x1f0>)
 8001668:	6013      	str	r3, [r2, #0]
	ret = read_gyroscope_data_fifo(&i3g4250d_ctx, gyro_data);
 800166a:	495b      	ldr	r1, [pc, #364]	; (80017d8 <main+0x20c>)
 800166c:	4854      	ldr	r0, [pc, #336]	; (80017c0 <main+0x1f4>)
 800166e:	f7ff fcb3 	bl	8000fd8 <read_gyroscope_data_fifo>
 8001672:	4603      	mov	r3, r0
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <main+0x1f0>)
 8001676:	6013      	str	r3, [r2, #0]
	ret = read_mag_data(&lis3mdl_ctx, magnetic_data);
 8001678:	4958      	ldr	r1, [pc, #352]	; (80017dc <main+0x210>)
 800167a:	4852      	ldr	r0, [pc, #328]	; (80017c4 <main+0x1f8>)
 800167c:	f7ff fe72 	bl	8001364 <read_mag_data>
 8001680:	4603      	mov	r3, r0
 8001682:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <main+0x1f0>)
 8001684:	6013      	str	r3, [r2, #0]
	const FusionVector gyro = {{gyro_data[0], gyro_data[1], gyro_data[2]}};
 8001686:	4b54      	ldr	r3, [pc, #336]	; (80017d8 <main+0x20c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
 800168c:	4b52      	ldr	r3, [pc, #328]	; (80017d8 <main+0x20c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <main+0x20c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
	const FusionVector acceleration = {{acceleration_data[0], acceleration_data[1], acceleration_data[2]}};
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <main+0x208>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <main+0x208>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <main+0x208>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	623b      	str	r3, [r7, #32]
	const FusionVector magnetic= {{magnetic_data[0], magnetic_data[1], magnetic_data[2]}};
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <main+0x210>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <main+0x210>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <main+0x210>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	617b      	str	r3, [r7, #20]

	FusionAhrsUpdate(&ahrs, gyro, acceleration, magnetic, 0.01f);
 80016bc:	ed97 3a03 	vldr	s6, [r7, #12]
 80016c0:	edd7 3a04 	vldr	s7, [r7, #16]
 80016c4:	ed97 4a05 	vldr	s8, [r7, #20]
 80016c8:	ed97 5a06 	vldr	s10, [r7, #24]
 80016cc:	edd7 5a07 	vldr	s11, [r7, #28]
 80016d0:	ed97 6a08 	vldr	s12, [r7, #32]
 80016d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80016d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016e0:	eddf 4a3f 	vldr	s9, [pc, #252]	; 80017e0 <main+0x214>
 80016e4:	eef0 1a45 	vmov.f32	s3, s10
 80016e8:	eeb0 2a65 	vmov.f32	s4, s11
 80016ec:	eef0 2a46 	vmov.f32	s5, s12
 80016f0:	eeb0 0a66 	vmov.f32	s0, s13
 80016f4:	eef0 0a47 	vmov.f32	s1, s14
 80016f8:	eeb0 1a67 	vmov.f32	s2, s15
 80016fc:	482c      	ldr	r0, [pc, #176]	; (80017b0 <main+0x1e4>)
 80016fe:	f005 f977 	bl	80069f0 <FusionAhrsUpdate>
	const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001702:	482b      	ldr	r0, [pc, #172]	; (80017b0 <main+0x1e4>)
 8001704:	f005 fe9c 	bl	8007440 <FusionAhrsGetQuaternion>
 8001708:	eeb0 6a40 	vmov.f32	s12, s0
 800170c:	eef0 6a60 	vmov.f32	s13, s1
 8001710:	eeb0 7a41 	vmov.f32	s14, s2
 8001714:	eef0 7a61 	vmov.f32	s15, s3
 8001718:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 800171c:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8001720:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8001724:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8001728:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800172c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001730:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001734:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001738:	eeb0 0a46 	vmov.f32	s0, s12
 800173c:	eef0 0a66 	vmov.f32	s1, s13
 8001740:	eeb0 1a47 	vmov.f32	s2, s14
 8001744:	eef0 1a67 	vmov.f32	s3, s15
 8001748:	f7ff fe88 	bl	800145c <FusionQuaternionToEuler>
 800174c:	eef0 6a40 	vmov.f32	s13, s0
 8001750:	eeb0 7a60 	vmov.f32	s14, s1
 8001754:	eef0 7a41 	vmov.f32	s15, s2
 8001758:	edc7 6a00 	vstr	s13, [r7]
 800175c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001760:	edc7 7a02 	vstr	s15, [r7, #8]
	sprintf((char *)tx_buffer, "Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4680      	mov	r8, r0
 800176e:	4689      	mov	r9, r1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	4604      	mov	r4, r0
 800177a:	460d      	mov	r5, r1
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800178c:	e9cd 4500 	strd	r4, r5, [sp]
 8001790:	4642      	mov	r2, r8
 8001792:	464b      	mov	r3, r9
 8001794:	4913      	ldr	r1, [pc, #76]	; (80017e4 <main+0x218>)
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <main+0x200>)
 8001798:	f007 fb0c 	bl	8008db4 <siprintf>
	tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0x200>)
 800179e:	f7fe fd17 	bl	80001d0 <strlen>
 80017a2:	4603      	mov	r3, r0
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <main+0x200>)
 80017aa:	f000 f93f 	bl	8001a2c <tx_com>
  {
 80017ae:	e752      	b.n	8001656 <main+0x8a>
 80017b0:	200002ec 	.word	0x200002ec
 80017b4:	20000294 	.word	0x20000294
 80017b8:	200001fc 	.word	0x200001fc
 80017bc:	200002e8 	.word	0x200002e8
 80017c0:	200002a4 	.word	0x200002a4
 80017c4:	200002b4 	.word	0x200002b4
 80017c8:	0800c7e0 	.word	0x0800c7e0
 80017cc:	20000354 	.word	0x20000354
 80017d0:	0800c7f4 	.word	0x0800c7f4
 80017d4:	200002d0 	.word	0x200002d0
 80017d8:	200002dc 	.word	0x200002dc
 80017dc:	200002c4 	.word	0x200002c4
 80017e0:	3c23d70a 	.word	0x3c23d70a
 80017e4:	0800c800 	.word	0x0800c800

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	; 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fcec 	bl	80081d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <SystemClock_Config+0xb4>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <SystemClock_Config+0xb4>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <SystemClock_Config+0xb4>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <SystemClock_Config+0xb8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <SystemClock_Config+0xb8>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <SystemClock_Config+0xb8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4618      	mov	r0, r3
 800185a:	f003 faf7 	bl	8004e4c <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001864:	f000 f8f6 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001868:	230f      	movs	r3, #15
 800186a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fd5a 	bl	800533c <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800188e:	f000 f8e1 	bl	8001a54 <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	; 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_I2C1_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_I2C1_Init+0x58>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_I2C1_Init+0x50>)
 80018e2:	f000 fe19 	bl	8002518 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f000 f8b2 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	200001fc 	.word	0x200001fc
 80018f8:	40005400 	.word	0x40005400
 80018fc:	000186a0 	.word	0x000186a0

08001900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001938:	f003 fee0 	bl	80056fc <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f887 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000250 	.word	0x20000250
 8001950:	40004400 	.word	0x40004400

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <MX_GPIO_Init+0xd0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <MX_GPIO_Init+0xd0>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <MX_GPIO_Init+0xd0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <MX_GPIO_Init+0xd0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <MX_GPIO_Init+0xd0>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <MX_GPIO_Init+0xd0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_GPIO_Init+0xd0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <MX_GPIO_Init+0xd0>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct;
  __USART2_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_GPIO_Init+0xd0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019e6:	2304      	movs	r3, #4
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ee:	2307      	movs	r3, #7
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001a02:	f000 fbed 	bl	80021e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a06:	2308      	movs	r3, #8
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_GPIO_Init+0xd4>)
 8001a16:	f000 fbe3 	bl	80021e0 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <tx_com>:
 * @param  len           number of byte to send
 *
 */

static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <tx_com+0x24>)
 8001a42:	f003 fea8 	bl	8005796 <HAL_UART_Transmit>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000250 	.word	0x20000250

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error occurred");
 8001a5c:	4801      	ldr	r0, [pc, #4]	; (8001a64 <Error_Handler+0x10>)
 8001a5e:	f007 f90b 	bl	8008c78 <iprintf>
 8001a62:	e7fb      	b.n	8001a5c <Error_Handler+0x8>
 8001a64:	0800c824 	.word	0x0800c824

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <HAL_I2C_MspInit+0xa4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13b      	bne.n	8001b52 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b06:	2304      	movs	r3, #4
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4814      	ldr	r0, [pc, #80]	; (8001b64 <HAL_I2C_MspInit+0xac>)
 8001b12:	f000 fb65 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_I2C_MspInit+0xa8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201f      	movs	r0, #31
 8001b38:	f000 faeb 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b3c:	201f      	movs	r0, #31
 8001b3e:	f000 fb04 	bl	800214a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2020      	movs	r0, #32
 8001b48:	f000 fae3 	bl	8002112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	f000 fafc 	bl	800214a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_UART_MspInit+0x84>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d12b      	bne.n	8001be2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_UART_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_UART_MspInit+0x8c>)
 8001bde:	f000 faff 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	; 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40004400 	.word	0x40004400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler+0x4>

08001bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c44:	f000 f96a 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <I2C1_EV_IRQHandler+0x10>)
 8001c52:	f001 f8c5 	bl	8002de0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001fc 	.word	0x200001fc

08001c60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <I2C1_ER_IRQHandler+0x10>)
 8001c66:	f001 fa2c 	bl	80030c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200001fc 	.word	0x200001fc

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f006 fa67 	bl	8008160 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	e7fe      	b.n	8001cb6 <_exit+0x12>

08001cb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e00a      	b.n	8001ce0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cca:	f3af 8000 	nop.w
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	b2ca      	uxtb	r2, r1
 8001cd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf0      	blt.n	8001cca <_read+0x12>
  }

  return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	e009      	b.n	8001d18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc4b 	bl	80015a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbf1      	blt.n	8001d04 <_write+0x12>
  }
  return len;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_close>:

int _close(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d52:	605a      	str	r2, [r3, #4]
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_isatty>:

int _isatty(int file)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f006 f9cc 	bl	8008160 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	2000073c 	.word	0x2000073c
 8001dfc:	20000758 	.word	0x20000758

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e2a:	490e      	ldr	r1, [pc, #56]	; (8001e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e2c:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e30:	e002      	b.n	8001e38 <LoopCopyDataInit>

08001e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e36:	3304      	adds	r3, #4

08001e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e3c:	d3f9      	bcc.n	8001e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e44:	e001      	b.n	8001e4a <LoopFillZerobss>

08001e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e48:	3204      	adds	r2, #4

08001e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e4c:	d3fb      	bcc.n	8001e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e4e:	f7ff ffd7 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e52:	f006 f98b 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff fbb9 	bl	80015cc <main>
  bx  lr    
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e68:	0800d09c 	.word	0x0800d09c
  ldr r2, =_sbss
 8001e6c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e70:	20000754 	.word	0x20000754

08001e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <HAL_Init+0x40>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_Init+0x40>)
 8001e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x40>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x40>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 f92b 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fddc 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f943 	bl	8002166 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f000 f90b 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000740 	.word	0x20000740

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000740 	.word	0x20000740

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <__NVIC_EnableIRQ+0x38>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff29 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff3e 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff31 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffa2 	bl	80020b8 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d004      	beq.n	800219c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e00c      	b.n	80021b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2205      	movs	r2, #5
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e16b      	b.n	80024d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 815a 	bne.w	80024ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d005      	beq.n	8002232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	2b02      	cmp	r3, #2
 8002230:	d130      	bne.n	8002294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 0201 	and.w	r2, r3, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b03      	cmp	r3, #3
 800229e:	d017      	beq.n	80022d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80b4 	beq.w	80024ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b60      	ldr	r3, [pc, #384]	; (80024ec <HAL_GPIO_Init+0x30c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_GPIO_Init+0x30c>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a5b      	ldr	r2, [pc, #364]	; (80024f0 <HAL_GPIO_Init+0x310>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x314>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02b      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a51      	ldr	r2, [pc, #324]	; (80024f8 <HAL_GPIO_Init+0x318>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a50      	ldr	r2, [pc, #320]	; (80024fc <HAL_GPIO_Init+0x31c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	; (8002500 <HAL_GPIO_Init+0x320>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x21a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4e      	ldr	r2, [pc, #312]	; (8002504 <HAL_GPIO_Init+0x324>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x216>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4d      	ldr	r2, [pc, #308]	; (8002508 <HAL_GPIO_Init+0x328>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x212>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_GPIO_Init+0x32c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x20e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4b      	ldr	r2, [pc, #300]	; (8002510 <HAL_GPIO_Init+0x330>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x20a>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x228>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x228>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	; (80024f0 <HAL_GPIO_Init+0x310>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_GPIO_Init+0x334>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a32      	ldr	r2, [pc, #200]	; (8002514 <HAL_GPIO_Init+0x334>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_GPIO_Init+0x334>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_GPIO_Init+0x334>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_GPIO_Init+0x334>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_GPIO_Init+0x334>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_GPIO_Init+0x334>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_GPIO_Init+0x334>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae90 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40013c00 	.word	0x40013c00

08002518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e12b      	b.n	8002782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff faba 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800257c:	f003 f896 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a81      	ldr	r2, [pc, #516]	; (800278c <HAL_I2C_Init+0x274>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d807      	bhi.n	800259c <HAL_I2C_Init+0x84>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a80      	ldr	r2, [pc, #512]	; (8002790 <HAL_I2C_Init+0x278>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e006      	b.n	80025aa <HAL_I2C_Init+0x92>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a7d      	ldr	r2, [pc, #500]	; (8002794 <HAL_I2C_Init+0x27c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0e7      	b.n	8002782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a78      	ldr	r2, [pc, #480]	; (8002798 <HAL_I2C_Init+0x280>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a6a      	ldr	r2, [pc, #424]	; (800278c <HAL_I2C_Init+0x274>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d802      	bhi.n	80025ec <HAL_I2C_Init+0xd4>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e009      	b.n	8002600 <HAL_I2C_Init+0xe8>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_I2C_Init+0x284>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	3301      	adds	r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	495c      	ldr	r1, [pc, #368]	; (800278c <HAL_I2C_Init+0x274>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d819      	bhi.n	8002654 <HAL_I2C_Init+0x13c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e59      	subs	r1, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fbb1 f3f3 	udiv	r3, r1, r3
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002634:	400b      	ands	r3, r1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_I2C_Init+0x138>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e59      	subs	r1, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	e051      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002650:	2304      	movs	r3, #4
 8002652:	e04f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_I2C_Init+0x168>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e012      	b.n	80026a6 <HAL_I2C_Init+0x18e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Init+0x196>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e022      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10e      	bne.n	80026d4 <HAL_I2C_Init+0x1bc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e58      	subs	r0, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	e00f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	6809      	ldr	r1, [r1, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6911      	ldr	r1, [r2, #16]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	000186a0 	.word	0x000186a0
 8002790:	001e847f 	.word	0x001e847f
 8002794:	003d08ff 	.word	0x003d08ff
 8002798:	431bde83 	.word	0x431bde83
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027ba:	f7ff fbc3 	bl	8001f44 <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	f040 80d9 	bne.w	8002980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2319      	movs	r3, #25
 80027d4:	2201      	movs	r2, #1
 80027d6:	496d      	ldr	r1, [pc, #436]	; (800298c <HAL_I2C_Mem_Write+0x1ec>)
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f002 f90d 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0cc      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_I2C_Mem_Write+0x56>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0c5      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d007      	beq.n	800281c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2221      	movs	r2, #33	; 0x21
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a3a      	ldr	r2, [r7, #32]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_I2C_Mem_Write+0x1f0>)
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285e:	88f8      	ldrh	r0, [r7, #6]
 8002860:	893a      	ldrh	r2, [r7, #8]
 8002862:	8979      	ldrh	r1, [r7, #10]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	4603      	mov	r3, r0
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 fe9c 	bl	80045ac <I2C_RequestMemoryWrite>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d052      	beq.n	8002920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e081      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f002 f98e 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b04      	cmp	r3, #4
 8002894:	d107      	bne.n	80028a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06b      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d11b      	bne.n	8002920 <HAL_I2C_Mem_Write+0x180>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1aa      	bne.n	800287e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f002 f97a 	bl	8004c26 <I2C_WaitOnBTFFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e016      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	00100002 	.word	0x00100002
 8002990:	ffff0000 	.word	0xffff0000

08002994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	460b      	mov	r3, r1
 80029a8:	813b      	strh	r3, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ae:	f7ff fac9 	bl	8001f44 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	f040 8208 	bne.w	8002dd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2319      	movs	r3, #25
 80029c8:	2201      	movs	r2, #1
 80029ca:	497b      	ldr	r1, [pc, #492]	; (8002bb8 <HAL_I2C_Mem_Read+0x224>)
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f002 f813 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029d8:	2302      	movs	r3, #2
 80029da:	e1fb      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_I2C_Mem_Read+0x56>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e1f4      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d007      	beq.n	8002a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2222      	movs	r2, #34	; 0x22
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_I2C_Mem_Read+0x228>)
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a52:	88f8      	ldrh	r0, [r7, #6]
 8002a54:	893a      	ldrh	r2, [r7, #8]
 8002a56:	8979      	ldrh	r1, [r7, #10]
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	4603      	mov	r3, r0
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f001 fe38 	bl	80046d8 <I2C_RequestMemoryRead>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1b0      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d113      	bne.n	8002aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	623b      	str	r3, [r7, #32]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e184      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e164      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d11b      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	e144      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b38:	e138      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	f200 80f1 	bhi.w	8002d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d123      	bne.n	8002b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f002 f8db 	bl	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e139      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b92:	e10b      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d14e      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <HAL_I2C_Mem_Read+0x22c>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 ff26 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e10e      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
 8002bb6:	bf00      	nop
 8002bb8:	00100002 	.word	0x00100002
 8002bbc:	ffff0000 	.word	0xffff0000
 8002bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c38:	e0b8      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2200      	movs	r2, #0
 8002c42:	4966      	ldr	r1, [pc, #408]	; (8002ddc <HAL_I2C_Mem_Read+0x448>)
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f001 fed7 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0bf      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	494f      	ldr	r1, [pc, #316]	; (8002ddc <HAL_I2C_Mem_Read+0x448>)
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fea9 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e091      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d24:	e042      	b.n	8002dac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f001 ffee 	bl	8004d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e04c      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d118      	bne.n	8002dac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f47f aec2 	bne.w	8002b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	00010004 	.word	0x00010004

08002de0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d003      	beq.n	8002e18 <HAL_I2C_EV_IRQHandler+0x38>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	f040 80c1 	bne.w	8002f9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_I2C_EV_IRQHandler+0x6e>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e38:	d003      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x62>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x66>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_I2C_EV_IRQHandler+0x68>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f000 8132 	beq.w	80030b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x92>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	0a5b      	lsrs	r3, r3, #9
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d006      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f001 ffd6 	bl	8004e16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fd83 	bl	8003976 <I2C_Master_SB>
 8002e70:	e092      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0xb2>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	0a5b      	lsrs	r3, r3, #9
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fdf9 	bl	8003a82 <I2C_Master_ADD10>
 8002e90:	e082      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	0a5b      	lsrs	r3, r3, #9
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fe13 	bl	8003ad6 <I2C_Master_ADDR>
 8002eb0:	e072      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03b      	beq.n	8002f36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ecc:	f000 80f3 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	09db      	lsrs	r3, r3, #7
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00f      	beq.n	8002efc <HAL_I2C_EV_IRQHandler+0x11c>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_I2C_EV_IRQHandler+0x11c>
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d103      	bne.n	8002efc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f9f3 	bl	80032e0 <I2C_MasterTransmit_TXE>
 8002efa:	e04d      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80d6 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	0a5b      	lsrs	r3, r3, #9
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80cf 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f18:	7bbb      	ldrb	r3, [r7, #14]
 8002f1a:	2b21      	cmp	r3, #33	; 0x21
 8002f1c:	d103      	bne.n	8002f26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa7a 	bl	8003418 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f24:	e0c7      	b.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	f040 80c4 	bne.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fae8 	bl	8003504 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f34:	e0bf      	b.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f44:	f000 80b7 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00f      	beq.n	8002f74 <HAL_I2C_EV_IRQHandler+0x194>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	0a9b      	lsrs	r3, r3, #10
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_I2C_EV_IRQHandler+0x194>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb5d 	bl	800362c <I2C_MasterReceive_RXNE>
 8002f72:	e011      	b.n	8002f98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 809a 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	0a5b      	lsrs	r3, r3, #9
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 8093 	beq.w	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fc06 	bl	80037a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f96:	e08e      	b.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f98:	e08d      	b.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e007      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x20e>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 ffc4 	bl	8003f74 <I2C_Slave_ADDR>
 8002fec:	e066      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_I2C_EV_IRQHandler+0x22e>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0a5b      	lsrs	r3, r3, #9
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fffe 	bl	8004008 <I2C_Slave_STOPF>
 800300c:	e056      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b21      	cmp	r3, #33	; 0x21
 8003012:	d002      	beq.n	800301a <HAL_I2C_EV_IRQHandler+0x23a>
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	2b29      	cmp	r3, #41	; 0x29
 8003018:	d125      	bne.n	8003066 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	09db      	lsrs	r3, r3, #7
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00f      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x266>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	0a9b      	lsrs	r3, r3, #10
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_I2C_EV_IRQHandler+0x266>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 feda 	bl	8003df8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003044:	e039      	b.n	80030ba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d033      	beq.n	80030ba <HAL_I2C_EV_IRQHandler+0x2da>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	0a5b      	lsrs	r3, r3, #9
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02d      	beq.n	80030ba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 ff07 	bl	8003e72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003064:	e029      	b.n	80030ba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00f      	beq.n	8003092 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0a9b      	lsrs	r3, r3, #10
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_I2C_EV_IRQHandler+0x2b2>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 ff12 	bl	8003eb4 <I2C_SlaveReceive_RXNE>
 8003090:	e014      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	0a5b      	lsrs	r3, r3, #9
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 ff40 	bl	8003f30 <I2C_SlaveReceive_BTF>
 80030b0:	e004      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	; 0x28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <HAL_I2C_ER_IRQHandler+0x4e>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800310e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	0a5b      	lsrs	r3, r3, #9
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <HAL_I2C_ER_IRQHandler+0x78>
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003138:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	0a9b      	lsrs	r3, r3, #10
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03f      	beq.n	80031c6 <HAL_I2C_ER_IRQHandler+0x104>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d039      	beq.n	80031c6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003152:	7efb      	ldrb	r3, [r7, #27]
 8003154:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003164:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800316c:	7ebb      	ldrb	r3, [r7, #26]
 800316e:	2b20      	cmp	r3, #32
 8003170:	d112      	bne.n	8003198 <HAL_I2C_ER_IRQHandler+0xd6>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10f      	bne.n	8003198 <HAL_I2C_ER_IRQHandler+0xd6>
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b21      	cmp	r3, #33	; 0x21
 800317c:	d008      	beq.n	8003190 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b29      	cmp	r3, #41	; 0x29
 8003182:	d005      	beq.n	8003190 <HAL_I2C_ER_IRQHandler+0xce>
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	2b28      	cmp	r3, #40	; 0x28
 8003188:	d106      	bne.n	8003198 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b21      	cmp	r3, #33	; 0x21
 800318e:	d103      	bne.n	8003198 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f001 f869 	bl	8004268 <I2C_Slave_AF>
 8003196:	e016      	b.n	80031c6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031aa:	7efb      	ldrb	r3, [r7, #27]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d002      	beq.n	80031b6 <HAL_I2C_ER_IRQHandler+0xf4>
 80031b0:	7efb      	ldrb	r3, [r7, #27]
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d107      	bne.n	80031c6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	0adb      	lsrs	r3, r3, #11
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <HAL_I2C_ER_IRQHandler+0x12e>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80031ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f8a0 	bl	8004348 <I2C_ITError>
  }
}
 8003208:	bf00      	nop
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
 800326c:	4613      	mov	r3, r2
 800326e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d150      	bne.n	80033a8 <I2C_MasterTransmit_TXE+0xc8>
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b21      	cmp	r3, #33	; 0x21
 800330a:	d14d      	bne.n	80033a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d01d      	beq.n	800334e <I2C_MasterTransmit_TXE+0x6e>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b20      	cmp	r3, #32
 8003316:	d01a      	beq.n	800334e <I2C_MasterTransmit_TXE+0x6e>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800331e:	d016      	beq.n	800334e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800332e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2211      	movs	r2, #17
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff62 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800334c:	e060      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800335c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b40      	cmp	r3, #64	; 0x40
 8003386:	d107      	bne.n	8003398 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff7d 	bl	8003290 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003396:	e03b      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ff35 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a6:	e033      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b21      	cmp	r3, #33	; 0x21
 80033ac:	d005      	beq.n	80033ba <I2C_MasterTransmit_TXE+0xda>
 80033ae:	7bbb      	ldrb	r3, [r7, #14]
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d12d      	bne.n	8003410 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b22      	cmp	r3, #34	; 0x22
 80033b8:	d12a      	bne.n	8003410 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d108      	bne.n	80033d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033d4:	e01c      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d103      	bne.n	80033ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f88e 	bl	8003504 <I2C_MemoryTransmit_TXE_BTF>
}
 80033e8:	e012      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800340e:	e7ff      	b.n	8003410 <I2C_MasterTransmit_TXE+0x130>
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b21      	cmp	r3, #33	; 0x21
 8003430:	d164      	bne.n	80034fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d012      	beq.n	8003462 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	781a      	ldrb	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003460:	e04c      	b.n	80034fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d01d      	beq.n	80034a4 <I2C_MasterTransmit_BTF+0x8c>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b20      	cmp	r3, #32
 800346c:	d01a      	beq.n	80034a4 <I2C_MasterTransmit_BTF+0x8c>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003474:	d016      	beq.n	80034a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003484:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2211      	movs	r2, #17
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff feb7 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
}
 80034a2:	e02b      	b.n	80034fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d107      	bne.n	80034ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff fed2 	bl	8003290 <HAL_I2C_MemTxCpltCallback>
}
 80034ec:	e006      	b.n	80034fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fe8a 	bl	8003210 <HAL_I2C_MasterTxCpltCallback>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10b      	bne.n	800353c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800353a:	e073      	b.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	b29b      	uxth	r3, r3
 8003542:	121b      	asrs	r3, r3, #8
 8003544:	b2da      	uxtb	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003556:	e065      	b.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10b      	bne.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003576:	e055      	b.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	2b02      	cmp	r3, #2
 800357e:	d151      	bne.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b22      	cmp	r3, #34	; 0x22
 8003584:	d10d      	bne.n	80035a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003594:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035a0:	e040      	b.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b21      	cmp	r3, #33	; 0x21
 80035b0:	d112      	bne.n	80035d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d6:	e025      	b.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d120      	bne.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b21      	cmp	r3, #33	; 0x21
 80035e6:	d11d      	bne.n	8003624 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe36 	bl	8003290 <HAL_I2C_MemTxCpltCallback>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b22      	cmp	r3, #34	; 0x22
 800363e:	f040 80ac 	bne.w	800379a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d921      	bls.n	8003694 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b03      	cmp	r3, #3
 800367e:	f040 808c 	bne.w	800379a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003692:	e082      	b.n	800379a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	2b02      	cmp	r3, #2
 800369a:	d075      	beq.n	8003788 <I2C_MasterReceive_RXNE+0x15c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d002      	beq.n	80036a8 <I2C_MasterReceive_RXNE+0x7c>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d16f      	bne.n	8003788 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 fafd 	bl	8004ca8 <I2C_WaitOnSTOPRequestThroughIT>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d142      	bne.n	800373a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d10a      	bne.n	8003724 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fdc1 	bl	80032a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003722:	e03a      	b.n	800379a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2212      	movs	r2, #18
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fd76 	bl	8003224 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003738:	e02f      	b.n	800379a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003748:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fd99 	bl	80032b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003786:	e008      	b.n	800379a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	605a      	str	r2, [r3, #4]
}
 8003798:	e7ff      	b.n	800379a <I2C_MasterReceive_RXNE+0x16e>
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d11b      	bne.n	80037f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037f0:	e0bd      	b.n	800396e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d129      	bne.n	8003850 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d00a      	beq.n	8003828 <I2C_MasterReceive_BTF+0x86>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d007      	beq.n	8003828 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800384e:	e08e      	b.n	800396e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d176      	bne.n	8003948 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d002      	beq.n	8003866 <I2C_MasterReceive_BTF+0xc4>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b10      	cmp	r3, #16
 8003864:	d108      	bne.n	8003878 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e019      	b.n	80038ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d002      	beq.n	8003884 <I2C_MasterReceive_BTF+0xe2>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d108      	bne.n	8003896 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e00a      	b.n	80038ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b10      	cmp	r3, #16
 800389a:	d007      	beq.n	80038ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003906:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d10a      	bne.n	8003932 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fcba 	bl	80032a4 <HAL_I2C_MemRxCpltCallback>
}
 8003930:	e01d      	b.n	800396e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2212      	movs	r2, #18
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fc6f 	bl	8003224 <HAL_I2C_MasterRxCpltCallback>
}
 8003946:	e012      	b.n	800396e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d117      	bne.n	80039ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	b2db      	uxtb	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039a4:	e067      	b.n	8003a76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	611a      	str	r2, [r3, #16]
}
 80039b8:	e05d      	b.n	8003a76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c2:	d133      	bne.n	8003a2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b21      	cmp	r3, #33	; 0x21
 80039ce:	d109      	bne.n	80039e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	e008      	b.n	80039f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <I2C_Master_SB+0x92>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d032      	beq.n	8003a76 <I2C_Master_SB+0x100>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02d      	beq.n	8003a76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a28:	605a      	str	r2, [r3, #4]
}
 8003a2a:	e024      	b.n	8003a76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10e      	bne.n	8003a52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	11db      	asrs	r3, r3, #7
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f063 030f 	orn	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]
}
 8003a50:	e011      	b.n	8003a76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d10d      	bne.n	8003a76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	11db      	asrs	r3, r3, #7
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f003 0306 	and.w	r3, r3, #6
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f063 030e 	orn	r3, r3, #14
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <I2C_Master_ADD10+0x26>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d108      	bne.n	8003aba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <I2C_Master_ADD10+0x48>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac8:	605a      	str	r2, [r3, #4]
  }
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b091      	sub	sp, #68	; 0x44
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	f040 8169 	bne.w	8003dd4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <I2C_Master_ADDR+0x54>
 8003b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d10b      	bne.n	8003b2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	633b      	str	r3, [r7, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	e160      	b.n	8003dec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11d      	bne.n	8003b6e <I2C_Master_ADDR+0x98>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b3a:	d118      	bne.n	8003b6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8003b6c:	e13e      	b.n	8003dec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d113      	bne.n	8003ba0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e115      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	f040 808a 	bne.w	8003cc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb2:	d137      	bne.n	8003c24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d113      	bne.n	8003bfc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	e0e7      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e0d3      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d02e      	beq.n	8003c88 <I2C_Master_ADDR+0x1b2>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d02b      	beq.n	8003c88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	2b12      	cmp	r3, #18
 8003c34:	d102      	bne.n	8003c3c <I2C_Master_ADDR+0x166>
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d125      	bne.n	8003c88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d00e      	beq.n	8003c60 <I2C_Master_ADDR+0x18a>
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d00b      	beq.n	8003c60 <I2C_Master_ADDR+0x18a>
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d008      	beq.n	8003c60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e007      	b.n	8003c70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	e0a1      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e085      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d14d      	bne.n	8003d66 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d016      	beq.n	8003cfe <I2C_Master_ADDR+0x228>
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d013      	beq.n	8003cfe <I2C_Master_ADDR+0x228>
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d010      	beq.n	8003cfe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e007      	b.n	8003d0e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d0c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1c:	d117      	bne.n	8003d4e <I2C_Master_ADDR+0x278>
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d24:	d00b      	beq.n	8003d3e <I2C_Master_ADDR+0x268>
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d008      	beq.n	8003d3e <I2C_Master_ADDR+0x268>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d005      	beq.n	8003d3e <I2C_Master_ADDR+0x268>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d002      	beq.n	8003d3e <I2C_Master_ADDR+0x268>
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d107      	bne.n	8003d4e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e032      	b.n	8003dcc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d117      	bne.n	8003db6 <I2C_Master_ADDR+0x2e0>
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d8c:	d00b      	beq.n	8003da6 <I2C_Master_ADDR+0x2d0>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d008      	beq.n	8003da6 <I2C_Master_ADDR+0x2d0>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d005      	beq.n	8003da6 <I2C_Master_ADDR+0x2d0>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d002      	beq.n	8003da6 <I2C_Master_ADDR+0x2d0>
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d107      	bne.n	8003db6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003db4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003dd2:	e00b      	b.n	8003dec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
}
 8003dea:	e7ff      	b.n	8003dec <I2C_Master_ADDR+0x316>
 8003dec:	bf00      	nop
 8003dee:	3744      	adds	r7, #68	; 0x44
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02b      	beq.n	8003e6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d114      	bne.n	8003e6a <I2C_SlaveTransmit_TXE+0x72>
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b29      	cmp	r3, #41	; 0x29
 8003e44:	d111      	bne.n	8003e6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2221      	movs	r2, #33	; 0x21
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2228      	movs	r2, #40	; 0x28
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff f9e7 	bl	8003238 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d011      	beq.n	8003ea8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02c      	beq.n	8003f28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d114      	bne.n	8003f28 <I2C_SlaveReceive_RXNE+0x74>
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b2a      	cmp	r3, #42	; 0x2a
 8003f02:	d111      	bne.n	8003f28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2222      	movs	r2, #34	; 0x22
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2228      	movs	r2, #40	; 0x28
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff f992 	bl	800324c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f8e:	2b28      	cmp	r3, #40	; 0x28
 8003f90:	d127      	bne.n	8003fe2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	09db      	lsrs	r3, r3, #7
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	81bb      	strh	r3, [r7, #12]
 8003fc4:	e002      	b.n	8003fcc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003fd4:	89ba      	ldrh	r2, [r7, #12]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff f940 	bl	8003260 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fe0:	e00e      	b.n	8004000 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004026:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004054:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004064:	d172      	bne.n	800414c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b22      	cmp	r3, #34	; 0x22
 800406a:	d002      	beq.n	8004072 <I2C_Slave_STOPF+0x6a>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b2a      	cmp	r3, #42	; 0x2a
 8004070:	d135      	bne.n	80040de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f043 0204 	orr.w	r2, r3, #4
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe f889 	bl	80021c2 <HAL_DMA_GetState>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d049      	beq.n	800414a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4a69      	ldr	r2, [pc, #420]	; (8004260 <I2C_Slave_STOPF+0x258>)
 80040bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe f85b 	bl	800217e <HAL_DMA_Abort_IT>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03d      	beq.n	800414a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d8:	4610      	mov	r0, r2
 80040da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040dc:	e035      	b.n	800414a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe f853 	bl	80021c2 <HAL_DMA_GetState>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d014      	beq.n	800414c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	4a4e      	ldr	r2, [pc, #312]	; (8004260 <I2C_Slave_STOPF+0x258>)
 8004128:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f825 	bl	800217e <HAL_DMA_Abort_IT>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
 8004148:	e000      	b.n	800414c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800414a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03e      	beq.n	80041d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d112      	bne.n	800418a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d112      	bne.n	80041be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8b3 	bl	8004348 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041e2:	e039      	b.n	8004258 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b2a      	cmp	r3, #42	; 0x2a
 80041e8:	d109      	bne.n	80041fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2228      	movs	r2, #40	; 0x28
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f827 	bl	800324c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b28      	cmp	r3, #40	; 0x28
 8004208:	d111      	bne.n	800422e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <I2C_Slave_STOPF+0x25c>)
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff f828 	bl	800327c <HAL_I2C_ListenCpltCallback>
}
 800422c:	e014      	b.n	8004258 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	d002      	beq.n	800423c <I2C_Slave_STOPF+0x234>
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b22      	cmp	r3, #34	; 0x22
 800423a:	d10d      	bne.n	8004258 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe fffa 	bl	800324c <HAL_I2C_SlaveRxCpltCallback>
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	080048a9 	.word	0x080048a9
 8004264:	ffff0000 	.word	0xffff0000

08004268 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d002      	beq.n	800428a <I2C_Slave_AF+0x22>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b20      	cmp	r3, #32
 8004288:	d129      	bne.n	80042de <I2C_Slave_AF+0x76>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b28      	cmp	r3, #40	; 0x28
 800428e:	d126      	bne.n	80042de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a2c      	ldr	r2, [pc, #176]	; (8004344 <I2C_Slave_AF+0xdc>)
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fe ffd0 	bl	800327c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80042dc:	e02e      	b.n	800433c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b21      	cmp	r3, #33	; 0x21
 80042e2:	d126      	bne.n	8004332 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a17      	ldr	r2, [pc, #92]	; (8004344 <I2C_Slave_AF+0xdc>)
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2221      	movs	r2, #33	; 0x21
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800430e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004318:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe ff84 	bl	8003238 <HAL_I2C_SlaveTxCpltCallback>
}
 8004330:	e004      	b.n	800433c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433a:	615a      	str	r2, [r3, #20]
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	ffff0000 	.word	0xffff0000

08004348 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004360:	7bbb      	ldrb	r3, [r7, #14]
 8004362:	2b10      	cmp	r3, #16
 8004364:	d002      	beq.n	800436c <I2C_ITError+0x24>
 8004366:	7bbb      	ldrb	r3, [r7, #14]
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d10a      	bne.n	8004382 <I2C_ITError+0x3a>
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b22      	cmp	r3, #34	; 0x22
 8004370:	d107      	bne.n	8004382 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004380:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004388:	2b28      	cmp	r3, #40	; 0x28
 800438a:	d107      	bne.n	800439c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2228      	movs	r2, #40	; 0x28
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800439a:	e015      	b.n	80043c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043aa:	d00a      	beq.n	80043c2 <I2C_ITError+0x7a>
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b60      	cmp	r3, #96	; 0x60
 80043b0:	d007      	beq.n	80043c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d6:	d162      	bne.n	800449e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d020      	beq.n	8004438 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <I2C_ITError+0x25c>)
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd febb 	bl	800217e <HAL_DMA_Abort_IT>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8089 	beq.w	8004522 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004432:	4610      	mov	r0, r2
 8004434:	4798      	blx	r3
 8004436:	e074      	b.n	8004522 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <I2C_ITError+0x25c>)
 800443e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd fe9a 	bl	800217e <HAL_DMA_Abort_IT>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d068      	beq.n	8004522 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d10b      	bne.n	8004476 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
 800449c:	e041      	b.n	8004522 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b60      	cmp	r3, #96	; 0x60
 80044a8:	d125      	bne.n	80044f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d10b      	bne.n	80044de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe feec 	bl	80032cc <HAL_I2C_AbortCpltCallback>
 80044f4:	e015      	b.n	8004522 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d10b      	bne.n	800451c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fe fecb 	bl	80032b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004538:	2b00      	cmp	r3, #0
 800453a:	d109      	bne.n	8004550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d113      	bne.n	800459c <I2C_ITError+0x254>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b28      	cmp	r3, #40	; 0x28
 8004578:	d110      	bne.n	800459c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <I2C_ITError+0x260>)
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe fe70 	bl	800327c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	080048a9 	.word	0x080048a9
 80045a8:	ffff0000 	.word	0xffff0000

080045ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2200      	movs	r2, #0
 80045de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa08 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fc:	d103      	bne.n	8004606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e05f      	b.n	80046ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	492d      	ldr	r1, [pc, #180]	; (80046d4 <I2C_RequestMemoryWrite+0x128>)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fa40 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e04c      	b.n	80046ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 faaa 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b04      	cmp	r3, #4
 800465c:	d107      	bne.n	800466e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e02b      	b.n	80046ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004678:	893b      	ldrh	r3, [r7, #8]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	611a      	str	r2, [r3, #16]
 8004682:	e021      	b.n	80046c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004684:	893b      	ldrh	r3, [r7, #8]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	b29b      	uxth	r3, r3
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fa84 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d107      	bne.n	80046ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e005      	b.n	80046ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046be:	893b      	ldrh	r3, [r7, #8]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	00010002 	.word	0x00010002

080046d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	4608      	mov	r0, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	817b      	strh	r3, [r7, #10]
 80046ea:	460b      	mov	r3, r1
 80046ec:	813b      	strh	r3, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004700:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2200      	movs	r2, #0
 800471a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f96a 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d103      	bne.n	8004742 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e0aa      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	4952      	ldr	r1, [pc, #328]	; (80048a4 <I2C_RequestMemoryRead+0x1cc>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f9a2 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e097      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa0c 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	2b04      	cmp	r3, #4
 8004798:	d107      	bne.n	80047aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e076      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047b4:	893b      	ldrh	r3, [r7, #8]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	e021      	b.n	8004804 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047c0:	893b      	ldrh	r3, [r7, #8]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f9e6 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e050      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047fa:	893b      	ldrh	r3, [r7, #8]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	6a39      	ldr	r1, [r7, #32]
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f9cb 	bl	8004ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	2b04      	cmp	r3, #4
 800481a:	d107      	bne.n	800482c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e035      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800483e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	2200      	movs	r2, #0
 8004848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f8d3 	bl	80049f8 <I2C_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d103      	bne.n	8004870 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e013      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004874:	897b      	ldrh	r3, [r7, #10]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	6a3a      	ldr	r2, [r7, #32]
 8004888:	4906      	ldr	r1, [pc, #24]	; (80048a4 <I2C_RequestMemoryRead+0x1cc>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f90b 	bl	8004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010002 	.word	0x00010002

080048a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048c2:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <I2C_DMAAbort+0x148>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	08db      	lsrs	r3, r3, #3
 80048c8:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <I2C_DMAAbort+0x14c>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	0a1a      	lsrs	r2, r3, #8
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	00da      	lsls	r2, r3, #3
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048ee:	e00a      	b.n	8004906 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004904:	d0ea      	beq.n	80048dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	2200      	movs	r2, #0
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004934:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	2200      	movs	r2, #0
 800494a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	2200      	movs	r2, #0
 800495a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d10e      	bne.n	8004996 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800498e:	6978      	ldr	r0, [r7, #20]
 8004990:	f7fe fc9c 	bl	80032cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004994:	e027      	b.n	80049e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004996:	7cfb      	ldrb	r3, [r7, #19]
 8004998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800499c:	2b28      	cmp	r3, #40	; 0x28
 800499e:	d117      	bne.n	80049d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2228      	movs	r2, #40	; 0x28
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ce:	e007      	b.n	80049e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049e0:	6978      	ldr	r0, [r7, #20]
 80049e2:	f7fe fc69 	bl	80032b8 <HAL_I2C_ErrorCallback>
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000000 	.word	0x20000000
 80049f4:	14f8b589 	.word	0x14f8b589

080049f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	4613      	mov	r3, r2
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a08:	e025      	b.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a10:	d021      	beq.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fd fa97 	bl	8001f44 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e023      	b.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10d      	bne.n	8004a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	43da      	mvns	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	e00c      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	43da      	mvns	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d0b6      	beq.n	8004a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ab4:	e051      	b.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac4:	d123      	bne.n	8004b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f043 0204 	orr.w	r2, r3, #4
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e046      	b.n	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b14:	d021      	beq.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fd fa15 	bl	8001f44 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e020      	b.n	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e00b      	b.n	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	43da      	mvns	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d18d      	bne.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb0:	e02d      	b.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f900 	bl	8004db8 <I2C_IsAcknowledgeFailed>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e02d      	b.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc8:	d021      	beq.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fd f9bb 	bl	8001f44 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d116      	bne.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e007      	b.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d1ca      	bne.n	8004bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c32:	e02d      	b.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8bf 	bl	8004db8 <I2C_IsAcknowledgeFailed>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02d      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c4a:	d021      	beq.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fd f97a 	bl	8001f44 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d116      	bne.n	8004c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e007      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d1ca      	bne.n	8004c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cb4:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	0a1a      	lsrs	r2, r3, #8
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e008      	b.n	8004cf8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf4:	d0e9      	beq.n	8004cca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	20000000 	.word	0x20000000
 8004d08:	14f8b589 	.word	0x14f8b589

08004d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d18:	e042      	b.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d119      	bne.n	8004d5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0210 	mvn.w	r2, #16
 8004d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e029      	b.n	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5c:	f7fd f8f2 	bl	8001f44 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d302      	bcc.n	8004d72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f043 0220 	orr.w	r2, r3, #32
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e007      	b.n	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d1b5      	bne.n	8004d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d11b      	bne.n	8004e08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e26:	d103      	bne.n	8004e30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e2e:	e007      	b.n	8004e40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e38:	d102      	bne.n	8004e40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e267      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d075      	beq.n	8004f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d00c      	beq.n	8004e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e76:	4b85      	ldr	r3, [pc, #532]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d112      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e82:	4b82      	ldr	r3, [pc, #520]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	4b7e      	ldr	r3, [pc, #504]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05b      	beq.n	8004f54 <HAL_RCC_OscConfig+0x108>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d157      	bne.n	8004f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e242      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x74>
 8004eb2:	4b76      	ldr	r3, [pc, #472]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a75      	ldr	r2, [pc, #468]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e01d      	b.n	8004efc <HAL_RCC_OscConfig+0xb0>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x98>
 8004eca:	4b70      	ldr	r3, [pc, #448]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6f      	ldr	r2, [pc, #444]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6c      	ldr	r2, [pc, #432]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e00b      	b.n	8004efc <HAL_RCC_OscConfig+0xb0>
 8004ee4:	4b69      	ldr	r3, [pc, #420]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a68      	ldr	r2, [pc, #416]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b66      	ldr	r3, [pc, #408]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd f81e 	bl	8001f44 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fd f81a 	bl	8001f44 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e207      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b5b      	ldr	r3, [pc, #364]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0xc0>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fd f80a 	bl	8001f44 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fd f806 	bl	8001f44 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e1f3      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	4b51      	ldr	r3, [pc, #324]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0xe8>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d063      	beq.n	800502a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f62:	4b4a      	ldr	r3, [pc, #296]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7a:	4b44      	ldr	r3, [pc, #272]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d116      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	4b41      	ldr	r3, [pc, #260]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_RCC_OscConfig+0x152>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e1c7      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4937      	ldr	r1, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb2:	e03a      	b.n	800502a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <HAL_RCC_OscConfig+0x244>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fc ffbf 	bl	8001f44 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fca:	f7fc ffbb 	bl	8001f44 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e1a8      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe8:	4b28      	ldr	r3, [pc, #160]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4925      	ldr	r1, [pc, #148]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	e015      	b.n	800502a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x244>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc ff9e 	bl	8001f44 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500c:	f7fc ff9a 	bl	8001f44 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e187      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	4b1b      	ldr	r3, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d036      	beq.n	80050a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <HAL_RCC_OscConfig+0x248>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fc ff7e 	bl	8001f44 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504c:	f7fc ff7a 	bl	8001f44 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e167      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x240>)
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x200>
 800506a:	e01b      	b.n	80050a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_RCC_OscConfig+0x248>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005072:	f7fc ff67 	bl	8001f44 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	e00e      	b.n	8005098 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800507a:	f7fc ff63 	bl	8001f44 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d907      	bls.n	8005098 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e150      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
 800508c:	40023800 	.word	0x40023800
 8005090:	42470000 	.word	0x42470000
 8005094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005098:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800509a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ea      	bne.n	800507a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8097 	beq.w	80051e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b81      	ldr	r3, [pc, #516]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10f      	bne.n	80050e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	4b7d      	ldr	r3, [pc, #500]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a7c      	ldr	r2, [pc, #496]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
 80050d2:	4b7a      	ldr	r3, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e2:	4b77      	ldr	r3, [pc, #476]	; (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d118      	bne.n	8005120 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ee:	4b74      	ldr	r3, [pc, #464]	; (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a73      	ldr	r2, [pc, #460]	; (80052c0 <HAL_RCC_OscConfig+0x474>)
 80050f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fa:	f7fc ff23 	bl	8001f44 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005102:	f7fc ff1f 	bl	8001f44 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e10c      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	4b6a      	ldr	r3, [pc, #424]	; (80052c0 <HAL_RCC_OscConfig+0x474>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <HAL_RCC_OscConfig+0x2ea>
 8005128:	4b64      	ldr	r3, [pc, #400]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512c:	4a63      	ldr	r2, [pc, #396]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	6713      	str	r3, [r2, #112]	; 0x70
 8005134:	e01c      	b.n	8005170 <HAL_RCC_OscConfig+0x324>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b05      	cmp	r3, #5
 800513c:	d10c      	bne.n	8005158 <HAL_RCC_OscConfig+0x30c>
 800513e:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a5e      	ldr	r2, [pc, #376]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 0304 	orr.w	r3, r3, #4
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	4b5c      	ldr	r3, [pc, #368]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a5b      	ldr	r2, [pc, #364]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
 8005156:	e00b      	b.n	8005170 <HAL_RCC_OscConfig+0x324>
 8005158:	4b58      	ldr	r3, [pc, #352]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a57      	ldr	r2, [pc, #348]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
 8005164:	4b55      	ldr	r3, [pc, #340]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4a54      	ldr	r2, [pc, #336]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 800516a:	f023 0304 	bic.w	r3, r3, #4
 800516e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fc fee4 	bl	8001f44 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fc fee0 	bl	8001f44 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0cb      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0ee      	beq.n	8005180 <HAL_RCC_OscConfig+0x334>
 80051a2:	e014      	b.n	80051ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a4:	f7fc fece 	bl	8001f44 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ac:	f7fc feca 	bl	8001f44 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e0b5      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1ee      	bne.n	80051ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d105      	bne.n	80051e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d4:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	4a38      	ldr	r2, [pc, #224]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80051da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80a1 	beq.w	800532c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ea:	4b34      	ldr	r3, [pc, #208]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d05c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d141      	bne.n	8005282 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fe:	4b31      	ldr	r3, [pc, #196]	; (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005204:	f7fc fe9e 	bl	8001f44 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520c:	f7fc fe9a 	bl	8001f44 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e087      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	4b27      	ldr	r3, [pc, #156]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	3b01      	subs	r3, #1
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	491b      	ldr	r1, [pc, #108]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005250:	4313      	orrs	r3, r2
 8005252:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005254:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525a:	f7fc fe73 	bl	8001f44 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005262:	f7fc fe6f 	bl	8001f44 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e05c      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x416>
 8005280:	e054      	b.n	800532c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_RCC_OscConfig+0x478>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fc fe5c 	bl	8001f44 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005290:	f7fc fe58 	bl	8001f44 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e045      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_OscConfig+0x470>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x444>
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e038      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40007000 	.word	0x40007000
 80052c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c8:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <HAL_RCC_OscConfig+0x4ec>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d028      	beq.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d121      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d11a      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005300:	4293      	cmp	r3, r2
 8005302:	d111      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	3b01      	subs	r3, #1
 8005312:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0cc      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b68      	ldr	r3, [pc, #416]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d90c      	bls.n	8005378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b63      	ldr	r3, [pc, #396]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0b8      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005390:	4b59      	ldr	r3, [pc, #356]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a58      	ldr	r2, [pc, #352]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800539a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a8:	4b53      	ldr	r3, [pc, #332]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a52      	ldr	r2, [pc, #328]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b50      	ldr	r3, [pc, #320]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	494d      	ldr	r1, [pc, #308]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d044      	beq.n	800545c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b47      	ldr	r3, [pc, #284]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d119      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f6:	2b03      	cmp	r3, #3
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fa:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e06f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540a:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e067      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541a:	4b37      	ldr	r3, [pc, #220]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4934      	ldr	r1, [pc, #208]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800542c:	f7fc fd8a 	bl	8001f44 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	e00a      	b.n	800544a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fc fd86 	bl	8001f44 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e04f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 020c 	and.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d1eb      	bne.n	8005434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800545c:	4b25      	ldr	r3, [pc, #148]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d20c      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b20      	ldr	r3, [pc, #128]	; (80054f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e032      	b.n	80054ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4916      	ldr	r1, [pc, #88]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ae:	4b12      	ldr	r3, [pc, #72]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	490e      	ldr	r1, [pc, #56]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054c2:	f000 f821 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 80054c6:	4602      	mov	r2, r0
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	490a      	ldr	r1, [pc, #40]	; (80054fc <HAL_RCC_ClockConfig+0x1c0>)
 80054d4:	5ccb      	ldrb	r3, [r1, r3]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 80054dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fc fcea 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40023c00 	.word	0x40023c00
 80054f8:	40023800 	.word	0x40023800
 80054fc:	0800c87c 	.word	0x0800c87c
 8005500:	20000000 	.word	0x20000000
 8005504:	20000004 	.word	0x20000004

08005508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b090      	sub	sp, #64	; 0x40
 800550e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
 8005514:	2300      	movs	r3, #0
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005518:	2300      	movs	r3, #0
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005520:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d00d      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x40>
 800552c:	2b08      	cmp	r3, #8
 800552e:	f200 80a1 	bhi.w	8005674 <HAL_RCC_GetSysClockFreq+0x16c>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0x34>
 8005536:	2b04      	cmp	r3, #4
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0x3a>
 800553a:	e09b      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_GetSysClockFreq+0x184>)
 800553e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005540:	e09b      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005542:	4b53      	ldr	r3, [pc, #332]	; (8005690 <HAL_RCC_GetSysClockFreq+0x188>)
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005546:	e098      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005548:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005552:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d028      	beq.n	80055b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555e:	4b4a      	ldr	r3, [pc, #296]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	099b      	lsrs	r3, r3, #6
 8005564:	2200      	movs	r2, #0
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	627a      	str	r2, [r7, #36]	; 0x24
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005570:	2100      	movs	r1, #0
 8005572:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_RCC_GetSysClockFreq+0x188>)
 8005574:	fb03 f201 	mul.w	r2, r3, r1
 8005578:	2300      	movs	r3, #0
 800557a:	fb00 f303 	mul.w	r3, r0, r3
 800557e:	4413      	add	r3, r2
 8005580:	4a43      	ldr	r2, [pc, #268]	; (8005690 <HAL_RCC_GetSysClockFreq+0x188>)
 8005582:	fba0 1202 	umull	r1, r2, r0, r2
 8005586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005588:	460a      	mov	r2, r1
 800558a:	62ba      	str	r2, [r7, #40]	; 0x28
 800558c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558e:	4413      	add	r3, r2
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	2200      	movs	r2, #0
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	61fa      	str	r2, [r7, #28]
 800559a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800559e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055a2:	f7fb fb01 	bl	8000ba8 <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4613      	mov	r3, r2
 80055ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ae:	e053      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	099b      	lsrs	r3, r3, #6
 80055b6:	2200      	movs	r2, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	617a      	str	r2, [r7, #20]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055c2:	f04f 0b00 	mov.w	fp, #0
 80055c6:	4652      	mov	r2, sl
 80055c8:	465b      	mov	r3, fp
 80055ca:	f04f 0000 	mov.w	r0, #0
 80055ce:	f04f 0100 	mov.w	r1, #0
 80055d2:	0159      	lsls	r1, r3, #5
 80055d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d8:	0150      	lsls	r0, r2, #5
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	ebb2 080a 	subs.w	r8, r2, sl
 80055e2:	eb63 090b 	sbc.w	r9, r3, fp
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055fa:	ebb2 0408 	subs.w	r4, r2, r8
 80055fe:	eb63 0509 	sbc.w	r5, r3, r9
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	00eb      	lsls	r3, r5, #3
 800560c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005610:	00e2      	lsls	r2, r4, #3
 8005612:	4614      	mov	r4, r2
 8005614:	461d      	mov	r5, r3
 8005616:	eb14 030a 	adds.w	r3, r4, sl
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	eb45 030b 	adc.w	r3, r5, fp
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562e:	4629      	mov	r1, r5
 8005630:	028b      	lsls	r3, r1, #10
 8005632:	4621      	mov	r1, r4
 8005634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005638:	4621      	mov	r1, r4
 800563a:	028a      	lsls	r2, r1, #10
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	2200      	movs	r2, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	60fa      	str	r2, [r7, #12]
 8005648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800564c:	f7fb faac 	bl	8000ba8 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0x180>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005668:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetSysClockFreq+0x184>)
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800567c:	4618      	mov	r0, r3
 800567e:	3740      	adds	r7, #64	; 0x40
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	017d7840 	.word	0x017d7840

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4903      	ldr	r1, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	0800c88c 	.word	0x0800c88c

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4903      	ldr	r1, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	0800c88c 	.word	0x0800c88c

080056fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e03f      	b.n	800578e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc fa20 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f929 	bl	8005998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08a      	sub	sp, #40	; 0x28
 800579a:	af02      	add	r7, sp, #8
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d17c      	bne.n	80058b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_UART_Transmit+0x2c>
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e075      	b.n	80058b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_UART_Transmit+0x3e>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e06e      	b.n	80058b2 <HAL_UART_Transmit+0x11c>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2221      	movs	r2, #33	; 0x21
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ea:	f7fc fbab 	bl	8001f44 <HAL_GetTick>
 80057ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	88fa      	ldrh	r2, [r7, #6]
 80057fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005804:	d108      	bne.n	8005818 <HAL_UART_Transmit+0x82>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d104      	bne.n	8005818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e003      	b.n	8005820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005828:	e02a      	b.n	8005880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	; 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f840 	bl	80058ba <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e036      	b.n	80058b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	3302      	adds	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e007      	b.n	8005872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	781a      	ldrb	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1cf      	bne.n	800582a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	2140      	movs	r1, #64	; 0x40
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f810 	bl	80058ba <UART_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e006      	b.n	80058b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	e000      	b.n	80058b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b090      	sub	sp, #64	; 0x40
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ca:	e050      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d2:	d04c      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <UART_WaitOnFlagUntilTimeout+0x30>
 80058da:	f7fc fb33 	bl	8001f44 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d241      	bcs.n	800596e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800590a:	637a      	str	r2, [r7, #52]	; 0x34
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3314      	adds	r3, #20
 800593c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593e:	623a      	str	r2, [r7, #32]
 8005940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	61bb      	str	r3, [r7, #24]
   return(result);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e5      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e00f      	b.n	800598e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d09f      	beq.n	80058cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3740      	adds	r7, #64	; 0x40
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800599c:	b0c0      	sub	sp, #256	; 0x100
 800599e:	af00      	add	r7, sp, #0
 80059a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	ea40 0301 	orr.w	r3, r0, r1
 80059c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059f0:	f021 010c 	bic.w	r1, r1, #12
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059fe:	430b      	orrs	r3, r1
 8005a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	6999      	ldr	r1, [r3, #24]
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	ea40 0301 	orr.w	r3, r0, r1
 8005a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b8f      	ldr	r3, [pc, #572]	; (8005c64 <UART_SetConfig+0x2cc>)
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d005      	beq.n	8005a38 <UART_SetConfig+0xa0>
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b8d      	ldr	r3, [pc, #564]	; (8005c68 <UART_SetConfig+0x2d0>)
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d104      	bne.n	8005a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7ff fe4c 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a40:	e003      	b.n	8005a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a42:	f7ff fe33 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8005a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a54:	f040 810c 	bne.w	8005c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	1891      	adds	r1, r2, r2
 8005a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a72:	415b      	adcs	r3, r3
 8005a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	eb12 0801 	adds.w	r8, r2, r1
 8005a80:	4629      	mov	r1, r5
 8005a82:	eb43 0901 	adc.w	r9, r3, r1
 8005a86:	f04f 0200 	mov.w	r2, #0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9a:	4690      	mov	r8, r2
 8005a9c:	4699      	mov	r9, r3
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	eb18 0303 	adds.w	r3, r8, r3
 8005aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aa8:	462b      	mov	r3, r5
 8005aaa:	eb49 0303 	adc.w	r3, r9, r3
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	18db      	adds	r3, r3, r3
 8005aca:	653b      	str	r3, [r7, #80]	; 0x50
 8005acc:	4613      	mov	r3, r2
 8005ace:	eb42 0303 	adc.w	r3, r2, r3
 8005ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005adc:	f7fb f864 	bl	8000ba8 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <UART_SetConfig+0x2d4>)
 8005ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	011c      	lsls	r4, r3, #4
 8005aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b00:	4642      	mov	r2, r8
 8005b02:	464b      	mov	r3, r9
 8005b04:	1891      	adds	r1, r2, r2
 8005b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b08:	415b      	adcs	r3, r3
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b10:	4641      	mov	r1, r8
 8005b12:	eb12 0a01 	adds.w	sl, r2, r1
 8005b16:	4649      	mov	r1, r9
 8005b18:	eb43 0b01 	adc.w	fp, r3, r1
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b30:	4692      	mov	sl, r2
 8005b32:	469b      	mov	fp, r3
 8005b34:	4643      	mov	r3, r8
 8005b36:	eb1a 0303 	adds.w	r3, sl, r3
 8005b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	eb4b 0303 	adc.w	r3, fp, r3
 8005b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	18db      	adds	r3, r3, r3
 8005b60:	643b      	str	r3, [r7, #64]	; 0x40
 8005b62:	4613      	mov	r3, r2
 8005b64:	eb42 0303 	adc.w	r3, r2, r3
 8005b68:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b72:	f7fb f819 	bl	8000ba8 <__aeabi_uldivmod>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <UART_SetConfig+0x2d4>)
 8005b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2264      	movs	r2, #100	; 0x64
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	1acb      	subs	r3, r1, r3
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b92:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <UART_SetConfig+0x2d4>)
 8005b94:	fba3 2302 	umull	r2, r3, r3, r2
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ba0:	441c      	add	r4, r3
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	1851      	adds	r1, r2, r1
 8005bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8005bca:	4649      	mov	r1, r9
 8005bcc:	414b      	adcs	r3, r1
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005bdc:	4659      	mov	r1, fp
 8005bde:	00cb      	lsls	r3, r1, #3
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be6:	4651      	mov	r1, sl
 8005be8:	00ca      	lsls	r2, r1, #3
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf8:	464b      	mov	r3, r9
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	eb42 0303 	adc.w	r3, r2, r3
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c18:	460b      	mov	r3, r1
 8005c1a:	18db      	adds	r3, r3, r3
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1e:	4613      	mov	r3, r2
 8005c20:	eb42 0303 	adc.w	r3, r2, r3
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c2e:	f7fa ffbb 	bl	8000ba8 <__aeabi_uldivmod>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <UART_SetConfig+0x2d4>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <UART_SetConfig+0x2d4>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	f003 0207 	and.w	r2, r3, #7
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4422      	add	r2, r4
 8005c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c60:	e105      	b.n	8005e6e <UART_SetConfig+0x4d6>
 8005c62:	bf00      	nop
 8005c64:	40011000 	.word	0x40011000
 8005c68:	40011400 	.word	0x40011400
 8005c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	1891      	adds	r1, r2, r2
 8005c88:	6239      	str	r1, [r7, #32]
 8005c8a:	415b      	adcs	r3, r3
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c92:	4641      	mov	r1, r8
 8005c94:	1854      	adds	r4, r2, r1
 8005c96:	4649      	mov	r1, r9
 8005c98:	eb43 0501 	adc.w	r5, r3, r1
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	00eb      	lsls	r3, r5, #3
 8005ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005caa:	00e2      	lsls	r2, r4, #3
 8005cac:	4614      	mov	r4, r2
 8005cae:	461d      	mov	r5, r3
 8005cb0:	4643      	mov	r3, r8
 8005cb2:	18e3      	adds	r3, r4, r3
 8005cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cb8:	464b      	mov	r3, r9
 8005cba:	eb45 0303 	adc.w	r3, r5, r3
 8005cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cd2:	f04f 0200 	mov.w	r2, #0
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005cde:	4629      	mov	r1, r5
 8005ce0:	008b      	lsls	r3, r1, #2
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ce8:	4621      	mov	r1, r4
 8005cea:	008a      	lsls	r2, r1, #2
 8005cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cf0:	f7fa ff5a 	bl	8000ba8 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4b60      	ldr	r3, [pc, #384]	; (8005e7c <UART_SetConfig+0x4e4>)
 8005cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	011c      	lsls	r4, r3, #4
 8005d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	1891      	adds	r1, r2, r2
 8005d1a:	61b9      	str	r1, [r7, #24]
 8005d1c:	415b      	adcs	r3, r3
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d24:	4641      	mov	r1, r8
 8005d26:	1851      	adds	r1, r2, r1
 8005d28:	6139      	str	r1, [r7, #16]
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	414b      	adcs	r3, r1
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d3c:	4659      	mov	r1, fp
 8005d3e:	00cb      	lsls	r3, r1, #3
 8005d40:	4651      	mov	r1, sl
 8005d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d46:	4651      	mov	r1, sl
 8005d48:	00ca      	lsls	r2, r1, #3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4642      	mov	r2, r8
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d58:	464b      	mov	r3, r9
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	eb42 0303 	adc.w	r3, r2, r3
 8005d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	008b      	lsls	r3, r1, #2
 8005d80:	4641      	mov	r1, r8
 8005d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d86:	4641      	mov	r1, r8
 8005d88:	008a      	lsls	r2, r1, #2
 8005d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d8e:	f7fa ff0b 	bl	8000ba8 <__aeabi_uldivmod>
 8005d92:	4602      	mov	r2, r0
 8005d94:	460b      	mov	r3, r1
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <UART_SetConfig+0x4e4>)
 8005d98:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	2164      	movs	r1, #100	; 0x64
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	3332      	adds	r3, #50	; 0x32
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <UART_SetConfig+0x4e4>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db6:	441c      	add	r4, r3
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8005dc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	464b      	mov	r3, r9
 8005dca:	1891      	adds	r1, r2, r2
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	415b      	adcs	r3, r3
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dd6:	4641      	mov	r1, r8
 8005dd8:	1851      	adds	r1, r2, r1
 8005dda:	6039      	str	r1, [r7, #0]
 8005ddc:	4649      	mov	r1, r9
 8005dde:	414b      	adcs	r3, r1
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dee:	4659      	mov	r1, fp
 8005df0:	00cb      	lsls	r3, r1, #3
 8005df2:	4651      	mov	r1, sl
 8005df4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005df8:	4651      	mov	r1, sl
 8005dfa:	00ca      	lsls	r2, r1, #3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4603      	mov	r3, r0
 8005e02:	4642      	mov	r2, r8
 8005e04:	189b      	adds	r3, r3, r2
 8005e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e08:	464b      	mov	r3, r9
 8005e0a:	460a      	mov	r2, r1
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e1c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	008b      	lsls	r3, r1, #2
 8005e2e:	4641      	mov	r1, r8
 8005e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e34:	4641      	mov	r1, r8
 8005e36:	008a      	lsls	r2, r1, #2
 8005e38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e3c:	f7fa feb4 	bl	8000ba8 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4b0d      	ldr	r3, [pc, #52]	; (8005e7c <UART_SetConfig+0x4e4>)
 8005e46:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2164      	movs	r1, #100	; 0x64
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <UART_SetConfig+0x4e4>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4422      	add	r2, r4
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e74:	46bd      	mov	sp, r7
 8005e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e7a:	bf00      	nop
 8005e7c:	51eb851f 	.word	0x51eb851f

08005e80 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8005e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e8e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ea4 <FusionDegreesToRadians+0x24>
 8005e92:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005e96:	eeb0 0a67 	vmov.f32	s0, s15
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	3c8efa35 	.word	0x3c8efa35

08005ea8 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	105a      	asrs	r2, r3, #1
 8005eba:	4b10      	ldr	r3, [pc, #64]	; (8005efc <FusionFastInverseSqrt+0x54>)
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8005ec0:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ec8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005f00 <FusionFastInverseSqrt+0x58>
 8005ecc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ed4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ee0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005f04 <FusionFastInverseSqrt+0x5c>
 8005ee4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005eec:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	5f1f1412 	.word	0x5f1f1412
 8005f00:	3f36d312 	.word	0x3f36d312
 8005f04:	3fd851ff 	.word	0x3fd851ff

08005f08 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	eef0 6a40 	vmov.f32	s13, s0
 8005f12:	eeb0 7a60 	vmov.f32	s14, s1
 8005f16:	eef0 7a41 	vmov.f32	s15, s2
 8005f1a:	edc7 6a01 	vstr	s13, [r7, #4]
 8005f1e:	ed87 7a02 	vstr	s14, [r7, #8]
 8005f22:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8005f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	d10f      	bne.n	8005f54 <FusionVectorIsZero+0x4c>
 8005f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f40:	d108      	bne.n	8005f54 <FusionVectorIsZero+0x4c>
 8005f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	d101      	bne.n	8005f54 <FusionVectorIsZero+0x4c>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e000      	b.n	8005f56 <FusionVectorIsZero+0x4e>
 8005f54:	2300      	movs	r3, #0
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8005f68:	b480      	push	{r7}
 8005f6a:	b091      	sub	sp, #68	; 0x44
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	eeb0 5a40 	vmov.f32	s10, s0
 8005f72:	eef0 5a60 	vmov.f32	s11, s1
 8005f76:	eeb0 6a41 	vmov.f32	s12, s2
 8005f7a:	eef0 6a61 	vmov.f32	s13, s3
 8005f7e:	eeb0 7a42 	vmov.f32	s14, s4
 8005f82:	eef0 7a62 	vmov.f32	s15, s5
 8005f86:	ed87 5a07 	vstr	s10, [r7, #28]
 8005f8a:	edc7 5a08 	vstr	s11, [r7, #32]
 8005f8e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8005f92:	edc7 6a04 	vstr	s13, [r7, #16]
 8005f96:	ed87 7a05 	vstr	s14, [r7, #20]
 8005f9a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 8005f9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fa2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005faa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8005fae:	ed97 7a08 	vldr	s14, [r7, #32]
 8005fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005fba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8005fbe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005fca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8005fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005fdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe2:	ee06 1a90 	vmov	s13, r1
 8005fe6:	ee07 2a10 	vmov	s14, r2
 8005fea:	ee07 3a90 	vmov	s15, r3
}
 8005fee:	eeb0 0a66 	vmov.f32	s0, s13
 8005ff2:	eef0 0a47 	vmov.f32	s1, s14
 8005ff6:	eeb0 1a67 	vmov.f32	s2, s15
 8005ffa:	3744      	adds	r7, #68	; 0x44
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	eef0 6a40 	vmov.f32	s13, s0
 800600e:	eeb0 7a60 	vmov.f32	s14, s1
 8006012:	eef0 7a41 	vmov.f32	s15, s2
 8006016:	edc7 6a01 	vstr	s13, [r7, #4]
 800601a:	ed87 7a02 	vstr	s14, [r7, #8]
 800601e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8006022:	ed97 7a01 	vldr	s14, [r7, #4]
 8006026:	edd7 7a02 	vldr	s15, [r7, #8]
 800602a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800602e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006036:	eeb0 0a67 	vmov.f32	s0, s15
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8006044:	b480      	push	{r7}
 8006046:	b08f      	sub	sp, #60	; 0x3c
 8006048:	af00      	add	r7, sp, #0
 800604a:	eef0 6a40 	vmov.f32	s13, s0
 800604e:	eeb0 7a60 	vmov.f32	s14, s1
 8006052:	eef0 7a41 	vmov.f32	s15, s2
 8006056:	edc7 1a04 	vstr	s3, [r7, #16]
 800605a:	edc7 6a05 	vstr	s13, [r7, #20]
 800605e:	ed87 7a06 	vstr	s14, [r7, #24]
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 8006066:	ed97 7a05 	vldr	s14, [r7, #20]
 800606a:	edd7 7a04 	vldr	s15, [r7, #16]
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006072:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8006076:	ed97 7a06 	vldr	s14, [r7, #24]
 800607a:	edd7 7a04 	vldr	s15, [r7, #16]
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006082:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8006086:	ed97 7a07 	vldr	s14, [r7, #28]
 800608a:	edd7 7a04 	vldr	s15, [r7, #16]
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006092:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 8006096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800609a:	f107 0220 	add.w	r2, r7, #32
 800609e:	ca07      	ldmia	r2, {r0, r1, r2}
 80060a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060aa:	ee06 1a90 	vmov	s13, r1
 80060ae:	ee07 2a10 	vmov	s14, r2
 80060b2:	ee07 3a90 	vmov	s15, r3
}
 80060b6:	eeb0 0a66 	vmov.f32	s0, s13
 80060ba:	eef0 0a47 	vmov.f32	s1, s14
 80060be:	eeb0 1a67 	vmov.f32	s2, s15
 80060c2:	373c      	adds	r7, #60	; 0x3c
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80060cc:	b480      	push	{r7}
 80060ce:	b091      	sub	sp, #68	; 0x44
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	eeb0 5a40 	vmov.f32	s10, s0
 80060d6:	eef0 5a60 	vmov.f32	s11, s1
 80060da:	eeb0 6a41 	vmov.f32	s12, s2
 80060de:	eef0 6a61 	vmov.f32	s13, s3
 80060e2:	eeb0 7a42 	vmov.f32	s14, s4
 80060e6:	eef0 7a62 	vmov.f32	s15, s5
 80060ea:	ed87 5a07 	vstr	s10, [r7, #28]
 80060ee:	edc7 5a08 	vstr	s11, [r7, #32]
 80060f2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80060f6:	edc7 6a04 	vstr	s13, [r7, #16]
 80060fa:	ed87 7a05 	vstr	s14, [r7, #20]
 80060fe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8006102:	ed97 7a07 	vldr	s14, [r7, #28]
 8006106:	edd7 7a04 	vldr	s15, [r7, #16]
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800610e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8006112:	ed97 7a08 	vldr	s14, [r7, #32]
 8006116:	edd7 7a05 	vldr	s15, [r7, #20]
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800611e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8006122:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006126:	edd7 7a06 	vldr	s15, [r7, #24]
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800612e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8006132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800613a:	ca07      	ldmia	r2, {r0, r1, r2}
 800613c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006140:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006146:	ee06 1a90 	vmov	s13, r1
 800614a:	ee07 2a10 	vmov	s14, r2
 800614e:	ee07 3a90 	vmov	s15, r3
}
 8006152:	eeb0 0a66 	vmov.f32	s0, s13
 8006156:	eef0 0a47 	vmov.f32	s1, s14
 800615a:	eeb0 1a67 	vmov.f32	s2, s15
 800615e:	3744      	adds	r7, #68	; 0x44
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8006168:	b480      	push	{r7}
 800616a:	b091      	sub	sp, #68	; 0x44
 800616c:	af00      	add	r7, sp, #0
 800616e:	eeb0 5a40 	vmov.f32	s10, s0
 8006172:	eef0 5a60 	vmov.f32	s11, s1
 8006176:	eeb0 6a41 	vmov.f32	s12, s2
 800617a:	eef0 6a61 	vmov.f32	s13, s3
 800617e:	eeb0 7a42 	vmov.f32	s14, s4
 8006182:	eef0 7a62 	vmov.f32	s15, s5
 8006186:	ed87 5a07 	vstr	s10, [r7, #28]
 800618a:	edc7 5a08 	vstr	s11, [r7, #32]
 800618e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006192:	edc7 6a04 	vstr	s13, [r7, #16]
 8006196:	ed87 7a05 	vstr	s14, [r7, #20]
 800619a:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800619e:	ed97 7a08 	vldr	s14, [r7, #32]
 80061a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80061a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061aa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80061ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80061b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80061ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80061be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80061c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80061c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80061d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80061da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80061de:	ed97 7a07 	vldr	s14, [r7, #28]
 80061e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80061ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80061f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80061fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80061fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006202:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006206:	ca07      	ldmia	r2, {r0, r1, r2}
 8006208:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800620c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800620e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	ee06 1a90 	vmov	s13, r1
 8006216:	ee07 2a10 	vmov	s14, r2
 800621a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800621e:	eeb0 0a66 	vmov.f32	s0, s13
 8006222:	eef0 0a47 	vmov.f32	s1, s14
 8006226:	eeb0 1a67 	vmov.f32	s2, s15
 800622a:	3744      	adds	r7, #68	; 0x44
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	eef0 6a40 	vmov.f32	s13, s0
 800623e:	eeb0 7a60 	vmov.f32	s14, s1
 8006242:	eef0 7a41 	vmov.f32	s15, s2
 8006246:	edc7 6a01 	vstr	s13, [r7, #4]
 800624a:	ed87 7a02 	vstr	s14, [r7, #8]
 800624e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8006252:	ed97 5a01 	vldr	s10, [r7, #4]
 8006256:	edd7 5a02 	vldr	s11, [r7, #8]
 800625a:	ed97 6a03 	vldr	s12, [r7, #12]
 800625e:	edd7 6a01 	vldr	s13, [r7, #4]
 8006262:	ed97 7a02 	vldr	s14, [r7, #8]
 8006266:	edd7 7a03 	vldr	s15, [r7, #12]
 800626a:	eef0 1a45 	vmov.f32	s3, s10
 800626e:	eeb0 2a65 	vmov.f32	s4, s11
 8006272:	eef0 2a46 	vmov.f32	s5, s12
 8006276:	eeb0 0a66 	vmov.f32	s0, s13
 800627a:	eef0 0a47 	vmov.f32	s1, s14
 800627e:	eeb0 1a67 	vmov.f32	s2, s15
 8006282:	f7ff ff23 	bl	80060cc <FusionVectorHadamardProduct>
 8006286:	eef0 6a40 	vmov.f32	s13, s0
 800628a:	eeb0 7a60 	vmov.f32	s14, s1
 800628e:	eef0 7a41 	vmov.f32	s15, s2
 8006292:	edc7 6a05 	vstr	s13, [r7, #20]
 8006296:	ed87 7a06 	vstr	s14, [r7, #24]
 800629a:	edc7 7a07 	vstr	s15, [r7, #28]
 800629e:	edd7 6a05 	vldr	s13, [r7, #20]
 80062a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80062a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80062aa:	eeb0 0a66 	vmov.f32	s0, s13
 80062ae:	eef0 0a47 	vmov.f32	s1, s14
 80062b2:	eeb0 1a67 	vmov.f32	s2, s15
 80062b6:	f7ff fea5 	bl	8006004 <FusionVectorSum>
 80062ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80062be:	eeb0 0a67 	vmov.f32	s0, s15
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	; 0x30
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	eef0 6a40 	vmov.f32	s13, s0
 80062d2:	eeb0 7a60 	vmov.f32	s14, s1
 80062d6:	eef0 7a41 	vmov.f32	s15, s2
 80062da:	edc7 6a05 	vstr	s13, [r7, #20]
 80062de:	ed87 7a06 	vstr	s14, [r7, #24]
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80062e6:	edd7 6a05 	vldr	s13, [r7, #20]
 80062ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80062ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80062f2:	eeb0 0a66 	vmov.f32	s0, s13
 80062f6:	eef0 0a47 	vmov.f32	s1, s14
 80062fa:	eeb0 1a67 	vmov.f32	s2, s15
 80062fe:	f7ff ff99 	bl	8006234 <FusionVectorMagnitudeSquared>
 8006302:	eef0 7a40 	vmov.f32	s15, s0
 8006306:	eeb0 0a67 	vmov.f32	s0, s15
 800630a:	f7ff fdcd 	bl	8005ea8 <FusionFastInverseSqrt>
 800630e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8006312:	edd7 6a05 	vldr	s13, [r7, #20]
 8006316:	ed97 7a06 	vldr	s14, [r7, #24]
 800631a:	edd7 7a07 	vldr	s15, [r7, #28]
 800631e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8006322:	eeb0 0a66 	vmov.f32	s0, s13
 8006326:	eef0 0a47 	vmov.f32	s1, s14
 800632a:	eeb0 1a67 	vmov.f32	s2, s15
 800632e:	f7ff fe89 	bl	8006044 <FusionVectorMultiplyScalar>
 8006332:	eef0 6a40 	vmov.f32	s13, s0
 8006336:	eeb0 7a60 	vmov.f32	s14, s1
 800633a:	eef0 7a41 	vmov.f32	s15, s2
 800633e:	edc7 6a08 	vstr	s13, [r7, #32]
 8006342:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8006346:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800634a:	6a39      	ldr	r1, [r7, #32]
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	ee06 1a90 	vmov	s13, r1
 8006354:	ee07 2a10 	vmov	s14, r2
 8006358:	ee07 3a90 	vmov	s15, r3
}
 800635c:	eeb0 0a66 	vmov.f32	s0, s13
 8006360:	eef0 0a47 	vmov.f32	s1, s14
 8006364:	eeb0 1a67 	vmov.f32	s2, s15
 8006368:	3730      	adds	r7, #48	; 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800636e:	b490      	push	{r4, r7}
 8006370:	b094      	sub	sp, #80	; 0x50
 8006372:	af00      	add	r7, sp, #0
 8006374:	eeb0 4a40 	vmov.f32	s8, s0
 8006378:	eef0 4a60 	vmov.f32	s9, s1
 800637c:	eeb0 5a41 	vmov.f32	s10, s2
 8006380:	eef0 5a61 	vmov.f32	s11, s3
 8006384:	eeb0 6a42 	vmov.f32	s12, s4
 8006388:	eef0 6a62 	vmov.f32	s13, s5
 800638c:	eeb0 7a43 	vmov.f32	s14, s6
 8006390:	eef0 7a63 	vmov.f32	s15, s7
 8006394:	ed87 4a08 	vstr	s8, [r7, #32]
 8006398:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 800639c:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80063a0:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80063a4:	ed87 6a04 	vstr	s12, [r7, #16]
 80063a8:	edc7 6a05 	vstr	s13, [r7, #20]
 80063ac:	ed87 7a06 	vstr	s14, [r7, #24]
 80063b0:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 80063b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80063b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80063bc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 80063c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80063c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80063cc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 80063d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80063d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80063dc:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 80063e4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80063e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063f0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 80063f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80063f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006402:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640a:	ee06 0a10 	vmov	s12, r0
 800640e:	ee06 1a90 	vmov	s13, r1
 8006412:	ee07 2a10 	vmov	s14, r2
 8006416:	ee07 3a90 	vmov	s15, r3
}
 800641a:	eeb0 0a46 	vmov.f32	s0, s12
 800641e:	eef0 0a66 	vmov.f32	s1, s13
 8006422:	eeb0 1a47 	vmov.f32	s2, s14
 8006426:	eef0 1a67 	vmov.f32	s3, s15
 800642a:	3750      	adds	r7, #80	; 0x50
 800642c:	46bd      	mov	sp, r7
 800642e:	bc90      	pop	{r4, r7}
 8006430:	4770      	bx	lr

08006432 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8006432:	b490      	push	{r4, r7}
 8006434:	b094      	sub	sp, #80	; 0x50
 8006436:	af00      	add	r7, sp, #0
 8006438:	eeb0 4a40 	vmov.f32	s8, s0
 800643c:	eef0 4a60 	vmov.f32	s9, s1
 8006440:	eeb0 5a41 	vmov.f32	s10, s2
 8006444:	eef0 5a61 	vmov.f32	s11, s3
 8006448:	eeb0 6a42 	vmov.f32	s12, s4
 800644c:	eef0 6a62 	vmov.f32	s13, s5
 8006450:	eeb0 7a43 	vmov.f32	s14, s6
 8006454:	eef0 7a63 	vmov.f32	s15, s7
 8006458:	ed87 4a08 	vstr	s8, [r7, #32]
 800645c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8006460:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8006464:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8006468:	ed87 6a04 	vstr	s12, [r7, #16]
 800646c:	edc7 6a05 	vstr	s13, [r7, #20]
 8006470:	ed87 7a06 	vstr	s14, [r7, #24]
 8006474:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8006478:	ed97 7a08 	vldr	s14, [r7, #32]
 800647c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006484:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006488:	edd7 7a05 	vldr	s15, [r7, #20]
 800648c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006494:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006498:	edd7 7a06 	vldr	s15, [r7, #24]
 800649c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80064a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80064ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80064b4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 80064b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80064bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80064c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80064cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064d4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80064dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80064e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80064ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80064f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 80064f8:	ed97 7a08 	vldr	s14, [r7, #32]
 80064fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006504:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006508:	edd7 7a07 	vldr	s15, [r7, #28]
 800650c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006510:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006514:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006518:	edd7 7a04 	vldr	s15, [r7, #16]
 800651c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006524:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006528:	edd7 7a05 	vldr	s15, [r7, #20]
 800652c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006530:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006534:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8006538:	ed97 7a08 	vldr	s14, [r7, #32]
 800653c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006544:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006548:	edd7 7a06 	vldr	s15, [r7, #24]
 800654c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006554:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006558:	edd7 7a05 	vldr	s15, [r7, #20]
 800655c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006560:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006564:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006568:	edd7 7a04 	vldr	s15, [r7, #16]
 800656c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006570:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006574:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 8006578:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800657c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006586:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800658a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	ee06 0a10 	vmov	s12, r0
 8006592:	ee06 1a90 	vmov	s13, r1
 8006596:	ee07 2a10 	vmov	s14, r2
 800659a:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800659e:	eeb0 0a46 	vmov.f32	s0, s12
 80065a2:	eef0 0a66 	vmov.f32	s1, s13
 80065a6:	eeb0 1a47 	vmov.f32	s2, s14
 80065aa:	eef0 1a67 	vmov.f32	s3, s15
 80065ae:	3750      	adds	r7, #80	; 0x50
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc90      	pop	{r4, r7}
 80065b4:	4770      	bx	lr

080065b6 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 80065b6:	b490      	push	{r4, r7}
 80065b8:	b094      	sub	sp, #80	; 0x50
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	eef0 4a40 	vmov.f32	s9, s0
 80065c0:	eeb0 5a60 	vmov.f32	s10, s1
 80065c4:	eef0 5a41 	vmov.f32	s11, s2
 80065c8:	eeb0 6a61 	vmov.f32	s12, s3
 80065cc:	eef0 6a42 	vmov.f32	s13, s4
 80065d0:	eeb0 7a62 	vmov.f32	s14, s5
 80065d4:	eef0 7a43 	vmov.f32	s15, s6
 80065d8:	edc7 4a08 	vstr	s9, [r7, #32]
 80065dc:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 80065e0:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 80065e4:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 80065e8:	edc7 6a05 	vstr	s13, [r7, #20]
 80065ec:	ed87 7a06 	vstr	s14, [r7, #24]
 80065f0:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 80065f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80065f8:	eeb1 7a67 	vneg.f32	s14, s15
 80065fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8006600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006604:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006608:	edd7 7a06 	vldr	s15, [r7, #24]
 800660c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006614:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006618:	edd7 7a07 	vldr	s15, [r7, #28]
 800661c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006620:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006624:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8006628:	ed97 7a08 	vldr	s14, [r7, #32]
 800662c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006634:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006638:	edd7 7a07 	vldr	s15, [r7, #28]
 800663c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006644:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006648:	edd7 7a06 	vldr	s15, [r7, #24]
 800664c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006650:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006654:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8006658:	ed97 7a08 	vldr	s14, [r7, #32]
 800665c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006664:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006668:	edd7 7a07 	vldr	s15, [r7, #28]
 800666c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006674:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006678:	edd7 7a05 	vldr	s15, [r7, #20]
 800667c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006680:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006684:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8006688:	ed97 7a08 	vldr	s14, [r7, #32]
 800668c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006694:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006698:	edd7 7a06 	vldr	s15, [r7, #24]
 800669c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066a4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80066a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b0:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80066b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 80066b8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80066bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80066c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80066c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ce:	ee06 0a10 	vmov	s12, r0
 80066d2:	ee06 1a90 	vmov	s13, r1
 80066d6:	ee07 2a10 	vmov	s14, r2
 80066da:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 80066de:	eeb0 0a46 	vmov.f32	s0, s12
 80066e2:	eef0 0a66 	vmov.f32	s1, s13
 80066e6:	eeb0 1a47 	vmov.f32	s2, s14
 80066ea:	eef0 1a67 	vmov.f32	s3, s15
 80066ee:	3750      	adds	r7, #80	; 0x50
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc90      	pop	{r4, r7}
 80066f4:	4770      	bx	lr

080066f6 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 80066f6:	b590      	push	{r4, r7, lr}
 80066f8:	b093      	sub	sp, #76	; 0x4c
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	eeb0 6a40 	vmov.f32	s12, s0
 8006700:	eef0 6a60 	vmov.f32	s13, s1
 8006704:	eeb0 7a41 	vmov.f32	s14, s2
 8006708:	eef0 7a61 	vmov.f32	s15, s3
 800670c:	ed87 6a04 	vstr	s12, [r7, #16]
 8006710:	edc7 6a05 	vstr	s13, [r7, #20]
 8006714:	ed87 7a06 	vstr	s14, [r7, #24]
 8006718:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800671c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006720:	edd7 7a04 	vldr	s15, [r7, #16]
 8006724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006728:	edd7 6a05 	vldr	s13, [r7, #20]
 800672c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006738:	edd7 6a06 	vldr	s13, [r7, #24]
 800673c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006748:	edd7 6a07 	vldr	s13, [r7, #28]
 800674c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006758:	eeb0 0a67 	vmov.f32	s0, s15
 800675c:	f7ff fba4 	bl	8005ea8 <FusionFastInverseSqrt>
 8006760:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8006764:	ed97 7a04 	vldr	s14, [r7, #16]
 8006768:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800676c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006770:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8006774:	ed97 7a05 	vldr	s14, [r7, #20]
 8006778:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800677c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006780:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8006784:	ed97 7a06 	vldr	s14, [r7, #24]
 8006788:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800678c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006790:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8006794:	ed97 7a07 	vldr	s14, [r7, #28]
 8006798:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800679c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80067a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80067a4:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80067a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80067b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ba:	ee06 0a10 	vmov	s12, r0
 80067be:	ee06 1a90 	vmov	s13, r1
 80067c2:	ee07 2a10 	vmov	s14, r2
 80067c6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80067ca:	eeb0 0a46 	vmov.f32	s0, s12
 80067ce:	eef0 0a66 	vmov.f32	s1, s13
 80067d2:	eeb0 1a47 	vmov.f32	s2, s14
 80067d6:	eef0 1a67 	vmov.f32	s3, s15
 80067da:	374c      	adds	r7, #76	; 0x4c
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd90      	pop	{r4, r7, pc}

080067e0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 80067e0:	b5b0      	push	{r4, r5, r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <FusionAhrsInitialise+0x34>)
 80067ea:	f107 040c 	add.w	r4, r7, #12
 80067ee:	461d      	mov	r5, r3
 80067f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f868 	bl	80068d4 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f807 	bl	8006818 <FusionAhrsReset>
}
 800680a:	bf00      	nop
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bdb0      	pop	{r4, r5, r7, pc}
 8006812:	bf00      	nop
 8006814:	0800c834 	.word	0x0800c834

08006818 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8006818:	b480      	push	{r7}
 800681a:	b091      	sub	sp, #68	; 0x44
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006826:	615a      	str	r2, [r3, #20]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	619a      	str	r2, [r3, #24]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	625a      	str	r2, [r3, #36]	; 0x24
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	629a      	str	r2, [r3, #40]	; 0x28
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <FusionAhrsReset+0xb8>)
 8006864:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	649a      	str	r2, [r3, #72]	; 0x48
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	64da      	str	r2, [r3, #76]	; 0x4c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80068c2:	bf00      	nop
 80068c4:	3744      	adds	r7, #68	; 0x44
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	41200000 	.word	0x41200000

080068d4 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781a      	ldrb	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80068f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	d003      	beq.n	8006906 <FusionAhrsSetSettings+0x32>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a38      	ldr	r2, [pc, #224]	; (80069ec <FusionAhrsSetSettings+0x118>)
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	e01d      	b.n	800694a <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	edd3 7a02 	vldr	s15, [r3, #8]
 8006914:	eeb0 0a67 	vmov.f32	s0, s15
 8006918:	f7ff fab2 	bl	8005e80 <FusionDegreesToRadians>
 800691c:	eef0 7a40 	vmov.f32	s15, s0
 8006920:	eeb0 0a67 	vmov.f32	s0, s15
 8006924:	f004 fc0c 	bl	800b140 <sinf>
 8006928:	eef0 7a40 	vmov.f32	s15, s0
 800692c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006934:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006938:	eeb0 0a67 	vmov.f32	s0, s15
 800693c:	f004 fc74 	bl	800b228 <powf>
 8006940:	eef0 7a40 	vmov.f32	s15, s0
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006950:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	d003      	beq.n	8006962 <FusionAhrsSetSettings+0x8e>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <FusionAhrsSetSettings+0x118>)
 8006966:	60da      	str	r2, [r3, #12]
 8006968:	e01d      	b.n	80069a6 <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006970:	eeb0 0a67 	vmov.f32	s0, s15
 8006974:	f7ff fa84 	bl	8005e80 <FusionDegreesToRadians>
 8006978:	eef0 7a40 	vmov.f32	s15, s0
 800697c:	eeb0 0a67 	vmov.f32	s0, s15
 8006980:	f004 fbde 	bl	800b140 <sinf>
 8006984:	eef0 7a40 	vmov.f32	s15, s0
 8006988:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800698c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006990:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	f004 fc46 	bl	800b228 <powf>
 800699c:	eef0 7a40 	vmov.f32	s15, s0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069b4:	f083 0301 	eor.w	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80069cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80069d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069d4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80069d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	7f7fffff 	.word	0x7f7fffff

080069f0 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b0bf      	sub	sp, #252	; 0xfc
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80069f8:	eeb0 5a61 	vmov.f32	s10, s3
 80069fc:	eef0 5a42 	vmov.f32	s11, s4
 8006a00:	eeb0 6a62 	vmov.f32	s12, s5
 8006a04:	eef0 6a43 	vmov.f32	s13, s6
 8006a08:	eeb0 7a63 	vmov.f32	s14, s7
 8006a0c:	eef0 7a44 	vmov.f32	s15, s8
 8006a10:	edc7 4a01 	vstr	s9, [r7, #4]
 8006a14:	ed87 0a08 	vstr	s0, [r7, #32]
 8006a18:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8006a1c:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8006a20:	ed87 5a05 	vstr	s10, [r7, #20]
 8006a24:	edc7 5a06 	vstr	s11, [r7, #24]
 8006a28:	ed87 6a07 	vstr	s12, [r7, #28]
 8006a2c:	edc7 6a02 	vstr	s13, [r7, #8]
 8006a30:	ed87 7a03 	vstr	s14, [r7, #12]
 8006a34:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	3324      	adds	r3, #36	; 0x24
 8006a3c:	f107 0214 	add.w	r2, r7, #20
 8006a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d025      	beq.n	8006a9c <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8006a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a82:	d50b      	bpl.n	8006a9c <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8006a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a9e:	f000 fb08 	bl	80070b2 <HalfGravity>
 8006aa2:	eef0 6a40 	vmov.f32	s13, s0
 8006aa6:	eeb0 7a60 	vmov.f32	s14, s1
 8006aaa:	eef0 7a41 	vmov.f32	s15, s2
 8006aae:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8006ab2:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8006ab6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8006aba:	f04f 0300 	mov.w	r3, #0
 8006abe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8006ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 8006ada:	edd7 6a05 	vldr	s13, [r7, #20]
 8006ade:	ed97 7a06 	vldr	s14, [r7, #24]
 8006ae2:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ae6:	eeb0 0a66 	vmov.f32	s0, s13
 8006aea:	eef0 0a47 	vmov.f32	s1, s14
 8006aee:	eeb0 1a67 	vmov.f32	s2, s15
 8006af2:	f7ff fa09 	bl	8005f08 <FusionVectorIsZero>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f083 0301 	eor.w	r3, r3, #1
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 809b 	beq.w	8006c3a <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d918      	bls.n	8006b42 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006b16:	3314      	adds	r3, #20
 8006b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8006b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b20:	f7ff fe7a 	bl	8006818 <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	f103 0414 	add.w	r4, r3, #20
 8006b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	2200      	movs	r2, #0
 8006b38:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8006b42:	edd7 6a05 	vldr	s13, [r7, #20]
 8006b46:	ed97 7a06 	vldr	s14, [r7, #24]
 8006b4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8006b4e:	eeb0 0a66 	vmov.f32	s0, s13
 8006b52:	eef0 0a47 	vmov.f32	s1, s14
 8006b56:	eeb0 1a67 	vmov.f32	s2, s15
 8006b5a:	f7ff fbb5 	bl	80062c8 <FusionVectorNormalise>
 8006b5e:	eef0 6a40 	vmov.f32	s13, s0
 8006b62:	eeb0 7a60 	vmov.f32	s14, s1
 8006b66:	eef0 7a41 	vmov.f32	s15, s2
 8006b6a:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8006b6e:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8006b72:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8006b76:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006b78:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8006b7c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8006b80:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8006b84:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8006b88:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006b8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006b90:	eef0 1a45 	vmov.f32	s3, s10
 8006b94:	eeb0 2a65 	vmov.f32	s4, s11
 8006b98:	eef0 2a46 	vmov.f32	s5, s12
 8006b9c:	eeb0 0a66 	vmov.f32	s0, s13
 8006ba0:	eef0 0a47 	vmov.f32	s1, s14
 8006ba4:	eeb0 1a67 	vmov.f32	s2, s15
 8006ba8:	f7ff fade 	bl	8006168 <FusionVectorCrossProduct>
 8006bac:	eef0 6a40 	vmov.f32	s13, s0
 8006bb0:	eeb0 7a60 	vmov.f32	s14, s1
 8006bb4:	eef0 7a41 	vmov.f32	s15, s2
 8006bb8:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8006bbc:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8006bc0:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d118      	bne.n	8006c00 <FusionAhrsUpdate+0x210>
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8006bd4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006bd8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006bdc:	eeb0 0a66 	vmov.f32	s0, s13
 8006be0:	eef0 0a47 	vmov.f32	s1, s14
 8006be4:	eeb0 1a67 	vmov.f32	s2, s15
 8006be8:	f7ff fb24 	bl	8006234 <FusionVectorMagnitudeSquared>
 8006bec:	eeb0 7a40 	vmov.f32	s14, s0
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfe:	d817      	bhi.n	8006c30 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006c06:	323c      	adds	r2, #60	; 0x3c
 8006c08:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	d901      	bls.n	8006c26 <FusionAhrsUpdate+0x236>
 8006c22:	230a      	movs	r3, #10
 8006c24:	e000      	b.n	8006c28 <FusionAhrsUpdate+0x238>
 8006c26:	2300      	movs	r3, #0
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	659a      	str	r2, [r3, #88]	; 0x58
 8006c2e:	e004      	b.n	8006c3a <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8006c3a:	f04f 0300 	mov.w	r3, #0
 8006c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	677b      	str	r3, [r7, #116]	; 0x74
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8006c54:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c58:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c60:	eeb0 0a66 	vmov.f32	s0, s13
 8006c64:	eef0 0a47 	vmov.f32	s1, s14
 8006c68:	eeb0 1a67 	vmov.f32	s2, s15
 8006c6c:	f7ff f94c 	bl	8005f08 <FusionVectorIsZero>
 8006c70:	4603      	mov	r3, r0
 8006c72:	f083 0301 	eor.w	r3, r3, #1
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80e6 	beq.w	8006e4a <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d92a      	bls.n	8006ce8 <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	ed97 5a02 	vldr	s10, [r7, #8]
 8006c9a:	edd7 5a03 	vldr	s11, [r7, #12]
 8006c9e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ca2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006ca6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006caa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006cae:	eef0 1a45 	vmov.f32	s3, s10
 8006cb2:	eeb0 2a65 	vmov.f32	s4, s11
 8006cb6:	eef0 2a46 	vmov.f32	s5, s12
 8006cba:	eeb0 0a66 	vmov.f32	s0, s13
 8006cbe:	eef0 0a47 	vmov.f32	s1, s14
 8006cc2:	eeb0 1a67 	vmov.f32	s2, s15
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fe6e 	bl	80079a8 <FusionCompassCalculateHeading>
 8006ccc:	eef0 7a40 	vmov.f32	s15, s0
 8006cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd6:	f000 fbd6 	bl	8007486 <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8006ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cea:	f000 fa9f 	bl	800722c <HalfMagnetic>
 8006cee:	eef0 6a40 	vmov.f32	s13, s0
 8006cf2:	eeb0 7a60 	vmov.f32	s14, s1
 8006cf6:	eef0 7a41 	vmov.f32	s15, s2
 8006cfa:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8006cfe:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8006d02:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8006d06:	ed97 5a02 	vldr	s10, [r7, #8]
 8006d0a:	edd7 5a03 	vldr	s11, [r7, #12]
 8006d0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d12:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006d16:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006d1a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006d1e:	eef0 1a45 	vmov.f32	s3, s10
 8006d22:	eeb0 2a65 	vmov.f32	s4, s11
 8006d26:	eef0 2a46 	vmov.f32	s5, s12
 8006d2a:	eeb0 0a66 	vmov.f32	s0, s13
 8006d2e:	eef0 0a47 	vmov.f32	s1, s14
 8006d32:	eeb0 1a67 	vmov.f32	s2, s15
 8006d36:	f7ff fa17 	bl	8006168 <FusionVectorCrossProduct>
 8006d3a:	eef0 6a40 	vmov.f32	s13, s0
 8006d3e:	eeb0 7a60 	vmov.f32	s14, s1
 8006d42:	eef0 7a41 	vmov.f32	s15, s2
 8006d46:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8006d4a:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8006d4e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8006d52:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8006d56:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006d5a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006d5e:	eeb0 0a66 	vmov.f32	s0, s13
 8006d62:	eef0 0a47 	vmov.f32	s1, s14
 8006d66:	eeb0 1a67 	vmov.f32	s2, s15
 8006d6a:	f7ff faad 	bl	80062c8 <FusionVectorNormalise>
 8006d6e:	eef0 6a40 	vmov.f32	s13, s0
 8006d72:	eeb0 7a60 	vmov.f32	s14, s1
 8006d76:	eef0 7a41 	vmov.f32	s15, s2
 8006d7a:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8006d7e:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8006d82:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8006d86:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006d88:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8006d8c:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8006d90:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8006d94:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006d98:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006d9c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006da0:	eef0 1a45 	vmov.f32	s3, s10
 8006da4:	eeb0 2a65 	vmov.f32	s4, s11
 8006da8:	eef0 2a46 	vmov.f32	s5, s12
 8006dac:	eeb0 0a66 	vmov.f32	s0, s13
 8006db0:	eef0 0a47 	vmov.f32	s1, s14
 8006db4:	eeb0 1a67 	vmov.f32	s2, s15
 8006db8:	f7ff f9d6 	bl	8006168 <FusionVectorCrossProduct>
 8006dbc:	eef0 6a40 	vmov.f32	s13, s0
 8006dc0:	eeb0 7a60 	vmov.f32	s14, s1
 8006dc4:	eef0 7a41 	vmov.f32	s15, s2
 8006dc8:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8006dcc:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8006dd0:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d118      	bne.n	8006e10 <FusionAhrsUpdate+0x420>
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006de4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8006de8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006dec:	eeb0 0a66 	vmov.f32	s0, s13
 8006df0:	eef0 0a47 	vmov.f32	s1, s14
 8006df4:	eeb0 1a67 	vmov.f32	s2, s15
 8006df8:	f7ff fa1c 	bl	8006234 <FusionVectorMagnitudeSquared>
 8006dfc:	eeb0 7a40 	vmov.f32	s14, s0
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	d817      	bhi.n	8006e40 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8006e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e16:	3248      	adds	r2, #72	; 0x48
 8006e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2e:	2b09      	cmp	r3, #9
 8006e30:	d901      	bls.n	8006e36 <FusionAhrsUpdate+0x446>
 8006e32:	230a      	movs	r3, #10
 8006e34:	e000      	b.n	8006e38 <FusionAhrsUpdate+0x448>
 8006e36:	2300      	movs	r3, #0
 8006e38:	1ad2      	subs	r2, r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	661a      	str	r2, [r3, #96]	; 0x60
 8006e3e:	e004      	b.n	8006e4a <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8006e4a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006e4e:	f7ff f817 	bl	8005e80 <FusionDegreesToRadians>
 8006e52:	eeb0 6a40 	vmov.f32	s12, s0
 8006e56:	edd7 6a08 	vldr	s13, [r7, #32]
 8006e5a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006e5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e62:	eef0 1a46 	vmov.f32	s3, s12
 8006e66:	eeb0 0a66 	vmov.f32	s0, s13
 8006e6a:	eef0 0a47 	vmov.f32	s1, s14
 8006e6e:	eeb0 1a67 	vmov.f32	s2, s15
 8006e72:	f7ff f8e7 	bl	8006044 <FusionVectorMultiplyScalar>
 8006e76:	eef0 6a40 	vmov.f32	s13, s0
 8006e7a:	eeb0 7a60 	vmov.f32	s14, s1
 8006e7e:	eef0 7a41 	vmov.f32	s15, s2
 8006e82:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8006e86:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8006e8a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8006e8e:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8006e92:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8006e96:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8006e9a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8006e9e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006ea2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006ea6:	eef0 1a45 	vmov.f32	s3, s10
 8006eaa:	eeb0 2a65 	vmov.f32	s4, s11
 8006eae:	eef0 2a46 	vmov.f32	s5, s12
 8006eb2:	eeb0 0a66 	vmov.f32	s0, s13
 8006eb6:	eef0 0a47 	vmov.f32	s1, s14
 8006eba:	eeb0 1a67 	vmov.f32	s2, s15
 8006ebe:	f7ff f853 	bl	8005f68 <FusionVectorAdd>
 8006ec2:	eef0 6a40 	vmov.f32	s13, s0
 8006ec6:	eeb0 7a60 	vmov.f32	s14, s1
 8006eca:	eef0 7a41 	vmov.f32	s15, s2
 8006ece:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8006ed2:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8006ed6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8006ee0:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8006ee4:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006ee8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8006eec:	eef0 1a46 	vmov.f32	s3, s12
 8006ef0:	eeb0 0a66 	vmov.f32	s0, s13
 8006ef4:	eef0 0a47 	vmov.f32	s1, s14
 8006ef8:	eeb0 1a67 	vmov.f32	s2, s15
 8006efc:	f7ff f8a2 	bl	8006044 <FusionVectorMultiplyScalar>
 8006f00:	eef0 6a40 	vmov.f32	s13, s0
 8006f04:	eeb0 7a60 	vmov.f32	s14, s1
 8006f08:	eef0 7a41 	vmov.f32	s15, s2
 8006f0c:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8006f10:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8006f14:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8006f18:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8006f1c:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8006f20:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8006f24:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006f28:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f2c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006f30:	eef0 1a45 	vmov.f32	s3, s10
 8006f34:	eeb0 2a65 	vmov.f32	s4, s11
 8006f38:	eef0 2a46 	vmov.f32	s5, s12
 8006f3c:	eeb0 0a66 	vmov.f32	s0, s13
 8006f40:	eef0 0a47 	vmov.f32	s1, s14
 8006f44:	eeb0 1a67 	vmov.f32	s2, s15
 8006f48:	f7ff f80e 	bl	8005f68 <FusionVectorAdd>
 8006f4c:	eef0 6a40 	vmov.f32	s13, s0
 8006f50:	eeb0 7a60 	vmov.f32	s14, s1
 8006f54:	eef0 7a41 	vmov.f32	s15, s2
 8006f58:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8006f5c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8006f60:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8006f64:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006f68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006f6c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006f70:	edd7 1a01 	vldr	s3, [r7, #4]
 8006f74:	eeb0 0a66 	vmov.f32	s0, s13
 8006f78:	eef0 0a47 	vmov.f32	s1, s14
 8006f7c:	eeb0 1a67 	vmov.f32	s2, s15
 8006f80:	f7ff f860 	bl	8006044 <FusionVectorMultiplyScalar>
 8006f84:	eef0 6a40 	vmov.f32	s13, s0
 8006f88:	eeb0 7a60 	vmov.f32	s14, s1
 8006f8c:	eef0 7a41 	vmov.f32	s15, s2
 8006f90:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8006f94:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8006f98:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8006f9c:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8006fa0:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8006fa4:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	ed93 6a05 	vldr	s12, [r3, #20]
 8006fae:	edd3 6a06 	vldr	s13, [r3, #24]
 8006fb2:	ed93 7a07 	vldr	s14, [r3, #28]
 8006fb6:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fba:	eeb0 2a64 	vmov.f32	s4, s9
 8006fbe:	eef0 2a45 	vmov.f32	s5, s10
 8006fc2:	eeb0 3a65 	vmov.f32	s6, s11
 8006fc6:	eeb0 0a46 	vmov.f32	s0, s12
 8006fca:	eef0 0a66 	vmov.f32	s1, s13
 8006fce:	eeb0 1a47 	vmov.f32	s2, s14
 8006fd2:	eef0 1a67 	vmov.f32	s3, s15
 8006fd6:	f7ff faee 	bl	80065b6 <FusionQuaternionMultiplyVector>
 8006fda:	eeb0 6a40 	vmov.f32	s12, s0
 8006fde:	eef0 6a60 	vmov.f32	s13, s1
 8006fe2:	eeb0 7a41 	vmov.f32	s14, s2
 8006fe6:	eef0 7a61 	vmov.f32	s15, s3
 8006fea:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8006fee:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8006ff2:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8006ff6:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8006ffa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006ffc:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8007000:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8007004:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8007008:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	ed93 6a05 	vldr	s12, [r3, #20]
 8007012:	edd3 6a06 	vldr	s13, [r3, #24]
 8007016:	ed93 7a07 	vldr	s14, [r3, #28]
 800701a:	edd3 7a08 	vldr	s15, [r3, #32]
 800701e:	eeb0 2a44 	vmov.f32	s4, s8
 8007022:	eef0 2a64 	vmov.f32	s5, s9
 8007026:	eeb0 3a45 	vmov.f32	s6, s10
 800702a:	eef0 3a65 	vmov.f32	s7, s11
 800702e:	eeb0 0a46 	vmov.f32	s0, s12
 8007032:	eef0 0a66 	vmov.f32	s1, s13
 8007036:	eeb0 1a47 	vmov.f32	s2, s14
 800703a:	eef0 1a67 	vmov.f32	s3, s15
 800703e:	f7ff f996 	bl	800636e <FusionQuaternionAdd>
 8007042:	eeb0 6a40 	vmov.f32	s12, s0
 8007046:	eef0 6a60 	vmov.f32	s13, s1
 800704a:	eeb0 7a41 	vmov.f32	s14, s2
 800704e:	eef0 7a61 	vmov.f32	s15, s3
 8007052:	ed84 6a05 	vstr	s12, [r4, #20]
 8007056:	edc4 6a06 	vstr	s13, [r4, #24]
 800705a:	ed84 7a07 	vstr	s14, [r4, #28]
 800705e:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8007062:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	ed93 6a05 	vldr	s12, [r3, #20]
 800706a:	edd3 6a06 	vldr	s13, [r3, #24]
 800706e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007072:	edd3 7a08 	vldr	s15, [r3, #32]
 8007076:	eeb0 0a46 	vmov.f32	s0, s12
 800707a:	eef0 0a66 	vmov.f32	s1, s13
 800707e:	eeb0 1a47 	vmov.f32	s2, s14
 8007082:	eef0 1a67 	vmov.f32	s3, s15
 8007086:	f7ff fb36 	bl	80066f6 <FusionQuaternionNormalise>
 800708a:	eeb0 6a40 	vmov.f32	s12, s0
 800708e:	eef0 6a60 	vmov.f32	s13, s1
 8007092:	eeb0 7a41 	vmov.f32	s14, s2
 8007096:	eef0 7a61 	vmov.f32	s15, s3
 800709a:	ed84 6a05 	vstr	s12, [r4, #20]
 800709e:	edc4 6a06 	vstr	s13, [r4, #24]
 80070a2:	ed84 7a07 	vstr	s14, [r4, #28]
 80070a6:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80070aa:	bf00      	nop
 80070ac:	37fc      	adds	r7, #252	; 0xfc
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd90      	pop	{r4, r7, pc}

080070b2 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80070b2:	b480      	push	{r7}
 80070b4:	b093      	sub	sp, #76	; 0x4c
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	dc02      	bgt.n	80070c8 <HalfGravity+0x16>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da03      	bge.n	80070ce <HalfGravity+0x1c>
 80070c6:	e094      	b.n	80071f2 <HalfGravity+0x140>
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d048      	beq.n	800715e <HalfGravity+0xac>
 80070cc:	e091      	b.n	80071f2 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80070da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	edd3 6a05 	vldr	s13, [r3, #20]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80070ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80070f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	ed93 7a07 	vldr	s14, [r3, #28]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8007102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	edd3 6a05 	vldr	s13, [r3, #20]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007116:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800711a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	ed93 7a05 	vldr	s14, [r3, #20]
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	edd3 7a05 	vldr	s15, [r3, #20]
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007132:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	edd3 6a08 	vldr	s13, [r3, #32]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007146:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800714a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 800714e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007152:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007156:	ca07      	ldmia	r2, {r0, r1, r2}
 8007158:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800715c:	e052      	b.n	8007204 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	ed93 7a05 	vldr	s14, [r3, #20]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	edd3 7a07 	vldr	s15, [r3, #28]
 800716a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	edd3 6a06 	vldr	s13, [r3, #24]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	edd3 7a08 	vldr	s15, [r3, #32]
 800717a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800717e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8007182:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	ed93 7a07 	vldr	s14, [r3, #28]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	edd3 6a05 	vldr	s13, [r3, #20]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	edd3 7a06 	vldr	s15, [r3, #24]
 80071a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071aa:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	edd3 6a08 	vldr	s13, [r3, #32]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80071d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071da:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80071de:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80071e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071e6:	f107 0218 	add.w	r2, r7, #24
 80071ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80071ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80071f0:	e008      	b.n	8007204 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	643b      	str	r3, [r7, #64]	; 0x40
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8007204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720a:	ee06 1a90 	vmov	s13, r1
 800720e:	ee07 2a10 	vmov	s14, r2
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eeb0 0a66 	vmov.f32	s0, s13
 800721a:	eef0 0a47 	vmov.f32	s1, s14
 800721e:	eeb0 1a67 	vmov.f32	s2, s15
 8007222:	374c      	adds	r7, #76	; 0x4c
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 800722c:	b480      	push	{r7}
 800722e:	b097      	sub	sp, #92	; 0x5c
 8007230:	af00      	add	r7, sp, #0
 8007232:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f000 809a 	beq.w	8007372 <HalfMagnetic+0x146>
 800723e:	2b02      	cmp	r3, #2
 8007240:	f300 80e1 	bgt.w	8007406 <HalfMagnetic+0x1da>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HalfMagnetic+0x22>
 8007248:	2b01      	cmp	r3, #1
 800724a:	d048      	beq.n	80072de <HalfMagnetic+0xb2>
 800724c:	e0db      	b.n	8007406 <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	ed93 7a06 	vldr	s14, [r3, #24]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	edd3 7a07 	vldr	s15, [r3, #28]
 800725a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	edd3 6a05 	vldr	s13, [r3, #20]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	edd3 7a08 	vldr	s15, [r3, #32]
 800726a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800726e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8007272:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	ed93 7a05 	vldr	s14, [r3, #20]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	edd3 7a05 	vldr	s15, [r3, #20]
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800728a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	edd3 6a07 	vldr	s13, [r3, #28]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	edd3 7a07 	vldr	s15, [r3, #28]
 800729a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800729e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80072a2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	ed93 7a07 	vldr	s14, [r3, #28]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80072b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	edd3 7a06 	vldr	s15, [r3, #24]
 80072c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80072ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 80072ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80072d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80072d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80072d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80072dc:	e09c      	b.n	8007418 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8007302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007306:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800730a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	ed93 7a05 	vldr	s14, [r3, #20]
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	edd3 7a08 	vldr	s15, [r3, #32]
 800731a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	edd3 6a06 	vldr	s13, [r3, #24]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	edd3 7a07 	vldr	s15, [r3, #28]
 800732a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800732e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8007332:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	ed93 7a06 	vldr	s14, [r3, #24]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	edd3 6a05 	vldr	s13, [r3, #20]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	edd3 7a07 	vldr	s15, [r3, #28]
 8007352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800735a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800735e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8007362:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800736a:	ca07      	ldmia	r2, {r0, r1, r2}
 800736c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007370:	e052      	b.n	8007418 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	ed93 7a06 	vldr	s14, [r3, #24]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	edd3 7a07 	vldr	s15, [r3, #28]
 800737e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	edd3 6a05 	vldr	s13, [r3, #20]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	edd3 7a08 	vldr	s15, [r3, #32]
 800738e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007396:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 800739a:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	edd3 6a07 	vldr	s13, [r3, #28]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	edd3 7a07 	vldr	s15, [r3, #28]
 80073c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073c6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80073ca:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80073da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80073ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80073f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80073f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80073fa:	f107 021c 	add.w	r2, r7, #28
 80073fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8007400:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007404:	e008      	b.n	8007418 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	653b      	str	r3, [r7, #80]	; 0x50
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8007418:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800741a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800741c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800741e:	ee06 1a90 	vmov	s13, r1
 8007422:	ee07 2a10 	vmov	s14, r2
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eeb0 0a66 	vmov.f32	s0, s13
 800742e:	eef0 0a47 	vmov.f32	s1, s14
 8007432:	eeb0 1a67 	vmov.f32	s2, s15
 8007436:	375c      	adds	r7, #92	; 0x5c
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8007440:	b490      	push	{r4, r7}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f107 0418 	add.w	r4, r7, #24
 800744e:	3314      	adds	r3, #20
 8007450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007456:	69b8      	ldr	r0, [r7, #24]
 8007458:	69f9      	ldr	r1, [r7, #28]
 800745a:	6a3a      	ldr	r2, [r7, #32]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	ee06 0a10 	vmov	s12, r0
 8007462:	ee06 1a90 	vmov	s13, r1
 8007466:	ee07 2a10 	vmov	s14, r2
 800746a:	ee07 3a90 	vmov	s15, r3
}
 800746e:	eeb0 0a46 	vmov.f32	s0, s12
 8007472:	eef0 0a66 	vmov.f32	s1, s13
 8007476:	eeb0 1a47 	vmov.f32	s2, s14
 800747a:	eef0 1a67 	vmov.f32	s3, s15
 800747e:	3728      	adds	r7, #40	; 0x28
 8007480:	46bd      	mov	sp, r7
 8007482:	bc90      	pop	{r4, r7}
 8007484:	4770      	bx	lr

08007486 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8007486:	b590      	push	{r4, r7, lr}
 8007488:	b089      	sub	sp, #36	; 0x24
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	ed93 7a05 	vldr	s14, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	edd3 7a08 	vldr	s15, [r3, #32]
 800749e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	edd3 6a06 	vldr	s13, [r3, #24]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80074ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074b2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	edd3 7a07 	vldr	s15, [r3, #28]
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	edd3 6a08 	vldr	s13, [r3, #32]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80074da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e2:	eef0 0a67 	vmov.f32	s1, s15
 80074e6:	eeb0 0a46 	vmov.f32	s0, s12
 80074ea:	f003 fe9b 	bl	800b224 <atan2f>
 80074ee:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 80074f2:	ed97 0a00 	vldr	s0, [r7]
 80074f6:	f7fe fcc3 	bl	8005e80 <FusionDegreesToRadians>
 80074fa:	eeb0 7a40 	vmov.f32	s14, s0
 80074fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8007502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007506:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800750a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800750e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8007512:	ed97 0a06 	vldr	s0, [r7, #24]
 8007516:	f003 fdcf 	bl	800b0b8 <cosf>
 800751a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 800751e:	edc7 7a02 	vstr	s15, [r7, #8]
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 800752e:	ed97 0a06 	vldr	s0, [r7, #24]
 8007532:	f003 fe05 	bl	800b140 <sinf>
 8007536:	eef0 7a40 	vmov.f32	s15, s0
 800753a:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 800753e:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8007542:	687c      	ldr	r4, [r7, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	ed93 4a05 	vldr	s8, [r3, #20]
 800754a:	edd3 4a06 	vldr	s9, [r3, #24]
 800754e:	ed93 5a07 	vldr	s10, [r3, #28]
 8007552:	edd3 5a08 	vldr	s11, [r3, #32]
 8007556:	ed97 6a02 	vldr	s12, [r7, #8]
 800755a:	edd7 6a03 	vldr	s13, [r7, #12]
 800755e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007562:	edd7 7a05 	vldr	s15, [r7, #20]
 8007566:	eeb0 2a44 	vmov.f32	s4, s8
 800756a:	eef0 2a64 	vmov.f32	s5, s9
 800756e:	eeb0 3a45 	vmov.f32	s6, s10
 8007572:	eef0 3a65 	vmov.f32	s7, s11
 8007576:	eeb0 0a46 	vmov.f32	s0, s12
 800757a:	eef0 0a66 	vmov.f32	s1, s13
 800757e:	eeb0 1a47 	vmov.f32	s2, s14
 8007582:	eef0 1a67 	vmov.f32	s3, s15
 8007586:	f7fe ff54 	bl	8006432 <FusionQuaternionMultiply>
 800758a:	eeb0 6a40 	vmov.f32	s12, s0
 800758e:	eef0 6a60 	vmov.f32	s13, s1
 8007592:	eeb0 7a41 	vmov.f32	s14, s2
 8007596:	eef0 7a61 	vmov.f32	s15, s3
 800759a:	ed84 6a05 	vstr	s12, [r4, #20]
 800759e:	edc4 6a06 	vstr	s13, [r4, #24]
 80075a2:	ed84 7a07 	vstr	s14, [r4, #28]
 80075a6:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80075aa:	bf00      	nop
 80075ac:	3724      	adds	r7, #36	; 0x24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd90      	pop	{r4, r7, pc}
	...

080075b4 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80075be:	edd7 7a01 	vldr	s15, [r7, #4]
 80075c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80075d8 <FusionRadiansToDegrees+0x24>
 80075c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075ca:	eeb0 0a67 	vmov.f32	s0, s15
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	42652ee0 	.word	0x42652ee0

080075dc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	105a      	asrs	r2, r3, #1
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <FusionFastInverseSqrt+0x54>)
 80075f0:	1a9b      	subs	r3, r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80075f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80075f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80075fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8007634 <FusionFastInverseSqrt+0x58>
 8007600:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007604:	edd7 7a03 	vldr	s15, [r7, #12]
 8007608:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800760c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007614:	eddf 6a08 	vldr	s13, [pc, #32]	; 8007638 <FusionFastInverseSqrt+0x5c>
 8007618:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800761c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007620:	eeb0 0a67 	vmov.f32	s0, s15
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	5f1f1412 	.word	0x5f1f1412
 8007634:	3f36d312 	.word	0x3f36d312
 8007638:	3fd851ff 	.word	0x3fd851ff

0800763c <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	eef0 6a40 	vmov.f32	s13, s0
 8007646:	eeb0 7a60 	vmov.f32	s14, s1
 800764a:	eef0 7a41 	vmov.f32	s15, s2
 800764e:	edc7 6a01 	vstr	s13, [r7, #4]
 8007652:	ed87 7a02 	vstr	s14, [r7, #8]
 8007656:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800765a:	ed97 7a01 	vldr	s14, [r7, #4]
 800765e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007666:	edd7 7a03 	vldr	s15, [r7, #12]
 800766a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800766e:	eeb0 0a67 	vmov.f32	s0, s15
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800767c:	b480      	push	{r7}
 800767e:	b08f      	sub	sp, #60	; 0x3c
 8007680:	af00      	add	r7, sp, #0
 8007682:	eef0 6a40 	vmov.f32	s13, s0
 8007686:	eeb0 7a60 	vmov.f32	s14, s1
 800768a:	eef0 7a41 	vmov.f32	s15, s2
 800768e:	edc7 1a04 	vstr	s3, [r7, #16]
 8007692:	edc7 6a05 	vstr	s13, [r7, #20]
 8007696:	ed87 7a06 	vstr	s14, [r7, #24]
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800769e:	ed97 7a05 	vldr	s14, [r7, #20]
 80076a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076aa:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80076ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80076b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80076b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80076be:	ed97 7a07 	vldr	s14, [r7, #28]
 80076c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80076ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076d2:	f107 0220 	add.w	r2, r7, #32
 80076d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80076d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80076dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e2:	ee06 1a90 	vmov	s13, r1
 80076e6:	ee07 2a10 	vmov	s14, r2
 80076ea:	ee07 3a90 	vmov	s15, r3
}
 80076ee:	eeb0 0a66 	vmov.f32	s0, s13
 80076f2:	eef0 0a47 	vmov.f32	s1, s14
 80076f6:	eeb0 1a67 	vmov.f32	s2, s15
 80076fa:	373c      	adds	r7, #60	; 0x3c
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007704:	b480      	push	{r7}
 8007706:	b091      	sub	sp, #68	; 0x44
 8007708:	af00      	add	r7, sp, #0
 800770a:	eeb0 5a40 	vmov.f32	s10, s0
 800770e:	eef0 5a60 	vmov.f32	s11, s1
 8007712:	eeb0 6a41 	vmov.f32	s12, s2
 8007716:	eef0 6a61 	vmov.f32	s13, s3
 800771a:	eeb0 7a42 	vmov.f32	s14, s4
 800771e:	eef0 7a62 	vmov.f32	s15, s5
 8007722:	ed87 5a07 	vstr	s10, [r7, #28]
 8007726:	edc7 5a08 	vstr	s11, [r7, #32]
 800772a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800772e:	edc7 6a04 	vstr	s13, [r7, #16]
 8007732:	ed87 7a05 	vstr	s14, [r7, #20]
 8007736:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800773a:	ed97 7a07 	vldr	s14, [r7, #28]
 800773e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007746:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800774a:	ed97 7a08 	vldr	s14, [r7, #32]
 800774e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007756:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800775a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800775e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007766:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800776a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800776e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007772:	ca07      	ldmia	r2, {r0, r1, r2}
 8007774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007778:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800777a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800777c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777e:	ee06 1a90 	vmov	s13, r1
 8007782:	ee07 2a10 	vmov	s14, r2
 8007786:	ee07 3a90 	vmov	s15, r3
}
 800778a:	eeb0 0a66 	vmov.f32	s0, s13
 800778e:	eef0 0a47 	vmov.f32	s1, s14
 8007792:	eeb0 1a67 	vmov.f32	s2, s15
 8007796:	3744      	adds	r7, #68	; 0x44
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80077a0:	b480      	push	{r7}
 80077a2:	b091      	sub	sp, #68	; 0x44
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	eeb0 5a40 	vmov.f32	s10, s0
 80077aa:	eef0 5a60 	vmov.f32	s11, s1
 80077ae:	eeb0 6a41 	vmov.f32	s12, s2
 80077b2:	eef0 6a61 	vmov.f32	s13, s3
 80077b6:	eeb0 7a42 	vmov.f32	s14, s4
 80077ba:	eef0 7a62 	vmov.f32	s15, s5
 80077be:	ed87 5a07 	vstr	s10, [r7, #28]
 80077c2:	edc7 5a08 	vstr	s11, [r7, #32]
 80077c6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80077ca:	edc7 6a04 	vstr	s13, [r7, #16]
 80077ce:	ed87 7a05 	vstr	s14, [r7, #20]
 80077d2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80077d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80077da:	edd7 7a06 	vldr	s15, [r7, #24]
 80077de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077e2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80077e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80077ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077ee:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80077f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80077f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80077fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80077fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007802:	edd7 6a07 	vldr	s13, [r7, #28]
 8007806:	edd7 7a06 	vldr	s15, [r7, #24]
 800780a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800780e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007812:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8007816:	ed97 7a07 	vldr	s14, [r7, #28]
 800781a:	edd7 7a05 	vldr	s15, [r7, #20]
 800781e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007822:	edd7 6a08 	vldr	s13, [r7, #32]
 8007826:	edd7 7a04 	vldr	s15, [r7, #16]
 800782a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800782e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007832:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8007836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800783a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800783e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784a:	ee06 1a90 	vmov	s13, r1
 800784e:	ee07 2a10 	vmov	s14, r2
 8007852:	ee07 3a90 	vmov	s15, r3
}
 8007856:	eeb0 0a66 	vmov.f32	s0, s13
 800785a:	eef0 0a47 	vmov.f32	s1, s14
 800785e:	eeb0 1a67 	vmov.f32	s2, s15
 8007862:	3744      	adds	r7, #68	; 0x44
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	eef0 6a40 	vmov.f32	s13, s0
 8007876:	eeb0 7a60 	vmov.f32	s14, s1
 800787a:	eef0 7a41 	vmov.f32	s15, s2
 800787e:	edc7 6a01 	vstr	s13, [r7, #4]
 8007882:	ed87 7a02 	vstr	s14, [r7, #8]
 8007886:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800788a:	ed97 5a01 	vldr	s10, [r7, #4]
 800788e:	edd7 5a02 	vldr	s11, [r7, #8]
 8007892:	ed97 6a03 	vldr	s12, [r7, #12]
 8007896:	edd7 6a01 	vldr	s13, [r7, #4]
 800789a:	ed97 7a02 	vldr	s14, [r7, #8]
 800789e:	edd7 7a03 	vldr	s15, [r7, #12]
 80078a2:	eef0 1a45 	vmov.f32	s3, s10
 80078a6:	eeb0 2a65 	vmov.f32	s4, s11
 80078aa:	eef0 2a46 	vmov.f32	s5, s12
 80078ae:	eeb0 0a66 	vmov.f32	s0, s13
 80078b2:	eef0 0a47 	vmov.f32	s1, s14
 80078b6:	eeb0 1a67 	vmov.f32	s2, s15
 80078ba:	f7ff ff23 	bl	8007704 <FusionVectorHadamardProduct>
 80078be:	eef0 6a40 	vmov.f32	s13, s0
 80078c2:	eeb0 7a60 	vmov.f32	s14, s1
 80078c6:	eef0 7a41 	vmov.f32	s15, s2
 80078ca:	edc7 6a05 	vstr	s13, [r7, #20]
 80078ce:	ed87 7a06 	vstr	s14, [r7, #24]
 80078d2:	edc7 7a07 	vstr	s15, [r7, #28]
 80078d6:	edd7 6a05 	vldr	s13, [r7, #20]
 80078da:	ed97 7a06 	vldr	s14, [r7, #24]
 80078de:	edd7 7a07 	vldr	s15, [r7, #28]
 80078e2:	eeb0 0a66 	vmov.f32	s0, s13
 80078e6:	eef0 0a47 	vmov.f32	s1, s14
 80078ea:	eeb0 1a67 	vmov.f32	s2, s15
 80078ee:	f7ff fea5 	bl	800763c <FusionVectorSum>
 80078f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80078f6:	eeb0 0a67 	vmov.f32	s0, s15
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b08c      	sub	sp, #48	; 0x30
 8007904:	af00      	add	r7, sp, #0
 8007906:	eef0 6a40 	vmov.f32	s13, s0
 800790a:	eeb0 7a60 	vmov.f32	s14, s1
 800790e:	eef0 7a41 	vmov.f32	s15, s2
 8007912:	edc7 6a05 	vstr	s13, [r7, #20]
 8007916:	ed87 7a06 	vstr	s14, [r7, #24]
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800791e:	edd7 6a05 	vldr	s13, [r7, #20]
 8007922:	ed97 7a06 	vldr	s14, [r7, #24]
 8007926:	edd7 7a07 	vldr	s15, [r7, #28]
 800792a:	eeb0 0a66 	vmov.f32	s0, s13
 800792e:	eef0 0a47 	vmov.f32	s1, s14
 8007932:	eeb0 1a67 	vmov.f32	s2, s15
 8007936:	f7ff ff99 	bl	800786c <FusionVectorMagnitudeSquared>
 800793a:	eef0 7a40 	vmov.f32	s15, s0
 800793e:	eeb0 0a67 	vmov.f32	s0, s15
 8007942:	f7ff fe4b 	bl	80075dc <FusionFastInverseSqrt>
 8007946:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800794a:	edd7 6a05 	vldr	s13, [r7, #20]
 800794e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007952:	edd7 7a07 	vldr	s15, [r7, #28]
 8007956:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800795a:	eeb0 0a66 	vmov.f32	s0, s13
 800795e:	eef0 0a47 	vmov.f32	s1, s14
 8007962:	eeb0 1a67 	vmov.f32	s2, s15
 8007966:	f7ff fe89 	bl	800767c <FusionVectorMultiplyScalar>
 800796a:	eef0 6a40 	vmov.f32	s13, s0
 800796e:	eeb0 7a60 	vmov.f32	s14, s1
 8007972:	eef0 7a41 	vmov.f32	s15, s2
 8007976:	edc7 6a08 	vstr	s13, [r7, #32]
 800797a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800797e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8007982:	6a39      	ldr	r1, [r7, #32]
 8007984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	ee06 1a90 	vmov	s13, r1
 800798c:	ee07 2a10 	vmov	s14, r2
 8007990:	ee07 3a90 	vmov	s15, r3
}
 8007994:	eeb0 0a66 	vmov.f32	s0, s13
 8007998:	eef0 0a47 	vmov.f32	s1, s14
 800799c:	eeb0 1a67 	vmov.f32	s2, s15
 80079a0:	3730      	adds	r7, #48	; 0x30
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b0b2      	sub	sp, #200	; 0xc8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	eeb0 5a40 	vmov.f32	s10, s0
 80079b4:	eef0 5a60 	vmov.f32	s11, s1
 80079b8:	eeb0 6a41 	vmov.f32	s12, s2
 80079bc:	eef0 6a61 	vmov.f32	s13, s3
 80079c0:	eeb0 7a42 	vmov.f32	s14, s4
 80079c4:	eef0 7a62 	vmov.f32	s15, s5
 80079c8:	77fb      	strb	r3, [r7, #31]
 80079ca:	ed87 5a04 	vstr	s10, [r7, #16]
 80079ce:	edc7 5a05 	vstr	s11, [r7, #20]
 80079d2:	ed87 6a06 	vstr	s12, [r7, #24]
 80079d6:	edc7 6a01 	vstr	s13, [r7, #4]
 80079da:	ed87 7a02 	vstr	s14, [r7, #8]
 80079de:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 80079e2:	7ffb      	ldrb	r3, [r7, #31]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f000 814b 	beq.w	8007c80 <FusionCompassCalculateHeading+0x2d8>
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	f300 81f7 	bgt.w	8007dde <FusionCompassCalculateHeading+0x436>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <FusionCompassCalculateHeading+0x54>
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f000 8094 	beq.w	8007b22 <FusionCompassCalculateHeading+0x17a>
 80079fa:	e1f0      	b.n	8007dde <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80079fc:	ed97 5a01 	vldr	s10, [r7, #4]
 8007a00:	edd7 5a02 	vldr	s11, [r7, #8]
 8007a04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a08:	edd7 6a04 	vldr	s13, [r7, #16]
 8007a0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8007a14:	eef0 1a45 	vmov.f32	s3, s10
 8007a18:	eeb0 2a65 	vmov.f32	s4, s11
 8007a1c:	eef0 2a46 	vmov.f32	s5, s12
 8007a20:	eeb0 0a66 	vmov.f32	s0, s13
 8007a24:	eef0 0a47 	vmov.f32	s1, s14
 8007a28:	eeb0 1a67 	vmov.f32	s2, s15
 8007a2c:	f7ff feb8 	bl	80077a0 <FusionVectorCrossProduct>
 8007a30:	eef0 6a40 	vmov.f32	s13, s0
 8007a34:	eeb0 7a60 	vmov.f32	s14, s1
 8007a38:	eef0 7a41 	vmov.f32	s15, s2
 8007a3c:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8007a40:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8007a44:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8007a48:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8007a4c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007a50:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007a54:	eeb0 0a66 	vmov.f32	s0, s13
 8007a58:	eef0 0a47 	vmov.f32	s1, s14
 8007a5c:	eeb0 1a67 	vmov.f32	s2, s15
 8007a60:	f7ff ff4e 	bl	8007900 <FusionVectorNormalise>
 8007a64:	eef0 6a40 	vmov.f32	s13, s0
 8007a68:	eeb0 7a60 	vmov.f32	s14, s1
 8007a6c:	eef0 7a41 	vmov.f32	s15, s2
 8007a70:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8007a74:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 8007a78:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8007a7c:	ed97 5a04 	vldr	s10, [r7, #16]
 8007a80:	edd7 5a05 	vldr	s11, [r7, #20]
 8007a84:	ed97 6a06 	vldr	s12, [r7, #24]
 8007a88:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8007a8c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007a90:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007a94:	eef0 1a45 	vmov.f32	s3, s10
 8007a98:	eeb0 2a65 	vmov.f32	s4, s11
 8007a9c:	eef0 2a46 	vmov.f32	s5, s12
 8007aa0:	eeb0 0a66 	vmov.f32	s0, s13
 8007aa4:	eef0 0a47 	vmov.f32	s1, s14
 8007aa8:	eeb0 1a67 	vmov.f32	s2, s15
 8007aac:	f7ff fe78 	bl	80077a0 <FusionVectorCrossProduct>
 8007ab0:	eef0 6a40 	vmov.f32	s13, s0
 8007ab4:	eeb0 7a60 	vmov.f32	s14, s1
 8007ab8:	eef0 7a41 	vmov.f32	s15, s2
 8007abc:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8007ac0:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8007ac4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8007ac8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8007acc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007ad0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007ad4:	eeb0 0a66 	vmov.f32	s0, s13
 8007ad8:	eef0 0a47 	vmov.f32	s1, s14
 8007adc:	eeb0 1a67 	vmov.f32	s2, s15
 8007ae0:	f7ff ff0e 	bl	8007900 <FusionVectorNormalise>
 8007ae4:	eef0 6a40 	vmov.f32	s13, s0
 8007ae8:	eeb0 7a60 	vmov.f32	s14, s1
 8007aec:	eef0 7a41 	vmov.f32	s15, s2
 8007af0:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8007af4:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8007af8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8007afc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8007b00:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8007b04:	eef0 0a47 	vmov.f32	s1, s14
 8007b08:	eeb0 0a67 	vmov.f32	s0, s15
 8007b0c:	f003 fb8a 	bl	800b224 <atan2f>
 8007b10:	eef0 7a40 	vmov.f32	s15, s0
 8007b14:	eeb0 0a67 	vmov.f32	s0, s15
 8007b18:	f7ff fd4c 	bl	80075b4 <FusionRadiansToDegrees>
 8007b1c:	eef0 7a40 	vmov.f32	s15, s0
 8007b20:	e15f      	b.n	8007de2 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8007b22:	ed97 5a01 	vldr	s10, [r7, #4]
 8007b26:	edd7 5a02 	vldr	s11, [r7, #8]
 8007b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2e:	edd7 6a04 	vldr	s13, [r7, #16]
 8007b32:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b36:	edd7 7a06 	vldr	s15, [r7, #24]
 8007b3a:	eef0 1a45 	vmov.f32	s3, s10
 8007b3e:	eeb0 2a65 	vmov.f32	s4, s11
 8007b42:	eef0 2a46 	vmov.f32	s5, s12
 8007b46:	eeb0 0a66 	vmov.f32	s0, s13
 8007b4a:	eef0 0a47 	vmov.f32	s1, s14
 8007b4e:	eeb0 1a67 	vmov.f32	s2, s15
 8007b52:	f7ff fe25 	bl	80077a0 <FusionVectorCrossProduct>
 8007b56:	eef0 6a40 	vmov.f32	s13, s0
 8007b5a:	eeb0 7a60 	vmov.f32	s14, s1
 8007b5e:	eef0 7a41 	vmov.f32	s15, s2
 8007b62:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8007b66:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8007b6a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8007b6e:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8007b72:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8007b76:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007b7a:	eeb0 0a66 	vmov.f32	s0, s13
 8007b7e:	eef0 0a47 	vmov.f32	s1, s14
 8007b82:	eeb0 1a67 	vmov.f32	s2, s15
 8007b86:	f7ff febb 	bl	8007900 <FusionVectorNormalise>
 8007b8a:	eef0 6a40 	vmov.f32	s13, s0
 8007b8e:	eeb0 7a60 	vmov.f32	s14, s1
 8007b92:	eef0 7a41 	vmov.f32	s15, s2
 8007b96:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 8007b9a:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8007b9e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8007ba2:	ed97 5a04 	vldr	s10, [r7, #16]
 8007ba6:	edd7 5a05 	vldr	s11, [r7, #20]
 8007baa:	ed97 6a06 	vldr	s12, [r7, #24]
 8007bae:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8007bb2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007bb6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007bba:	eef0 1a45 	vmov.f32	s3, s10
 8007bbe:	eeb0 2a65 	vmov.f32	s4, s11
 8007bc2:	eef0 2a46 	vmov.f32	s5, s12
 8007bc6:	eeb0 0a66 	vmov.f32	s0, s13
 8007bca:	eef0 0a47 	vmov.f32	s1, s14
 8007bce:	eeb0 1a67 	vmov.f32	s2, s15
 8007bd2:	f7ff fde5 	bl	80077a0 <FusionVectorCrossProduct>
 8007bd6:	eef0 6a40 	vmov.f32	s13, s0
 8007bda:	eeb0 7a60 	vmov.f32	s14, s1
 8007bde:	eef0 7a41 	vmov.f32	s15, s2
 8007be2:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 8007be6:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 8007bea:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8007bee:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8007bf2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8007bf6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007bfa:	eeb0 0a66 	vmov.f32	s0, s13
 8007bfe:	eef0 0a47 	vmov.f32	s1, s14
 8007c02:	eeb0 1a67 	vmov.f32	s2, s15
 8007c06:	f7ff fe7b 	bl	8007900 <FusionVectorNormalise>
 8007c0a:	eef0 6a40 	vmov.f32	s13, s0
 8007c0e:	eeb0 7a60 	vmov.f32	s14, s1
 8007c12:	eef0 7a41 	vmov.f32	s15, s2
 8007c16:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 8007c1a:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8007c1e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8007c22:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8007c26:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007c2a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007c2e:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8007c32:	eeb0 0a66 	vmov.f32	s0, s13
 8007c36:	eef0 0a47 	vmov.f32	s1, s14
 8007c3a:	eeb0 1a67 	vmov.f32	s2, s15
 8007c3e:	f7ff fd1d 	bl	800767c <FusionVectorMultiplyScalar>
 8007c42:	eef0 6a40 	vmov.f32	s13, s0
 8007c46:	eeb0 7a60 	vmov.f32	s14, s1
 8007c4a:	eef0 7a41 	vmov.f32	s15, s2
 8007c4e:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8007c52:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8007c56:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 8007c5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007c5e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007c62:	eef0 0a47 	vmov.f32	s1, s14
 8007c66:	eeb0 0a67 	vmov.f32	s0, s15
 8007c6a:	f003 fadb 	bl	800b224 <atan2f>
 8007c6e:	eef0 7a40 	vmov.f32	s15, s0
 8007c72:	eeb0 0a67 	vmov.f32	s0, s15
 8007c76:	f7ff fc9d 	bl	80075b4 <FusionRadiansToDegrees>
 8007c7a:	eef0 7a40 	vmov.f32	s15, s0
 8007c7e:	e0b0      	b.n	8007de2 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8007c80:	edd7 6a04 	vldr	s13, [r7, #16]
 8007c84:	ed97 7a05 	vldr	s14, [r7, #20]
 8007c88:	edd7 7a06 	vldr	s15, [r7, #24]
 8007c8c:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8007c90:	eeb0 0a66 	vmov.f32	s0, s13
 8007c94:	eef0 0a47 	vmov.f32	s1, s14
 8007c98:	eeb0 1a67 	vmov.f32	s2, s15
 8007c9c:	f7ff fcee 	bl	800767c <FusionVectorMultiplyScalar>
 8007ca0:	eef0 6a40 	vmov.f32	s13, s0
 8007ca4:	eeb0 7a60 	vmov.f32	s14, s1
 8007ca8:	eef0 7a41 	vmov.f32	s15, s2
 8007cac:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8007cb0:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8007cb4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 8007cb8:	ed97 5a01 	vldr	s10, [r7, #4]
 8007cbc:	edd7 5a02 	vldr	s11, [r7, #8]
 8007cc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8007cc8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007ccc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007cd0:	eef0 1a45 	vmov.f32	s3, s10
 8007cd4:	eeb0 2a65 	vmov.f32	s4, s11
 8007cd8:	eef0 2a46 	vmov.f32	s5, s12
 8007cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8007ce0:	eef0 0a47 	vmov.f32	s1, s14
 8007ce4:	eeb0 1a67 	vmov.f32	s2, s15
 8007ce8:	f7ff fd5a 	bl	80077a0 <FusionVectorCrossProduct>
 8007cec:	eef0 6a40 	vmov.f32	s13, s0
 8007cf0:	eeb0 7a60 	vmov.f32	s14, s1
 8007cf4:	eef0 7a41 	vmov.f32	s15, s2
 8007cf8:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8007cfc:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8007d00:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8007d04:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8007d08:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007d0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007d10:	eeb0 0a66 	vmov.f32	s0, s13
 8007d14:	eef0 0a47 	vmov.f32	s1, s14
 8007d18:	eeb0 1a67 	vmov.f32	s2, s15
 8007d1c:	f7ff fdf0 	bl	8007900 <FusionVectorNormalise>
 8007d20:	eef0 6a40 	vmov.f32	s13, s0
 8007d24:	eeb0 7a60 	vmov.f32	s14, s1
 8007d28:	eef0 7a41 	vmov.f32	s15, s2
 8007d2c:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8007d30:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8007d34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 8007d38:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8007d3c:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8007d40:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8007d44:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007d48:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007d4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007d50:	eef0 1a45 	vmov.f32	s3, s10
 8007d54:	eeb0 2a65 	vmov.f32	s4, s11
 8007d58:	eef0 2a46 	vmov.f32	s5, s12
 8007d5c:	eeb0 0a66 	vmov.f32	s0, s13
 8007d60:	eef0 0a47 	vmov.f32	s1, s14
 8007d64:	eeb0 1a67 	vmov.f32	s2, s15
 8007d68:	f7ff fd1a 	bl	80077a0 <FusionVectorCrossProduct>
 8007d6c:	eef0 6a40 	vmov.f32	s13, s0
 8007d70:	eeb0 7a60 	vmov.f32	s14, s1
 8007d74:	eef0 7a41 	vmov.f32	s15, s2
 8007d78:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8007d7c:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8007d80:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8007d84:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8007d88:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8007d8c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007d90:	eeb0 0a66 	vmov.f32	s0, s13
 8007d94:	eef0 0a47 	vmov.f32	s1, s14
 8007d98:	eeb0 1a67 	vmov.f32	s2, s15
 8007d9c:	f7ff fdb0 	bl	8007900 <FusionVectorNormalise>
 8007da0:	eef0 6a40 	vmov.f32	s13, s0
 8007da4:	eeb0 7a60 	vmov.f32	s14, s1
 8007da8:	eef0 7a41 	vmov.f32	s15, s2
 8007dac:	edc7 6a08 	vstr	s13, [r7, #32]
 8007db0:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8007db4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8007db8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007dbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8007dc0:	eef0 0a47 	vmov.f32	s1, s14
 8007dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc8:	f003 fa2c 	bl	800b224 <atan2f>
 8007dcc:	eef0 7a40 	vmov.f32	s15, s0
 8007dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8007dd4:	f7ff fbee 	bl	80075b4 <FusionRadiansToDegrees>
 8007dd8:	eef0 7a40 	vmov.f32	s15, s0
 8007ddc:	e001      	b.n	8007de2 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8007dde:	eddf 7a03 	vldr	s15, [pc, #12]	; 8007dec <FusionCompassCalculateHeading+0x444>
}
 8007de2:	eeb0 0a67 	vmov.f32	s0, s15
 8007de6:	37c8      	adds	r7, #200	; 0xc8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	00000000 	.word	0x00000000

08007df0 <i3g4250d_read_reg>:
  *
  */
int32_t __weak i3g4250d_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	72fb      	strb	r3, [r7, #11]
 8007e00:	4613      	mov	r3, r2
 8007e02:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	685c      	ldr	r4, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68d8      	ldr	r0, [r3, #12]
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	7af9      	ldrb	r1, [r7, #11]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	47a0      	blx	r4
 8007e14:	6178      	str	r0, [r7, #20]

  return ret;
 8007e16:	697b      	ldr	r3, [r7, #20]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd90      	pop	{r4, r7, pc}

08007e20 <i3g4250d_from_fs245dps_to_mdps>:
  * @{
  *
  */

float_t i3g4250d_from_fs245dps_to_mdps(int16_t lsb)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 8.75f);
 8007e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e36:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007e4c <i3g4250d_from_fs245dps_to_mdps+0x2c>
 8007e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	410c0000 	.word	0x410c0000

08007e50 <i3g4250d_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  i3g4250d_read_reg(ctx, I3G4250D_OUT_X_L, buff, 6);
 8007e5a:	f107 020c 	add.w	r2, r7, #12
 8007e5e:	2306      	movs	r3, #6
 8007e60:	2128      	movs	r1, #40	; 0x28
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff ffc4 	bl	8007df0 <i3g4250d_read_reg>
 8007e68:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007e6a:	7b7b      	ldrb	r3, [r7, #13]
 8007e6c:	b21a      	sxth	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	7b3b      	ldrb	r3, [r7, #12]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	b21a      	sxth	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007e8c:	7bfa      	ldrb	r2, [r7, #15]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	3302      	adds	r3, #2
 8007e92:	b212      	sxth	r2, r2
 8007e94:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	3302      	adds	r3, #2
 8007e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	b212      	sxth	r2, r2
 8007eb2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007eb4:	7c7a      	ldrb	r2, [r7, #17]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	b212      	sxth	r2, r2
 8007ebc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	7c3b      	ldrb	r3, [r7, #16]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4413      	add	r3, r2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	b212      	sxth	r2, r2
 8007eda:	801a      	strh	r2, [r3, #0]

  return ret;
 8007edc:	697b      	ldr	r3, [r7, #20]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <i3g4250d_device_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = i3g4250d_read_reg(ctx, I3G4250D_WHO_AM_I, buff, 1);
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	210f      	movs	r1, #15
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff ff7a 	bl	8007df0 <i3g4250d_read_reg>
 8007efc:	60f8      	str	r0, [r7, #12]

  return ret;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	461a      	mov	r2, r3
 8007f14:	460b      	mov	r3, r1
 8007f16:	72fb      	strb	r3, [r7, #11]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685c      	ldr	r4, [r3, #4]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68d8      	ldr	r0, [r3, #12]
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	7af9      	ldrb	r1, [r7, #11]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	47a0      	blx	r4
 8007f2c:	6178      	str	r0, [r7, #20]

  return ret;
 8007f2e:	697b      	ldr	r3, [r7, #20]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	371c      	adds	r7, #28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 8007f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f4e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007f52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007f56:	eef0 7a66 	vmov.f32	s15, s13
}
 8007f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
 8007f72:	2301      	movs	r3, #1
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	2127      	movs	r1, #39	; 0x27
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff ffc5 	bl	8007f08 <lis331dlh_read_reg>
 8007f7e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007f80:	68fb      	ldr	r3, [r7, #12]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b086      	sub	sp, #24
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 8007f94:	f107 020c 	add.w	r2, r7, #12
 8007f98:	2306      	movs	r3, #6
 8007f9a:	2128      	movs	r1, #40	; 0x28
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ffb3 	bl	8007f08 <lis331dlh_read_reg>
 8007fa2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	b21a      	sxth	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	7b3b      	ldrb	r3, [r7, #12]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	b21a      	sxth	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007fc6:	7bfa      	ldrb	r2, [r7, #15]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	b212      	sxth	r2, r2
 8007fce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	3302      	adds	r3, #2
 8007fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	3302      	adds	r3, #2
 8007fea:	b212      	sxth	r2, r2
 8007fec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007fee:	7c7a      	ldrb	r2, [r7, #17]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	b212      	sxth	r2, r2
 8007ff6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008000:	b29b      	uxth	r3, r3
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	b29a      	uxth	r2, r3
 8008006:	7c3b      	ldrb	r3, [r7, #16]
 8008008:	b29b      	uxth	r3, r3
 800800a:	4413      	add	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	b212      	sxth	r2, r2
 8008014:	801a      	strh	r2, [r3, #0]

  return ret;
 8008016:	697b      	ldr	r3, [r7, #20]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 800802a:	2301      	movs	r3, #1
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	210f      	movs	r1, #15
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ff69 	bl	8007f08 <lis331dlh_read_reg>
 8008036:	60f8      	str	r0, [r7, #12]

  return ret;
 8008038:	68fb      	ldr	r3, [r7, #12]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008042:	b590      	push	{r4, r7, lr}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	461a      	mov	r2, r3
 800804e:	460b      	mov	r3, r1
 8008050:	72fb      	strb	r3, [r7, #11]
 8008052:	4613      	mov	r3, r2
 8008054:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685c      	ldr	r4, [r3, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68d8      	ldr	r0, [r3, #12]
 800805e:	893b      	ldrh	r3, [r7, #8]
 8008060:	7af9      	ldrb	r1, [r7, #11]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	47a0      	blx	r4
 8008066:	6178      	str	r0, [r7, #20]

  return ret;
 8008068:	697b      	ldr	r3, [r7, #20]
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd90      	pop	{r4, r7, pc}
	...

08008074 <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 800807e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800808a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80080a4 <lis3mdl_from_fs16_to_gauss+0x30>
 800808e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008092:	eef0 7a66 	vmov.f32	s15, s13
}
 8008096:	eeb0 0a67 	vmov.f32	s0, s15
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	44d5e000 	.word	0x44d5e000

080080a8 <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 80080b2:	f107 020c 	add.w	r2, r7, #12
 80080b6:	2306      	movs	r3, #6
 80080b8:	2128      	movs	r1, #40	; 0x28
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff ffc1 	bl	8008042 <lis3mdl_read_reg>
 80080c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80080c2:	7b7b      	ldrb	r3, [r7, #13]
 80080c4:	b21a      	sxth	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	7b3b      	ldrb	r3, [r7, #12]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	4413      	add	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	b21a      	sxth	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80080e4:	7bfa      	ldrb	r2, [r7, #15]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	3302      	adds	r3, #2
 80080ea:	b212      	sxth	r2, r2
 80080ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	3302      	adds	r3, #2
 80080f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4413      	add	r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	3302      	adds	r3, #2
 8008108:	b212      	sxth	r2, r2
 800810a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800810c:	7c7a      	ldrb	r2, [r7, #17]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3304      	adds	r3, #4
 8008112:	b212      	sxth	r2, r2
 8008114:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3304      	adds	r3, #4
 800811a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800811e:	b29b      	uxth	r3, r3
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	b29a      	uxth	r2, r3
 8008124:	7c3b      	ldrb	r3, [r7, #16]
 8008126:	b29b      	uxth	r3, r3
 8008128:	4413      	add	r3, r2
 800812a:	b29a      	uxth	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	3304      	adds	r3, #4
 8008130:	b212      	sxth	r2, r2
 8008132:	801a      	strh	r2, [r3, #0]

  return ret;
 8008134:	697b      	ldr	r3, [r7, #20]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b084      	sub	sp, #16
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 8008148:	2301      	movs	r3, #1
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	210f      	movs	r1, #15
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ff77 	bl	8008042 <lis3mdl_read_reg>
 8008154:	60f8      	str	r0, [r7, #12]

  return ret;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <__errno>:
 8008160:	4b01      	ldr	r3, [pc, #4]	; (8008168 <__errno+0x8>)
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	2000000c 	.word	0x2000000c

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	; (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	; (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	; (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	; (80081b0 <__libc_init_array+0x44>)
 8008180:	f004 fb20 	bl	800c7c4 <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	0800d094 	.word	0x0800d094
 80081a8:	0800d094 	.word	0x0800d094
 80081ac:	0800d094 	.word	0x0800d094
 80081b0:	0800d098 	.word	0x0800d098

080081b4 <malloc>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <malloc+0xc>)
 80081b6:	4601      	mov	r1, r0
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	f000 b87f 	b.w	80082bc <_malloc_r>
 80081be:	bf00      	nop
 80081c0:	2000000c 	.word	0x2000000c

080081c4 <free>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <free+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 b80b 	b.w	80081e4 <_free_r>
 80081ce:	bf00      	nop
 80081d0:	2000000c 	.word	0x2000000c

080081d4 <memset>:
 80081d4:	4402      	add	r2, r0
 80081d6:	4603      	mov	r3, r0
 80081d8:	4293      	cmp	r3, r2
 80081da:	d100      	bne.n	80081de <memset+0xa>
 80081dc:	4770      	bx	lr
 80081de:	f803 1b01 	strb.w	r1, [r3], #1
 80081e2:	e7f9      	b.n	80081d8 <memset+0x4>

080081e4 <_free_r>:
 80081e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d044      	beq.n	8008274 <_free_r+0x90>
 80081ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ee:	9001      	str	r0, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f1a1 0404 	sub.w	r4, r1, #4
 80081f6:	bfb8      	it	lt
 80081f8:	18e4      	addlt	r4, r4, r3
 80081fa:	f001 ff69 	bl	800a0d0 <__malloc_lock>
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <_free_r+0x94>)
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	b933      	cbnz	r3, 8008214 <_free_r+0x30>
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008210:	f001 bf64 	b.w	800a0dc <__malloc_unlock>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x46>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf01      	itttt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	e7ed      	b.n	8008206 <_free_r+0x22>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x50>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x46>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x70>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1e0      	bne.n	800820a <_free_r+0x26>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	4421      	add	r1, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	e7da      	b.n	800820a <_free_r+0x26>
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d6      	b.n	800820a <_free_r+0x26>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7ca      	b.n	800820a <_free_r+0x26>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	20000744 	.word	0x20000744

0800827c <sbrk_aligned>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4e0e      	ldr	r6, [pc, #56]	; (80082b8 <sbrk_aligned+0x3c>)
 8008280:	460c      	mov	r4, r1
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	4605      	mov	r5, r0
 8008286:	b911      	cbnz	r1, 800828e <sbrk_aligned+0x12>
 8008288:	f000 fd84 	bl	8008d94 <_sbrk_r>
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 fd7f 	bl	8008d94 <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d00a      	beq.n	80082b0 <sbrk_aligned+0x34>
 800829a:	1cc4      	adds	r4, r0, #3
 800829c:	f024 0403 	bic.w	r4, r4, #3
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d007      	beq.n	80082b4 <sbrk_aligned+0x38>
 80082a4:	1a21      	subs	r1, r4, r0
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 fd74 	bl	8008d94 <_sbrk_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d101      	bne.n	80082b4 <sbrk_aligned+0x38>
 80082b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082b4:	4620      	mov	r0, r4
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	20000748 	.word	0x20000748

080082bc <_malloc_r>:
 80082bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4607      	mov	r7, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d905      	bls.n	80082e4 <_malloc_r+0x28>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	2600      	movs	r6, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	4e2e      	ldr	r6, [pc, #184]	; (80083a0 <_malloc_r+0xe4>)
 80082e6:	f001 fef3 	bl	800a0d0 <__malloc_lock>
 80082ea:	6833      	ldr	r3, [r6, #0]
 80082ec:	461c      	mov	r4, r3
 80082ee:	bb34      	cbnz	r4, 800833e <_malloc_r+0x82>
 80082f0:	4629      	mov	r1, r5
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff ffc2 	bl	800827c <sbrk_aligned>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	4604      	mov	r4, r0
 80082fc:	d14d      	bne.n	800839a <_malloc_r+0xde>
 80082fe:	6834      	ldr	r4, [r6, #0]
 8008300:	4626      	mov	r6, r4
 8008302:	2e00      	cmp	r6, #0
 8008304:	d140      	bne.n	8008388 <_malloc_r+0xcc>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	4631      	mov	r1, r6
 800830a:	4638      	mov	r0, r7
 800830c:	eb04 0803 	add.w	r8, r4, r3
 8008310:	f000 fd40 	bl	8008d94 <_sbrk_r>
 8008314:	4580      	cmp	r8, r0
 8008316:	d13a      	bne.n	800838e <_malloc_r+0xd2>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	3503      	adds	r5, #3
 800831c:	1a6d      	subs	r5, r5, r1
 800831e:	f025 0503 	bic.w	r5, r5, #3
 8008322:	3508      	adds	r5, #8
 8008324:	2d0c      	cmp	r5, #12
 8008326:	bf38      	it	cc
 8008328:	250c      	movcc	r5, #12
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <sbrk_aligned>
 8008332:	3001      	adds	r0, #1
 8008334:	d02b      	beq.n	800838e <_malloc_r+0xd2>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	442b      	add	r3, r5
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	e00e      	b.n	800835c <_malloc_r+0xa0>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	1b52      	subs	r2, r2, r5
 8008342:	d41e      	bmi.n	8008382 <_malloc_r+0xc6>
 8008344:	2a0b      	cmp	r2, #11
 8008346:	d916      	bls.n	8008376 <_malloc_r+0xba>
 8008348:	1961      	adds	r1, r4, r5
 800834a:	42a3      	cmp	r3, r4
 800834c:	6025      	str	r5, [r4, #0]
 800834e:	bf18      	it	ne
 8008350:	6059      	strne	r1, [r3, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	bf08      	it	eq
 8008356:	6031      	streq	r1, [r6, #0]
 8008358:	5162      	str	r2, [r4, r5]
 800835a:	604b      	str	r3, [r1, #4]
 800835c:	4638      	mov	r0, r7
 800835e:	f104 060b 	add.w	r6, r4, #11
 8008362:	f001 febb 	bl	800a0dc <__malloc_unlock>
 8008366:	f026 0607 	bic.w	r6, r6, #7
 800836a:	1d23      	adds	r3, r4, #4
 800836c:	1af2      	subs	r2, r6, r3
 800836e:	d0b6      	beq.n	80082de <_malloc_r+0x22>
 8008370:	1b9b      	subs	r3, r3, r6
 8008372:	50a3      	str	r3, [r4, r2]
 8008374:	e7b3      	b.n	80082de <_malloc_r+0x22>
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	42a3      	cmp	r3, r4
 800837a:	bf0c      	ite	eq
 800837c:	6032      	streq	r2, [r6, #0]
 800837e:	605a      	strne	r2, [r3, #4]
 8008380:	e7ec      	b.n	800835c <_malloc_r+0xa0>
 8008382:	4623      	mov	r3, r4
 8008384:	6864      	ldr	r4, [r4, #4]
 8008386:	e7b2      	b.n	80082ee <_malloc_r+0x32>
 8008388:	4634      	mov	r4, r6
 800838a:	6876      	ldr	r6, [r6, #4]
 800838c:	e7b9      	b.n	8008302 <_malloc_r+0x46>
 800838e:	230c      	movs	r3, #12
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	4638      	mov	r0, r7
 8008394:	f001 fea2 	bl	800a0dc <__malloc_unlock>
 8008398:	e7a1      	b.n	80082de <_malloc_r+0x22>
 800839a:	6025      	str	r5, [r4, #0]
 800839c:	e7de      	b.n	800835c <_malloc_r+0xa0>
 800839e:	bf00      	nop
 80083a0:	20000744 	.word	0x20000744

080083a4 <__cvt>:
 80083a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	ec55 4b10 	vmov	r4, r5, d0
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	460e      	mov	r6, r1
 80083b0:	4619      	mov	r1, r3
 80083b2:	462b      	mov	r3, r5
 80083b4:	bfbb      	ittet	lt
 80083b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083ba:	461d      	movlt	r5, r3
 80083bc:	2300      	movge	r3, #0
 80083be:	232d      	movlt	r3, #45	; 0x2d
 80083c0:	700b      	strb	r3, [r1, #0]
 80083c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083c8:	4691      	mov	r9, r2
 80083ca:	f023 0820 	bic.w	r8, r3, #32
 80083ce:	bfbc      	itt	lt
 80083d0:	4622      	movlt	r2, r4
 80083d2:	4614      	movlt	r4, r2
 80083d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083d8:	d005      	beq.n	80083e6 <__cvt+0x42>
 80083da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083de:	d100      	bne.n	80083e2 <__cvt+0x3e>
 80083e0:	3601      	adds	r6, #1
 80083e2:	2102      	movs	r1, #2
 80083e4:	e000      	b.n	80083e8 <__cvt+0x44>
 80083e6:	2103      	movs	r1, #3
 80083e8:	ab03      	add	r3, sp, #12
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	ab02      	add	r3, sp, #8
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	ec45 4b10 	vmov	d0, r4, r5
 80083f4:	4653      	mov	r3, sl
 80083f6:	4632      	mov	r2, r6
 80083f8:	f000 fe4a 	bl	8009090 <_dtoa_r>
 80083fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008400:	4607      	mov	r7, r0
 8008402:	d102      	bne.n	800840a <__cvt+0x66>
 8008404:	f019 0f01 	tst.w	r9, #1
 8008408:	d022      	beq.n	8008450 <__cvt+0xac>
 800840a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800840e:	eb07 0906 	add.w	r9, r7, r6
 8008412:	d110      	bne.n	8008436 <__cvt+0x92>
 8008414:	783b      	ldrb	r3, [r7, #0]
 8008416:	2b30      	cmp	r3, #48	; 0x30
 8008418:	d10a      	bne.n	8008430 <__cvt+0x8c>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f8 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008426:	b918      	cbnz	r0, 8008430 <__cvt+0x8c>
 8008428:	f1c6 0601 	rsb	r6, r6, #1
 800842c:	f8ca 6000 	str.w	r6, [sl]
 8008430:	f8da 3000 	ldr.w	r3, [sl]
 8008434:	4499      	add	r9, r3
 8008436:	2200      	movs	r2, #0
 8008438:	2300      	movs	r3, #0
 800843a:	4620      	mov	r0, r4
 800843c:	4629      	mov	r1, r5
 800843e:	f7f8 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008442:	b108      	cbz	r0, 8008448 <__cvt+0xa4>
 8008444:	f8cd 900c 	str.w	r9, [sp, #12]
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	454b      	cmp	r3, r9
 800844e:	d307      	bcc.n	8008460 <__cvt+0xbc>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008454:	1bdb      	subs	r3, r3, r7
 8008456:	4638      	mov	r0, r7
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	b004      	add	sp, #16
 800845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008460:	1c59      	adds	r1, r3, #1
 8008462:	9103      	str	r1, [sp, #12]
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e7f0      	b.n	800844a <__cvt+0xa6>

08008468 <__exponent>:
 8008468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846a:	4603      	mov	r3, r0
 800846c:	2900      	cmp	r1, #0
 800846e:	bfb8      	it	lt
 8008470:	4249      	neglt	r1, r1
 8008472:	f803 2b02 	strb.w	r2, [r3], #2
 8008476:	bfb4      	ite	lt
 8008478:	222d      	movlt	r2, #45	; 0x2d
 800847a:	222b      	movge	r2, #43	; 0x2b
 800847c:	2909      	cmp	r1, #9
 800847e:	7042      	strb	r2, [r0, #1]
 8008480:	dd2a      	ble.n	80084d8 <__exponent+0x70>
 8008482:	f10d 0407 	add.w	r4, sp, #7
 8008486:	46a4      	mov	ip, r4
 8008488:	270a      	movs	r7, #10
 800848a:	46a6      	mov	lr, r4
 800848c:	460a      	mov	r2, r1
 800848e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008492:	fb07 1516 	mls	r5, r7, r6, r1
 8008496:	3530      	adds	r5, #48	; 0x30
 8008498:	2a63      	cmp	r2, #99	; 0x63
 800849a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800849e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084a2:	4631      	mov	r1, r6
 80084a4:	dcf1      	bgt.n	800848a <__exponent+0x22>
 80084a6:	3130      	adds	r1, #48	; 0x30
 80084a8:	f1ae 0502 	sub.w	r5, lr, #2
 80084ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084b0:	1c44      	adds	r4, r0, #1
 80084b2:	4629      	mov	r1, r5
 80084b4:	4561      	cmp	r1, ip
 80084b6:	d30a      	bcc.n	80084ce <__exponent+0x66>
 80084b8:	f10d 0209 	add.w	r2, sp, #9
 80084bc:	eba2 020e 	sub.w	r2, r2, lr
 80084c0:	4565      	cmp	r5, ip
 80084c2:	bf88      	it	hi
 80084c4:	2200      	movhi	r2, #0
 80084c6:	4413      	add	r3, r2
 80084c8:	1a18      	subs	r0, r3, r0
 80084ca:	b003      	add	sp, #12
 80084cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084d6:	e7ed      	b.n	80084b4 <__exponent+0x4c>
 80084d8:	2330      	movs	r3, #48	; 0x30
 80084da:	3130      	adds	r1, #48	; 0x30
 80084dc:	7083      	strb	r3, [r0, #2]
 80084de:	70c1      	strb	r1, [r0, #3]
 80084e0:	1d03      	adds	r3, r0, #4
 80084e2:	e7f1      	b.n	80084c8 <__exponent+0x60>

080084e4 <_printf_float>:
 80084e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e8:	ed2d 8b02 	vpush	{d8}
 80084ec:	b08d      	sub	sp, #52	; 0x34
 80084ee:	460c      	mov	r4, r1
 80084f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084f4:	4616      	mov	r6, r2
 80084f6:	461f      	mov	r7, r3
 80084f8:	4605      	mov	r5, r0
 80084fa:	f001 fd6f 	bl	8009fdc <_localeconv_r>
 80084fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008502:	4650      	mov	r0, sl
 8008504:	f7f7 fe64 	bl	80001d0 <strlen>
 8008508:	2300      	movs	r3, #0
 800850a:	930a      	str	r3, [sp, #40]	; 0x28
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	f8d8 3000 	ldr.w	r3, [r8]
 8008514:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008518:	3307      	adds	r3, #7
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	f103 0208 	add.w	r2, r3, #8
 8008522:	f8c8 2000 	str.w	r2, [r8]
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800852e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008536:	9307      	str	r3, [sp, #28]
 8008538:	f8cd 8018 	str.w	r8, [sp, #24]
 800853c:	ee08 0a10 	vmov	s16, r0
 8008540:	4b9f      	ldr	r3, [pc, #636]	; (80087c0 <_printf_float+0x2dc>)
 8008542:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800854a:	f7f8 faef 	bl	8000b2c <__aeabi_dcmpun>
 800854e:	bb88      	cbnz	r0, 80085b4 <_printf_float+0xd0>
 8008550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008554:	4b9a      	ldr	r3, [pc, #616]	; (80087c0 <_printf_float+0x2dc>)
 8008556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800855a:	f7f8 fac9 	bl	8000af0 <__aeabi_dcmple>
 800855e:	bb48      	cbnz	r0, 80085b4 <_printf_float+0xd0>
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	4640      	mov	r0, r8
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fab8 	bl	8000adc <__aeabi_dcmplt>
 800856c:	b110      	cbz	r0, 8008574 <_printf_float+0x90>
 800856e:	232d      	movs	r3, #45	; 0x2d
 8008570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008574:	4b93      	ldr	r3, [pc, #588]	; (80087c4 <_printf_float+0x2e0>)
 8008576:	4894      	ldr	r0, [pc, #592]	; (80087c8 <_printf_float+0x2e4>)
 8008578:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800857c:	bf94      	ite	ls
 800857e:	4698      	movls	r8, r3
 8008580:	4680      	movhi	r8, r0
 8008582:	2303      	movs	r3, #3
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	9b05      	ldr	r3, [sp, #20]
 8008588:	f023 0204 	bic.w	r2, r3, #4
 800858c:	6022      	str	r2, [r4, #0]
 800858e:	f04f 0900 	mov.w	r9, #0
 8008592:	9700      	str	r7, [sp, #0]
 8008594:	4633      	mov	r3, r6
 8008596:	aa0b      	add	r2, sp, #44	; 0x2c
 8008598:	4621      	mov	r1, r4
 800859a:	4628      	mov	r0, r5
 800859c:	f000 f9d8 	bl	8008950 <_printf_common>
 80085a0:	3001      	adds	r0, #1
 80085a2:	f040 8090 	bne.w	80086c6 <_printf_float+0x1e2>
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085aa:	b00d      	add	sp, #52	; 0x34
 80085ac:	ecbd 8b02 	vpop	{d8}
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	4642      	mov	r2, r8
 80085b6:	464b      	mov	r3, r9
 80085b8:	4640      	mov	r0, r8
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7f8 fab6 	bl	8000b2c <__aeabi_dcmpun>
 80085c0:	b140      	cbz	r0, 80085d4 <_printf_float+0xf0>
 80085c2:	464b      	mov	r3, r9
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfbc      	itt	lt
 80085c8:	232d      	movlt	r3, #45	; 0x2d
 80085ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085ce:	487f      	ldr	r0, [pc, #508]	; (80087cc <_printf_float+0x2e8>)
 80085d0:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <_printf_float+0x2ec>)
 80085d2:	e7d1      	b.n	8008578 <_printf_float+0x94>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085da:	9206      	str	r2, [sp, #24]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	d13f      	bne.n	8008660 <_printf_float+0x17c>
 80085e0:	2306      	movs	r3, #6
 80085e2:	6063      	str	r3, [r4, #4]
 80085e4:	9b05      	ldr	r3, [sp, #20]
 80085e6:	6861      	ldr	r1, [r4, #4]
 80085e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085ec:	2300      	movs	r3, #0
 80085ee:	9303      	str	r3, [sp, #12]
 80085f0:	ab0a      	add	r3, sp, #40	; 0x28
 80085f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80085f6:	ab09      	add	r3, sp, #36	; 0x24
 80085f8:	ec49 8b10 	vmov	d0, r8, r9
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fecd 	bl	80083a4 <__cvt>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800860e:	2b47      	cmp	r3, #71	; 0x47
 8008610:	4680      	mov	r8, r0
 8008612:	d108      	bne.n	8008626 <_printf_float+0x142>
 8008614:	1cc8      	adds	r0, r1, #3
 8008616:	db02      	blt.n	800861e <_printf_float+0x13a>
 8008618:	6863      	ldr	r3, [r4, #4]
 800861a:	4299      	cmp	r1, r3
 800861c:	dd41      	ble.n	80086a2 <_printf_float+0x1be>
 800861e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008622:	fa5f fb8b 	uxtb.w	fp, fp
 8008626:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800862a:	d820      	bhi.n	800866e <_printf_float+0x18a>
 800862c:	3901      	subs	r1, #1
 800862e:	465a      	mov	r2, fp
 8008630:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008634:	9109      	str	r1, [sp, #36]	; 0x24
 8008636:	f7ff ff17 	bl	8008468 <__exponent>
 800863a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863c:	1813      	adds	r3, r2, r0
 800863e:	2a01      	cmp	r2, #1
 8008640:	4681      	mov	r9, r0
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	dc02      	bgt.n	800864c <_printf_float+0x168>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	07d2      	lsls	r2, r2, #31
 800864a:	d501      	bpl.n	8008650 <_printf_float+0x16c>
 800864c:	3301      	adds	r3, #1
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008654:	2b00      	cmp	r3, #0
 8008656:	d09c      	beq.n	8008592 <_printf_float+0xae>
 8008658:	232d      	movs	r3, #45	; 0x2d
 800865a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865e:	e798      	b.n	8008592 <_printf_float+0xae>
 8008660:	9a06      	ldr	r2, [sp, #24]
 8008662:	2a47      	cmp	r2, #71	; 0x47
 8008664:	d1be      	bne.n	80085e4 <_printf_float+0x100>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1bc      	bne.n	80085e4 <_printf_float+0x100>
 800866a:	2301      	movs	r3, #1
 800866c:	e7b9      	b.n	80085e2 <_printf_float+0xfe>
 800866e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008672:	d118      	bne.n	80086a6 <_printf_float+0x1c2>
 8008674:	2900      	cmp	r1, #0
 8008676:	6863      	ldr	r3, [r4, #4]
 8008678:	dd0b      	ble.n	8008692 <_printf_float+0x1ae>
 800867a:	6121      	str	r1, [r4, #16]
 800867c:	b913      	cbnz	r3, 8008684 <_printf_float+0x1a0>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	07d0      	lsls	r0, r2, #31
 8008682:	d502      	bpl.n	800868a <_printf_float+0x1a6>
 8008684:	3301      	adds	r3, #1
 8008686:	440b      	add	r3, r1
 8008688:	6123      	str	r3, [r4, #16]
 800868a:	65a1      	str	r1, [r4, #88]	; 0x58
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	e7de      	b.n	8008650 <_printf_float+0x16c>
 8008692:	b913      	cbnz	r3, 800869a <_printf_float+0x1b6>
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	07d2      	lsls	r2, r2, #31
 8008698:	d501      	bpl.n	800869e <_printf_float+0x1ba>
 800869a:	3302      	adds	r3, #2
 800869c:	e7f4      	b.n	8008688 <_printf_float+0x1a4>
 800869e:	2301      	movs	r3, #1
 80086a0:	e7f2      	b.n	8008688 <_printf_float+0x1a4>
 80086a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	4299      	cmp	r1, r3
 80086aa:	db05      	blt.n	80086b8 <_printf_float+0x1d4>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	6121      	str	r1, [r4, #16]
 80086b0:	07d8      	lsls	r0, r3, #31
 80086b2:	d5ea      	bpl.n	800868a <_printf_float+0x1a6>
 80086b4:	1c4b      	adds	r3, r1, #1
 80086b6:	e7e7      	b.n	8008688 <_printf_float+0x1a4>
 80086b8:	2900      	cmp	r1, #0
 80086ba:	bfd4      	ite	le
 80086bc:	f1c1 0202 	rsble	r2, r1, #2
 80086c0:	2201      	movgt	r2, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	e7e0      	b.n	8008688 <_printf_float+0x1a4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	055a      	lsls	r2, r3, #21
 80086ca:	d407      	bmi.n	80086dc <_printf_float+0x1f8>
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	4642      	mov	r2, r8
 80086d0:	4631      	mov	r1, r6
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b8      	blx	r7
 80086d6:	3001      	adds	r0, #1
 80086d8:	d12c      	bne.n	8008734 <_printf_float+0x250>
 80086da:	e764      	b.n	80085a6 <_printf_float+0xc2>
 80086dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086e0:	f240 80e0 	bls.w	80088a4 <_printf_float+0x3c0>
 80086e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086e8:	2200      	movs	r2, #0
 80086ea:	2300      	movs	r3, #0
 80086ec:	f7f8 f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d034      	beq.n	800875e <_printf_float+0x27a>
 80086f4:	4a37      	ldr	r2, [pc, #220]	; (80087d4 <_printf_float+0x2f0>)
 80086f6:	2301      	movs	r3, #1
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f af51 	beq.w	80085a6 <_printf_float+0xc2>
 8008704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008708:	429a      	cmp	r2, r3
 800870a:	db02      	blt.n	8008712 <_printf_float+0x22e>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	07d8      	lsls	r0, r3, #31
 8008710:	d510      	bpl.n	8008734 <_printf_float+0x250>
 8008712:	ee18 3a10 	vmov	r3, s16
 8008716:	4652      	mov	r2, sl
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	f43f af41 	beq.w	80085a6 <_printf_float+0xc2>
 8008724:	f04f 0800 	mov.w	r8, #0
 8008728:	f104 091a 	add.w	r9, r4, #26
 800872c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872e:	3b01      	subs	r3, #1
 8008730:	4543      	cmp	r3, r8
 8008732:	dc09      	bgt.n	8008748 <_printf_float+0x264>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	079b      	lsls	r3, r3, #30
 8008738:	f100 8105 	bmi.w	8008946 <_printf_float+0x462>
 800873c:	68e0      	ldr	r0, [r4, #12]
 800873e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008740:	4298      	cmp	r0, r3
 8008742:	bfb8      	it	lt
 8008744:	4618      	movlt	r0, r3
 8008746:	e730      	b.n	80085aa <_printf_float+0xc6>
 8008748:	2301      	movs	r3, #1
 800874a:	464a      	mov	r2, r9
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f af27 	beq.w	80085a6 <_printf_float+0xc2>
 8008758:	f108 0801 	add.w	r8, r8, #1
 800875c:	e7e6      	b.n	800872c <_printf_float+0x248>
 800875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	dc39      	bgt.n	80087d8 <_printf_float+0x2f4>
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <_printf_float+0x2f0>)
 8008766:	2301      	movs	r3, #1
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f af19 	beq.w	80085a6 <_printf_float+0xc2>
 8008774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008778:	4313      	orrs	r3, r2
 800877a:	d102      	bne.n	8008782 <_printf_float+0x29e>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d5d8      	bpl.n	8008734 <_printf_float+0x250>
 8008782:	ee18 3a10 	vmov	r3, s16
 8008786:	4652      	mov	r2, sl
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	f43f af09 	beq.w	80085a6 <_printf_float+0xc2>
 8008794:	f04f 0900 	mov.w	r9, #0
 8008798:	f104 0a1a 	add.w	sl, r4, #26
 800879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879e:	425b      	negs	r3, r3
 80087a0:	454b      	cmp	r3, r9
 80087a2:	dc01      	bgt.n	80087a8 <_printf_float+0x2c4>
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	e792      	b.n	80086ce <_printf_float+0x1ea>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4652      	mov	r2, sl
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f aef7 	beq.w	80085a6 <_printf_float+0xc2>
 80087b8:	f109 0901 	add.w	r9, r9, #1
 80087bc:	e7ee      	b.n	800879c <_printf_float+0x2b8>
 80087be:	bf00      	nop
 80087c0:	7fefffff 	.word	0x7fefffff
 80087c4:	0800c898 	.word	0x0800c898
 80087c8:	0800c89c 	.word	0x0800c89c
 80087cc:	0800c8a4 	.word	0x0800c8a4
 80087d0:	0800c8a0 	.word	0x0800c8a0
 80087d4:	0800c8a8 	.word	0x0800c8a8
 80087d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087dc:	429a      	cmp	r2, r3
 80087de:	bfa8      	it	ge
 80087e0:	461a      	movge	r2, r3
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	4691      	mov	r9, r2
 80087e6:	dc37      	bgt.n	8008858 <_printf_float+0x374>
 80087e8:	f04f 0b00 	mov.w	fp, #0
 80087ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087f0:	f104 021a 	add.w	r2, r4, #26
 80087f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f6:	9305      	str	r3, [sp, #20]
 80087f8:	eba3 0309 	sub.w	r3, r3, r9
 80087fc:	455b      	cmp	r3, fp
 80087fe:	dc33      	bgt.n	8008868 <_printf_float+0x384>
 8008800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008804:	429a      	cmp	r2, r3
 8008806:	db3b      	blt.n	8008880 <_printf_float+0x39c>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	07da      	lsls	r2, r3, #31
 800880c:	d438      	bmi.n	8008880 <_printf_float+0x39c>
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	9a05      	ldr	r2, [sp, #20]
 8008812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008814:	1a9a      	subs	r2, r3, r2
 8008816:	eba3 0901 	sub.w	r9, r3, r1
 800881a:	4591      	cmp	r9, r2
 800881c:	bfa8      	it	ge
 800881e:	4691      	movge	r9, r2
 8008820:	f1b9 0f00 	cmp.w	r9, #0
 8008824:	dc35      	bgt.n	8008892 <_printf_float+0x3ae>
 8008826:	f04f 0800 	mov.w	r8, #0
 800882a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800882e:	f104 0a1a 	add.w	sl, r4, #26
 8008832:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	eba3 0309 	sub.w	r3, r3, r9
 800883c:	4543      	cmp	r3, r8
 800883e:	f77f af79 	ble.w	8008734 <_printf_float+0x250>
 8008842:	2301      	movs	r3, #1
 8008844:	4652      	mov	r2, sl
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	f43f aeaa 	beq.w	80085a6 <_printf_float+0xc2>
 8008852:	f108 0801 	add.w	r8, r8, #1
 8008856:	e7ec      	b.n	8008832 <_printf_float+0x34e>
 8008858:	4613      	mov	r3, r2
 800885a:	4631      	mov	r1, r6
 800885c:	4642      	mov	r2, r8
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	d1c0      	bne.n	80087e8 <_printf_float+0x304>
 8008866:	e69e      	b.n	80085a6 <_printf_float+0xc2>
 8008868:	2301      	movs	r3, #1
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	9205      	str	r2, [sp, #20]
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f ae97 	beq.w	80085a6 <_printf_float+0xc2>
 8008878:	9a05      	ldr	r2, [sp, #20]
 800887a:	f10b 0b01 	add.w	fp, fp, #1
 800887e:	e7b9      	b.n	80087f4 <_printf_float+0x310>
 8008880:	ee18 3a10 	vmov	r3, s16
 8008884:	4652      	mov	r2, sl
 8008886:	4631      	mov	r1, r6
 8008888:	4628      	mov	r0, r5
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	d1be      	bne.n	800880e <_printf_float+0x32a>
 8008890:	e689      	b.n	80085a6 <_printf_float+0xc2>
 8008892:	9a05      	ldr	r2, [sp, #20]
 8008894:	464b      	mov	r3, r9
 8008896:	4442      	add	r2, r8
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	d1c1      	bne.n	8008826 <_printf_float+0x342>
 80088a2:	e680      	b.n	80085a6 <_printf_float+0xc2>
 80088a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088a6:	2a01      	cmp	r2, #1
 80088a8:	dc01      	bgt.n	80088ae <_printf_float+0x3ca>
 80088aa:	07db      	lsls	r3, r3, #31
 80088ac:	d538      	bpl.n	8008920 <_printf_float+0x43c>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4642      	mov	r2, r8
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae74 	beq.w	80085a6 <_printf_float+0xc2>
 80088be:	ee18 3a10 	vmov	r3, s16
 80088c2:	4652      	mov	r2, sl
 80088c4:	4631      	mov	r1, r6
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b8      	blx	r7
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f ae6b 	beq.w	80085a6 <_printf_float+0xc2>
 80088d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088d4:	2200      	movs	r2, #0
 80088d6:	2300      	movs	r3, #0
 80088d8:	f7f8 f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80088dc:	b9d8      	cbnz	r0, 8008916 <_printf_float+0x432>
 80088de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e0:	f108 0201 	add.w	r2, r8, #1
 80088e4:	3b01      	subs	r3, #1
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	d10e      	bne.n	800890e <_printf_float+0x42a>
 80088f0:	e659      	b.n	80085a6 <_printf_float+0xc2>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4652      	mov	r2, sl
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f ae52 	beq.w	80085a6 <_printf_float+0xc2>
 8008902:	f108 0801 	add.w	r8, r8, #1
 8008906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008908:	3b01      	subs	r3, #1
 800890a:	4543      	cmp	r3, r8
 800890c:	dcf1      	bgt.n	80088f2 <_printf_float+0x40e>
 800890e:	464b      	mov	r3, r9
 8008910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008914:	e6dc      	b.n	80086d0 <_printf_float+0x1ec>
 8008916:	f04f 0800 	mov.w	r8, #0
 800891a:	f104 0a1a 	add.w	sl, r4, #26
 800891e:	e7f2      	b.n	8008906 <_printf_float+0x422>
 8008920:	2301      	movs	r3, #1
 8008922:	4642      	mov	r2, r8
 8008924:	e7df      	b.n	80088e6 <_printf_float+0x402>
 8008926:	2301      	movs	r3, #1
 8008928:	464a      	mov	r2, r9
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	47b8      	blx	r7
 8008930:	3001      	adds	r0, #1
 8008932:	f43f ae38 	beq.w	80085a6 <_printf_float+0xc2>
 8008936:	f108 0801 	add.w	r8, r8, #1
 800893a:	68e3      	ldr	r3, [r4, #12]
 800893c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800893e:	1a5b      	subs	r3, r3, r1
 8008940:	4543      	cmp	r3, r8
 8008942:	dcf0      	bgt.n	8008926 <_printf_float+0x442>
 8008944:	e6fa      	b.n	800873c <_printf_float+0x258>
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	f104 0919 	add.w	r9, r4, #25
 800894e:	e7f4      	b.n	800893a <_printf_float+0x456>

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	4699      	mov	r9, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008960:	4293      	cmp	r3, r2
 8008962:	bfb8      	it	lt
 8008964:	4613      	movlt	r3, r2
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b10a      	cbz	r2, 8008976 <_printf_common+0x26>
 8008972:	3301      	adds	r3, #1
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0699      	lsls	r1, r3, #26
 800897a:	bf42      	ittt	mi
 800897c:	6833      	ldrmi	r3, [r6, #0]
 800897e:	3302      	addmi	r3, #2
 8008980:	6033      	strmi	r3, [r6, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	f015 0506 	ands.w	r5, r5, #6
 8008988:	d106      	bne.n	8008998 <_printf_common+0x48>
 800898a:	f104 0a19 	add.w	sl, r4, #25
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc26      	bgt.n	80089e6 <_printf_common+0x96>
 8008998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800899c:	1e13      	subs	r3, r2, #0
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	0692      	lsls	r2, r2, #26
 80089a6:	d42b      	bmi.n	8008a00 <_printf_common+0xb0>
 80089a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ac:	4649      	mov	r1, r9
 80089ae:	4638      	mov	r0, r7
 80089b0:	47c0      	blx	r8
 80089b2:	3001      	adds	r0, #1
 80089b4:	d01e      	beq.n	80089f4 <_printf_common+0xa4>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	68e5      	ldr	r5, [r4, #12]
 80089ba:	6832      	ldr	r2, [r6, #0]
 80089bc:	f003 0306 	and.w	r3, r3, #6
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	bf08      	it	eq
 80089c4:	1aad      	subeq	r5, r5, r2
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	bf0c      	ite	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	2500      	movne	r5, #0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bfc4      	itt	gt
 80089d6:	1a9b      	subgt	r3, r3, r2
 80089d8:	18ed      	addgt	r5, r5, r3
 80089da:	2600      	movs	r6, #0
 80089dc:	341a      	adds	r4, #26
 80089de:	42b5      	cmp	r5, r6
 80089e0:	d11a      	bne.n	8008a18 <_printf_common+0xc8>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e008      	b.n	80089f8 <_printf_common+0xa8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	4649      	mov	r1, r9
 80089ec:	4638      	mov	r0, r7
 80089ee:	47c0      	blx	r8
 80089f0:	3001      	adds	r0, #1
 80089f2:	d103      	bne.n	80089fc <_printf_common+0xac>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	3501      	adds	r5, #1
 80089fe:	e7c6      	b.n	800898e <_printf_common+0x3e>
 8008a00:	18e1      	adds	r1, r4, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	2030      	movs	r0, #48	; 0x30
 8008a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a0a:	4422      	add	r2, r4
 8008a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7c7      	b.n	80089a8 <_printf_common+0x58>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	3001      	adds	r0, #1
 8008a24:	d0e6      	beq.n	80089f4 <_printf_common+0xa4>
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7d9      	b.n	80089de <_printf_common+0x8e>
	...

08008a2c <_printf_i>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	7e0f      	ldrb	r7, [r1, #24]
 8008a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a34:	2f78      	cmp	r7, #120	; 0x78
 8008a36:	4691      	mov	r9, r2
 8008a38:	4680      	mov	r8, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a42:	d807      	bhi.n	8008a54 <_printf_i+0x28>
 8008a44:	2f62      	cmp	r7, #98	; 0x62
 8008a46:	d80a      	bhi.n	8008a5e <_printf_i+0x32>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	f000 80d8 	beq.w	8008bfe <_printf_i+0x1d2>
 8008a4e:	2f58      	cmp	r7, #88	; 0x58
 8008a50:	f000 80a3 	beq.w	8008b9a <_printf_i+0x16e>
 8008a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a5c:	e03a      	b.n	8008ad4 <_printf_i+0xa8>
 8008a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a62:	2b15      	cmp	r3, #21
 8008a64:	d8f6      	bhi.n	8008a54 <_printf_i+0x28>
 8008a66:	a101      	add	r1, pc, #4	; (adr r1, 8008a6c <_printf_i+0x40>)
 8008a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008a55 	.word	0x08008a55
 8008a78:	08008a55 	.word	0x08008a55
 8008a7c:	08008a55 	.word	0x08008a55
 8008a80:	08008a55 	.word	0x08008a55
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008a55 	.word	0x08008a55
 8008a8c:	08008a55 	.word	0x08008a55
 8008a90:	08008a55 	.word	0x08008a55
 8008a94:	08008a55 	.word	0x08008a55
 8008a98:	08008be5 	.word	0x08008be5
 8008a9c:	08008b09 	.word	0x08008b09
 8008aa0:	08008bc7 	.word	0x08008bc7
 8008aa4:	08008a55 	.word	0x08008a55
 8008aa8:	08008a55 	.word	0x08008a55
 8008aac:	08008c07 	.word	0x08008c07
 8008ab0:	08008a55 	.word	0x08008a55
 8008ab4:	08008b09 	.word	0x08008b09
 8008ab8:	08008a55 	.word	0x08008a55
 8008abc:	08008a55 	.word	0x08008a55
 8008ac0:	08008bcf 	.word	0x08008bcf
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0a3      	b.n	8008c20 <_printf_i+0x1f4>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	6829      	ldr	r1, [r5, #0]
 8008adc:	0606      	lsls	r6, r0, #24
 8008ade:	f101 0304 	add.w	r3, r1, #4
 8008ae2:	d50a      	bpl.n	8008afa <_printf_i+0xce>
 8008ae4:	680e      	ldr	r6, [r1, #0]
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	2e00      	cmp	r6, #0
 8008aea:	da03      	bge.n	8008af4 <_printf_i+0xc8>
 8008aec:	232d      	movs	r3, #45	; 0x2d
 8008aee:	4276      	negs	r6, r6
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af4:	485e      	ldr	r0, [pc, #376]	; (8008c70 <_printf_i+0x244>)
 8008af6:	230a      	movs	r3, #10
 8008af8:	e019      	b.n	8008b2e <_printf_i+0x102>
 8008afa:	680e      	ldr	r6, [r1, #0]
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b02:	bf18      	it	ne
 8008b04:	b236      	sxthne	r6, r6
 8008b06:	e7ef      	b.n	8008ae8 <_printf_i+0xbc>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	1d19      	adds	r1, r3, #4
 8008b0e:	6029      	str	r1, [r5, #0]
 8008b10:	0601      	lsls	r1, r0, #24
 8008b12:	d501      	bpl.n	8008b18 <_printf_i+0xec>
 8008b14:	681e      	ldr	r6, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <_printf_i+0xf2>
 8008b18:	0646      	lsls	r6, r0, #25
 8008b1a:	d5fb      	bpl.n	8008b14 <_printf_i+0xe8>
 8008b1c:	881e      	ldrh	r6, [r3, #0]
 8008b1e:	4854      	ldr	r0, [pc, #336]	; (8008c70 <_printf_i+0x244>)
 8008b20:	2f6f      	cmp	r7, #111	; 0x6f
 8008b22:	bf0c      	ite	eq
 8008b24:	2308      	moveq	r3, #8
 8008b26:	230a      	movne	r3, #10
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b2e:	6865      	ldr	r5, [r4, #4]
 8008b30:	60a5      	str	r5, [r4, #8]
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	bfa2      	ittt	ge
 8008b36:	6821      	ldrge	r1, [r4, #0]
 8008b38:	f021 0104 	bicge.w	r1, r1, #4
 8008b3c:	6021      	strge	r1, [r4, #0]
 8008b3e:	b90e      	cbnz	r6, 8008b44 <_printf_i+0x118>
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	d04d      	beq.n	8008be0 <_printf_i+0x1b4>
 8008b44:	4615      	mov	r5, r2
 8008b46:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b4a:	fb03 6711 	mls	r7, r3, r1, r6
 8008b4e:	5dc7      	ldrb	r7, [r0, r7]
 8008b50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b54:	4637      	mov	r7, r6
 8008b56:	42bb      	cmp	r3, r7
 8008b58:	460e      	mov	r6, r1
 8008b5a:	d9f4      	bls.n	8008b46 <_printf_i+0x11a>
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d10b      	bne.n	8008b78 <_printf_i+0x14c>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	07de      	lsls	r6, r3, #31
 8008b64:	d508      	bpl.n	8008b78 <_printf_i+0x14c>
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4299      	cmp	r1, r3
 8008b6c:	bfde      	ittt	le
 8008b6e:	2330      	movle	r3, #48	; 0x30
 8008b70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b78:	1b52      	subs	r2, r2, r5
 8008b7a:	6122      	str	r2, [r4, #16]
 8008b7c:	f8cd a000 	str.w	sl, [sp]
 8008b80:	464b      	mov	r3, r9
 8008b82:	aa03      	add	r2, sp, #12
 8008b84:	4621      	mov	r1, r4
 8008b86:	4640      	mov	r0, r8
 8008b88:	f7ff fee2 	bl	8008950 <_printf_common>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d14c      	bne.n	8008c2a <_printf_i+0x1fe>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b94:	b004      	add	sp, #16
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	4835      	ldr	r0, [pc, #212]	; (8008c70 <_printf_i+0x244>)
 8008b9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ba0:	6829      	ldr	r1, [r5, #0]
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ba8:	6029      	str	r1, [r5, #0]
 8008baa:	061d      	lsls	r5, r3, #24
 8008bac:	d514      	bpl.n	8008bd8 <_printf_i+0x1ac>
 8008bae:	07df      	lsls	r7, r3, #31
 8008bb0:	bf44      	itt	mi
 8008bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bb6:	6023      	strmi	r3, [r4, #0]
 8008bb8:	b91e      	cbnz	r6, 8008bc2 <_printf_i+0x196>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f023 0320 	bic.w	r3, r3, #32
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	e7b0      	b.n	8008b28 <_printf_i+0xfc>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f043 0320 	orr.w	r3, r3, #32
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	2378      	movs	r3, #120	; 0x78
 8008bd0:	4828      	ldr	r0, [pc, #160]	; (8008c74 <_printf_i+0x248>)
 8008bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bd6:	e7e3      	b.n	8008ba0 <_printf_i+0x174>
 8008bd8:	0659      	lsls	r1, r3, #25
 8008bda:	bf48      	it	mi
 8008bdc:	b2b6      	uxthmi	r6, r6
 8008bde:	e7e6      	b.n	8008bae <_printf_i+0x182>
 8008be0:	4615      	mov	r5, r2
 8008be2:	e7bb      	b.n	8008b5c <_printf_i+0x130>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	6961      	ldr	r1, [r4, #20]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6028      	str	r0, [r5, #0]
 8008bee:	0635      	lsls	r5, r6, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1cc>
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1d2>
 8008bf8:	0670      	lsls	r0, r6, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1c8>
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4615      	mov	r5, r2
 8008c04:	e7ba      	b.n	8008b7c <_printf_i+0x150>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	602a      	str	r2, [r5, #0]
 8008c0c:	681d      	ldr	r5, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 fae4 	bl	80001e0 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1f2>
 8008c1a:	1b40      	subs	r0, r0, r5
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	e7a8      	b.n	8008b7c <_printf_i+0x150>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ab      	beq.n	8008b90 <_printf_i+0x164>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x23a>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a4      	b.n	8008b94 <_printf_i+0x168>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09b      	beq.n	8008b90 <_printf_i+0x164>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x21e>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x212>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x22e>
 8008c6e:	bf00      	nop
 8008c70:	0800c8aa 	.word	0x0800c8aa
 8008c74:	0800c8bb 	.word	0x0800c8bb

08008c78 <iprintf>:
 8008c78:	b40f      	push	{r0, r1, r2, r3}
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <iprintf+0x2c>)
 8008c7c:	b513      	push	{r0, r1, r4, lr}
 8008c7e:	681c      	ldr	r4, [r3, #0]
 8008c80:	b124      	cbz	r4, 8008c8c <iprintf+0x14>
 8008c82:	69a3      	ldr	r3, [r4, #24]
 8008c84:	b913      	cbnz	r3, 8008c8c <iprintf+0x14>
 8008c86:	4620      	mov	r0, r4
 8008c88:	f001 f90a 	bl	8009ea0 <__sinit>
 8008c8c:	ab05      	add	r3, sp, #20
 8008c8e:	9a04      	ldr	r2, [sp, #16]
 8008c90:	68a1      	ldr	r1, [r4, #8]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	4620      	mov	r0, r4
 8008c96:	f001 ff47 	bl	800ab28 <_vfiprintf_r>
 8008c9a:	b002      	add	sp, #8
 8008c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca0:	b004      	add	sp, #16
 8008ca2:	4770      	bx	lr
 8008ca4:	2000000c 	.word	0x2000000c

08008ca8 <_puts_r>:
 8008ca8:	b570      	push	{r4, r5, r6, lr}
 8008caa:	460e      	mov	r6, r1
 8008cac:	4605      	mov	r5, r0
 8008cae:	b118      	cbz	r0, 8008cb8 <_puts_r+0x10>
 8008cb0:	6983      	ldr	r3, [r0, #24]
 8008cb2:	b90b      	cbnz	r3, 8008cb8 <_puts_r+0x10>
 8008cb4:	f001 f8f4 	bl	8009ea0 <__sinit>
 8008cb8:	69ab      	ldr	r3, [r5, #24]
 8008cba:	68ac      	ldr	r4, [r5, #8]
 8008cbc:	b913      	cbnz	r3, 8008cc4 <_puts_r+0x1c>
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f001 f8ee 	bl	8009ea0 <__sinit>
 8008cc4:	4b2c      	ldr	r3, [pc, #176]	; (8008d78 <_puts_r+0xd0>)
 8008cc6:	429c      	cmp	r4, r3
 8008cc8:	d120      	bne.n	8008d0c <_puts_r+0x64>
 8008cca:	686c      	ldr	r4, [r5, #4]
 8008ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cce:	07db      	lsls	r3, r3, #31
 8008cd0:	d405      	bmi.n	8008cde <_puts_r+0x36>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	0598      	lsls	r0, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_puts_r+0x36>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f001 f984 	bl	8009fe6 <__retarget_lock_acquire_recursive>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	0719      	lsls	r1, r3, #28
 8008ce2:	d51d      	bpl.n	8008d20 <_puts_r+0x78>
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	b1db      	cbz	r3, 8008d20 <_puts_r+0x78>
 8008ce8:	3e01      	subs	r6, #1
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	60a3      	str	r3, [r4, #8]
 8008cf4:	bb39      	cbnz	r1, 8008d46 <_puts_r+0x9e>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	da38      	bge.n	8008d6c <_puts_r+0xc4>
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	210a      	movs	r1, #10
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f878 	bl	8008df4 <__swbuf_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d011      	beq.n	8008d2c <_puts_r+0x84>
 8008d08:	250a      	movs	r5, #10
 8008d0a:	e011      	b.n	8008d30 <_puts_r+0x88>
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <_puts_r+0xd4>)
 8008d0e:	429c      	cmp	r4, r3
 8008d10:	d101      	bne.n	8008d16 <_puts_r+0x6e>
 8008d12:	68ac      	ldr	r4, [r5, #8]
 8008d14:	e7da      	b.n	8008ccc <_puts_r+0x24>
 8008d16:	4b1a      	ldr	r3, [pc, #104]	; (8008d80 <_puts_r+0xd8>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	bf08      	it	eq
 8008d1c:	68ec      	ldreq	r4, [r5, #12]
 8008d1e:	e7d5      	b.n	8008ccc <_puts_r+0x24>
 8008d20:	4621      	mov	r1, r4
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 f8b8 	bl	8008e98 <__swsetup_r>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d0dd      	beq.n	8008ce8 <_puts_r+0x40>
 8008d2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d32:	07da      	lsls	r2, r3, #31
 8008d34:	d405      	bmi.n	8008d42 <_puts_r+0x9a>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	059b      	lsls	r3, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_puts_r+0x9a>
 8008d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d3e:	f001 f953 	bl	8009fe8 <__retarget_lock_release_recursive>
 8008d42:	4628      	mov	r0, r5
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	da04      	bge.n	8008d54 <_puts_r+0xac>
 8008d4a:	69a2      	ldr	r2, [r4, #24]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	dc06      	bgt.n	8008d5e <_puts_r+0xb6>
 8008d50:	290a      	cmp	r1, #10
 8008d52:	d004      	beq.n	8008d5e <_puts_r+0xb6>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	6022      	str	r2, [r4, #0]
 8008d5a:	7019      	strb	r1, [r3, #0]
 8008d5c:	e7c5      	b.n	8008cea <_puts_r+0x42>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4628      	mov	r0, r5
 8008d62:	f000 f847 	bl	8008df4 <__swbuf_r>
 8008d66:	3001      	adds	r0, #1
 8008d68:	d1bf      	bne.n	8008cea <_puts_r+0x42>
 8008d6a:	e7df      	b.n	8008d2c <_puts_r+0x84>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	250a      	movs	r5, #10
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	6022      	str	r2, [r4, #0]
 8008d74:	701d      	strb	r5, [r3, #0]
 8008d76:	e7db      	b.n	8008d30 <_puts_r+0x88>
 8008d78:	0800c97c 	.word	0x0800c97c
 8008d7c:	0800c99c 	.word	0x0800c99c
 8008d80:	0800c95c 	.word	0x0800c95c

08008d84 <puts>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <puts+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bf8d 	b.w	8008ca8 <_puts_r>
 8008d8e:	bf00      	nop
 8008d90:	2000000c 	.word	0x2000000c

08008d94 <_sbrk_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d06      	ldr	r5, [pc, #24]	; (8008db0 <_sbrk_r+0x1c>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7f8 fff8 	bl	8001d94 <_sbrk>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_sbrk_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_sbrk_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000750 	.word	0x20000750

08008db4 <siprintf>:
 8008db4:	b40e      	push	{r1, r2, r3}
 8008db6:	b500      	push	{lr}
 8008db8:	b09c      	sub	sp, #112	; 0x70
 8008dba:	ab1d      	add	r3, sp, #116	; 0x74
 8008dbc:	9002      	str	r0, [sp, #8]
 8008dbe:	9006      	str	r0, [sp, #24]
 8008dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <siprintf+0x38>)
 8008dc6:	9107      	str	r1, [sp, #28]
 8008dc8:	9104      	str	r1, [sp, #16]
 8008dca:	4909      	ldr	r1, [pc, #36]	; (8008df0 <siprintf+0x3c>)
 8008dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd0:	9105      	str	r1, [sp, #20]
 8008dd2:	6800      	ldr	r0, [r0, #0]
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	a902      	add	r1, sp, #8
 8008dd8:	f001 fd7c 	bl	800a8d4 <_svfiprintf_r>
 8008ddc:	9b02      	ldr	r3, [sp, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	b01c      	add	sp, #112	; 0x70
 8008de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de8:	b003      	add	sp, #12
 8008dea:	4770      	bx	lr
 8008dec:	2000000c 	.word	0x2000000c
 8008df0:	ffff0208 	.word	0xffff0208

08008df4 <__swbuf_r>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	460e      	mov	r6, r1
 8008df8:	4614      	mov	r4, r2
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	b118      	cbz	r0, 8008e06 <__swbuf_r+0x12>
 8008dfe:	6983      	ldr	r3, [r0, #24]
 8008e00:	b90b      	cbnz	r3, 8008e06 <__swbuf_r+0x12>
 8008e02:	f001 f84d 	bl	8009ea0 <__sinit>
 8008e06:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <__swbuf_r+0x98>)
 8008e08:	429c      	cmp	r4, r3
 8008e0a:	d12b      	bne.n	8008e64 <__swbuf_r+0x70>
 8008e0c:	686c      	ldr	r4, [r5, #4]
 8008e0e:	69a3      	ldr	r3, [r4, #24]
 8008e10:	60a3      	str	r3, [r4, #8]
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	071a      	lsls	r2, r3, #28
 8008e16:	d52f      	bpl.n	8008e78 <__swbuf_r+0x84>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b36b      	cbz	r3, 8008e78 <__swbuf_r+0x84>
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	1ac0      	subs	r0, r0, r3
 8008e22:	6963      	ldr	r3, [r4, #20]
 8008e24:	b2f6      	uxtb	r6, r6
 8008e26:	4283      	cmp	r3, r0
 8008e28:	4637      	mov	r7, r6
 8008e2a:	dc04      	bgt.n	8008e36 <__swbuf_r+0x42>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 ffa2 	bl	8009d78 <_fflush_r>
 8008e34:	bb30      	cbnz	r0, 8008e84 <__swbuf_r+0x90>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	60a3      	str	r3, [r4, #8]
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	701e      	strb	r6, [r3, #0]
 8008e44:	6963      	ldr	r3, [r4, #20]
 8008e46:	3001      	adds	r0, #1
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	d004      	beq.n	8008e56 <__swbuf_r+0x62>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	07db      	lsls	r3, r3, #31
 8008e50:	d506      	bpl.n	8008e60 <__swbuf_r+0x6c>
 8008e52:	2e0a      	cmp	r6, #10
 8008e54:	d104      	bne.n	8008e60 <__swbuf_r+0x6c>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 ff8d 	bl	8009d78 <_fflush_r>
 8008e5e:	b988      	cbnz	r0, 8008e84 <__swbuf_r+0x90>
 8008e60:	4638      	mov	r0, r7
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e64:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <__swbuf_r+0x9c>)
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d101      	bne.n	8008e6e <__swbuf_r+0x7a>
 8008e6a:	68ac      	ldr	r4, [r5, #8]
 8008e6c:	e7cf      	b.n	8008e0e <__swbuf_r+0x1a>
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <__swbuf_r+0xa0>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	bf08      	it	eq
 8008e74:	68ec      	ldreq	r4, [r5, #12]
 8008e76:	e7ca      	b.n	8008e0e <__swbuf_r+0x1a>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 f80c 	bl	8008e98 <__swsetup_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d0cb      	beq.n	8008e1c <__swbuf_r+0x28>
 8008e84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e88:	e7ea      	b.n	8008e60 <__swbuf_r+0x6c>
 8008e8a:	bf00      	nop
 8008e8c:	0800c97c 	.word	0x0800c97c
 8008e90:	0800c99c 	.word	0x0800c99c
 8008e94:	0800c95c 	.word	0x0800c95c

08008e98 <__swsetup_r>:
 8008e98:	4b32      	ldr	r3, [pc, #200]	; (8008f64 <__swsetup_r+0xcc>)
 8008e9a:	b570      	push	{r4, r5, r6, lr}
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	b125      	cbz	r5, 8008eae <__swsetup_r+0x16>
 8008ea4:	69ab      	ldr	r3, [r5, #24]
 8008ea6:	b913      	cbnz	r3, 8008eae <__swsetup_r+0x16>
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 fff9 	bl	8009ea0 <__sinit>
 8008eae:	4b2e      	ldr	r3, [pc, #184]	; (8008f68 <__swsetup_r+0xd0>)
 8008eb0:	429c      	cmp	r4, r3
 8008eb2:	d10f      	bne.n	8008ed4 <__swsetup_r+0x3c>
 8008eb4:	686c      	ldr	r4, [r5, #4]
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ebc:	0719      	lsls	r1, r3, #28
 8008ebe:	d42c      	bmi.n	8008f1a <__swsetup_r+0x82>
 8008ec0:	06dd      	lsls	r5, r3, #27
 8008ec2:	d411      	bmi.n	8008ee8 <__swsetup_r+0x50>
 8008ec4:	2309      	movs	r3, #9
 8008ec6:	6033      	str	r3, [r6, #0]
 8008ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ed2:	e03e      	b.n	8008f52 <__swsetup_r+0xba>
 8008ed4:	4b25      	ldr	r3, [pc, #148]	; (8008f6c <__swsetup_r+0xd4>)
 8008ed6:	429c      	cmp	r4, r3
 8008ed8:	d101      	bne.n	8008ede <__swsetup_r+0x46>
 8008eda:	68ac      	ldr	r4, [r5, #8]
 8008edc:	e7eb      	b.n	8008eb6 <__swsetup_r+0x1e>
 8008ede:	4b24      	ldr	r3, [pc, #144]	; (8008f70 <__swsetup_r+0xd8>)
 8008ee0:	429c      	cmp	r4, r3
 8008ee2:	bf08      	it	eq
 8008ee4:	68ec      	ldreq	r4, [r5, #12]
 8008ee6:	e7e6      	b.n	8008eb6 <__swsetup_r+0x1e>
 8008ee8:	0758      	lsls	r0, r3, #29
 8008eea:	d512      	bpl.n	8008f12 <__swsetup_r+0x7a>
 8008eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eee:	b141      	cbz	r1, 8008f02 <__swsetup_r+0x6a>
 8008ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ef4:	4299      	cmp	r1, r3
 8008ef6:	d002      	beq.n	8008efe <__swsetup_r+0x66>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff f973 	bl	80081e4 <_free_r>
 8008efe:	2300      	movs	r3, #0
 8008f00:	6363      	str	r3, [r4, #52]	; 0x34
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f043 0308 	orr.w	r3, r3, #8
 8008f18:	81a3      	strh	r3, [r4, #12]
 8008f1a:	6923      	ldr	r3, [r4, #16]
 8008f1c:	b94b      	cbnz	r3, 8008f32 <__swsetup_r+0x9a>
 8008f1e:	89a3      	ldrh	r3, [r4, #12]
 8008f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f28:	d003      	beq.n	8008f32 <__swsetup_r+0x9a>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f001 f881 	bl	800a034 <__smakebuf_r>
 8008f32:	89a0      	ldrh	r0, [r4, #12]
 8008f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f38:	f010 0301 	ands.w	r3, r0, #1
 8008f3c:	d00a      	beq.n	8008f54 <__swsetup_r+0xbc>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	6963      	ldr	r3, [r4, #20]
 8008f44:	425b      	negs	r3, r3
 8008f46:	61a3      	str	r3, [r4, #24]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	b943      	cbnz	r3, 8008f5e <__swsetup_r+0xc6>
 8008f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f50:	d1ba      	bne.n	8008ec8 <__swsetup_r+0x30>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	0781      	lsls	r1, r0, #30
 8008f56:	bf58      	it	pl
 8008f58:	6963      	ldrpl	r3, [r4, #20]
 8008f5a:	60a3      	str	r3, [r4, #8]
 8008f5c:	e7f4      	b.n	8008f48 <__swsetup_r+0xb0>
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e7f7      	b.n	8008f52 <__swsetup_r+0xba>
 8008f62:	bf00      	nop
 8008f64:	2000000c 	.word	0x2000000c
 8008f68:	0800c97c 	.word	0x0800c97c
 8008f6c:	0800c99c 	.word	0x0800c99c
 8008f70:	0800c95c 	.word	0x0800c95c

08008f74 <quorem>:
 8008f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	6903      	ldr	r3, [r0, #16]
 8008f7a:	690c      	ldr	r4, [r1, #16]
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	4607      	mov	r7, r0
 8008f80:	f2c0 8081 	blt.w	8009086 <quorem+0x112>
 8008f84:	3c01      	subs	r4, #1
 8008f86:	f101 0814 	add.w	r8, r1, #20
 8008f8a:	f100 0514 	add.w	r5, r0, #20
 8008f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fac:	d331      	bcc.n	8009012 <quorem+0x9e>
 8008fae:	f04f 0e00 	mov.w	lr, #0
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	46ac      	mov	ip, r5
 8008fb6:	46f2      	mov	sl, lr
 8008fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fbc:	b293      	uxth	r3, r2
 8008fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8008fc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8008fcc:	f8dc a000 	ldr.w	sl, [ip]
 8008fd0:	0c12      	lsrs	r2, r2, #16
 8008fd2:	fa13 f38a 	uxtah	r3, r3, sl
 8008fd6:	fb06 e202 	mla	r2, r6, r2, lr
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9b00      	ldr	r3, [sp, #0]
 8008fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fec:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ff0:	4581      	cmp	r9, r0
 8008ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8008ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ffe:	d2db      	bcs.n	8008fb8 <quorem+0x44>
 8009000:	f855 300b 	ldr.w	r3, [r5, fp]
 8009004:	b92b      	cbnz	r3, 8009012 <quorem+0x9e>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	3b04      	subs	r3, #4
 800900a:	429d      	cmp	r5, r3
 800900c:	461a      	mov	r2, r3
 800900e:	d32e      	bcc.n	800906e <quorem+0xfa>
 8009010:	613c      	str	r4, [r7, #16]
 8009012:	4638      	mov	r0, r7
 8009014:	f001 faea 	bl	800a5ec <__mcmp>
 8009018:	2800      	cmp	r0, #0
 800901a:	db24      	blt.n	8009066 <quorem+0xf2>
 800901c:	3601      	adds	r6, #1
 800901e:	4628      	mov	r0, r5
 8009020:	f04f 0c00 	mov.w	ip, #0
 8009024:	f858 2b04 	ldr.w	r2, [r8], #4
 8009028:	f8d0 e000 	ldr.w	lr, [r0]
 800902c:	b293      	uxth	r3, r2
 800902e:	ebac 0303 	sub.w	r3, ip, r3
 8009032:	0c12      	lsrs	r2, r2, #16
 8009034:	fa13 f38e 	uxtah	r3, r3, lr
 8009038:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800903c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009040:	b29b      	uxth	r3, r3
 8009042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009046:	45c1      	cmp	r9, r8
 8009048:	f840 3b04 	str.w	r3, [r0], #4
 800904c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009050:	d2e8      	bcs.n	8009024 <quorem+0xb0>
 8009052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800905a:	b922      	cbnz	r2, 8009066 <quorem+0xf2>
 800905c:	3b04      	subs	r3, #4
 800905e:	429d      	cmp	r5, r3
 8009060:	461a      	mov	r2, r3
 8009062:	d30a      	bcc.n	800907a <quorem+0x106>
 8009064:	613c      	str	r4, [r7, #16]
 8009066:	4630      	mov	r0, r6
 8009068:	b003      	add	sp, #12
 800906a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	3b04      	subs	r3, #4
 8009072:	2a00      	cmp	r2, #0
 8009074:	d1cc      	bne.n	8009010 <quorem+0x9c>
 8009076:	3c01      	subs	r4, #1
 8009078:	e7c7      	b.n	800900a <quorem+0x96>
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	3b04      	subs	r3, #4
 800907e:	2a00      	cmp	r2, #0
 8009080:	d1f0      	bne.n	8009064 <quorem+0xf0>
 8009082:	3c01      	subs	r4, #1
 8009084:	e7eb      	b.n	800905e <quorem+0xea>
 8009086:	2000      	movs	r0, #0
 8009088:	e7ee      	b.n	8009068 <quorem+0xf4>
 800908a:	0000      	movs	r0, r0
 800908c:	0000      	movs	r0, r0
	...

08009090 <_dtoa_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ed2d 8b04 	vpush	{d8-d9}
 8009098:	ec57 6b10 	vmov	r6, r7, d0
 800909c:	b093      	sub	sp, #76	; 0x4c
 800909e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090a4:	9106      	str	r1, [sp, #24]
 80090a6:	ee10 aa10 	vmov	sl, s0
 80090aa:	4604      	mov	r4, r0
 80090ac:	9209      	str	r2, [sp, #36]	; 0x24
 80090ae:	930c      	str	r3, [sp, #48]	; 0x30
 80090b0:	46bb      	mov	fp, r7
 80090b2:	b975      	cbnz	r5, 80090d2 <_dtoa_r+0x42>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7ff f87d 	bl	80081b4 <malloc>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6260      	str	r0, [r4, #36]	; 0x24
 80090be:	b920      	cbnz	r0, 80090ca <_dtoa_r+0x3a>
 80090c0:	4ba7      	ldr	r3, [pc, #668]	; (8009360 <_dtoa_r+0x2d0>)
 80090c2:	21ea      	movs	r1, #234	; 0xea
 80090c4:	48a7      	ldr	r0, [pc, #668]	; (8009364 <_dtoa_r+0x2d4>)
 80090c6:	f001 feb5 	bl	800ae34 <__assert_func>
 80090ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090ce:	6005      	str	r5, [r0, #0]
 80090d0:	60c5      	str	r5, [r0, #12]
 80090d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090d4:	6819      	ldr	r1, [r3, #0]
 80090d6:	b151      	cbz	r1, 80090ee <_dtoa_r+0x5e>
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	604a      	str	r2, [r1, #4]
 80090dc:	2301      	movs	r3, #1
 80090de:	4093      	lsls	r3, r2
 80090e0:	608b      	str	r3, [r1, #8]
 80090e2:	4620      	mov	r0, r4
 80090e4:	f001 f840 	bl	800a168 <_Bfree>
 80090e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	1e3b      	subs	r3, r7, #0
 80090f0:	bfaa      	itet	ge
 80090f2:	2300      	movge	r3, #0
 80090f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80090f8:	f8c8 3000 	strge.w	r3, [r8]
 80090fc:	4b9a      	ldr	r3, [pc, #616]	; (8009368 <_dtoa_r+0x2d8>)
 80090fe:	bfbc      	itt	lt
 8009100:	2201      	movlt	r2, #1
 8009102:	f8c8 2000 	strlt.w	r2, [r8]
 8009106:	ea33 030b 	bics.w	r3, r3, fp
 800910a:	d11b      	bne.n	8009144 <_dtoa_r+0xb4>
 800910c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009118:	4333      	orrs	r3, r6
 800911a:	f000 8592 	beq.w	8009c42 <_dtoa_r+0xbb2>
 800911e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009120:	b963      	cbnz	r3, 800913c <_dtoa_r+0xac>
 8009122:	4b92      	ldr	r3, [pc, #584]	; (800936c <_dtoa_r+0x2dc>)
 8009124:	e022      	b.n	800916c <_dtoa_r+0xdc>
 8009126:	4b92      	ldr	r3, [pc, #584]	; (8009370 <_dtoa_r+0x2e0>)
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	3308      	adds	r3, #8
 800912c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800912e:	6013      	str	r3, [r2, #0]
 8009130:	9801      	ldr	r0, [sp, #4]
 8009132:	b013      	add	sp, #76	; 0x4c
 8009134:	ecbd 8b04 	vpop	{d8-d9}
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	4b8b      	ldr	r3, [pc, #556]	; (800936c <_dtoa_r+0x2dc>)
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	3303      	adds	r3, #3
 8009142:	e7f3      	b.n	800912c <_dtoa_r+0x9c>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4650      	mov	r0, sl
 800914a:	4659      	mov	r1, fp
 800914c:	f7f7 fcbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009150:	ec4b ab19 	vmov	d9, sl, fp
 8009154:	4680      	mov	r8, r0
 8009156:	b158      	cbz	r0, 8009170 <_dtoa_r+0xe0>
 8009158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800915a:	2301      	movs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 856b 	beq.w	8009c3c <_dtoa_r+0xbac>
 8009166:	4883      	ldr	r0, [pc, #524]	; (8009374 <_dtoa_r+0x2e4>)
 8009168:	6018      	str	r0, [r3, #0]
 800916a:	1e43      	subs	r3, r0, #1
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	e7df      	b.n	8009130 <_dtoa_r+0xa0>
 8009170:	ec4b ab10 	vmov	d0, sl, fp
 8009174:	aa10      	add	r2, sp, #64	; 0x40
 8009176:	a911      	add	r1, sp, #68	; 0x44
 8009178:	4620      	mov	r0, r4
 800917a:	f001 fadd 	bl	800a738 <__d2b>
 800917e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009182:	ee08 0a10 	vmov	s16, r0
 8009186:	2d00      	cmp	r5, #0
 8009188:	f000 8084 	beq.w	8009294 <_dtoa_r+0x204>
 800918c:	ee19 3a90 	vmov	r3, s19
 8009190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009194:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009198:	4656      	mov	r6, sl
 800919a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800919e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091a6:	4b74      	ldr	r3, [pc, #464]	; (8009378 <_dtoa_r+0x2e8>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	4630      	mov	r0, r6
 80091ac:	4639      	mov	r1, r7
 80091ae:	f7f7 f86b 	bl	8000288 <__aeabi_dsub>
 80091b2:	a365      	add	r3, pc, #404	; (adr r3, 8009348 <_dtoa_r+0x2b8>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 fa1e 	bl	80005f8 <__aeabi_dmul>
 80091bc:	a364      	add	r3, pc, #400	; (adr r3, 8009350 <_dtoa_r+0x2c0>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f7 f863 	bl	800028c <__adddf3>
 80091c6:	4606      	mov	r6, r0
 80091c8:	4628      	mov	r0, r5
 80091ca:	460f      	mov	r7, r1
 80091cc:	f7f7 f9aa 	bl	8000524 <__aeabi_i2d>
 80091d0:	a361      	add	r3, pc, #388	; (adr r3, 8009358 <_dtoa_r+0x2c8>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	f7f7 fa0f 	bl	80005f8 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 f853 	bl	800028c <__adddf3>
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	f7f7 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80091ee:	2200      	movs	r2, #0
 80091f0:	9000      	str	r0, [sp, #0]
 80091f2:	2300      	movs	r3, #0
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 fc70 	bl	8000adc <__aeabi_dcmplt>
 80091fc:	b150      	cbz	r0, 8009214 <_dtoa_r+0x184>
 80091fe:	9800      	ldr	r0, [sp, #0]
 8009200:	f7f7 f990 	bl	8000524 <__aeabi_i2d>
 8009204:	4632      	mov	r2, r6
 8009206:	463b      	mov	r3, r7
 8009208:	f7f7 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800920c:	b910      	cbnz	r0, 8009214 <_dtoa_r+0x184>
 800920e:	9b00      	ldr	r3, [sp, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	2b16      	cmp	r3, #22
 8009218:	d85a      	bhi.n	80092d0 <_dtoa_r+0x240>
 800921a:	9a00      	ldr	r2, [sp, #0]
 800921c:	4b57      	ldr	r3, [pc, #348]	; (800937c <_dtoa_r+0x2ec>)
 800921e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	ec51 0b19 	vmov	r0, r1, d9
 800922a:	f7f7 fc57 	bl	8000adc <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d050      	beq.n	80092d4 <_dtoa_r+0x244>
 8009232:	9b00      	ldr	r3, [sp, #0]
 8009234:	3b01      	subs	r3, #1
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	930b      	str	r3, [sp, #44]	; 0x2c
 800923c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800923e:	1b5d      	subs	r5, r3, r5
 8009240:	1e6b      	subs	r3, r5, #1
 8009242:	9305      	str	r3, [sp, #20]
 8009244:	bf45      	ittet	mi
 8009246:	f1c5 0301 	rsbmi	r3, r5, #1
 800924a:	9304      	strmi	r3, [sp, #16]
 800924c:	2300      	movpl	r3, #0
 800924e:	2300      	movmi	r3, #0
 8009250:	bf4c      	ite	mi
 8009252:	9305      	strmi	r3, [sp, #20]
 8009254:	9304      	strpl	r3, [sp, #16]
 8009256:	9b00      	ldr	r3, [sp, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	db3d      	blt.n	80092d8 <_dtoa_r+0x248>
 800925c:	9b05      	ldr	r3, [sp, #20]
 800925e:	9a00      	ldr	r2, [sp, #0]
 8009260:	920a      	str	r2, [sp, #40]	; 0x28
 8009262:	4413      	add	r3, r2
 8009264:	9305      	str	r3, [sp, #20]
 8009266:	2300      	movs	r3, #0
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	2b09      	cmp	r3, #9
 800926e:	f200 8089 	bhi.w	8009384 <_dtoa_r+0x2f4>
 8009272:	2b05      	cmp	r3, #5
 8009274:	bfc4      	itt	gt
 8009276:	3b04      	subgt	r3, #4
 8009278:	9306      	strgt	r3, [sp, #24]
 800927a:	9b06      	ldr	r3, [sp, #24]
 800927c:	f1a3 0302 	sub.w	r3, r3, #2
 8009280:	bfcc      	ite	gt
 8009282:	2500      	movgt	r5, #0
 8009284:	2501      	movle	r5, #1
 8009286:	2b03      	cmp	r3, #3
 8009288:	f200 8087 	bhi.w	800939a <_dtoa_r+0x30a>
 800928c:	e8df f003 	tbb	[pc, r3]
 8009290:	59383a2d 	.word	0x59383a2d
 8009294:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009298:	441d      	add	r5, r3
 800929a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800929e:	2b20      	cmp	r3, #32
 80092a0:	bfc1      	itttt	gt
 80092a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80092ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092b2:	bfda      	itte	le
 80092b4:	f1c3 0320 	rsble	r3, r3, #32
 80092b8:	fa06 f003 	lslle.w	r0, r6, r3
 80092bc:	4318      	orrgt	r0, r3
 80092be:	f7f7 f921 	bl	8000504 <__aeabi_ui2d>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4606      	mov	r6, r0
 80092c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092ca:	3d01      	subs	r5, #1
 80092cc:	930e      	str	r3, [sp, #56]	; 0x38
 80092ce:	e76a      	b.n	80091a6 <_dtoa_r+0x116>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e7b2      	b.n	800923a <_dtoa_r+0x1aa>
 80092d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80092d6:	e7b1      	b.n	800923c <_dtoa_r+0x1ac>
 80092d8:	9b04      	ldr	r3, [sp, #16]
 80092da:	9a00      	ldr	r2, [sp, #0]
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	4253      	negs	r3, r2
 80092e2:	9307      	str	r3, [sp, #28]
 80092e4:	2300      	movs	r3, #0
 80092e6:	930a      	str	r3, [sp, #40]	; 0x28
 80092e8:	e7bf      	b.n	800926a <_dtoa_r+0x1da>
 80092ea:	2300      	movs	r3, #0
 80092ec:	9308      	str	r3, [sp, #32]
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc55      	bgt.n	80093a0 <_dtoa_r+0x310>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092fa:	461a      	mov	r2, r3
 80092fc:	9209      	str	r2, [sp, #36]	; 0x24
 80092fe:	e00c      	b.n	800931a <_dtoa_r+0x28a>
 8009300:	2301      	movs	r3, #1
 8009302:	e7f3      	b.n	80092ec <_dtoa_r+0x25c>
 8009304:	2300      	movs	r3, #0
 8009306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009308:	9308      	str	r3, [sp, #32]
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	4413      	add	r3, r2
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	3301      	adds	r3, #1
 8009312:	2b01      	cmp	r3, #1
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	bfb8      	it	lt
 8009318:	2301      	movlt	r3, #1
 800931a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800931c:	2200      	movs	r2, #0
 800931e:	6042      	str	r2, [r0, #4]
 8009320:	2204      	movs	r2, #4
 8009322:	f102 0614 	add.w	r6, r2, #20
 8009326:	429e      	cmp	r6, r3
 8009328:	6841      	ldr	r1, [r0, #4]
 800932a:	d93d      	bls.n	80093a8 <_dtoa_r+0x318>
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fedb 	bl	800a0e8 <_Balloc>
 8009332:	9001      	str	r0, [sp, #4]
 8009334:	2800      	cmp	r0, #0
 8009336:	d13b      	bne.n	80093b0 <_dtoa_r+0x320>
 8009338:	4b11      	ldr	r3, [pc, #68]	; (8009380 <_dtoa_r+0x2f0>)
 800933a:	4602      	mov	r2, r0
 800933c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009340:	e6c0      	b.n	80090c4 <_dtoa_r+0x34>
 8009342:	2301      	movs	r3, #1
 8009344:	e7df      	b.n	8009306 <_dtoa_r+0x276>
 8009346:	bf00      	nop
 8009348:	636f4361 	.word	0x636f4361
 800934c:	3fd287a7 	.word	0x3fd287a7
 8009350:	8b60c8b3 	.word	0x8b60c8b3
 8009354:	3fc68a28 	.word	0x3fc68a28
 8009358:	509f79fb 	.word	0x509f79fb
 800935c:	3fd34413 	.word	0x3fd34413
 8009360:	0800c8d9 	.word	0x0800c8d9
 8009364:	0800c8f0 	.word	0x0800c8f0
 8009368:	7ff00000 	.word	0x7ff00000
 800936c:	0800c8d5 	.word	0x0800c8d5
 8009370:	0800c8cc 	.word	0x0800c8cc
 8009374:	0800c8a9 	.word	0x0800c8a9
 8009378:	3ff80000 	.word	0x3ff80000
 800937c:	0800ca40 	.word	0x0800ca40
 8009380:	0800c94b 	.word	0x0800c94b
 8009384:	2501      	movs	r5, #1
 8009386:	2300      	movs	r3, #0
 8009388:	9306      	str	r3, [sp, #24]
 800938a:	9508      	str	r5, [sp, #32]
 800938c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009390:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009394:	2200      	movs	r2, #0
 8009396:	2312      	movs	r3, #18
 8009398:	e7b0      	b.n	80092fc <_dtoa_r+0x26c>
 800939a:	2301      	movs	r3, #1
 800939c:	9308      	str	r3, [sp, #32]
 800939e:	e7f5      	b.n	800938c <_dtoa_r+0x2fc>
 80093a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093a6:	e7b8      	b.n	800931a <_dtoa_r+0x28a>
 80093a8:	3101      	adds	r1, #1
 80093aa:	6041      	str	r1, [r0, #4]
 80093ac:	0052      	lsls	r2, r2, #1
 80093ae:	e7b8      	b.n	8009322 <_dtoa_r+0x292>
 80093b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	2b0e      	cmp	r3, #14
 80093ba:	f200 809d 	bhi.w	80094f8 <_dtoa_r+0x468>
 80093be:	2d00      	cmp	r5, #0
 80093c0:	f000 809a 	beq.w	80094f8 <_dtoa_r+0x468>
 80093c4:	9b00      	ldr	r3, [sp, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd32      	ble.n	8009430 <_dtoa_r+0x3a0>
 80093ca:	4ab7      	ldr	r2, [pc, #732]	; (80096a8 <_dtoa_r+0x618>)
 80093cc:	f003 030f 	and.w	r3, r3, #15
 80093d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093d8:	9b00      	ldr	r3, [sp, #0]
 80093da:	05d8      	lsls	r0, r3, #23
 80093dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80093e0:	d516      	bpl.n	8009410 <_dtoa_r+0x380>
 80093e2:	4bb2      	ldr	r3, [pc, #712]	; (80096ac <_dtoa_r+0x61c>)
 80093e4:	ec51 0b19 	vmov	r0, r1, d9
 80093e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093ec:	f7f7 fa2e 	bl	800084c <__aeabi_ddiv>
 80093f0:	f007 070f 	and.w	r7, r7, #15
 80093f4:	4682      	mov	sl, r0
 80093f6:	468b      	mov	fp, r1
 80093f8:	2503      	movs	r5, #3
 80093fa:	4eac      	ldr	r6, [pc, #688]	; (80096ac <_dtoa_r+0x61c>)
 80093fc:	b957      	cbnz	r7, 8009414 <_dtoa_r+0x384>
 80093fe:	4642      	mov	r2, r8
 8009400:	464b      	mov	r3, r9
 8009402:	4650      	mov	r0, sl
 8009404:	4659      	mov	r1, fp
 8009406:	f7f7 fa21 	bl	800084c <__aeabi_ddiv>
 800940a:	4682      	mov	sl, r0
 800940c:	468b      	mov	fp, r1
 800940e:	e028      	b.n	8009462 <_dtoa_r+0x3d2>
 8009410:	2502      	movs	r5, #2
 8009412:	e7f2      	b.n	80093fa <_dtoa_r+0x36a>
 8009414:	07f9      	lsls	r1, r7, #31
 8009416:	d508      	bpl.n	800942a <_dtoa_r+0x39a>
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	3501      	adds	r5, #1
 8009426:	4680      	mov	r8, r0
 8009428:	4689      	mov	r9, r1
 800942a:	107f      	asrs	r7, r7, #1
 800942c:	3608      	adds	r6, #8
 800942e:	e7e5      	b.n	80093fc <_dtoa_r+0x36c>
 8009430:	f000 809b 	beq.w	800956a <_dtoa_r+0x4da>
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	4f9d      	ldr	r7, [pc, #628]	; (80096ac <_dtoa_r+0x61c>)
 8009438:	425e      	negs	r6, r3
 800943a:	4b9b      	ldr	r3, [pc, #620]	; (80096a8 <_dtoa_r+0x618>)
 800943c:	f006 020f 	and.w	r2, r6, #15
 8009440:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	ec51 0b19 	vmov	r0, r1, d9
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	1136      	asrs	r6, r6, #4
 8009452:	4682      	mov	sl, r0
 8009454:	468b      	mov	fp, r1
 8009456:	2300      	movs	r3, #0
 8009458:	2502      	movs	r5, #2
 800945a:	2e00      	cmp	r6, #0
 800945c:	d17a      	bne.n	8009554 <_dtoa_r+0x4c4>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1d3      	bne.n	800940a <_dtoa_r+0x37a>
 8009462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8082 	beq.w	800956e <_dtoa_r+0x4de>
 800946a:	4b91      	ldr	r3, [pc, #580]	; (80096b0 <_dtoa_r+0x620>)
 800946c:	2200      	movs	r2, #0
 800946e:	4650      	mov	r0, sl
 8009470:	4659      	mov	r1, fp
 8009472:	f7f7 fb33 	bl	8000adc <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	d079      	beq.n	800956e <_dtoa_r+0x4de>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d076      	beq.n	800956e <_dtoa_r+0x4de>
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd36      	ble.n	80094f4 <_dtoa_r+0x464>
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	4650      	mov	r0, sl
 800948a:	4659      	mov	r1, fp
 800948c:	1e5f      	subs	r7, r3, #1
 800948e:	2200      	movs	r2, #0
 8009490:	4b88      	ldr	r3, [pc, #544]	; (80096b4 <_dtoa_r+0x624>)
 8009492:	f7f7 f8b1 	bl	80005f8 <__aeabi_dmul>
 8009496:	9e02      	ldr	r6, [sp, #8]
 8009498:	4682      	mov	sl, r0
 800949a:	468b      	mov	fp, r1
 800949c:	3501      	adds	r5, #1
 800949e:	4628      	mov	r0, r5
 80094a0:	f7f7 f840 	bl	8000524 <__aeabi_i2d>
 80094a4:	4652      	mov	r2, sl
 80094a6:	465b      	mov	r3, fp
 80094a8:	f7f7 f8a6 	bl	80005f8 <__aeabi_dmul>
 80094ac:	4b82      	ldr	r3, [pc, #520]	; (80096b8 <_dtoa_r+0x628>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	f7f6 feec 	bl	800028c <__adddf3>
 80094b4:	46d0      	mov	r8, sl
 80094b6:	46d9      	mov	r9, fp
 80094b8:	4682      	mov	sl, r0
 80094ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d158      	bne.n	8009574 <_dtoa_r+0x4e4>
 80094c2:	4b7e      	ldr	r3, [pc, #504]	; (80096bc <_dtoa_r+0x62c>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f6 fedd 	bl	8000288 <__aeabi_dsub>
 80094ce:	4652      	mov	r2, sl
 80094d0:	465b      	mov	r3, fp
 80094d2:	4680      	mov	r8, r0
 80094d4:	4689      	mov	r9, r1
 80094d6:	f7f7 fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f040 8295 	bne.w	8009a0a <_dtoa_r+0x97a>
 80094e0:	4652      	mov	r2, sl
 80094e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80094e6:	4640      	mov	r0, r8
 80094e8:	4649      	mov	r1, r9
 80094ea:	f7f7 faf7 	bl	8000adc <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f040 8289 	bne.w	8009a06 <_dtoa_r+0x976>
 80094f4:	ec5b ab19 	vmov	sl, fp, d9
 80094f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f2c0 8148 	blt.w	8009790 <_dtoa_r+0x700>
 8009500:	9a00      	ldr	r2, [sp, #0]
 8009502:	2a0e      	cmp	r2, #14
 8009504:	f300 8144 	bgt.w	8009790 <_dtoa_r+0x700>
 8009508:	4b67      	ldr	r3, [pc, #412]	; (80096a8 <_dtoa_r+0x618>)
 800950a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800950e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	f280 80d5 	bge.w	80096c4 <_dtoa_r+0x634>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f300 80d1 	bgt.w	80096c4 <_dtoa_r+0x634>
 8009522:	f040 826f 	bne.w	8009a04 <_dtoa_r+0x974>
 8009526:	4b65      	ldr	r3, [pc, #404]	; (80096bc <_dtoa_r+0x62c>)
 8009528:	2200      	movs	r2, #0
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 f863 	bl	80005f8 <__aeabi_dmul>
 8009532:	4652      	mov	r2, sl
 8009534:	465b      	mov	r3, fp
 8009536:	f7f7 fae5 	bl	8000b04 <__aeabi_dcmpge>
 800953a:	9e03      	ldr	r6, [sp, #12]
 800953c:	4637      	mov	r7, r6
 800953e:	2800      	cmp	r0, #0
 8009540:	f040 8245 	bne.w	80099ce <_dtoa_r+0x93e>
 8009544:	9d01      	ldr	r5, [sp, #4]
 8009546:	2331      	movs	r3, #49	; 0x31
 8009548:	f805 3b01 	strb.w	r3, [r5], #1
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	3301      	adds	r3, #1
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	e240      	b.n	80099d6 <_dtoa_r+0x946>
 8009554:	07f2      	lsls	r2, r6, #31
 8009556:	d505      	bpl.n	8009564 <_dtoa_r+0x4d4>
 8009558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955c:	f7f7 f84c 	bl	80005f8 <__aeabi_dmul>
 8009560:	3501      	adds	r5, #1
 8009562:	2301      	movs	r3, #1
 8009564:	1076      	asrs	r6, r6, #1
 8009566:	3708      	adds	r7, #8
 8009568:	e777      	b.n	800945a <_dtoa_r+0x3ca>
 800956a:	2502      	movs	r5, #2
 800956c:	e779      	b.n	8009462 <_dtoa_r+0x3d2>
 800956e:	9f00      	ldr	r7, [sp, #0]
 8009570:	9e03      	ldr	r6, [sp, #12]
 8009572:	e794      	b.n	800949e <_dtoa_r+0x40e>
 8009574:	9901      	ldr	r1, [sp, #4]
 8009576:	4b4c      	ldr	r3, [pc, #304]	; (80096a8 <_dtoa_r+0x618>)
 8009578:	4431      	add	r1, r6
 800957a:	910d      	str	r1, [sp, #52]	; 0x34
 800957c:	9908      	ldr	r1, [sp, #32]
 800957e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009582:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009586:	2900      	cmp	r1, #0
 8009588:	d043      	beq.n	8009612 <_dtoa_r+0x582>
 800958a:	494d      	ldr	r1, [pc, #308]	; (80096c0 <_dtoa_r+0x630>)
 800958c:	2000      	movs	r0, #0
 800958e:	f7f7 f95d 	bl	800084c <__aeabi_ddiv>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f6 fe77 	bl	8000288 <__aeabi_dsub>
 800959a:	9d01      	ldr	r5, [sp, #4]
 800959c:	4682      	mov	sl, r0
 800959e:	468b      	mov	fp, r1
 80095a0:	4649      	mov	r1, r9
 80095a2:	4640      	mov	r0, r8
 80095a4:	f7f7 fad8 	bl	8000b58 <__aeabi_d2iz>
 80095a8:	4606      	mov	r6, r0
 80095aa:	f7f6 ffbb 	bl	8000524 <__aeabi_i2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	3630      	adds	r6, #48	; 0x30
 80095bc:	f805 6b01 	strb.w	r6, [r5], #1
 80095c0:	4652      	mov	r2, sl
 80095c2:	465b      	mov	r3, fp
 80095c4:	4680      	mov	r8, r0
 80095c6:	4689      	mov	r9, r1
 80095c8:	f7f7 fa88 	bl	8000adc <__aeabi_dcmplt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d163      	bne.n	8009698 <_dtoa_r+0x608>
 80095d0:	4642      	mov	r2, r8
 80095d2:	464b      	mov	r3, r9
 80095d4:	4936      	ldr	r1, [pc, #216]	; (80096b0 <_dtoa_r+0x620>)
 80095d6:	2000      	movs	r0, #0
 80095d8:	f7f6 fe56 	bl	8000288 <__aeabi_dsub>
 80095dc:	4652      	mov	r2, sl
 80095de:	465b      	mov	r3, fp
 80095e0:	f7f7 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	f040 80b5 	bne.w	8009754 <_dtoa_r+0x6c4>
 80095ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095ec:	429d      	cmp	r5, r3
 80095ee:	d081      	beq.n	80094f4 <_dtoa_r+0x464>
 80095f0:	4b30      	ldr	r3, [pc, #192]	; (80096b4 <_dtoa_r+0x624>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	4650      	mov	r0, sl
 80095f6:	4659      	mov	r1, fp
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	4b2d      	ldr	r3, [pc, #180]	; (80096b4 <_dtoa_r+0x624>)
 80095fe:	4682      	mov	sl, r0
 8009600:	468b      	mov	fp, r1
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	2200      	movs	r2, #0
 8009608:	f7f6 fff6 	bl	80005f8 <__aeabi_dmul>
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	e7c6      	b.n	80095a0 <_dtoa_r+0x510>
 8009612:	4650      	mov	r0, sl
 8009614:	4659      	mov	r1, fp
 8009616:	f7f6 ffef 	bl	80005f8 <__aeabi_dmul>
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	9d01      	ldr	r5, [sp, #4]
 800961e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009620:	4682      	mov	sl, r0
 8009622:	468b      	mov	fp, r1
 8009624:	4649      	mov	r1, r9
 8009626:	4640      	mov	r0, r8
 8009628:	f7f7 fa96 	bl	8000b58 <__aeabi_d2iz>
 800962c:	4606      	mov	r6, r0
 800962e:	f7f6 ff79 	bl	8000524 <__aeabi_i2d>
 8009632:	3630      	adds	r6, #48	; 0x30
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4640      	mov	r0, r8
 800963a:	4649      	mov	r1, r9
 800963c:	f7f6 fe24 	bl	8000288 <__aeabi_dsub>
 8009640:	f805 6b01 	strb.w	r6, [r5], #1
 8009644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009646:	429d      	cmp	r5, r3
 8009648:	4680      	mov	r8, r0
 800964a:	4689      	mov	r9, r1
 800964c:	f04f 0200 	mov.w	r2, #0
 8009650:	d124      	bne.n	800969c <_dtoa_r+0x60c>
 8009652:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <_dtoa_r+0x630>)
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	f7f6 fe18 	bl	800028c <__adddf3>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f7 fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8009668:	2800      	cmp	r0, #0
 800966a:	d173      	bne.n	8009754 <_dtoa_r+0x6c4>
 800966c:	4652      	mov	r2, sl
 800966e:	465b      	mov	r3, fp
 8009670:	4913      	ldr	r1, [pc, #76]	; (80096c0 <_dtoa_r+0x630>)
 8009672:	2000      	movs	r0, #0
 8009674:	f7f6 fe08 	bl	8000288 <__aeabi_dsub>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4640      	mov	r0, r8
 800967e:	4649      	mov	r1, r9
 8009680:	f7f7 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	f43f af35 	beq.w	80094f4 <_dtoa_r+0x464>
 800968a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800968c:	1e6b      	subs	r3, r5, #1
 800968e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009694:	2b30      	cmp	r3, #48	; 0x30
 8009696:	d0f8      	beq.n	800968a <_dtoa_r+0x5fa>
 8009698:	9700      	str	r7, [sp, #0]
 800969a:	e049      	b.n	8009730 <_dtoa_r+0x6a0>
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <_dtoa_r+0x624>)
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	4680      	mov	r8, r0
 80096a4:	4689      	mov	r9, r1
 80096a6:	e7bd      	b.n	8009624 <_dtoa_r+0x594>
 80096a8:	0800ca40 	.word	0x0800ca40
 80096ac:	0800ca18 	.word	0x0800ca18
 80096b0:	3ff00000 	.word	0x3ff00000
 80096b4:	40240000 	.word	0x40240000
 80096b8:	401c0000 	.word	0x401c0000
 80096bc:	40140000 	.word	0x40140000
 80096c0:	3fe00000 	.word	0x3fe00000
 80096c4:	9d01      	ldr	r5, [sp, #4]
 80096c6:	4656      	mov	r6, sl
 80096c8:	465f      	mov	r7, fp
 80096ca:	4642      	mov	r2, r8
 80096cc:	464b      	mov	r3, r9
 80096ce:	4630      	mov	r0, r6
 80096d0:	4639      	mov	r1, r7
 80096d2:	f7f7 f8bb 	bl	800084c <__aeabi_ddiv>
 80096d6:	f7f7 fa3f 	bl	8000b58 <__aeabi_d2iz>
 80096da:	4682      	mov	sl, r0
 80096dc:	f7f6 ff22 	bl	8000524 <__aeabi_i2d>
 80096e0:	4642      	mov	r2, r8
 80096e2:	464b      	mov	r3, r9
 80096e4:	f7f6 ff88 	bl	80005f8 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80096f4:	f7f6 fdc8 	bl	8000288 <__aeabi_dsub>
 80096f8:	f805 6b01 	strb.w	r6, [r5], #1
 80096fc:	9e01      	ldr	r6, [sp, #4]
 80096fe:	9f03      	ldr	r7, [sp, #12]
 8009700:	1bae      	subs	r6, r5, r6
 8009702:	42b7      	cmp	r7, r6
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	d135      	bne.n	8009776 <_dtoa_r+0x6e6>
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	4642      	mov	r2, r8
 8009710:	464b      	mov	r3, r9
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	f7f7 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800971a:	b9d0      	cbnz	r0, 8009752 <_dtoa_r+0x6c2>
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f7 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009728:	b110      	cbz	r0, 8009730 <_dtoa_r+0x6a0>
 800972a:	f01a 0f01 	tst.w	sl, #1
 800972e:	d110      	bne.n	8009752 <_dtoa_r+0x6c2>
 8009730:	4620      	mov	r0, r4
 8009732:	ee18 1a10 	vmov	r1, s16
 8009736:	f000 fd17 	bl	800a168 <_Bfree>
 800973a:	2300      	movs	r3, #0
 800973c:	9800      	ldr	r0, [sp, #0]
 800973e:	702b      	strb	r3, [r5, #0]
 8009740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009742:	3001      	adds	r0, #1
 8009744:	6018      	str	r0, [r3, #0]
 8009746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009748:	2b00      	cmp	r3, #0
 800974a:	f43f acf1 	beq.w	8009130 <_dtoa_r+0xa0>
 800974e:	601d      	str	r5, [r3, #0]
 8009750:	e4ee      	b.n	8009130 <_dtoa_r+0xa0>
 8009752:	9f00      	ldr	r7, [sp, #0]
 8009754:	462b      	mov	r3, r5
 8009756:	461d      	mov	r5, r3
 8009758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800975c:	2a39      	cmp	r2, #57	; 0x39
 800975e:	d106      	bne.n	800976e <_dtoa_r+0x6de>
 8009760:	9a01      	ldr	r2, [sp, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d1f7      	bne.n	8009756 <_dtoa_r+0x6c6>
 8009766:	9901      	ldr	r1, [sp, #4]
 8009768:	2230      	movs	r2, #48	; 0x30
 800976a:	3701      	adds	r7, #1
 800976c:	700a      	strb	r2, [r1, #0]
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	3201      	adds	r2, #1
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e790      	b.n	8009698 <_dtoa_r+0x608>
 8009776:	4ba6      	ldr	r3, [pc, #664]	; (8009a10 <_dtoa_r+0x980>)
 8009778:	2200      	movs	r2, #0
 800977a:	f7f6 ff3d 	bl	80005f8 <__aeabi_dmul>
 800977e:	2200      	movs	r2, #0
 8009780:	2300      	movs	r3, #0
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	f7f7 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800978a:	2800      	cmp	r0, #0
 800978c:	d09d      	beq.n	80096ca <_dtoa_r+0x63a>
 800978e:	e7cf      	b.n	8009730 <_dtoa_r+0x6a0>
 8009790:	9a08      	ldr	r2, [sp, #32]
 8009792:	2a00      	cmp	r2, #0
 8009794:	f000 80d7 	beq.w	8009946 <_dtoa_r+0x8b6>
 8009798:	9a06      	ldr	r2, [sp, #24]
 800979a:	2a01      	cmp	r2, #1
 800979c:	f300 80ba 	bgt.w	8009914 <_dtoa_r+0x884>
 80097a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	f000 80b2 	beq.w	800990c <_dtoa_r+0x87c>
 80097a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097ac:	9e07      	ldr	r6, [sp, #28]
 80097ae:	9d04      	ldr	r5, [sp, #16]
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	441a      	add	r2, r3
 80097b4:	9204      	str	r2, [sp, #16]
 80097b6:	9a05      	ldr	r2, [sp, #20]
 80097b8:	2101      	movs	r1, #1
 80097ba:	441a      	add	r2, r3
 80097bc:	4620      	mov	r0, r4
 80097be:	9205      	str	r2, [sp, #20]
 80097c0:	f000 fd8a 	bl	800a2d8 <__i2b>
 80097c4:	4607      	mov	r7, r0
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	dd0c      	ble.n	80097e4 <_dtoa_r+0x754>
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd09      	ble.n	80097e4 <_dtoa_r+0x754>
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	9a04      	ldr	r2, [sp, #16]
 80097d4:	bfa8      	it	ge
 80097d6:	462b      	movge	r3, r5
 80097d8:	1ad2      	subs	r2, r2, r3
 80097da:	9204      	str	r2, [sp, #16]
 80097dc:	9a05      	ldr	r2, [sp, #20]
 80097de:	1aed      	subs	r5, r5, r3
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	9305      	str	r3, [sp, #20]
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	b31b      	cbz	r3, 8009830 <_dtoa_r+0x7a0>
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80af 	beq.w	800994e <_dtoa_r+0x8be>
 80097f0:	2e00      	cmp	r6, #0
 80097f2:	dd13      	ble.n	800981c <_dtoa_r+0x78c>
 80097f4:	4639      	mov	r1, r7
 80097f6:	4632      	mov	r2, r6
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 fe2d 	bl	800a458 <__pow5mult>
 80097fe:	ee18 2a10 	vmov	r2, s16
 8009802:	4601      	mov	r1, r0
 8009804:	4607      	mov	r7, r0
 8009806:	4620      	mov	r0, r4
 8009808:	f000 fd7c 	bl	800a304 <__multiply>
 800980c:	ee18 1a10 	vmov	r1, s16
 8009810:	4680      	mov	r8, r0
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fca8 	bl	800a168 <_Bfree>
 8009818:	ee08 8a10 	vmov	s16, r8
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	1b9a      	subs	r2, r3, r6
 8009820:	d006      	beq.n	8009830 <_dtoa_r+0x7a0>
 8009822:	ee18 1a10 	vmov	r1, s16
 8009826:	4620      	mov	r0, r4
 8009828:	f000 fe16 	bl	800a458 <__pow5mult>
 800982c:	ee08 0a10 	vmov	s16, r0
 8009830:	2101      	movs	r1, #1
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fd50 	bl	800a2d8 <__i2b>
 8009838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	4606      	mov	r6, r0
 800983e:	f340 8088 	ble.w	8009952 <_dtoa_r+0x8c2>
 8009842:	461a      	mov	r2, r3
 8009844:	4601      	mov	r1, r0
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fe06 	bl	800a458 <__pow5mult>
 800984c:	9b06      	ldr	r3, [sp, #24]
 800984e:	2b01      	cmp	r3, #1
 8009850:	4606      	mov	r6, r0
 8009852:	f340 8081 	ble.w	8009958 <_dtoa_r+0x8c8>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	6933      	ldr	r3, [r6, #16]
 800985c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009860:	6918      	ldr	r0, [r3, #16]
 8009862:	f000 fce9 	bl	800a238 <__hi0bits>
 8009866:	f1c0 0020 	rsb	r0, r0, #32
 800986a:	9b05      	ldr	r3, [sp, #20]
 800986c:	4418      	add	r0, r3
 800986e:	f010 001f 	ands.w	r0, r0, #31
 8009872:	f000 8092 	beq.w	800999a <_dtoa_r+0x90a>
 8009876:	f1c0 0320 	rsb	r3, r0, #32
 800987a:	2b04      	cmp	r3, #4
 800987c:	f340 808a 	ble.w	8009994 <_dtoa_r+0x904>
 8009880:	f1c0 001c 	rsb	r0, r0, #28
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4403      	add	r3, r0
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	4403      	add	r3, r0
 800988e:	4405      	add	r5, r0
 8009890:	9305      	str	r3, [sp, #20]
 8009892:	9b04      	ldr	r3, [sp, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd07      	ble.n	80098a8 <_dtoa_r+0x818>
 8009898:	ee18 1a10 	vmov	r1, s16
 800989c:	461a      	mov	r2, r3
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 fe34 	bl	800a50c <__lshift>
 80098a4:	ee08 0a10 	vmov	s16, r0
 80098a8:	9b05      	ldr	r3, [sp, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dd05      	ble.n	80098ba <_dtoa_r+0x82a>
 80098ae:	4631      	mov	r1, r6
 80098b0:	461a      	mov	r2, r3
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fe2a 	bl	800a50c <__lshift>
 80098b8:	4606      	mov	r6, r0
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d06e      	beq.n	800999e <_dtoa_r+0x90e>
 80098c0:	ee18 0a10 	vmov	r0, s16
 80098c4:	4631      	mov	r1, r6
 80098c6:	f000 fe91 	bl	800a5ec <__mcmp>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	da67      	bge.n	800999e <_dtoa_r+0x90e>
 80098ce:	9b00      	ldr	r3, [sp, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	ee18 1a10 	vmov	r1, s16
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	220a      	movs	r2, #10
 80098da:	2300      	movs	r3, #0
 80098dc:	4620      	mov	r0, r4
 80098de:	f000 fc65 	bl	800a1ac <__multadd>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	ee08 0a10 	vmov	s16, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 81b1 	beq.w	8009c50 <_dtoa_r+0xbc0>
 80098ee:	2300      	movs	r3, #0
 80098f0:	4639      	mov	r1, r7
 80098f2:	220a      	movs	r2, #10
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fc59 	bl	800a1ac <__multadd>
 80098fa:	9b02      	ldr	r3, [sp, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	4607      	mov	r7, r0
 8009900:	f300 808e 	bgt.w	8009a20 <_dtoa_r+0x990>
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	2b02      	cmp	r3, #2
 8009908:	dc51      	bgt.n	80099ae <_dtoa_r+0x91e>
 800990a:	e089      	b.n	8009a20 <_dtoa_r+0x990>
 800990c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800990e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009912:	e74b      	b.n	80097ac <_dtoa_r+0x71c>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	1e5e      	subs	r6, r3, #1
 8009918:	9b07      	ldr	r3, [sp, #28]
 800991a:	42b3      	cmp	r3, r6
 800991c:	bfbf      	itttt	lt
 800991e:	9b07      	ldrlt	r3, [sp, #28]
 8009920:	9607      	strlt	r6, [sp, #28]
 8009922:	1af2      	sublt	r2, r6, r3
 8009924:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009926:	bfb6      	itet	lt
 8009928:	189b      	addlt	r3, r3, r2
 800992a:	1b9e      	subge	r6, r3, r6
 800992c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	bfb8      	it	lt
 8009932:	2600      	movlt	r6, #0
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfb7      	itett	lt
 8009938:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800993c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009940:	1a9d      	sublt	r5, r3, r2
 8009942:	2300      	movlt	r3, #0
 8009944:	e734      	b.n	80097b0 <_dtoa_r+0x720>
 8009946:	9e07      	ldr	r6, [sp, #28]
 8009948:	9d04      	ldr	r5, [sp, #16]
 800994a:	9f08      	ldr	r7, [sp, #32]
 800994c:	e73b      	b.n	80097c6 <_dtoa_r+0x736>
 800994e:	9a07      	ldr	r2, [sp, #28]
 8009950:	e767      	b.n	8009822 <_dtoa_r+0x792>
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	2b01      	cmp	r3, #1
 8009956:	dc18      	bgt.n	800998a <_dtoa_r+0x8fa>
 8009958:	f1ba 0f00 	cmp.w	sl, #0
 800995c:	d115      	bne.n	800998a <_dtoa_r+0x8fa>
 800995e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009962:	b993      	cbnz	r3, 800998a <_dtoa_r+0x8fa>
 8009964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	051b      	lsls	r3, r3, #20
 800996c:	b183      	cbz	r3, 8009990 <_dtoa_r+0x900>
 800996e:	9b04      	ldr	r3, [sp, #16]
 8009970:	3301      	adds	r3, #1
 8009972:	9304      	str	r3, [sp, #16]
 8009974:	9b05      	ldr	r3, [sp, #20]
 8009976:	3301      	adds	r3, #1
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f04f 0801 	mov.w	r8, #1
 800997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009980:	2b00      	cmp	r3, #0
 8009982:	f47f af6a 	bne.w	800985a <_dtoa_r+0x7ca>
 8009986:	2001      	movs	r0, #1
 8009988:	e76f      	b.n	800986a <_dtoa_r+0x7da>
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	e7f6      	b.n	800997e <_dtoa_r+0x8ee>
 8009990:	4698      	mov	r8, r3
 8009992:	e7f4      	b.n	800997e <_dtoa_r+0x8ee>
 8009994:	f43f af7d 	beq.w	8009892 <_dtoa_r+0x802>
 8009998:	4618      	mov	r0, r3
 800999a:	301c      	adds	r0, #28
 800999c:	e772      	b.n	8009884 <_dtoa_r+0x7f4>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc37      	bgt.n	8009a14 <_dtoa_r+0x984>
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	dd34      	ble.n	8009a14 <_dtoa_r+0x984>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	9302      	str	r3, [sp, #8]
 80099ae:	9b02      	ldr	r3, [sp, #8]
 80099b0:	b96b      	cbnz	r3, 80099ce <_dtoa_r+0x93e>
 80099b2:	4631      	mov	r1, r6
 80099b4:	2205      	movs	r2, #5
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fbf8 	bl	800a1ac <__multadd>
 80099bc:	4601      	mov	r1, r0
 80099be:	4606      	mov	r6, r0
 80099c0:	ee18 0a10 	vmov	r0, s16
 80099c4:	f000 fe12 	bl	800a5ec <__mcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	f73f adbb 	bgt.w	8009544 <_dtoa_r+0x4b4>
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	9d01      	ldr	r5, [sp, #4]
 80099d2:	43db      	mvns	r3, r3
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	4631      	mov	r1, r6
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fbc3 	bl	800a168 <_Bfree>
 80099e2:	2f00      	cmp	r7, #0
 80099e4:	f43f aea4 	beq.w	8009730 <_dtoa_r+0x6a0>
 80099e8:	f1b8 0f00 	cmp.w	r8, #0
 80099ec:	d005      	beq.n	80099fa <_dtoa_r+0x96a>
 80099ee:	45b8      	cmp	r8, r7
 80099f0:	d003      	beq.n	80099fa <_dtoa_r+0x96a>
 80099f2:	4641      	mov	r1, r8
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 fbb7 	bl	800a168 <_Bfree>
 80099fa:	4639      	mov	r1, r7
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fbb3 	bl	800a168 <_Bfree>
 8009a02:	e695      	b.n	8009730 <_dtoa_r+0x6a0>
 8009a04:	2600      	movs	r6, #0
 8009a06:	4637      	mov	r7, r6
 8009a08:	e7e1      	b.n	80099ce <_dtoa_r+0x93e>
 8009a0a:	9700      	str	r7, [sp, #0]
 8009a0c:	4637      	mov	r7, r6
 8009a0e:	e599      	b.n	8009544 <_dtoa_r+0x4b4>
 8009a10:	40240000 	.word	0x40240000
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80ca 	beq.w	8009bb0 <_dtoa_r+0xb20>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	2d00      	cmp	r5, #0
 8009a22:	dd05      	ble.n	8009a30 <_dtoa_r+0x9a0>
 8009a24:	4639      	mov	r1, r7
 8009a26:	462a      	mov	r2, r5
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fd6f 	bl	800a50c <__lshift>
 8009a2e:	4607      	mov	r7, r0
 8009a30:	f1b8 0f00 	cmp.w	r8, #0
 8009a34:	d05b      	beq.n	8009aee <_dtoa_r+0xa5e>
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fb55 	bl	800a0e8 <_Balloc>
 8009a3e:	4605      	mov	r5, r0
 8009a40:	b928      	cbnz	r0, 8009a4e <_dtoa_r+0x9be>
 8009a42:	4b87      	ldr	r3, [pc, #540]	; (8009c60 <_dtoa_r+0xbd0>)
 8009a44:	4602      	mov	r2, r0
 8009a46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a4a:	f7ff bb3b 	b.w	80090c4 <_dtoa_r+0x34>
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	3202      	adds	r2, #2
 8009a52:	0092      	lsls	r2, r2, #2
 8009a54:	f107 010c 	add.w	r1, r7, #12
 8009a58:	300c      	adds	r0, #12
 8009a5a:	f000 fb2b 	bl	800a0b4 <memcpy>
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4629      	mov	r1, r5
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 fd52 	bl	800a50c <__lshift>
 8009a68:	9b01      	ldr	r3, [sp, #4]
 8009a6a:	f103 0901 	add.w	r9, r3, #1
 8009a6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	f00a 0301 	and.w	r3, sl, #1
 8009a7a:	46b8      	mov	r8, r7
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	4607      	mov	r7, r0
 8009a80:	4631      	mov	r1, r6
 8009a82:	ee18 0a10 	vmov	r0, s16
 8009a86:	f7ff fa75 	bl	8008f74 <quorem>
 8009a8a:	4641      	mov	r1, r8
 8009a8c:	9002      	str	r0, [sp, #8]
 8009a8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a92:	ee18 0a10 	vmov	r0, s16
 8009a96:	f000 fda9 	bl	800a5ec <__mcmp>
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	9003      	str	r0, [sp, #12]
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 fdbf 	bl	800a624 <__mdiff>
 8009aa6:	68c2      	ldr	r2, [r0, #12]
 8009aa8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009aac:	4605      	mov	r5, r0
 8009aae:	bb02      	cbnz	r2, 8009af2 <_dtoa_r+0xa62>
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	ee18 0a10 	vmov	r0, s16
 8009ab6:	f000 fd99 	bl	800a5ec <__mcmp>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4629      	mov	r1, r5
 8009abe:	4620      	mov	r0, r4
 8009ac0:	9207      	str	r2, [sp, #28]
 8009ac2:	f000 fb51 	bl	800a168 <_Bfree>
 8009ac6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009aca:	ea43 0102 	orr.w	r1, r3, r2
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	464d      	mov	r5, r9
 8009ad4:	d10f      	bne.n	8009af6 <_dtoa_r+0xa66>
 8009ad6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ada:	d02a      	beq.n	8009b32 <_dtoa_r+0xaa2>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd02      	ble.n	8009ae8 <_dtoa_r+0xa58>
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ae8:	f88b a000 	strb.w	sl, [fp]
 8009aec:	e775      	b.n	80099da <_dtoa_r+0x94a>
 8009aee:	4638      	mov	r0, r7
 8009af0:	e7ba      	b.n	8009a68 <_dtoa_r+0x9d8>
 8009af2:	2201      	movs	r2, #1
 8009af4:	e7e2      	b.n	8009abc <_dtoa_r+0xa2c>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db04      	blt.n	8009b06 <_dtoa_r+0xa76>
 8009afc:	9906      	ldr	r1, [sp, #24]
 8009afe:	430b      	orrs	r3, r1
 8009b00:	9904      	ldr	r1, [sp, #16]
 8009b02:	430b      	orrs	r3, r1
 8009b04:	d122      	bne.n	8009b4c <_dtoa_r+0xabc>
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	ddee      	ble.n	8009ae8 <_dtoa_r+0xa58>
 8009b0a:	ee18 1a10 	vmov	r1, s16
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fcfb 	bl	800a50c <__lshift>
 8009b16:	4631      	mov	r1, r6
 8009b18:	ee08 0a10 	vmov	s16, r0
 8009b1c:	f000 fd66 	bl	800a5ec <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dc03      	bgt.n	8009b2c <_dtoa_r+0xa9c>
 8009b24:	d1e0      	bne.n	8009ae8 <_dtoa_r+0xa58>
 8009b26:	f01a 0f01 	tst.w	sl, #1
 8009b2a:	d0dd      	beq.n	8009ae8 <_dtoa_r+0xa58>
 8009b2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b30:	d1d7      	bne.n	8009ae2 <_dtoa_r+0xa52>
 8009b32:	2339      	movs	r3, #57	; 0x39
 8009b34:	f88b 3000 	strb.w	r3, [fp]
 8009b38:	462b      	mov	r3, r5
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b42:	2a39      	cmp	r2, #57	; 0x39
 8009b44:	d071      	beq.n	8009c2a <_dtoa_r+0xb9a>
 8009b46:	3201      	adds	r2, #1
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	e746      	b.n	80099da <_dtoa_r+0x94a>
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	dd07      	ble.n	8009b60 <_dtoa_r+0xad0>
 8009b50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b54:	d0ed      	beq.n	8009b32 <_dtoa_r+0xaa2>
 8009b56:	f10a 0301 	add.w	r3, sl, #1
 8009b5a:	f88b 3000 	strb.w	r3, [fp]
 8009b5e:	e73c      	b.n	80099da <_dtoa_r+0x94a>
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b66:	4599      	cmp	r9, r3
 8009b68:	d047      	beq.n	8009bfa <_dtoa_r+0xb6a>
 8009b6a:	ee18 1a10 	vmov	r1, s16
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fb1a 	bl	800a1ac <__multadd>
 8009b78:	45b8      	cmp	r8, r7
 8009b7a:	ee08 0a10 	vmov	s16, r0
 8009b7e:	f04f 0300 	mov.w	r3, #0
 8009b82:	f04f 020a 	mov.w	r2, #10
 8009b86:	4641      	mov	r1, r8
 8009b88:	4620      	mov	r0, r4
 8009b8a:	d106      	bne.n	8009b9a <_dtoa_r+0xb0a>
 8009b8c:	f000 fb0e 	bl	800a1ac <__multadd>
 8009b90:	4680      	mov	r8, r0
 8009b92:	4607      	mov	r7, r0
 8009b94:	f109 0901 	add.w	r9, r9, #1
 8009b98:	e772      	b.n	8009a80 <_dtoa_r+0x9f0>
 8009b9a:	f000 fb07 	bl	800a1ac <__multadd>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 fb00 	bl	800a1ac <__multadd>
 8009bac:	4607      	mov	r7, r0
 8009bae:	e7f1      	b.n	8009b94 <_dtoa_r+0xb04>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	9d01      	ldr	r5, [sp, #4]
 8009bb6:	ee18 0a10 	vmov	r0, s16
 8009bba:	4631      	mov	r1, r6
 8009bbc:	f7ff f9da 	bl	8008f74 <quorem>
 8009bc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	f805 ab01 	strb.w	sl, [r5], #1
 8009bca:	1aea      	subs	r2, r5, r3
 8009bcc:	9b02      	ldr	r3, [sp, #8]
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	dd09      	ble.n	8009be6 <_dtoa_r+0xb56>
 8009bd2:	ee18 1a10 	vmov	r1, s16
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	220a      	movs	r2, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fae6 	bl	800a1ac <__multadd>
 8009be0:	ee08 0a10 	vmov	s16, r0
 8009be4:	e7e7      	b.n	8009bb6 <_dtoa_r+0xb26>
 8009be6:	9b02      	ldr	r3, [sp, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfc8      	it	gt
 8009bec:	461d      	movgt	r5, r3
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	bfd8      	it	le
 8009bf2:	2501      	movle	r5, #1
 8009bf4:	441d      	add	r5, r3
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	ee18 1a10 	vmov	r1, s16
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fc83 	bl	800a50c <__lshift>
 8009c06:	4631      	mov	r1, r6
 8009c08:	ee08 0a10 	vmov	s16, r0
 8009c0c:	f000 fcee 	bl	800a5ec <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	dc91      	bgt.n	8009b38 <_dtoa_r+0xaa8>
 8009c14:	d102      	bne.n	8009c1c <_dtoa_r+0xb8c>
 8009c16:	f01a 0f01 	tst.w	sl, #1
 8009c1a:	d18d      	bne.n	8009b38 <_dtoa_r+0xaa8>
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	461d      	mov	r5, r3
 8009c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c24:	2a30      	cmp	r2, #48	; 0x30
 8009c26:	d0fa      	beq.n	8009c1e <_dtoa_r+0xb8e>
 8009c28:	e6d7      	b.n	80099da <_dtoa_r+0x94a>
 8009c2a:	9a01      	ldr	r2, [sp, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d184      	bne.n	8009b3a <_dtoa_r+0xaaa>
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	2331      	movs	r3, #49	; 0x31
 8009c38:	7013      	strb	r3, [r2, #0]
 8009c3a:	e6ce      	b.n	80099da <_dtoa_r+0x94a>
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <_dtoa_r+0xbd4>)
 8009c3e:	f7ff ba95 	b.w	800916c <_dtoa_r+0xdc>
 8009c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f47f aa6e 	bne.w	8009126 <_dtoa_r+0x96>
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <_dtoa_r+0xbd8>)
 8009c4c:	f7ff ba8e 	b.w	800916c <_dtoa_r+0xdc>
 8009c50:	9b02      	ldr	r3, [sp, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dcae      	bgt.n	8009bb4 <_dtoa_r+0xb24>
 8009c56:	9b06      	ldr	r3, [sp, #24]
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	f73f aea8 	bgt.w	80099ae <_dtoa_r+0x91e>
 8009c5e:	e7a9      	b.n	8009bb4 <_dtoa_r+0xb24>
 8009c60:	0800c94b 	.word	0x0800c94b
 8009c64:	0800c8a8 	.word	0x0800c8a8
 8009c68:	0800c8cc 	.word	0x0800c8cc

08009c6c <__sflush_r>:
 8009c6c:	898a      	ldrh	r2, [r1, #12]
 8009c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	0710      	lsls	r0, r2, #28
 8009c76:	460c      	mov	r4, r1
 8009c78:	d458      	bmi.n	8009d2c <__sflush_r+0xc0>
 8009c7a:	684b      	ldr	r3, [r1, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dc05      	bgt.n	8009c8c <__sflush_r+0x20>
 8009c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dc02      	bgt.n	8009c8c <__sflush_r+0x20>
 8009c86:	2000      	movs	r0, #0
 8009c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d0f9      	beq.n	8009c86 <__sflush_r+0x1a>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c98:	682f      	ldr	r7, [r5, #0]
 8009c9a:	602b      	str	r3, [r5, #0]
 8009c9c:	d032      	beq.n	8009d04 <__sflush_r+0x98>
 8009c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	075a      	lsls	r2, r3, #29
 8009ca4:	d505      	bpl.n	8009cb2 <__sflush_r+0x46>
 8009ca6:	6863      	ldr	r3, [r4, #4]
 8009ca8:	1ac0      	subs	r0, r0, r3
 8009caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cac:	b10b      	cbz	r3, 8009cb2 <__sflush_r+0x46>
 8009cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cb0:	1ac0      	subs	r0, r0, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb8:	6a21      	ldr	r1, [r4, #32]
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b0      	blx	r6
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	d106      	bne.n	8009cd2 <__sflush_r+0x66>
 8009cc4:	6829      	ldr	r1, [r5, #0]
 8009cc6:	291d      	cmp	r1, #29
 8009cc8:	d82c      	bhi.n	8009d24 <__sflush_r+0xb8>
 8009cca:	4a2a      	ldr	r2, [pc, #168]	; (8009d74 <__sflush_r+0x108>)
 8009ccc:	40ca      	lsrs	r2, r1
 8009cce:	07d6      	lsls	r6, r2, #31
 8009cd0:	d528      	bpl.n	8009d24 <__sflush_r+0xb8>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	6062      	str	r2, [r4, #4]
 8009cd6:	04d9      	lsls	r1, r3, #19
 8009cd8:	6922      	ldr	r2, [r4, #16]
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	d504      	bpl.n	8009ce8 <__sflush_r+0x7c>
 8009cde:	1c42      	adds	r2, r0, #1
 8009ce0:	d101      	bne.n	8009ce6 <__sflush_r+0x7a>
 8009ce2:	682b      	ldr	r3, [r5, #0]
 8009ce4:	b903      	cbnz	r3, 8009ce8 <__sflush_r+0x7c>
 8009ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cea:	602f      	str	r7, [r5, #0]
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d0ca      	beq.n	8009c86 <__sflush_r+0x1a>
 8009cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf4:	4299      	cmp	r1, r3
 8009cf6:	d002      	beq.n	8009cfe <__sflush_r+0x92>
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	f7fe fa73 	bl	80081e4 <_free_r>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	6360      	str	r0, [r4, #52]	; 0x34
 8009d02:	e7c1      	b.n	8009c88 <__sflush_r+0x1c>
 8009d04:	6a21      	ldr	r1, [r4, #32]
 8009d06:	2301      	movs	r3, #1
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b0      	blx	r6
 8009d0c:	1c41      	adds	r1, r0, #1
 8009d0e:	d1c7      	bne.n	8009ca0 <__sflush_r+0x34>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0c4      	beq.n	8009ca0 <__sflush_r+0x34>
 8009d16:	2b1d      	cmp	r3, #29
 8009d18:	d001      	beq.n	8009d1e <__sflush_r+0xb2>
 8009d1a:	2b16      	cmp	r3, #22
 8009d1c:	d101      	bne.n	8009d22 <__sflush_r+0xb6>
 8009d1e:	602f      	str	r7, [r5, #0]
 8009d20:	e7b1      	b.n	8009c86 <__sflush_r+0x1a>
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	e7ad      	b.n	8009c88 <__sflush_r+0x1c>
 8009d2c:	690f      	ldr	r7, [r1, #16]
 8009d2e:	2f00      	cmp	r7, #0
 8009d30:	d0a9      	beq.n	8009c86 <__sflush_r+0x1a>
 8009d32:	0793      	lsls	r3, r2, #30
 8009d34:	680e      	ldr	r6, [r1, #0]
 8009d36:	bf08      	it	eq
 8009d38:	694b      	ldreq	r3, [r1, #20]
 8009d3a:	600f      	str	r7, [r1, #0]
 8009d3c:	bf18      	it	ne
 8009d3e:	2300      	movne	r3, #0
 8009d40:	eba6 0807 	sub.w	r8, r6, r7
 8009d44:	608b      	str	r3, [r1, #8]
 8009d46:	f1b8 0f00 	cmp.w	r8, #0
 8009d4a:	dd9c      	ble.n	8009c86 <__sflush_r+0x1a>
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d50:	4643      	mov	r3, r8
 8009d52:	463a      	mov	r2, r7
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dc06      	bgt.n	8009d6a <__sflush_r+0xfe>
 8009d5c:	89a3      	ldrh	r3, [r4, #12]
 8009d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d68:	e78e      	b.n	8009c88 <__sflush_r+0x1c>
 8009d6a:	4407      	add	r7, r0
 8009d6c:	eba8 0800 	sub.w	r8, r8, r0
 8009d70:	e7e9      	b.n	8009d46 <__sflush_r+0xda>
 8009d72:	bf00      	nop
 8009d74:	20400001 	.word	0x20400001

08009d78 <_fflush_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	690b      	ldr	r3, [r1, #16]
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	b913      	cbnz	r3, 8009d88 <_fflush_r+0x10>
 8009d82:	2500      	movs	r5, #0
 8009d84:	4628      	mov	r0, r5
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	b118      	cbz	r0, 8009d92 <_fflush_r+0x1a>
 8009d8a:	6983      	ldr	r3, [r0, #24]
 8009d8c:	b90b      	cbnz	r3, 8009d92 <_fflush_r+0x1a>
 8009d8e:	f000 f887 	bl	8009ea0 <__sinit>
 8009d92:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <_fflush_r+0x6c>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	d11b      	bne.n	8009dd0 <_fflush_r+0x58>
 8009d98:	686c      	ldr	r4, [r5, #4]
 8009d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0ef      	beq.n	8009d82 <_fflush_r+0xa>
 8009da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009da4:	07d0      	lsls	r0, r2, #31
 8009da6:	d404      	bmi.n	8009db2 <_fflush_r+0x3a>
 8009da8:	0599      	lsls	r1, r3, #22
 8009daa:	d402      	bmi.n	8009db2 <_fflush_r+0x3a>
 8009dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dae:	f000 f91a 	bl	8009fe6 <__retarget_lock_acquire_recursive>
 8009db2:	4628      	mov	r0, r5
 8009db4:	4621      	mov	r1, r4
 8009db6:	f7ff ff59 	bl	8009c6c <__sflush_r>
 8009dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	d4e0      	bmi.n	8009d84 <_fflush_r+0xc>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	059b      	lsls	r3, r3, #22
 8009dc6:	d4dd      	bmi.n	8009d84 <_fflush_r+0xc>
 8009dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dca:	f000 f90d 	bl	8009fe8 <__retarget_lock_release_recursive>
 8009dce:	e7d9      	b.n	8009d84 <_fflush_r+0xc>
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <_fflush_r+0x70>)
 8009dd2:	429c      	cmp	r4, r3
 8009dd4:	d101      	bne.n	8009dda <_fflush_r+0x62>
 8009dd6:	68ac      	ldr	r4, [r5, #8]
 8009dd8:	e7df      	b.n	8009d9a <_fflush_r+0x22>
 8009dda:	4b04      	ldr	r3, [pc, #16]	; (8009dec <_fflush_r+0x74>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	bf08      	it	eq
 8009de0:	68ec      	ldreq	r4, [r5, #12]
 8009de2:	e7da      	b.n	8009d9a <_fflush_r+0x22>
 8009de4:	0800c97c 	.word	0x0800c97c
 8009de8:	0800c99c 	.word	0x0800c99c
 8009dec:	0800c95c 	.word	0x0800c95c

08009df0 <std>:
 8009df0:	2300      	movs	r3, #0
 8009df2:	b510      	push	{r4, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dfe:	6083      	str	r3, [r0, #8]
 8009e00:	8181      	strh	r1, [r0, #12]
 8009e02:	6643      	str	r3, [r0, #100]	; 0x64
 8009e04:	81c2      	strh	r2, [r0, #14]
 8009e06:	6183      	str	r3, [r0, #24]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2208      	movs	r2, #8
 8009e0c:	305c      	adds	r0, #92	; 0x5c
 8009e0e:	f7fe f9e1 	bl	80081d4 <memset>
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <std+0x38>)
 8009e14:	6263      	str	r3, [r4, #36]	; 0x24
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <std+0x3c>)
 8009e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e1a:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <std+0x40>)
 8009e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e1e:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <std+0x44>)
 8009e20:	6224      	str	r4, [r4, #32]
 8009e22:	6323      	str	r3, [r4, #48]	; 0x30
 8009e24:	bd10      	pop	{r4, pc}
 8009e26:	bf00      	nop
 8009e28:	0800ad89 	.word	0x0800ad89
 8009e2c:	0800adab 	.word	0x0800adab
 8009e30:	0800ade3 	.word	0x0800ade3
 8009e34:	0800ae07 	.word	0x0800ae07

08009e38 <_cleanup_r>:
 8009e38:	4901      	ldr	r1, [pc, #4]	; (8009e40 <_cleanup_r+0x8>)
 8009e3a:	f000 b8af 	b.w	8009f9c <_fwalk_reent>
 8009e3e:	bf00      	nop
 8009e40:	08009d79 	.word	0x08009d79

08009e44 <__sfmoreglue>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	2268      	movs	r2, #104	; 0x68
 8009e48:	1e4d      	subs	r5, r1, #1
 8009e4a:	4355      	muls	r5, r2
 8009e4c:	460e      	mov	r6, r1
 8009e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e52:	f7fe fa33 	bl	80082bc <_malloc_r>
 8009e56:	4604      	mov	r4, r0
 8009e58:	b140      	cbz	r0, 8009e6c <__sfmoreglue+0x28>
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e60:	300c      	adds	r0, #12
 8009e62:	60a0      	str	r0, [r4, #8]
 8009e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e68:	f7fe f9b4 	bl	80081d4 <memset>
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}

08009e70 <__sfp_lock_acquire>:
 8009e70:	4801      	ldr	r0, [pc, #4]	; (8009e78 <__sfp_lock_acquire+0x8>)
 8009e72:	f000 b8b8 	b.w	8009fe6 <__retarget_lock_acquire_recursive>
 8009e76:	bf00      	nop
 8009e78:	2000074d 	.word	0x2000074d

08009e7c <__sfp_lock_release>:
 8009e7c:	4801      	ldr	r0, [pc, #4]	; (8009e84 <__sfp_lock_release+0x8>)
 8009e7e:	f000 b8b3 	b.w	8009fe8 <__retarget_lock_release_recursive>
 8009e82:	bf00      	nop
 8009e84:	2000074d 	.word	0x2000074d

08009e88 <__sinit_lock_acquire>:
 8009e88:	4801      	ldr	r0, [pc, #4]	; (8009e90 <__sinit_lock_acquire+0x8>)
 8009e8a:	f000 b8ac 	b.w	8009fe6 <__retarget_lock_acquire_recursive>
 8009e8e:	bf00      	nop
 8009e90:	2000074e 	.word	0x2000074e

08009e94 <__sinit_lock_release>:
 8009e94:	4801      	ldr	r0, [pc, #4]	; (8009e9c <__sinit_lock_release+0x8>)
 8009e96:	f000 b8a7 	b.w	8009fe8 <__retarget_lock_release_recursive>
 8009e9a:	bf00      	nop
 8009e9c:	2000074e 	.word	0x2000074e

08009ea0 <__sinit>:
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	f7ff fff0 	bl	8009e88 <__sinit_lock_acquire>
 8009ea8:	69a3      	ldr	r3, [r4, #24]
 8009eaa:	b11b      	cbz	r3, 8009eb4 <__sinit+0x14>
 8009eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb0:	f7ff bff0 	b.w	8009e94 <__sinit_lock_release>
 8009eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8009eba:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <__sinit+0x68>)
 8009ebc:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <__sinit+0x6c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	bf04      	itt	eq
 8009ec6:	2301      	moveq	r3, #1
 8009ec8:	61a3      	streq	r3, [r4, #24]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f820 	bl	8009f10 <__sfp>
 8009ed0:	6060      	str	r0, [r4, #4]
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 f81c 	bl	8009f10 <__sfp>
 8009ed8:	60a0      	str	r0, [r4, #8]
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 f818 	bl	8009f10 <__sfp>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	60e0      	str	r0, [r4, #12]
 8009ee4:	2104      	movs	r1, #4
 8009ee6:	6860      	ldr	r0, [r4, #4]
 8009ee8:	f7ff ff82 	bl	8009df0 <std>
 8009eec:	68a0      	ldr	r0, [r4, #8]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	2109      	movs	r1, #9
 8009ef2:	f7ff ff7d 	bl	8009df0 <std>
 8009ef6:	68e0      	ldr	r0, [r4, #12]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	2112      	movs	r1, #18
 8009efc:	f7ff ff78 	bl	8009df0 <std>
 8009f00:	2301      	movs	r3, #1
 8009f02:	61a3      	str	r3, [r4, #24]
 8009f04:	e7d2      	b.n	8009eac <__sinit+0xc>
 8009f06:	bf00      	nop
 8009f08:	0800c894 	.word	0x0800c894
 8009f0c:	08009e39 	.word	0x08009e39

08009f10 <__sfp>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	4607      	mov	r7, r0
 8009f14:	f7ff ffac 	bl	8009e70 <__sfp_lock_acquire>
 8009f18:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <__sfp+0x84>)
 8009f1a:	681e      	ldr	r6, [r3, #0]
 8009f1c:	69b3      	ldr	r3, [r6, #24]
 8009f1e:	b913      	cbnz	r3, 8009f26 <__sfp+0x16>
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7ff ffbd 	bl	8009ea0 <__sinit>
 8009f26:	3648      	adds	r6, #72	; 0x48
 8009f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	d503      	bpl.n	8009f38 <__sfp+0x28>
 8009f30:	6833      	ldr	r3, [r6, #0]
 8009f32:	b30b      	cbz	r3, 8009f78 <__sfp+0x68>
 8009f34:	6836      	ldr	r6, [r6, #0]
 8009f36:	e7f7      	b.n	8009f28 <__sfp+0x18>
 8009f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f3c:	b9d5      	cbnz	r5, 8009f74 <__sfp+0x64>
 8009f3e:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <__sfp+0x88>)
 8009f40:	60e3      	str	r3, [r4, #12]
 8009f42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f46:	6665      	str	r5, [r4, #100]	; 0x64
 8009f48:	f000 f84c 	bl	8009fe4 <__retarget_lock_init_recursive>
 8009f4c:	f7ff ff96 	bl	8009e7c <__sfp_lock_release>
 8009f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f58:	6025      	str	r5, [r4, #0]
 8009f5a:	61a5      	str	r5, [r4, #24]
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f64:	f7fe f936 	bl	80081d4 <memset>
 8009f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f70:	4620      	mov	r0, r4
 8009f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f74:	3468      	adds	r4, #104	; 0x68
 8009f76:	e7d9      	b.n	8009f2c <__sfp+0x1c>
 8009f78:	2104      	movs	r1, #4
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f7ff ff62 	bl	8009e44 <__sfmoreglue>
 8009f80:	4604      	mov	r4, r0
 8009f82:	6030      	str	r0, [r6, #0]
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1d5      	bne.n	8009f34 <__sfp+0x24>
 8009f88:	f7ff ff78 	bl	8009e7c <__sfp_lock_release>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	e7ee      	b.n	8009f70 <__sfp+0x60>
 8009f92:	bf00      	nop
 8009f94:	0800c894 	.word	0x0800c894
 8009f98:	ffff0001 	.word	0xffff0001

08009f9c <_fwalk_reent>:
 8009f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	4688      	mov	r8, r1
 8009fa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fa8:	2700      	movs	r7, #0
 8009faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fae:	f1b9 0901 	subs.w	r9, r9, #1
 8009fb2:	d505      	bpl.n	8009fc0 <_fwalk_reent+0x24>
 8009fb4:	6824      	ldr	r4, [r4, #0]
 8009fb6:	2c00      	cmp	r4, #0
 8009fb8:	d1f7      	bne.n	8009faa <_fwalk_reent+0xe>
 8009fba:	4638      	mov	r0, r7
 8009fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc0:	89ab      	ldrh	r3, [r5, #12]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d907      	bls.n	8009fd6 <_fwalk_reent+0x3a>
 8009fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	d003      	beq.n	8009fd6 <_fwalk_reent+0x3a>
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	47c0      	blx	r8
 8009fd4:	4307      	orrs	r7, r0
 8009fd6:	3568      	adds	r5, #104	; 0x68
 8009fd8:	e7e9      	b.n	8009fae <_fwalk_reent+0x12>
	...

08009fdc <_localeconv_r>:
 8009fdc:	4800      	ldr	r0, [pc, #0]	; (8009fe0 <_localeconv_r+0x4>)
 8009fde:	4770      	bx	lr
 8009fe0:	20000160 	.word	0x20000160

08009fe4 <__retarget_lock_init_recursive>:
 8009fe4:	4770      	bx	lr

08009fe6 <__retarget_lock_acquire_recursive>:
 8009fe6:	4770      	bx	lr

08009fe8 <__retarget_lock_release_recursive>:
 8009fe8:	4770      	bx	lr

08009fea <__swhatbuf_r>:
 8009fea:	b570      	push	{r4, r5, r6, lr}
 8009fec:	460e      	mov	r6, r1
 8009fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff2:	2900      	cmp	r1, #0
 8009ff4:	b096      	sub	sp, #88	; 0x58
 8009ff6:	4614      	mov	r4, r2
 8009ff8:	461d      	mov	r5, r3
 8009ffa:	da08      	bge.n	800a00e <__swhatbuf_r+0x24>
 8009ffc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	602a      	str	r2, [r5, #0]
 800a004:	061a      	lsls	r2, r3, #24
 800a006:	d410      	bmi.n	800a02a <__swhatbuf_r+0x40>
 800a008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a00c:	e00e      	b.n	800a02c <__swhatbuf_r+0x42>
 800a00e:	466a      	mov	r2, sp
 800a010:	f000 ff50 	bl	800aeb4 <_fstat_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	dbf1      	blt.n	8009ffc <__swhatbuf_r+0x12>
 800a018:	9a01      	ldr	r2, [sp, #4]
 800a01a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a01e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a022:	425a      	negs	r2, r3
 800a024:	415a      	adcs	r2, r3
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	e7ee      	b.n	800a008 <__swhatbuf_r+0x1e>
 800a02a:	2340      	movs	r3, #64	; 0x40
 800a02c:	2000      	movs	r0, #0
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	b016      	add	sp, #88	; 0x58
 800a032:	bd70      	pop	{r4, r5, r6, pc}

0800a034 <__smakebuf_r>:
 800a034:	898b      	ldrh	r3, [r1, #12]
 800a036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a038:	079d      	lsls	r5, r3, #30
 800a03a:	4606      	mov	r6, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	d507      	bpl.n	800a050 <__smakebuf_r+0x1c>
 800a040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	6123      	str	r3, [r4, #16]
 800a048:	2301      	movs	r3, #1
 800a04a:	6163      	str	r3, [r4, #20]
 800a04c:	b002      	add	sp, #8
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	ab01      	add	r3, sp, #4
 800a052:	466a      	mov	r2, sp
 800a054:	f7ff ffc9 	bl	8009fea <__swhatbuf_r>
 800a058:	9900      	ldr	r1, [sp, #0]
 800a05a:	4605      	mov	r5, r0
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7fe f92d 	bl	80082bc <_malloc_r>
 800a062:	b948      	cbnz	r0, 800a078 <__smakebuf_r+0x44>
 800a064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d4ef      	bmi.n	800a04c <__smakebuf_r+0x18>
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	f043 0302 	orr.w	r3, r3, #2
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	e7e3      	b.n	800a040 <__smakebuf_r+0xc>
 800a078:	4b0d      	ldr	r3, [pc, #52]	; (800a0b0 <__smakebuf_r+0x7c>)
 800a07a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	6020      	str	r0, [r4, #0]
 800a080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	9b00      	ldr	r3, [sp, #0]
 800a088:	6163      	str	r3, [r4, #20]
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	6120      	str	r0, [r4, #16]
 800a08e:	b15b      	cbz	r3, 800a0a8 <__smakebuf_r+0x74>
 800a090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a094:	4630      	mov	r0, r6
 800a096:	f000 ff1f 	bl	800aed8 <_isatty_r>
 800a09a:	b128      	cbz	r0, 800a0a8 <__smakebuf_r+0x74>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	f043 0301 	orr.w	r3, r3, #1
 800a0a6:	81a3      	strh	r3, [r4, #12]
 800a0a8:	89a0      	ldrh	r0, [r4, #12]
 800a0aa:	4305      	orrs	r5, r0
 800a0ac:	81a5      	strh	r5, [r4, #12]
 800a0ae:	e7cd      	b.n	800a04c <__smakebuf_r+0x18>
 800a0b0:	08009e39 	.word	0x08009e39

0800a0b4 <memcpy>:
 800a0b4:	440a      	add	r2, r1
 800a0b6:	4291      	cmp	r1, r2
 800a0b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0bc:	d100      	bne.n	800a0c0 <memcpy+0xc>
 800a0be:	4770      	bx	lr
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	d1f9      	bne.n	800a0c2 <memcpy+0xe>
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	; (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff bf88 	b.w	8009fe6 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	2000074c 	.word	0x2000074c

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	; (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff bf83 	b.w	8009fe8 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	2000074c 	.word	0x2000074c

0800a0e8 <_Balloc>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Balloc+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7fe f85e 	bl	80081b4 <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a0fc:	b920      	cbnz	r0, 800a108 <_Balloc+0x20>
 800a0fe:	4b18      	ldr	r3, [pc, #96]	; (800a160 <_Balloc+0x78>)
 800a100:	4818      	ldr	r0, [pc, #96]	; (800a164 <_Balloc+0x7c>)
 800a102:	2166      	movs	r1, #102	; 0x66
 800a104:	f000 fe96 	bl	800ae34 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a112:	68f3      	ldr	r3, [r6, #12]
 800a114:	b183      	cbz	r3, 800a138 <_Balloc+0x50>
 800a116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a11e:	b9b8      	cbnz	r0, 800a150 <_Balloc+0x68>
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f605 	lsl.w	r6, r1, r5
 800a126:	1d72      	adds	r2, r6, #5
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 fb60 	bl	800a7f0 <_calloc_r>
 800a130:	b160      	cbz	r0, 800a14c <_Balloc+0x64>
 800a132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a136:	e00e      	b.n	800a156 <_Balloc+0x6e>
 800a138:	2221      	movs	r2, #33	; 0x21
 800a13a:	2104      	movs	r1, #4
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fb57 	bl	800a7f0 <_calloc_r>
 800a142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a144:	60f0      	str	r0, [r6, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e4      	bne.n	800a116 <_Balloc+0x2e>
 800a14c:	2000      	movs	r0, #0
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	6802      	ldr	r2, [r0, #0]
 800a152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a156:	2300      	movs	r3, #0
 800a158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a15c:	e7f7      	b.n	800a14e <_Balloc+0x66>
 800a15e:	bf00      	nop
 800a160:	0800c8d9 	.word	0x0800c8d9
 800a164:	0800c9bc 	.word	0x0800c9bc

0800a168 <_Bfree>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b976      	cbnz	r6, 800a190 <_Bfree+0x28>
 800a172:	2010      	movs	r0, #16
 800a174:	f7fe f81e 	bl	80081b4 <malloc>
 800a178:	4602      	mov	r2, r0
 800a17a:	6268      	str	r0, [r5, #36]	; 0x24
 800a17c:	b920      	cbnz	r0, 800a188 <_Bfree+0x20>
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <_Bfree+0x3c>)
 800a180:	4809      	ldr	r0, [pc, #36]	; (800a1a8 <_Bfree+0x40>)
 800a182:	218a      	movs	r1, #138	; 0x8a
 800a184:	f000 fe56 	bl	800ae34 <__assert_func>
 800a188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a18c:	6006      	str	r6, [r0, #0]
 800a18e:	60c6      	str	r6, [r0, #12]
 800a190:	b13c      	cbz	r4, 800a1a2 <_Bfree+0x3a>
 800a192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	0800c8d9 	.word	0x0800c8d9
 800a1a8:	0800c9bc 	.word	0x0800c9bc

0800a1ac <__multadd>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	690d      	ldr	r5, [r1, #16]
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f101 0c14 	add.w	ip, r1, #20
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	b299      	uxth	r1, r3
 800a1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1c8:	0c1e      	lsrs	r6, r3, #16
 800a1ca:	0c0b      	lsrs	r3, r1, #16
 800a1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1d0:	b289      	uxth	r1, r1
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1d8:	4285      	cmp	r5, r0
 800a1da:	f84c 1b04 	str.w	r1, [ip], #4
 800a1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1e2:	dcec      	bgt.n	800a1be <__multadd+0x12>
 800a1e4:	b30e      	cbz	r6, 800a22a <__multadd+0x7e>
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dc19      	bgt.n	800a220 <__multadd+0x74>
 800a1ec:	6861      	ldr	r1, [r4, #4]
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	f7ff ff79 	bl	800a0e8 <_Balloc>
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__multadd+0x5a>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <__multadd+0x84>)
 800a1fe:	480d      	ldr	r0, [pc, #52]	; (800a234 <__multadd+0x88>)
 800a200:	21b5      	movs	r1, #181	; 0xb5
 800a202:	f000 fe17 	bl	800ae34 <__assert_func>
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	f104 010c 	add.w	r1, r4, #12
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	300c      	adds	r0, #12
 800a212:	f7ff ff4f 	bl	800a0b4 <memcpy>
 800a216:	4621      	mov	r1, r4
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ffa5 	bl	800a168 <_Bfree>
 800a21e:	4644      	mov	r4, r8
 800a220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a224:	3501      	adds	r5, #1
 800a226:	615e      	str	r6, [r3, #20]
 800a228:	6125      	str	r5, [r4, #16]
 800a22a:	4620      	mov	r0, r4
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	0800c94b 	.word	0x0800c94b
 800a234:	0800c9bc 	.word	0x0800c9bc

0800a238 <__hi0bits>:
 800a238:	0c03      	lsrs	r3, r0, #16
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	b9d3      	cbnz	r3, 800a274 <__hi0bits+0x3c>
 800a23e:	0400      	lsls	r0, r0, #16
 800a240:	2310      	movs	r3, #16
 800a242:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a246:	bf04      	itt	eq
 800a248:	0200      	lsleq	r0, r0, #8
 800a24a:	3308      	addeq	r3, #8
 800a24c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a250:	bf04      	itt	eq
 800a252:	0100      	lsleq	r0, r0, #4
 800a254:	3304      	addeq	r3, #4
 800a256:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a25a:	bf04      	itt	eq
 800a25c:	0080      	lsleq	r0, r0, #2
 800a25e:	3302      	addeq	r3, #2
 800a260:	2800      	cmp	r0, #0
 800a262:	db05      	blt.n	800a270 <__hi0bits+0x38>
 800a264:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a268:	f103 0301 	add.w	r3, r3, #1
 800a26c:	bf08      	it	eq
 800a26e:	2320      	moveq	r3, #32
 800a270:	4618      	mov	r0, r3
 800a272:	4770      	bx	lr
 800a274:	2300      	movs	r3, #0
 800a276:	e7e4      	b.n	800a242 <__hi0bits+0xa>

0800a278 <__lo0bits>:
 800a278:	6803      	ldr	r3, [r0, #0]
 800a27a:	f013 0207 	ands.w	r2, r3, #7
 800a27e:	4601      	mov	r1, r0
 800a280:	d00b      	beq.n	800a29a <__lo0bits+0x22>
 800a282:	07da      	lsls	r2, r3, #31
 800a284:	d423      	bmi.n	800a2ce <__lo0bits+0x56>
 800a286:	0798      	lsls	r0, r3, #30
 800a288:	bf49      	itett	mi
 800a28a:	085b      	lsrmi	r3, r3, #1
 800a28c:	089b      	lsrpl	r3, r3, #2
 800a28e:	2001      	movmi	r0, #1
 800a290:	600b      	strmi	r3, [r1, #0]
 800a292:	bf5c      	itt	pl
 800a294:	600b      	strpl	r3, [r1, #0]
 800a296:	2002      	movpl	r0, #2
 800a298:	4770      	bx	lr
 800a29a:	b298      	uxth	r0, r3
 800a29c:	b9a8      	cbnz	r0, 800a2ca <__lo0bits+0x52>
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	2010      	movs	r0, #16
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	b90a      	cbnz	r2, 800a2aa <__lo0bits+0x32>
 800a2a6:	3008      	adds	r0, #8
 800a2a8:	0a1b      	lsrs	r3, r3, #8
 800a2aa:	071a      	lsls	r2, r3, #28
 800a2ac:	bf04      	itt	eq
 800a2ae:	091b      	lsreq	r3, r3, #4
 800a2b0:	3004      	addeq	r0, #4
 800a2b2:	079a      	lsls	r2, r3, #30
 800a2b4:	bf04      	itt	eq
 800a2b6:	089b      	lsreq	r3, r3, #2
 800a2b8:	3002      	addeq	r0, #2
 800a2ba:	07da      	lsls	r2, r3, #31
 800a2bc:	d403      	bmi.n	800a2c6 <__lo0bits+0x4e>
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	f100 0001 	add.w	r0, r0, #1
 800a2c4:	d005      	beq.n	800a2d2 <__lo0bits+0x5a>
 800a2c6:	600b      	str	r3, [r1, #0]
 800a2c8:	4770      	bx	lr
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	e7e9      	b.n	800a2a2 <__lo0bits+0x2a>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	4770      	bx	lr
 800a2d2:	2020      	movs	r0, #32
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <__i2b>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	460c      	mov	r4, r1
 800a2dc:	2101      	movs	r1, #1
 800a2de:	f7ff ff03 	bl	800a0e8 <_Balloc>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	b928      	cbnz	r0, 800a2f2 <__i2b+0x1a>
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <__i2b+0x24>)
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <__i2b+0x28>)
 800a2ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2ee:	f000 fda1 	bl	800ae34 <__assert_func>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	6144      	str	r4, [r0, #20]
 800a2f6:	6103      	str	r3, [r0, #16]
 800a2f8:	bd10      	pop	{r4, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0800c94b 	.word	0x0800c94b
 800a300:	0800c9bc 	.word	0x0800c9bc

0800a304 <__multiply>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4691      	mov	r9, r2
 800a30a:	690a      	ldr	r2, [r1, #16]
 800a30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a310:	429a      	cmp	r2, r3
 800a312:	bfb8      	it	lt
 800a314:	460b      	movlt	r3, r1
 800a316:	460c      	mov	r4, r1
 800a318:	bfbc      	itt	lt
 800a31a:	464c      	movlt	r4, r9
 800a31c:	4699      	movlt	r9, r3
 800a31e:	6927      	ldr	r7, [r4, #16]
 800a320:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a324:	68a3      	ldr	r3, [r4, #8]
 800a326:	6861      	ldr	r1, [r4, #4]
 800a328:	eb07 060a 	add.w	r6, r7, sl
 800a32c:	42b3      	cmp	r3, r6
 800a32e:	b085      	sub	sp, #20
 800a330:	bfb8      	it	lt
 800a332:	3101      	addlt	r1, #1
 800a334:	f7ff fed8 	bl	800a0e8 <_Balloc>
 800a338:	b930      	cbnz	r0, 800a348 <__multiply+0x44>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4b44      	ldr	r3, [pc, #272]	; (800a450 <__multiply+0x14c>)
 800a33e:	4845      	ldr	r0, [pc, #276]	; (800a454 <__multiply+0x150>)
 800a340:	f240 115d 	movw	r1, #349	; 0x15d
 800a344:	f000 fd76 	bl	800ae34 <__assert_func>
 800a348:	f100 0514 	add.w	r5, r0, #20
 800a34c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a350:	462b      	mov	r3, r5
 800a352:	2200      	movs	r2, #0
 800a354:	4543      	cmp	r3, r8
 800a356:	d321      	bcc.n	800a39c <__multiply+0x98>
 800a358:	f104 0314 	add.w	r3, r4, #20
 800a35c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a360:	f109 0314 	add.w	r3, r9, #20
 800a364:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a368:	9202      	str	r2, [sp, #8]
 800a36a:	1b3a      	subs	r2, r7, r4
 800a36c:	3a15      	subs	r2, #21
 800a36e:	f022 0203 	bic.w	r2, r2, #3
 800a372:	3204      	adds	r2, #4
 800a374:	f104 0115 	add.w	r1, r4, #21
 800a378:	428f      	cmp	r7, r1
 800a37a:	bf38      	it	cc
 800a37c:	2204      	movcc	r2, #4
 800a37e:	9201      	str	r2, [sp, #4]
 800a380:	9a02      	ldr	r2, [sp, #8]
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	429a      	cmp	r2, r3
 800a386:	d80c      	bhi.n	800a3a2 <__multiply+0x9e>
 800a388:	2e00      	cmp	r6, #0
 800a38a:	dd03      	ble.n	800a394 <__multiply+0x90>
 800a38c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a390:	2b00      	cmp	r3, #0
 800a392:	d05a      	beq.n	800a44a <__multiply+0x146>
 800a394:	6106      	str	r6, [r0, #16]
 800a396:	b005      	add	sp, #20
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	f843 2b04 	str.w	r2, [r3], #4
 800a3a0:	e7d8      	b.n	800a354 <__multiply+0x50>
 800a3a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3a6:	f1ba 0f00 	cmp.w	sl, #0
 800a3aa:	d024      	beq.n	800a3f6 <__multiply+0xf2>
 800a3ac:	f104 0e14 	add.w	lr, r4, #20
 800a3b0:	46a9      	mov	r9, r5
 800a3b2:	f04f 0c00 	mov.w	ip, #0
 800a3b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3ba:	f8d9 1000 	ldr.w	r1, [r9]
 800a3be:	fa1f fb82 	uxth.w	fp, r2
 800a3c2:	b289      	uxth	r1, r1
 800a3c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800a3d0:	4461      	add	r1, ip
 800a3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3de:	b289      	uxth	r1, r1
 800a3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3e4:	4577      	cmp	r7, lr
 800a3e6:	f849 1b04 	str.w	r1, [r9], #4
 800a3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ee:	d8e2      	bhi.n	800a3b6 <__multiply+0xb2>
 800a3f0:	9a01      	ldr	r2, [sp, #4]
 800a3f2:	f845 c002 	str.w	ip, [r5, r2]
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	f1b9 0f00 	cmp.w	r9, #0
 800a402:	d020      	beq.n	800a446 <__multiply+0x142>
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	f104 0c14 	add.w	ip, r4, #20
 800a40a:	46ae      	mov	lr, r5
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	f8bc b000 	ldrh.w	fp, [ip]
 800a414:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a418:	fb09 220b 	mla	r2, r9, fp, r2
 800a41c:	4492      	add	sl, r2
 800a41e:	b289      	uxth	r1, r1
 800a420:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a424:	f84e 1b04 	str.w	r1, [lr], #4
 800a428:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a42c:	f8be 1000 	ldrh.w	r1, [lr]
 800a430:	0c12      	lsrs	r2, r2, #16
 800a432:	fb09 1102 	mla	r1, r9, r2, r1
 800a436:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a43a:	4567      	cmp	r7, ip
 800a43c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a440:	d8e6      	bhi.n	800a410 <__multiply+0x10c>
 800a442:	9a01      	ldr	r2, [sp, #4]
 800a444:	50a9      	str	r1, [r5, r2]
 800a446:	3504      	adds	r5, #4
 800a448:	e79a      	b.n	800a380 <__multiply+0x7c>
 800a44a:	3e01      	subs	r6, #1
 800a44c:	e79c      	b.n	800a388 <__multiply+0x84>
 800a44e:	bf00      	nop
 800a450:	0800c94b 	.word	0x0800c94b
 800a454:	0800c9bc 	.word	0x0800c9bc

0800a458 <__pow5mult>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4615      	mov	r5, r2
 800a45e:	f012 0203 	ands.w	r2, r2, #3
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	d007      	beq.n	800a478 <__pow5mult+0x20>
 800a468:	4c25      	ldr	r4, [pc, #148]	; (800a500 <__pow5mult+0xa8>)
 800a46a:	3a01      	subs	r2, #1
 800a46c:	2300      	movs	r3, #0
 800a46e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a472:	f7ff fe9b 	bl	800a1ac <__multadd>
 800a476:	4607      	mov	r7, r0
 800a478:	10ad      	asrs	r5, r5, #2
 800a47a:	d03d      	beq.n	800a4f8 <__pow5mult+0xa0>
 800a47c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a47e:	b97c      	cbnz	r4, 800a4a0 <__pow5mult+0x48>
 800a480:	2010      	movs	r0, #16
 800a482:	f7fd fe97 	bl	80081b4 <malloc>
 800a486:	4602      	mov	r2, r0
 800a488:	6270      	str	r0, [r6, #36]	; 0x24
 800a48a:	b928      	cbnz	r0, 800a498 <__pow5mult+0x40>
 800a48c:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <__pow5mult+0xac>)
 800a48e:	481e      	ldr	r0, [pc, #120]	; (800a508 <__pow5mult+0xb0>)
 800a490:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a494:	f000 fcce 	bl	800ae34 <__assert_func>
 800a498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a49c:	6004      	str	r4, [r0, #0]
 800a49e:	60c4      	str	r4, [r0, #12]
 800a4a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a8:	b94c      	cbnz	r4, 800a4be <__pow5mult+0x66>
 800a4aa:	f240 2171 	movw	r1, #625	; 0x271
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff12 	bl	800a2d8 <__i2b>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	6003      	str	r3, [r0, #0]
 800a4be:	f04f 0900 	mov.w	r9, #0
 800a4c2:	07eb      	lsls	r3, r5, #31
 800a4c4:	d50a      	bpl.n	800a4dc <__pow5mult+0x84>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f7ff ff1a 	bl	800a304 <__multiply>
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff fe47 	bl	800a168 <_Bfree>
 800a4da:	4647      	mov	r7, r8
 800a4dc:	106d      	asrs	r5, r5, #1
 800a4de:	d00b      	beq.n	800a4f8 <__pow5mult+0xa0>
 800a4e0:	6820      	ldr	r0, [r4, #0]
 800a4e2:	b938      	cbnz	r0, 800a4f4 <__pow5mult+0x9c>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff ff0b 	bl	800a304 <__multiply>
 800a4ee:	6020      	str	r0, [r4, #0]
 800a4f0:	f8c0 9000 	str.w	r9, [r0]
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	e7e4      	b.n	800a4c2 <__pow5mult+0x6a>
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fe:	bf00      	nop
 800a500:	0800cb08 	.word	0x0800cb08
 800a504:	0800c8d9 	.word	0x0800c8d9
 800a508:	0800c9bc 	.word	0x0800c9bc

0800a50c <__lshift>:
 800a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	460c      	mov	r4, r1
 800a512:	6849      	ldr	r1, [r1, #4]
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	4607      	mov	r7, r0
 800a51e:	4691      	mov	r9, r2
 800a520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a524:	f108 0601 	add.w	r6, r8, #1
 800a528:	42b3      	cmp	r3, r6
 800a52a:	db0b      	blt.n	800a544 <__lshift+0x38>
 800a52c:	4638      	mov	r0, r7
 800a52e:	f7ff fddb 	bl	800a0e8 <_Balloc>
 800a532:	4605      	mov	r5, r0
 800a534:	b948      	cbnz	r0, 800a54a <__lshift+0x3e>
 800a536:	4602      	mov	r2, r0
 800a538:	4b2a      	ldr	r3, [pc, #168]	; (800a5e4 <__lshift+0xd8>)
 800a53a:	482b      	ldr	r0, [pc, #172]	; (800a5e8 <__lshift+0xdc>)
 800a53c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a540:	f000 fc78 	bl	800ae34 <__assert_func>
 800a544:	3101      	adds	r1, #1
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	e7ee      	b.n	800a528 <__lshift+0x1c>
 800a54a:	2300      	movs	r3, #0
 800a54c:	f100 0114 	add.w	r1, r0, #20
 800a550:	f100 0210 	add.w	r2, r0, #16
 800a554:	4618      	mov	r0, r3
 800a556:	4553      	cmp	r3, sl
 800a558:	db37      	blt.n	800a5ca <__lshift+0xbe>
 800a55a:	6920      	ldr	r0, [r4, #16]
 800a55c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a560:	f104 0314 	add.w	r3, r4, #20
 800a564:	f019 091f 	ands.w	r9, r9, #31
 800a568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a56c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a570:	d02f      	beq.n	800a5d2 <__lshift+0xc6>
 800a572:	f1c9 0e20 	rsb	lr, r9, #32
 800a576:	468a      	mov	sl, r1
 800a578:	f04f 0c00 	mov.w	ip, #0
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	fa02 f209 	lsl.w	r2, r2, r9
 800a582:	ea42 020c 	orr.w	r2, r2, ip
 800a586:	f84a 2b04 	str.w	r2, [sl], #4
 800a58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a58e:	4298      	cmp	r0, r3
 800a590:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a594:	d8f2      	bhi.n	800a57c <__lshift+0x70>
 800a596:	1b03      	subs	r3, r0, r4
 800a598:	3b15      	subs	r3, #21
 800a59a:	f023 0303 	bic.w	r3, r3, #3
 800a59e:	3304      	adds	r3, #4
 800a5a0:	f104 0215 	add.w	r2, r4, #21
 800a5a4:	4290      	cmp	r0, r2
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	f841 c003 	str.w	ip, [r1, r3]
 800a5ae:	f1bc 0f00 	cmp.w	ip, #0
 800a5b2:	d001      	beq.n	800a5b8 <__lshift+0xac>
 800a5b4:	f108 0602 	add.w	r6, r8, #2
 800a5b8:	3e01      	subs	r6, #1
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	612e      	str	r6, [r5, #16]
 800a5be:	4621      	mov	r1, r4
 800a5c0:	f7ff fdd2 	bl	800a168 <_Bfree>
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	e7c1      	b.n	800a556 <__lshift+0x4a>
 800a5d2:	3904      	subs	r1, #4
 800a5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5dc:	4298      	cmp	r0, r3
 800a5de:	d8f9      	bhi.n	800a5d4 <__lshift+0xc8>
 800a5e0:	e7ea      	b.n	800a5b8 <__lshift+0xac>
 800a5e2:	bf00      	nop
 800a5e4:	0800c94b 	.word	0x0800c94b
 800a5e8:	0800c9bc 	.word	0x0800c9bc

0800a5ec <__mcmp>:
 800a5ec:	b530      	push	{r4, r5, lr}
 800a5ee:	6902      	ldr	r2, [r0, #16]
 800a5f0:	690c      	ldr	r4, [r1, #16]
 800a5f2:	1b12      	subs	r2, r2, r4
 800a5f4:	d10e      	bne.n	800a614 <__mcmp+0x28>
 800a5f6:	f100 0314 	add.w	r3, r0, #20
 800a5fa:	3114      	adds	r1, #20
 800a5fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a60c:	42a5      	cmp	r5, r4
 800a60e:	d003      	beq.n	800a618 <__mcmp+0x2c>
 800a610:	d305      	bcc.n	800a61e <__mcmp+0x32>
 800a612:	2201      	movs	r2, #1
 800a614:	4610      	mov	r0, r2
 800a616:	bd30      	pop	{r4, r5, pc}
 800a618:	4283      	cmp	r3, r0
 800a61a:	d3f3      	bcc.n	800a604 <__mcmp+0x18>
 800a61c:	e7fa      	b.n	800a614 <__mcmp+0x28>
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a622:	e7f7      	b.n	800a614 <__mcmp+0x28>

0800a624 <__mdiff>:
 800a624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	4606      	mov	r6, r0
 800a62c:	4611      	mov	r1, r2
 800a62e:	4620      	mov	r0, r4
 800a630:	4690      	mov	r8, r2
 800a632:	f7ff ffdb 	bl	800a5ec <__mcmp>
 800a636:	1e05      	subs	r5, r0, #0
 800a638:	d110      	bne.n	800a65c <__mdiff+0x38>
 800a63a:	4629      	mov	r1, r5
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7ff fd53 	bl	800a0e8 <_Balloc>
 800a642:	b930      	cbnz	r0, 800a652 <__mdiff+0x2e>
 800a644:	4b3a      	ldr	r3, [pc, #232]	; (800a730 <__mdiff+0x10c>)
 800a646:	4602      	mov	r2, r0
 800a648:	f240 2132 	movw	r1, #562	; 0x232
 800a64c:	4839      	ldr	r0, [pc, #228]	; (800a734 <__mdiff+0x110>)
 800a64e:	f000 fbf1 	bl	800ae34 <__assert_func>
 800a652:	2301      	movs	r3, #1
 800a654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	bfa4      	itt	ge
 800a65e:	4643      	movge	r3, r8
 800a660:	46a0      	movge	r8, r4
 800a662:	4630      	mov	r0, r6
 800a664:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a668:	bfa6      	itte	ge
 800a66a:	461c      	movge	r4, r3
 800a66c:	2500      	movge	r5, #0
 800a66e:	2501      	movlt	r5, #1
 800a670:	f7ff fd3a 	bl	800a0e8 <_Balloc>
 800a674:	b920      	cbnz	r0, 800a680 <__mdiff+0x5c>
 800a676:	4b2e      	ldr	r3, [pc, #184]	; (800a730 <__mdiff+0x10c>)
 800a678:	4602      	mov	r2, r0
 800a67a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a67e:	e7e5      	b.n	800a64c <__mdiff+0x28>
 800a680:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a684:	6926      	ldr	r6, [r4, #16]
 800a686:	60c5      	str	r5, [r0, #12]
 800a688:	f104 0914 	add.w	r9, r4, #20
 800a68c:	f108 0514 	add.w	r5, r8, #20
 800a690:	f100 0e14 	add.w	lr, r0, #20
 800a694:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a698:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a69c:	f108 0210 	add.w	r2, r8, #16
 800a6a0:	46f2      	mov	sl, lr
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6ac:	fa1f f883 	uxth.w	r8, r3
 800a6b0:	fa11 f18b 	uxtah	r1, r1, fp
 800a6b4:	0c1b      	lsrs	r3, r3, #16
 800a6b6:	eba1 0808 	sub.w	r8, r1, r8
 800a6ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6c2:	fa1f f888 	uxth.w	r8, r8
 800a6c6:	1419      	asrs	r1, r3, #16
 800a6c8:	454e      	cmp	r6, r9
 800a6ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6ce:	f84a 3b04 	str.w	r3, [sl], #4
 800a6d2:	d8e7      	bhi.n	800a6a4 <__mdiff+0x80>
 800a6d4:	1b33      	subs	r3, r6, r4
 800a6d6:	3b15      	subs	r3, #21
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	3304      	adds	r3, #4
 800a6de:	3415      	adds	r4, #21
 800a6e0:	42a6      	cmp	r6, r4
 800a6e2:	bf38      	it	cc
 800a6e4:	2304      	movcc	r3, #4
 800a6e6:	441d      	add	r5, r3
 800a6e8:	4473      	add	r3, lr
 800a6ea:	469e      	mov	lr, r3
 800a6ec:	462e      	mov	r6, r5
 800a6ee:	4566      	cmp	r6, ip
 800a6f0:	d30e      	bcc.n	800a710 <__mdiff+0xec>
 800a6f2:	f10c 0203 	add.w	r2, ip, #3
 800a6f6:	1b52      	subs	r2, r2, r5
 800a6f8:	f022 0203 	bic.w	r2, r2, #3
 800a6fc:	3d03      	subs	r5, #3
 800a6fe:	45ac      	cmp	ip, r5
 800a700:	bf38      	it	cc
 800a702:	2200      	movcc	r2, #0
 800a704:	441a      	add	r2, r3
 800a706:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a70a:	b17b      	cbz	r3, 800a72c <__mdiff+0x108>
 800a70c:	6107      	str	r7, [r0, #16]
 800a70e:	e7a3      	b.n	800a658 <__mdiff+0x34>
 800a710:	f856 8b04 	ldr.w	r8, [r6], #4
 800a714:	fa11 f288 	uxtah	r2, r1, r8
 800a718:	1414      	asrs	r4, r2, #16
 800a71a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a71e:	b292      	uxth	r2, r2
 800a720:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a724:	f84e 2b04 	str.w	r2, [lr], #4
 800a728:	1421      	asrs	r1, r4, #16
 800a72a:	e7e0      	b.n	800a6ee <__mdiff+0xca>
 800a72c:	3f01      	subs	r7, #1
 800a72e:	e7ea      	b.n	800a706 <__mdiff+0xe2>
 800a730:	0800c94b 	.word	0x0800c94b
 800a734:	0800c9bc 	.word	0x0800c9bc

0800a738 <__d2b>:
 800a738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a73c:	4689      	mov	r9, r1
 800a73e:	2101      	movs	r1, #1
 800a740:	ec57 6b10 	vmov	r6, r7, d0
 800a744:	4690      	mov	r8, r2
 800a746:	f7ff fccf 	bl	800a0e8 <_Balloc>
 800a74a:	4604      	mov	r4, r0
 800a74c:	b930      	cbnz	r0, 800a75c <__d2b+0x24>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b25      	ldr	r3, [pc, #148]	; (800a7e8 <__d2b+0xb0>)
 800a752:	4826      	ldr	r0, [pc, #152]	; (800a7ec <__d2b+0xb4>)
 800a754:	f240 310a 	movw	r1, #778	; 0x30a
 800a758:	f000 fb6c 	bl	800ae34 <__assert_func>
 800a75c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a764:	bb35      	cbnz	r5, 800a7b4 <__d2b+0x7c>
 800a766:	2e00      	cmp	r6, #0
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	d028      	beq.n	800a7be <__d2b+0x86>
 800a76c:	4668      	mov	r0, sp
 800a76e:	9600      	str	r6, [sp, #0]
 800a770:	f7ff fd82 	bl	800a278 <__lo0bits>
 800a774:	9900      	ldr	r1, [sp, #0]
 800a776:	b300      	cbz	r0, 800a7ba <__d2b+0x82>
 800a778:	9a01      	ldr	r2, [sp, #4]
 800a77a:	f1c0 0320 	rsb	r3, r0, #32
 800a77e:	fa02 f303 	lsl.w	r3, r2, r3
 800a782:	430b      	orrs	r3, r1
 800a784:	40c2      	lsrs	r2, r0
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	9201      	str	r2, [sp, #4]
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	61a3      	str	r3, [r4, #24]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bf14      	ite	ne
 800a792:	2202      	movne	r2, #2
 800a794:	2201      	moveq	r2, #1
 800a796:	6122      	str	r2, [r4, #16]
 800a798:	b1d5      	cbz	r5, 800a7d0 <__d2b+0x98>
 800a79a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a79e:	4405      	add	r5, r0
 800a7a0:	f8c9 5000 	str.w	r5, [r9]
 800a7a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7a8:	f8c8 0000 	str.w	r0, [r8]
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	b003      	add	sp, #12
 800a7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7b8:	e7d5      	b.n	800a766 <__d2b+0x2e>
 800a7ba:	6161      	str	r1, [r4, #20]
 800a7bc:	e7e5      	b.n	800a78a <__d2b+0x52>
 800a7be:	a801      	add	r0, sp, #4
 800a7c0:	f7ff fd5a 	bl	800a278 <__lo0bits>
 800a7c4:	9b01      	ldr	r3, [sp, #4]
 800a7c6:	6163      	str	r3, [r4, #20]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	6122      	str	r2, [r4, #16]
 800a7cc:	3020      	adds	r0, #32
 800a7ce:	e7e3      	b.n	800a798 <__d2b+0x60>
 800a7d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7d8:	f8c9 0000 	str.w	r0, [r9]
 800a7dc:	6918      	ldr	r0, [r3, #16]
 800a7de:	f7ff fd2b 	bl	800a238 <__hi0bits>
 800a7e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7e6:	e7df      	b.n	800a7a8 <__d2b+0x70>
 800a7e8:	0800c94b 	.word	0x0800c94b
 800a7ec:	0800c9bc 	.word	0x0800c9bc

0800a7f0 <_calloc_r>:
 800a7f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7f2:	fba1 2402 	umull	r2, r4, r1, r2
 800a7f6:	b94c      	cbnz	r4, 800a80c <_calloc_r+0x1c>
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	9201      	str	r2, [sp, #4]
 800a7fc:	f7fd fd5e 	bl	80082bc <_malloc_r>
 800a800:	9a01      	ldr	r2, [sp, #4]
 800a802:	4605      	mov	r5, r0
 800a804:	b930      	cbnz	r0, 800a814 <_calloc_r+0x24>
 800a806:	4628      	mov	r0, r5
 800a808:	b003      	add	sp, #12
 800a80a:	bd30      	pop	{r4, r5, pc}
 800a80c:	220c      	movs	r2, #12
 800a80e:	6002      	str	r2, [r0, #0]
 800a810:	2500      	movs	r5, #0
 800a812:	e7f8      	b.n	800a806 <_calloc_r+0x16>
 800a814:	4621      	mov	r1, r4
 800a816:	f7fd fcdd 	bl	80081d4 <memset>
 800a81a:	e7f4      	b.n	800a806 <_calloc_r+0x16>

0800a81c <__ssputs_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	688e      	ldr	r6, [r1, #8]
 800a822:	429e      	cmp	r6, r3
 800a824:	4682      	mov	sl, r0
 800a826:	460c      	mov	r4, r1
 800a828:	4690      	mov	r8, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	d838      	bhi.n	800a8a0 <__ssputs_r+0x84>
 800a82e:	898a      	ldrh	r2, [r1, #12]
 800a830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a834:	d032      	beq.n	800a89c <__ssputs_r+0x80>
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6909      	ldr	r1, [r1, #16]
 800a83a:	eba5 0901 	sub.w	r9, r5, r1
 800a83e:	6965      	ldr	r5, [r4, #20]
 800a840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a848:	3301      	adds	r3, #1
 800a84a:	444b      	add	r3, r9
 800a84c:	106d      	asrs	r5, r5, #1
 800a84e:	429d      	cmp	r5, r3
 800a850:	bf38      	it	cc
 800a852:	461d      	movcc	r5, r3
 800a854:	0553      	lsls	r3, r2, #21
 800a856:	d531      	bpl.n	800a8bc <__ssputs_r+0xa0>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7fd fd2f 	bl	80082bc <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b950      	cbnz	r0, 800a878 <__ssputs_r+0x5c>
 800a862:	230c      	movs	r3, #12
 800a864:	f8ca 3000 	str.w	r3, [sl]
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	6921      	ldr	r1, [r4, #16]
 800a87a:	464a      	mov	r2, r9
 800a87c:	f7ff fc1a 	bl	800a0b4 <memcpy>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	6126      	str	r6, [r4, #16]
 800a88e:	6165      	str	r5, [r4, #20]
 800a890:	444e      	add	r6, r9
 800a892:	eba5 0509 	sub.w	r5, r5, r9
 800a896:	6026      	str	r6, [r4, #0]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	463e      	mov	r6, r7
 800a89c:	42be      	cmp	r6, r7
 800a89e:	d900      	bls.n	800a8a2 <__ssputs_r+0x86>
 800a8a0:	463e      	mov	r6, r7
 800a8a2:	6820      	ldr	r0, [r4, #0]
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	f000 fb4a 	bl	800af40 <memmove>
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	1b9b      	subs	r3, r3, r6
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	4433      	add	r3, r6
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7db      	b.n	800a874 <__ssputs_r+0x58>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 fb59 	bl	800af74 <_realloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d1e1      	bne.n	800a88c <__ssputs_r+0x70>
 800a8c8:	6921      	ldr	r1, [r4, #16]
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	f7fd fc8a 	bl	80081e4 <_free_r>
 800a8d0:	e7c7      	b.n	800a862 <__ssputs_r+0x46>
	...

0800a8d4 <_svfiprintf_r>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4698      	mov	r8, r3
 800a8da:	898b      	ldrh	r3, [r1, #12]
 800a8dc:	061b      	lsls	r3, r3, #24
 800a8de:	b09d      	sub	sp, #116	; 0x74
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	d50e      	bpl.n	800a906 <_svfiprintf_r+0x32>
 800a8e8:	690b      	ldr	r3, [r1, #16]
 800a8ea:	b963      	cbnz	r3, 800a906 <_svfiprintf_r+0x32>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	f7fd fce5 	bl	80082bc <_malloc_r>
 800a8f2:	6028      	str	r0, [r5, #0]
 800a8f4:	6128      	str	r0, [r5, #16]
 800a8f6:	b920      	cbnz	r0, 800a902 <_svfiprintf_r+0x2e>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a900:	e0d1      	b.n	800aaa6 <_svfiprintf_r+0x1d2>
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	616b      	str	r3, [r5, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	2320      	movs	r3, #32
 800a90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a910:	f8cd 800c 	str.w	r8, [sp, #12]
 800a914:	2330      	movs	r3, #48	; 0x30
 800a916:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aac0 <_svfiprintf_r+0x1ec>
 800a91a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91e:	f04f 0901 	mov.w	r9, #1
 800a922:	4623      	mov	r3, r4
 800a924:	469a      	mov	sl, r3
 800a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92a:	b10a      	cbz	r2, 800a930 <_svfiprintf_r+0x5c>
 800a92c:	2a25      	cmp	r2, #37	; 0x25
 800a92e:	d1f9      	bne.n	800a924 <_svfiprintf_r+0x50>
 800a930:	ebba 0b04 	subs.w	fp, sl, r4
 800a934:	d00b      	beq.n	800a94e <_svfiprintf_r+0x7a>
 800a936:	465b      	mov	r3, fp
 800a938:	4622      	mov	r2, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ff6d 	bl	800a81c <__ssputs_r>
 800a942:	3001      	adds	r0, #1
 800a944:	f000 80aa 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94a:	445a      	add	r2, fp
 800a94c:	9209      	str	r2, [sp, #36]	; 0x24
 800a94e:	f89a 3000 	ldrb.w	r3, [sl]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 80a2 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a958:	2300      	movs	r3, #0
 800a95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a962:	f10a 0a01 	add.w	sl, sl, #1
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96e:	931a      	str	r3, [sp, #104]	; 0x68
 800a970:	4654      	mov	r4, sl
 800a972:	2205      	movs	r2, #5
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4851      	ldr	r0, [pc, #324]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800a97a:	f7f5 fc31 	bl	80001e0 <memchr>
 800a97e:	9a04      	ldr	r2, [sp, #16]
 800a980:	b9d8      	cbnz	r0, 800a9ba <_svfiprintf_r+0xe6>
 800a982:	06d0      	lsls	r0, r2, #27
 800a984:	bf44      	itt	mi
 800a986:	2320      	movmi	r3, #32
 800a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98c:	0711      	lsls	r1, r2, #28
 800a98e:	bf44      	itt	mi
 800a990:	232b      	movmi	r3, #43	; 0x2b
 800a992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a996:	f89a 3000 	ldrb.w	r3, [sl]
 800a99a:	2b2a      	cmp	r3, #42	; 0x2a
 800a99c:	d015      	beq.n	800a9ca <_svfiprintf_r+0xf6>
 800a99e:	9a07      	ldr	r2, [sp, #28]
 800a9a0:	4654      	mov	r4, sl
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f04f 0c0a 	mov.w	ip, #10
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	2b09      	cmp	r3, #9
 800a9b2:	d94e      	bls.n	800aa52 <_svfiprintf_r+0x17e>
 800a9b4:	b1b0      	cbz	r0, 800a9e4 <_svfiprintf_r+0x110>
 800a9b6:	9207      	str	r2, [sp, #28]
 800a9b8:	e014      	b.n	800a9e4 <_svfiprintf_r+0x110>
 800a9ba:	eba0 0308 	sub.w	r3, r0, r8
 800a9be:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	46a2      	mov	sl, r4
 800a9c8:	e7d2      	b.n	800a970 <_svfiprintf_r+0x9c>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9103      	str	r1, [sp, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfbb      	ittet	lt
 800a9d6:	425b      	neglt	r3, r3
 800a9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9dc:	9307      	strge	r3, [sp, #28]
 800a9de:	9307      	strlt	r3, [sp, #28]
 800a9e0:	bfb8      	it	lt
 800a9e2:	9204      	strlt	r2, [sp, #16]
 800a9e4:	7823      	ldrb	r3, [r4, #0]
 800a9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e8:	d10c      	bne.n	800aa04 <_svfiprintf_r+0x130>
 800a9ea:	7863      	ldrb	r3, [r4, #1]
 800a9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ee:	d135      	bne.n	800aa5c <_svfiprintf_r+0x188>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	1d1a      	adds	r2, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9203      	str	r2, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfb8      	it	lt
 800a9fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa00:	3402      	adds	r4, #2
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad0 <_svfiprintf_r+0x1fc>
 800aa08:	7821      	ldrb	r1, [r4, #0]
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	4650      	mov	r0, sl
 800aa0e:	f7f5 fbe7 	bl	80001e0 <memchr>
 800aa12:	b140      	cbz	r0, 800aa26 <_svfiprintf_r+0x152>
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	eba0 000a 	sub.w	r0, r0, sl
 800aa1a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	4303      	orrs	r3, r0
 800aa22:	3401      	adds	r4, #1
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4826      	ldr	r0, [pc, #152]	; (800aac4 <_svfiprintf_r+0x1f0>)
 800aa2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa30:	2206      	movs	r2, #6
 800aa32:	f7f5 fbd5 	bl	80001e0 <memchr>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d038      	beq.n	800aaac <_svfiprintf_r+0x1d8>
 800aa3a:	4b23      	ldr	r3, [pc, #140]	; (800aac8 <_svfiprintf_r+0x1f4>)
 800aa3c:	bb1b      	cbnz	r3, 800aa86 <_svfiprintf_r+0x1b2>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	3308      	adds	r3, #8
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	4433      	add	r3, r6
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e767      	b.n	800a922 <_svfiprintf_r+0x4e>
 800aa52:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa56:	460c      	mov	r4, r1
 800aa58:	2001      	movs	r0, #1
 800aa5a:	e7a5      	b.n	800a9a8 <_svfiprintf_r+0xd4>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	3401      	adds	r4, #1
 800aa60:	9305      	str	r3, [sp, #20]
 800aa62:	4619      	mov	r1, r3
 800aa64:	f04f 0c0a 	mov.w	ip, #10
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6e:	3a30      	subs	r2, #48	; 0x30
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d903      	bls.n	800aa7c <_svfiprintf_r+0x1a8>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c5      	beq.n	800aa04 <_svfiprintf_r+0x130>
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	e7c3      	b.n	800aa04 <_svfiprintf_r+0x130>
 800aa7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa80:	4604      	mov	r4, r0
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7f0      	b.n	800aa68 <_svfiprintf_r+0x194>
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aa8e:	a904      	add	r1, sp, #16
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7fd fd27 	bl	80084e4 <_printf_float>
 800aa96:	1c42      	adds	r2, r0, #1
 800aa98:	4606      	mov	r6, r0
 800aa9a:	d1d6      	bne.n	800aa4a <_svfiprintf_r+0x176>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af2c 	bmi.w	800a8fc <_svfiprintf_r+0x28>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	b01d      	add	sp, #116	; 0x74
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4b06      	ldr	r3, [pc, #24]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aab4:	a904      	add	r1, sp, #16
 800aab6:	4638      	mov	r0, r7
 800aab8:	f7fd ffb8 	bl	8008a2c <_printf_i>
 800aabc:	e7eb      	b.n	800aa96 <_svfiprintf_r+0x1c2>
 800aabe:	bf00      	nop
 800aac0:	0800cb14 	.word	0x0800cb14
 800aac4:	0800cb1e 	.word	0x0800cb1e
 800aac8:	080084e5 	.word	0x080084e5
 800aacc:	0800a81d 	.word	0x0800a81d
 800aad0:	0800cb1a 	.word	0x0800cb1a

0800aad4 <__sfputc_r>:
 800aad4:	6893      	ldr	r3, [r2, #8]
 800aad6:	3b01      	subs	r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	b410      	push	{r4}
 800aadc:	6093      	str	r3, [r2, #8]
 800aade:	da08      	bge.n	800aaf2 <__sfputc_r+0x1e>
 800aae0:	6994      	ldr	r4, [r2, #24]
 800aae2:	42a3      	cmp	r3, r4
 800aae4:	db01      	blt.n	800aaea <__sfputc_r+0x16>
 800aae6:	290a      	cmp	r1, #10
 800aae8:	d103      	bne.n	800aaf2 <__sfputc_r+0x1e>
 800aaea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaee:	f7fe b981 	b.w	8008df4 <__swbuf_r>
 800aaf2:	6813      	ldr	r3, [r2, #0]
 800aaf4:	1c58      	adds	r0, r3, #1
 800aaf6:	6010      	str	r0, [r2, #0]
 800aaf8:	7019      	strb	r1, [r3, #0]
 800aafa:	4608      	mov	r0, r1
 800aafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <__sfputs_r>:
 800ab02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	4614      	mov	r4, r2
 800ab0a:	18d5      	adds	r5, r2, r3
 800ab0c:	42ac      	cmp	r4, r5
 800ab0e:	d101      	bne.n	800ab14 <__sfputs_r+0x12>
 800ab10:	2000      	movs	r0, #0
 800ab12:	e007      	b.n	800ab24 <__sfputs_r+0x22>
 800ab14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab18:	463a      	mov	r2, r7
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f7ff ffda 	bl	800aad4 <__sfputc_r>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d1f3      	bne.n	800ab0c <__sfputs_r+0xa>
 800ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab28 <_vfiprintf_r>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	b09d      	sub	sp, #116	; 0x74
 800ab30:	4614      	mov	r4, r2
 800ab32:	4698      	mov	r8, r3
 800ab34:	4606      	mov	r6, r0
 800ab36:	b118      	cbz	r0, 800ab40 <_vfiprintf_r+0x18>
 800ab38:	6983      	ldr	r3, [r0, #24]
 800ab3a:	b90b      	cbnz	r3, 800ab40 <_vfiprintf_r+0x18>
 800ab3c:	f7ff f9b0 	bl	8009ea0 <__sinit>
 800ab40:	4b89      	ldr	r3, [pc, #548]	; (800ad68 <_vfiprintf_r+0x240>)
 800ab42:	429d      	cmp	r5, r3
 800ab44:	d11b      	bne.n	800ab7e <_vfiprintf_r+0x56>
 800ab46:	6875      	ldr	r5, [r6, #4]
 800ab48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x32>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x32>
 800ab54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab56:	f7ff fa46 	bl	8009fe6 <__retarget_lock_acquire_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	071b      	lsls	r3, r3, #28
 800ab5e:	d501      	bpl.n	800ab64 <_vfiprintf_r+0x3c>
 800ab60:	692b      	ldr	r3, [r5, #16]
 800ab62:	b9eb      	cbnz	r3, 800aba0 <_vfiprintf_r+0x78>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7fe f996 	bl	8008e98 <__swsetup_r>
 800ab6c:	b1c0      	cbz	r0, 800aba0 <_vfiprintf_r+0x78>
 800ab6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab70:	07dc      	lsls	r4, r3, #31
 800ab72:	d50e      	bpl.n	800ab92 <_vfiprintf_r+0x6a>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab78:	b01d      	add	sp, #116	; 0x74
 800ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	4b7b      	ldr	r3, [pc, #492]	; (800ad6c <_vfiprintf_r+0x244>)
 800ab80:	429d      	cmp	r5, r3
 800ab82:	d101      	bne.n	800ab88 <_vfiprintf_r+0x60>
 800ab84:	68b5      	ldr	r5, [r6, #8]
 800ab86:	e7df      	b.n	800ab48 <_vfiprintf_r+0x20>
 800ab88:	4b79      	ldr	r3, [pc, #484]	; (800ad70 <_vfiprintf_r+0x248>)
 800ab8a:	429d      	cmp	r5, r3
 800ab8c:	bf08      	it	eq
 800ab8e:	68f5      	ldreq	r5, [r6, #12]
 800ab90:	e7da      	b.n	800ab48 <_vfiprintf_r+0x20>
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	0598      	lsls	r0, r3, #22
 800ab96:	d4ed      	bmi.n	800ab74 <_vfiprintf_r+0x4c>
 800ab98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab9a:	f7ff fa25 	bl	8009fe8 <__retarget_lock_release_recursive>
 800ab9e:	e7e9      	b.n	800ab74 <_vfiprintf_r+0x4c>
 800aba0:	2300      	movs	r3, #0
 800aba2:	9309      	str	r3, [sp, #36]	; 0x24
 800aba4:	2320      	movs	r3, #32
 800aba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800abae:	2330      	movs	r3, #48	; 0x30
 800abb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad74 <_vfiprintf_r+0x24c>
 800abb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abb8:	f04f 0901 	mov.w	r9, #1
 800abbc:	4623      	mov	r3, r4
 800abbe:	469a      	mov	sl, r3
 800abc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abc4:	b10a      	cbz	r2, 800abca <_vfiprintf_r+0xa2>
 800abc6:	2a25      	cmp	r2, #37	; 0x25
 800abc8:	d1f9      	bne.n	800abbe <_vfiprintf_r+0x96>
 800abca:	ebba 0b04 	subs.w	fp, sl, r4
 800abce:	d00b      	beq.n	800abe8 <_vfiprintf_r+0xc0>
 800abd0:	465b      	mov	r3, fp
 800abd2:	4622      	mov	r2, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f7ff ff93 	bl	800ab02 <__sfputs_r>
 800abdc:	3001      	adds	r0, #1
 800abde:	f000 80aa 	beq.w	800ad36 <_vfiprintf_r+0x20e>
 800abe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abe4:	445a      	add	r2, fp
 800abe6:	9209      	str	r2, [sp, #36]	; 0x24
 800abe8:	f89a 3000 	ldrb.w	r3, [sl]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 80a2 	beq.w	800ad36 <_vfiprintf_r+0x20e>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abfc:	f10a 0a01 	add.w	sl, sl, #1
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9307      	str	r3, [sp, #28]
 800ac04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac08:	931a      	str	r3, [sp, #104]	; 0x68
 800ac0a:	4654      	mov	r4, sl
 800ac0c:	2205      	movs	r2, #5
 800ac0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac12:	4858      	ldr	r0, [pc, #352]	; (800ad74 <_vfiprintf_r+0x24c>)
 800ac14:	f7f5 fae4 	bl	80001e0 <memchr>
 800ac18:	9a04      	ldr	r2, [sp, #16]
 800ac1a:	b9d8      	cbnz	r0, 800ac54 <_vfiprintf_r+0x12c>
 800ac1c:	06d1      	lsls	r1, r2, #27
 800ac1e:	bf44      	itt	mi
 800ac20:	2320      	movmi	r3, #32
 800ac22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac26:	0713      	lsls	r3, r2, #28
 800ac28:	bf44      	itt	mi
 800ac2a:	232b      	movmi	r3, #43	; 0x2b
 800ac2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac30:	f89a 3000 	ldrb.w	r3, [sl]
 800ac34:	2b2a      	cmp	r3, #42	; 0x2a
 800ac36:	d015      	beq.n	800ac64 <_vfiprintf_r+0x13c>
 800ac38:	9a07      	ldr	r2, [sp, #28]
 800ac3a:	4654      	mov	r4, sl
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f04f 0c0a 	mov.w	ip, #10
 800ac42:	4621      	mov	r1, r4
 800ac44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac48:	3b30      	subs	r3, #48	; 0x30
 800ac4a:	2b09      	cmp	r3, #9
 800ac4c:	d94e      	bls.n	800acec <_vfiprintf_r+0x1c4>
 800ac4e:	b1b0      	cbz	r0, 800ac7e <_vfiprintf_r+0x156>
 800ac50:	9207      	str	r2, [sp, #28]
 800ac52:	e014      	b.n	800ac7e <_vfiprintf_r+0x156>
 800ac54:	eba0 0308 	sub.w	r3, r0, r8
 800ac58:	fa09 f303 	lsl.w	r3, r9, r3
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	46a2      	mov	sl, r4
 800ac62:	e7d2      	b.n	800ac0a <_vfiprintf_r+0xe2>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	1d19      	adds	r1, r3, #4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	9103      	str	r1, [sp, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bfbb      	ittet	lt
 800ac70:	425b      	neglt	r3, r3
 800ac72:	f042 0202 	orrlt.w	r2, r2, #2
 800ac76:	9307      	strge	r3, [sp, #28]
 800ac78:	9307      	strlt	r3, [sp, #28]
 800ac7a:	bfb8      	it	lt
 800ac7c:	9204      	strlt	r2, [sp, #16]
 800ac7e:	7823      	ldrb	r3, [r4, #0]
 800ac80:	2b2e      	cmp	r3, #46	; 0x2e
 800ac82:	d10c      	bne.n	800ac9e <_vfiprintf_r+0x176>
 800ac84:	7863      	ldrb	r3, [r4, #1]
 800ac86:	2b2a      	cmp	r3, #42	; 0x2a
 800ac88:	d135      	bne.n	800acf6 <_vfiprintf_r+0x1ce>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	1d1a      	adds	r2, r3, #4
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	9203      	str	r2, [sp, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bfb8      	it	lt
 800ac96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac9a:	3402      	adds	r4, #2
 800ac9c:	9305      	str	r3, [sp, #20]
 800ac9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad84 <_vfiprintf_r+0x25c>
 800aca2:	7821      	ldrb	r1, [r4, #0]
 800aca4:	2203      	movs	r2, #3
 800aca6:	4650      	mov	r0, sl
 800aca8:	f7f5 fa9a 	bl	80001e0 <memchr>
 800acac:	b140      	cbz	r0, 800acc0 <_vfiprintf_r+0x198>
 800acae:	2340      	movs	r3, #64	; 0x40
 800acb0:	eba0 000a 	sub.w	r0, r0, sl
 800acb4:	fa03 f000 	lsl.w	r0, r3, r0
 800acb8:	9b04      	ldr	r3, [sp, #16]
 800acba:	4303      	orrs	r3, r0
 800acbc:	3401      	adds	r4, #1
 800acbe:	9304      	str	r3, [sp, #16]
 800acc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc4:	482c      	ldr	r0, [pc, #176]	; (800ad78 <_vfiprintf_r+0x250>)
 800acc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acca:	2206      	movs	r2, #6
 800accc:	f7f5 fa88 	bl	80001e0 <memchr>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d03f      	beq.n	800ad54 <_vfiprintf_r+0x22c>
 800acd4:	4b29      	ldr	r3, [pc, #164]	; (800ad7c <_vfiprintf_r+0x254>)
 800acd6:	bb1b      	cbnz	r3, 800ad20 <_vfiprintf_r+0x1f8>
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	3307      	adds	r3, #7
 800acdc:	f023 0307 	bic.w	r3, r3, #7
 800ace0:	3308      	adds	r3, #8
 800ace2:	9303      	str	r3, [sp, #12]
 800ace4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ace6:	443b      	add	r3, r7
 800ace8:	9309      	str	r3, [sp, #36]	; 0x24
 800acea:	e767      	b.n	800abbc <_vfiprintf_r+0x94>
 800acec:	fb0c 3202 	mla	r2, ip, r2, r3
 800acf0:	460c      	mov	r4, r1
 800acf2:	2001      	movs	r0, #1
 800acf4:	e7a5      	b.n	800ac42 <_vfiprintf_r+0x11a>
 800acf6:	2300      	movs	r3, #0
 800acf8:	3401      	adds	r4, #1
 800acfa:	9305      	str	r3, [sp, #20]
 800acfc:	4619      	mov	r1, r3
 800acfe:	f04f 0c0a 	mov.w	ip, #10
 800ad02:	4620      	mov	r0, r4
 800ad04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad08:	3a30      	subs	r2, #48	; 0x30
 800ad0a:	2a09      	cmp	r2, #9
 800ad0c:	d903      	bls.n	800ad16 <_vfiprintf_r+0x1ee>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0c5      	beq.n	800ac9e <_vfiprintf_r+0x176>
 800ad12:	9105      	str	r1, [sp, #20]
 800ad14:	e7c3      	b.n	800ac9e <_vfiprintf_r+0x176>
 800ad16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e7f0      	b.n	800ad02 <_vfiprintf_r+0x1da>
 800ad20:	ab03      	add	r3, sp, #12
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	462a      	mov	r2, r5
 800ad26:	4b16      	ldr	r3, [pc, #88]	; (800ad80 <_vfiprintf_r+0x258>)
 800ad28:	a904      	add	r1, sp, #16
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7fd fbda 	bl	80084e4 <_printf_float>
 800ad30:	4607      	mov	r7, r0
 800ad32:	1c78      	adds	r0, r7, #1
 800ad34:	d1d6      	bne.n	800ace4 <_vfiprintf_r+0x1bc>
 800ad36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad38:	07d9      	lsls	r1, r3, #31
 800ad3a:	d405      	bmi.n	800ad48 <_vfiprintf_r+0x220>
 800ad3c:	89ab      	ldrh	r3, [r5, #12]
 800ad3e:	059a      	lsls	r2, r3, #22
 800ad40:	d402      	bmi.n	800ad48 <_vfiprintf_r+0x220>
 800ad42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad44:	f7ff f950 	bl	8009fe8 <__retarget_lock_release_recursive>
 800ad48:	89ab      	ldrh	r3, [r5, #12]
 800ad4a:	065b      	lsls	r3, r3, #25
 800ad4c:	f53f af12 	bmi.w	800ab74 <_vfiprintf_r+0x4c>
 800ad50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad52:	e711      	b.n	800ab78 <_vfiprintf_r+0x50>
 800ad54:	ab03      	add	r3, sp, #12
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	462a      	mov	r2, r5
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <_vfiprintf_r+0x258>)
 800ad5c:	a904      	add	r1, sp, #16
 800ad5e:	4630      	mov	r0, r6
 800ad60:	f7fd fe64 	bl	8008a2c <_printf_i>
 800ad64:	e7e4      	b.n	800ad30 <_vfiprintf_r+0x208>
 800ad66:	bf00      	nop
 800ad68:	0800c97c 	.word	0x0800c97c
 800ad6c:	0800c99c 	.word	0x0800c99c
 800ad70:	0800c95c 	.word	0x0800c95c
 800ad74:	0800cb14 	.word	0x0800cb14
 800ad78:	0800cb1e 	.word	0x0800cb1e
 800ad7c:	080084e5 	.word	0x080084e5
 800ad80:	0800ab03 	.word	0x0800ab03
 800ad84:	0800cb1a 	.word	0x0800cb1a

0800ad88 <__sread>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad90:	f000 f920 	bl	800afd4 <_read_r>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	bfab      	itete	ge
 800ad98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad9c:	181b      	addge	r3, r3, r0
 800ad9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ada2:	bfac      	ite	ge
 800ada4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ada6:	81a3      	strhlt	r3, [r4, #12]
 800ada8:	bd10      	pop	{r4, pc}

0800adaa <__swrite>:
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	461f      	mov	r7, r3
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	05db      	lsls	r3, r3, #23
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	4616      	mov	r6, r2
 800adba:	d505      	bpl.n	800adc8 <__swrite+0x1e>
 800adbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc0:	2302      	movs	r3, #2
 800adc2:	2200      	movs	r2, #0
 800adc4:	f000 f898 	bl	800aef8 <_lseek_r>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adde:	f000 b817 	b.w	800ae10 <_write_r>

0800ade2 <__sseek>:
 800ade2:	b510      	push	{r4, lr}
 800ade4:	460c      	mov	r4, r1
 800ade6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adea:	f000 f885 	bl	800aef8 <_lseek_r>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	bf15      	itete	ne
 800adf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800adf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adfe:	81a3      	strheq	r3, [r4, #12]
 800ae00:	bf18      	it	ne
 800ae02:	81a3      	strhne	r3, [r4, #12]
 800ae04:	bd10      	pop	{r4, pc}

0800ae06 <__sclose>:
 800ae06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0a:	f000 b831 	b.w	800ae70 <_close_r>
	...

0800ae10 <_write_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	; (800ae30 <_write_r+0x20>)
 800ae14:	4604      	mov	r4, r0
 800ae16:	4608      	mov	r0, r1
 800ae18:	4611      	mov	r1, r2
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	602a      	str	r2, [r5, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f7f6 ff67 	bl	8001cf2 <_write>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_write_r+0x1e>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_write_r+0x1e>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	20000750 	.word	0x20000750

0800ae34 <__assert_func>:
 800ae34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae36:	4614      	mov	r4, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <__assert_func+0x2c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4605      	mov	r5, r0
 800ae40:	68d8      	ldr	r0, [r3, #12]
 800ae42:	b14c      	cbz	r4, 800ae58 <__assert_func+0x24>
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <__assert_func+0x30>)
 800ae46:	9100      	str	r1, [sp, #0]
 800ae48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae4c:	4906      	ldr	r1, [pc, #24]	; (800ae68 <__assert_func+0x34>)
 800ae4e:	462b      	mov	r3, r5
 800ae50:	f000 f81e 	bl	800ae90 <fiprintf>
 800ae54:	f000 f8dd 	bl	800b012 <abort>
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__assert_func+0x38>)
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	e7f3      	b.n	800ae46 <__assert_func+0x12>
 800ae5e:	bf00      	nop
 800ae60:	2000000c 	.word	0x2000000c
 800ae64:	0800cb25 	.word	0x0800cb25
 800ae68:	0800cb32 	.word	0x0800cb32
 800ae6c:	0800cb60 	.word	0x0800cb60

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	; (800ae8c <_close_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 ff55 	bl	8001d2a <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20000750 	.word	0x20000750

0800ae90 <fiprintf>:
 800ae90:	b40e      	push	{r1, r2, r3}
 800ae92:	b503      	push	{r0, r1, lr}
 800ae94:	4601      	mov	r1, r0
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	4805      	ldr	r0, [pc, #20]	; (800aeb0 <fiprintf+0x20>)
 800ae9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9e:	6800      	ldr	r0, [r0, #0]
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f7ff fe41 	bl	800ab28 <_vfiprintf_r>
 800aea6:	b002      	add	sp, #8
 800aea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeac:	b003      	add	sp, #12
 800aeae:	4770      	bx	lr
 800aeb0:	2000000c 	.word	0x2000000c

0800aeb4 <_fstat_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_fstat_r+0x20>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	4611      	mov	r1, r2
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	f7f6 ff3e 	bl	8001d42 <_fstat>
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	d102      	bne.n	800aed0 <_fstat_r+0x1c>
 800aeca:	682b      	ldr	r3, [r5, #0]
 800aecc:	b103      	cbz	r3, 800aed0 <_fstat_r+0x1c>
 800aece:	6023      	str	r3, [r4, #0]
 800aed0:	bd38      	pop	{r3, r4, r5, pc}
 800aed2:	bf00      	nop
 800aed4:	20000750 	.word	0x20000750

0800aed8 <_isatty_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d06      	ldr	r5, [pc, #24]	; (800aef4 <_isatty_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f6 ff3d 	bl	8001d62 <_isatty>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_isatty_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_isatty_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20000750 	.word	0x20000750

0800aef8 <_lseek_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	; (800af18 <_lseek_r+0x20>)
 800aefc:	4604      	mov	r4, r0
 800aefe:	4608      	mov	r0, r1
 800af00:	4611      	mov	r1, r2
 800af02:	2200      	movs	r2, #0
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f6 ff36 	bl	8001d78 <_lseek>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_lseek_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_lseek_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20000750 	.word	0x20000750

0800af1c <__ascii_mbtowc>:
 800af1c:	b082      	sub	sp, #8
 800af1e:	b901      	cbnz	r1, 800af22 <__ascii_mbtowc+0x6>
 800af20:	a901      	add	r1, sp, #4
 800af22:	b142      	cbz	r2, 800af36 <__ascii_mbtowc+0x1a>
 800af24:	b14b      	cbz	r3, 800af3a <__ascii_mbtowc+0x1e>
 800af26:	7813      	ldrb	r3, [r2, #0]
 800af28:	600b      	str	r3, [r1, #0]
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	1e10      	subs	r0, r2, #0
 800af2e:	bf18      	it	ne
 800af30:	2001      	movne	r0, #1
 800af32:	b002      	add	sp, #8
 800af34:	4770      	bx	lr
 800af36:	4610      	mov	r0, r2
 800af38:	e7fb      	b.n	800af32 <__ascii_mbtowc+0x16>
 800af3a:	f06f 0001 	mvn.w	r0, #1
 800af3e:	e7f8      	b.n	800af32 <__ascii_mbtowc+0x16>

0800af40 <memmove>:
 800af40:	4288      	cmp	r0, r1
 800af42:	b510      	push	{r4, lr}
 800af44:	eb01 0402 	add.w	r4, r1, r2
 800af48:	d902      	bls.n	800af50 <memmove+0x10>
 800af4a:	4284      	cmp	r4, r0
 800af4c:	4623      	mov	r3, r4
 800af4e:	d807      	bhi.n	800af60 <memmove+0x20>
 800af50:	1e43      	subs	r3, r0, #1
 800af52:	42a1      	cmp	r1, r4
 800af54:	d008      	beq.n	800af68 <memmove+0x28>
 800af56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af5e:	e7f8      	b.n	800af52 <memmove+0x12>
 800af60:	4402      	add	r2, r0
 800af62:	4601      	mov	r1, r0
 800af64:	428a      	cmp	r2, r1
 800af66:	d100      	bne.n	800af6a <memmove+0x2a>
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af72:	e7f7      	b.n	800af64 <memmove+0x24>

0800af74 <_realloc_r>:
 800af74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af78:	4680      	mov	r8, r0
 800af7a:	4614      	mov	r4, r2
 800af7c:	460e      	mov	r6, r1
 800af7e:	b921      	cbnz	r1, 800af8a <_realloc_r+0x16>
 800af80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	4611      	mov	r1, r2
 800af86:	f7fd b999 	b.w	80082bc <_malloc_r>
 800af8a:	b92a      	cbnz	r2, 800af98 <_realloc_r+0x24>
 800af8c:	f7fd f92a 	bl	80081e4 <_free_r>
 800af90:	4625      	mov	r5, r4
 800af92:	4628      	mov	r0, r5
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	f000 f842 	bl	800b020 <_malloc_usable_size_r>
 800af9c:	4284      	cmp	r4, r0
 800af9e:	4607      	mov	r7, r0
 800afa0:	d802      	bhi.n	800afa8 <_realloc_r+0x34>
 800afa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afa6:	d812      	bhi.n	800afce <_realloc_r+0x5a>
 800afa8:	4621      	mov	r1, r4
 800afaa:	4640      	mov	r0, r8
 800afac:	f7fd f986 	bl	80082bc <_malloc_r>
 800afb0:	4605      	mov	r5, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d0ed      	beq.n	800af92 <_realloc_r+0x1e>
 800afb6:	42bc      	cmp	r4, r7
 800afb8:	4622      	mov	r2, r4
 800afba:	4631      	mov	r1, r6
 800afbc:	bf28      	it	cs
 800afbe:	463a      	movcs	r2, r7
 800afc0:	f7ff f878 	bl	800a0b4 <memcpy>
 800afc4:	4631      	mov	r1, r6
 800afc6:	4640      	mov	r0, r8
 800afc8:	f7fd f90c 	bl	80081e4 <_free_r>
 800afcc:	e7e1      	b.n	800af92 <_realloc_r+0x1e>
 800afce:	4635      	mov	r5, r6
 800afd0:	e7df      	b.n	800af92 <_realloc_r+0x1e>
	...

0800afd4 <_read_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	; (800aff4 <_read_r+0x20>)
 800afd8:	4604      	mov	r4, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	4611      	mov	r1, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f7f6 fe68 	bl	8001cb8 <_read>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_read_r+0x1e>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_read_r+0x1e>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	20000750 	.word	0x20000750

0800aff8 <__ascii_wctomb>:
 800aff8:	b149      	cbz	r1, 800b00e <__ascii_wctomb+0x16>
 800affa:	2aff      	cmp	r2, #255	; 0xff
 800affc:	bf85      	ittet	hi
 800affe:	238a      	movhi	r3, #138	; 0x8a
 800b000:	6003      	strhi	r3, [r0, #0]
 800b002:	700a      	strbls	r2, [r1, #0]
 800b004:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b008:	bf98      	it	ls
 800b00a:	2001      	movls	r0, #1
 800b00c:	4770      	bx	lr
 800b00e:	4608      	mov	r0, r1
 800b010:	4770      	bx	lr

0800b012 <abort>:
 800b012:	b508      	push	{r3, lr}
 800b014:	2006      	movs	r0, #6
 800b016:	f000 f833 	bl	800b080 <raise>
 800b01a:	2001      	movs	r0, #1
 800b01c:	f7f6 fe42 	bl	8001ca4 <_exit>

0800b020 <_malloc_usable_size_r>:
 800b020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b024:	1f18      	subs	r0, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbc      	itt	lt
 800b02a:	580b      	ldrlt	r3, [r1, r0]
 800b02c:	18c0      	addlt	r0, r0, r3
 800b02e:	4770      	bx	lr

0800b030 <_raise_r>:
 800b030:	291f      	cmp	r1, #31
 800b032:	b538      	push	{r3, r4, r5, lr}
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	d904      	bls.n	800b044 <_raise_r+0x14>
 800b03a:	2316      	movs	r3, #22
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b046:	b112      	cbz	r2, 800b04e <_raise_r+0x1e>
 800b048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b04c:	b94b      	cbnz	r3, 800b062 <_raise_r+0x32>
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f830 	bl	800b0b4 <_getpid_r>
 800b054:	462a      	mov	r2, r5
 800b056:	4601      	mov	r1, r0
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05e:	f000 b817 	b.w	800b090 <_kill_r>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d00a      	beq.n	800b07c <_raise_r+0x4c>
 800b066:	1c59      	adds	r1, r3, #1
 800b068:	d103      	bne.n	800b072 <_raise_r+0x42>
 800b06a:	2316      	movs	r3, #22
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	2001      	movs	r0, #1
 800b070:	e7e7      	b.n	800b042 <_raise_r+0x12>
 800b072:	2400      	movs	r4, #0
 800b074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b078:	4628      	mov	r0, r5
 800b07a:	4798      	blx	r3
 800b07c:	2000      	movs	r0, #0
 800b07e:	e7e0      	b.n	800b042 <_raise_r+0x12>

0800b080 <raise>:
 800b080:	4b02      	ldr	r3, [pc, #8]	; (800b08c <raise+0xc>)
 800b082:	4601      	mov	r1, r0
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	f7ff bfd3 	b.w	800b030 <_raise_r>
 800b08a:	bf00      	nop
 800b08c:	2000000c 	.word	0x2000000c

0800b090 <_kill_r>:
 800b090:	b538      	push	{r3, r4, r5, lr}
 800b092:	4d07      	ldr	r5, [pc, #28]	; (800b0b0 <_kill_r+0x20>)
 800b094:	2300      	movs	r3, #0
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	f7f6 fdf1 	bl	8001c84 <_kill>
 800b0a2:	1c43      	adds	r3, r0, #1
 800b0a4:	d102      	bne.n	800b0ac <_kill_r+0x1c>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	b103      	cbz	r3, 800b0ac <_kill_r+0x1c>
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	bd38      	pop	{r3, r4, r5, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000750 	.word	0x20000750

0800b0b4 <_getpid_r>:
 800b0b4:	f7f6 bdde 	b.w	8001c74 <_getpid>

0800b0b8 <cosf>:
 800b0b8:	ee10 3a10 	vmov	r3, s0
 800b0bc:	b507      	push	{r0, r1, r2, lr}
 800b0be:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <cosf+0x80>)
 800b0c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	dc06      	bgt.n	800b0d6 <cosf+0x1e>
 800b0c8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b13c <cosf+0x84>
 800b0cc:	b003      	add	sp, #12
 800b0ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0d2:	f000 be95 	b.w	800be00 <__kernel_cosf>
 800b0d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b0da:	db04      	blt.n	800b0e6 <cosf+0x2e>
 800b0dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b0e0:	b003      	add	sp, #12
 800b0e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0e6:	4668      	mov	r0, sp
 800b0e8:	f000 fd4a 	bl	800bb80 <__ieee754_rem_pio2f>
 800b0ec:	f000 0003 	and.w	r0, r0, #3
 800b0f0:	2801      	cmp	r0, #1
 800b0f2:	d009      	beq.n	800b108 <cosf+0x50>
 800b0f4:	2802      	cmp	r0, #2
 800b0f6:	d010      	beq.n	800b11a <cosf+0x62>
 800b0f8:	b9b0      	cbnz	r0, 800b128 <cosf+0x70>
 800b0fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0fe:	ed9d 0a00 	vldr	s0, [sp]
 800b102:	f000 fe7d 	bl	800be00 <__kernel_cosf>
 800b106:	e7eb      	b.n	800b0e0 <cosf+0x28>
 800b108:	eddd 0a01 	vldr	s1, [sp, #4]
 800b10c:	ed9d 0a00 	vldr	s0, [sp]
 800b110:	f001 f94c 	bl	800c3ac <__kernel_sinf>
 800b114:	eeb1 0a40 	vneg.f32	s0, s0
 800b118:	e7e2      	b.n	800b0e0 <cosf+0x28>
 800b11a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b11e:	ed9d 0a00 	vldr	s0, [sp]
 800b122:	f000 fe6d 	bl	800be00 <__kernel_cosf>
 800b126:	e7f5      	b.n	800b114 <cosf+0x5c>
 800b128:	eddd 0a01 	vldr	s1, [sp, #4]
 800b12c:	ed9d 0a00 	vldr	s0, [sp]
 800b130:	2001      	movs	r0, #1
 800b132:	f001 f93b 	bl	800c3ac <__kernel_sinf>
 800b136:	e7d3      	b.n	800b0e0 <cosf+0x28>
 800b138:	3f490fd8 	.word	0x3f490fd8
 800b13c:	00000000 	.word	0x00000000

0800b140 <sinf>:
 800b140:	ee10 3a10 	vmov	r3, s0
 800b144:	b507      	push	{r0, r1, r2, lr}
 800b146:	4a1f      	ldr	r2, [pc, #124]	; (800b1c4 <sinf+0x84>)
 800b148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b14c:	4293      	cmp	r3, r2
 800b14e:	dc07      	bgt.n	800b160 <sinf+0x20>
 800b150:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b1c8 <sinf+0x88>
 800b154:	2000      	movs	r0, #0
 800b156:	b003      	add	sp, #12
 800b158:	f85d eb04 	ldr.w	lr, [sp], #4
 800b15c:	f001 b926 	b.w	800c3ac <__kernel_sinf>
 800b160:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b164:	db04      	blt.n	800b170 <sinf+0x30>
 800b166:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b16a:	b003      	add	sp, #12
 800b16c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b170:	4668      	mov	r0, sp
 800b172:	f000 fd05 	bl	800bb80 <__ieee754_rem_pio2f>
 800b176:	f000 0003 	and.w	r0, r0, #3
 800b17a:	2801      	cmp	r0, #1
 800b17c:	d00a      	beq.n	800b194 <sinf+0x54>
 800b17e:	2802      	cmp	r0, #2
 800b180:	d00f      	beq.n	800b1a2 <sinf+0x62>
 800b182:	b9c0      	cbnz	r0, 800b1b6 <sinf+0x76>
 800b184:	eddd 0a01 	vldr	s1, [sp, #4]
 800b188:	ed9d 0a00 	vldr	s0, [sp]
 800b18c:	2001      	movs	r0, #1
 800b18e:	f001 f90d 	bl	800c3ac <__kernel_sinf>
 800b192:	e7ea      	b.n	800b16a <sinf+0x2a>
 800b194:	eddd 0a01 	vldr	s1, [sp, #4]
 800b198:	ed9d 0a00 	vldr	s0, [sp]
 800b19c:	f000 fe30 	bl	800be00 <__kernel_cosf>
 800b1a0:	e7e3      	b.n	800b16a <sinf+0x2a>
 800b1a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1a6:	ed9d 0a00 	vldr	s0, [sp]
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	f001 f8fe 	bl	800c3ac <__kernel_sinf>
 800b1b0:	eeb1 0a40 	vneg.f32	s0, s0
 800b1b4:	e7d9      	b.n	800b16a <sinf+0x2a>
 800b1b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ba:	ed9d 0a00 	vldr	s0, [sp]
 800b1be:	f000 fe1f 	bl	800be00 <__kernel_cosf>
 800b1c2:	e7f5      	b.n	800b1b0 <sinf+0x70>
 800b1c4:	3f490fd8 	.word	0x3f490fd8
 800b1c8:	00000000 	.word	0x00000000

0800b1cc <asinf>:
 800b1cc:	b508      	push	{r3, lr}
 800b1ce:	ed2d 8b02 	vpush	{d8}
 800b1d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b1d6:	f000 f87f 	bl	800b2d8 <__ieee754_asinf>
 800b1da:	eeb4 8a48 	vcmp.f32	s16, s16
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	eef0 8a40 	vmov.f32	s17, s0
 800b1e6:	d615      	bvs.n	800b214 <asinf+0x48>
 800b1e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1ec:	f001 fa1c 	bl	800c628 <fabsf>
 800b1f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b1f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fc:	dd0a      	ble.n	800b214 <asinf+0x48>
 800b1fe:	f7fc ffaf 	bl	8008160 <__errno>
 800b202:	ecbd 8b02 	vpop	{d8}
 800b206:	2321      	movs	r3, #33	; 0x21
 800b208:	6003      	str	r3, [r0, #0]
 800b20a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b20e:	4804      	ldr	r0, [pc, #16]	; (800b220 <asinf+0x54>)
 800b210:	f001 ba60 	b.w	800c6d4 <nanf>
 800b214:	eeb0 0a68 	vmov.f32	s0, s17
 800b218:	ecbd 8b02 	vpop	{d8}
 800b21c:	bd08      	pop	{r3, pc}
 800b21e:	bf00      	nop
 800b220:	0800cb60 	.word	0x0800cb60

0800b224 <atan2f>:
 800b224:	f000 b93e 	b.w	800b4a4 <__ieee754_atan2f>

0800b228 <powf>:
 800b228:	b508      	push	{r3, lr}
 800b22a:	ed2d 8b04 	vpush	{d8-d9}
 800b22e:	eeb0 8a60 	vmov.f32	s16, s1
 800b232:	eeb0 9a40 	vmov.f32	s18, s0
 800b236:	f000 f9d5 	bl	800b5e4 <__ieee754_powf>
 800b23a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	eef0 8a40 	vmov.f32	s17, s0
 800b246:	d63e      	bvs.n	800b2c6 <powf+0x9e>
 800b248:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b250:	d112      	bne.n	800b278 <powf+0x50>
 800b252:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	d039      	beq.n	800b2d0 <powf+0xa8>
 800b25c:	eeb0 0a48 	vmov.f32	s0, s16
 800b260:	f001 f9e9 	bl	800c636 <finitef>
 800b264:	b378      	cbz	r0, 800b2c6 <powf+0x9e>
 800b266:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26e:	d52a      	bpl.n	800b2c6 <powf+0x9e>
 800b270:	f7fc ff76 	bl	8008160 <__errno>
 800b274:	2322      	movs	r3, #34	; 0x22
 800b276:	e014      	b.n	800b2a2 <powf+0x7a>
 800b278:	f001 f9dd 	bl	800c636 <finitef>
 800b27c:	b998      	cbnz	r0, 800b2a6 <powf+0x7e>
 800b27e:	eeb0 0a49 	vmov.f32	s0, s18
 800b282:	f001 f9d8 	bl	800c636 <finitef>
 800b286:	b170      	cbz	r0, 800b2a6 <powf+0x7e>
 800b288:	eeb0 0a48 	vmov.f32	s0, s16
 800b28c:	f001 f9d3 	bl	800c636 <finitef>
 800b290:	b148      	cbz	r0, 800b2a6 <powf+0x7e>
 800b292:	eef4 8a68 	vcmp.f32	s17, s17
 800b296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29a:	d7e9      	bvc.n	800b270 <powf+0x48>
 800b29c:	f7fc ff60 	bl	8008160 <__errno>
 800b2a0:	2321      	movs	r3, #33	; 0x21
 800b2a2:	6003      	str	r3, [r0, #0]
 800b2a4:	e00f      	b.n	800b2c6 <powf+0x9e>
 800b2a6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ae:	d10a      	bne.n	800b2c6 <powf+0x9e>
 800b2b0:	eeb0 0a49 	vmov.f32	s0, s18
 800b2b4:	f001 f9bf 	bl	800c636 <finitef>
 800b2b8:	b128      	cbz	r0, 800b2c6 <powf+0x9e>
 800b2ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b2be:	f001 f9ba 	bl	800c636 <finitef>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1d4      	bne.n	800b270 <powf+0x48>
 800b2c6:	eeb0 0a68 	vmov.f32	s0, s17
 800b2ca:	ecbd 8b04 	vpop	{d8-d9}
 800b2ce:	bd08      	pop	{r3, pc}
 800b2d0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b2d4:	e7f7      	b.n	800b2c6 <powf+0x9e>
	...

0800b2d8 <__ieee754_asinf>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	ee10 5a10 	vmov	r5, s0
 800b2de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b2e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b2e6:	ed2d 8b04 	vpush	{d8-d9}
 800b2ea:	d10c      	bne.n	800b306 <__ieee754_asinf+0x2e>
 800b2ec:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b464 <__ieee754_asinf+0x18c>
 800b2f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b468 <__ieee754_asinf+0x190>
 800b2f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b2f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b2fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b300:	ecbd 8b04 	vpop	{d8-d9}
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	dd04      	ble.n	800b312 <__ieee754_asinf+0x3a>
 800b308:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b30c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b310:	e7f6      	b.n	800b300 <__ieee754_asinf+0x28>
 800b312:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b316:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b31a:	da0b      	bge.n	800b334 <__ieee754_asinf+0x5c>
 800b31c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b320:	da52      	bge.n	800b3c8 <__ieee754_asinf+0xf0>
 800b322:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b46c <__ieee754_asinf+0x194>
 800b326:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b32a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b332:	dce5      	bgt.n	800b300 <__ieee754_asinf+0x28>
 800b334:	f001 f978 	bl	800c628 <fabsf>
 800b338:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b33c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b340:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b344:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b470 <__ieee754_asinf+0x198>
 800b348:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b474 <__ieee754_asinf+0x19c>
 800b34c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b478 <__ieee754_asinf+0x1a0>
 800b350:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b354:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b47c <__ieee754_asinf+0x1a4>
 800b358:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b35c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b480 <__ieee754_asinf+0x1a8>
 800b360:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b364:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b484 <__ieee754_asinf+0x1ac>
 800b368:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b36c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b488 <__ieee754_asinf+0x1b0>
 800b370:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b374:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b48c <__ieee754_asinf+0x1b4>
 800b378:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b37c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b490 <__ieee754_asinf+0x1b8>
 800b380:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b384:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b494 <__ieee754_asinf+0x1bc>
 800b388:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b38c:	eeb0 0a48 	vmov.f32	s0, s16
 800b390:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b394:	f000 fd30 	bl	800bdf8 <__ieee754_sqrtf>
 800b398:	4b3f      	ldr	r3, [pc, #252]	; (800b498 <__ieee754_asinf+0x1c0>)
 800b39a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b39e:	429c      	cmp	r4, r3
 800b3a0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b3a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b3a8:	dd3d      	ble.n	800b426 <__ieee754_asinf+0x14e>
 800b3aa:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b3ae:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b49c <__ieee754_asinf+0x1c4>
 800b3b2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b3b6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b468 <__ieee754_asinf+0x190>
 800b3ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	bfd8      	it	le
 800b3c2:	eeb1 0a40 	vnegle.f32	s0, s0
 800b3c6:	e79b      	b.n	800b300 <__ieee754_asinf+0x28>
 800b3c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b3cc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b470 <__ieee754_asinf+0x198>
 800b3d0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b474 <__ieee754_asinf+0x19c>
 800b3d4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b488 <__ieee754_asinf+0x1b0>
 800b3d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b3dc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b47c <__ieee754_asinf+0x1a4>
 800b3e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3e4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b480 <__ieee754_asinf+0x1a8>
 800b3e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b3ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b484 <__ieee754_asinf+0x1ac>
 800b3f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b478 <__ieee754_asinf+0x1a0>
 800b3f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b3fc:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b48c <__ieee754_asinf+0x1b4>
 800b400:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b404:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b490 <__ieee754_asinf+0x1b8>
 800b408:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b40c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b494 <__ieee754_asinf+0x1bc>
 800b410:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b414:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b418:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b41c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b420:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b424:	e76c      	b.n	800b300 <__ieee754_asinf+0x28>
 800b426:	ee10 3a10 	vmov	r3, s0
 800b42a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b42e:	f023 030f 	bic.w	r3, r3, #15
 800b432:	ee07 3a10 	vmov	s14, r3
 800b436:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b43a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b43e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b442:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b446:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b464 <__ieee754_asinf+0x18c>
 800b44a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b44e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b452:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b4a0 <__ieee754_asinf+0x1c8>
 800b456:	eeb0 6a40 	vmov.f32	s12, s0
 800b45a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b45e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b462:	e7aa      	b.n	800b3ba <__ieee754_asinf+0xe2>
 800b464:	b33bbd2e 	.word	0xb33bbd2e
 800b468:	3fc90fdb 	.word	0x3fc90fdb
 800b46c:	7149f2ca 	.word	0x7149f2ca
 800b470:	3811ef08 	.word	0x3811ef08
 800b474:	3a4f7f04 	.word	0x3a4f7f04
 800b478:	3e2aaaab 	.word	0x3e2aaaab
 800b47c:	bd241146 	.word	0xbd241146
 800b480:	3e4e0aa8 	.word	0x3e4e0aa8
 800b484:	bea6b090 	.word	0xbea6b090
 800b488:	3d9dc62e 	.word	0x3d9dc62e
 800b48c:	bf303361 	.word	0xbf303361
 800b490:	4001572d 	.word	0x4001572d
 800b494:	c019d139 	.word	0xc019d139
 800b498:	3f799999 	.word	0x3f799999
 800b49c:	333bbd2e 	.word	0x333bbd2e
 800b4a0:	3f490fdb 	.word	0x3f490fdb

0800b4a4 <__ieee754_atan2f>:
 800b4a4:	ee10 2a90 	vmov	r2, s1
 800b4a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b4ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	eef0 7a40 	vmov.f32	s15, s0
 800b4b6:	dc06      	bgt.n	800b4c6 <__ieee754_atan2f+0x22>
 800b4b8:	ee10 0a10 	vmov	r0, s0
 800b4bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b4c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b4c4:	dd04      	ble.n	800b4d0 <__ieee754_atan2f+0x2c>
 800b4c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ce:	bd10      	pop	{r4, pc}
 800b4d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b4d4:	d103      	bne.n	800b4de <__ieee754_atan2f+0x3a>
 800b4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4da:	f000 bfd1 	b.w	800c480 <atanf>
 800b4de:	1794      	asrs	r4, r2, #30
 800b4e0:	f004 0402 	and.w	r4, r4, #2
 800b4e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b4e8:	b943      	cbnz	r3, 800b4fc <__ieee754_atan2f+0x58>
 800b4ea:	2c02      	cmp	r4, #2
 800b4ec:	d05e      	beq.n	800b5ac <__ieee754_atan2f+0x108>
 800b4ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b5c0 <__ieee754_atan2f+0x11c>
 800b4f2:	2c03      	cmp	r4, #3
 800b4f4:	bf08      	it	eq
 800b4f6:	eef0 7a47 	vmoveq.f32	s15, s14
 800b4fa:	e7e6      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b4fc:	b941      	cbnz	r1, 800b510 <__ieee754_atan2f+0x6c>
 800b4fe:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b5c4 <__ieee754_atan2f+0x120>
 800b502:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b5c8 <__ieee754_atan2f+0x124>
 800b506:	2800      	cmp	r0, #0
 800b508:	bfb8      	it	lt
 800b50a:	eef0 7a40 	vmovlt.f32	s15, s0
 800b50e:	e7dc      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b510:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b514:	d110      	bne.n	800b538 <__ieee754_atan2f+0x94>
 800b516:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b51a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b51e:	d107      	bne.n	800b530 <__ieee754_atan2f+0x8c>
 800b520:	2c02      	cmp	r4, #2
 800b522:	d846      	bhi.n	800b5b2 <__ieee754_atan2f+0x10e>
 800b524:	4b29      	ldr	r3, [pc, #164]	; (800b5cc <__ieee754_atan2f+0x128>)
 800b526:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b52a:	edd4 7a00 	vldr	s15, [r4]
 800b52e:	e7cc      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b530:	2c02      	cmp	r4, #2
 800b532:	d841      	bhi.n	800b5b8 <__ieee754_atan2f+0x114>
 800b534:	4b26      	ldr	r3, [pc, #152]	; (800b5d0 <__ieee754_atan2f+0x12c>)
 800b536:	e7f6      	b.n	800b526 <__ieee754_atan2f+0x82>
 800b538:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b53c:	d0df      	beq.n	800b4fe <__ieee754_atan2f+0x5a>
 800b53e:	1a5b      	subs	r3, r3, r1
 800b540:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b544:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b548:	da1a      	bge.n	800b580 <__ieee754_atan2f+0xdc>
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	da01      	bge.n	800b552 <__ieee754_atan2f+0xae>
 800b54e:	313c      	adds	r1, #60	; 0x3c
 800b550:	db19      	blt.n	800b586 <__ieee754_atan2f+0xe2>
 800b552:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b556:	f001 f867 	bl	800c628 <fabsf>
 800b55a:	f000 ff91 	bl	800c480 <atanf>
 800b55e:	eef0 7a40 	vmov.f32	s15, s0
 800b562:	2c01      	cmp	r4, #1
 800b564:	d012      	beq.n	800b58c <__ieee754_atan2f+0xe8>
 800b566:	2c02      	cmp	r4, #2
 800b568:	d017      	beq.n	800b59a <__ieee754_atan2f+0xf6>
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d0ad      	beq.n	800b4ca <__ieee754_atan2f+0x26>
 800b56e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b5d4 <__ieee754_atan2f+0x130>
 800b572:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b576:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b5d8 <__ieee754_atan2f+0x134>
 800b57a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b57e:	e7a4      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b580:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b5c4 <__ieee754_atan2f+0x120>
 800b584:	e7ed      	b.n	800b562 <__ieee754_atan2f+0xbe>
 800b586:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b5dc <__ieee754_atan2f+0x138>
 800b58a:	e7ea      	b.n	800b562 <__ieee754_atan2f+0xbe>
 800b58c:	ee17 3a90 	vmov	r3, s15
 800b590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	e797      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b59a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b5d4 <__ieee754_atan2f+0x130>
 800b59e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b5a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b5d8 <__ieee754_atan2f+0x134>
 800b5a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b5aa:	e78e      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b5ac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b5d8 <__ieee754_atan2f+0x134>
 800b5b0:	e78b      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b5b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b5e0 <__ieee754_atan2f+0x13c>
 800b5b6:	e788      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b5b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b5dc <__ieee754_atan2f+0x138>
 800b5bc:	e785      	b.n	800b4ca <__ieee754_atan2f+0x26>
 800b5be:	bf00      	nop
 800b5c0:	c0490fdb 	.word	0xc0490fdb
 800b5c4:	3fc90fdb 	.word	0x3fc90fdb
 800b5c8:	bfc90fdb 	.word	0xbfc90fdb
 800b5cc:	0800cc6c 	.word	0x0800cc6c
 800b5d0:	0800cc78 	.word	0x0800cc78
 800b5d4:	33bbbd2e 	.word	0x33bbbd2e
 800b5d8:	40490fdb 	.word	0x40490fdb
 800b5dc:	00000000 	.word	0x00000000
 800b5e0:	3f490fdb 	.word	0x3f490fdb

0800b5e4 <__ieee754_powf>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	ee10 4a90 	vmov	r4, s1
 800b5ec:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b5f0:	ed2d 8b02 	vpush	{d8}
 800b5f4:	ee10 6a10 	vmov	r6, s0
 800b5f8:	eeb0 8a40 	vmov.f32	s16, s0
 800b5fc:	eef0 8a60 	vmov.f32	s17, s1
 800b600:	d10c      	bne.n	800b61c <__ieee754_powf+0x38>
 800b602:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800b606:	0076      	lsls	r6, r6, #1
 800b608:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800b60c:	f240 8296 	bls.w	800bb3c <__ieee754_powf+0x558>
 800b610:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b614:	ecbd 8b02 	vpop	{d8}
 800b618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b61c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b620:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b624:	dcf4      	bgt.n	800b610 <__ieee754_powf+0x2c>
 800b626:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b62a:	dd08      	ble.n	800b63e <__ieee754_powf+0x5a>
 800b62c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b630:	d1ee      	bne.n	800b610 <__ieee754_powf+0x2c>
 800b632:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b636:	0064      	lsls	r4, r4, #1
 800b638:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b63c:	e7e6      	b.n	800b60c <__ieee754_powf+0x28>
 800b63e:	2e00      	cmp	r6, #0
 800b640:	da20      	bge.n	800b684 <__ieee754_powf+0xa0>
 800b642:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b646:	da2d      	bge.n	800b6a4 <__ieee754_powf+0xc0>
 800b648:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b64c:	f2c0 827f 	blt.w	800bb4e <__ieee754_powf+0x56a>
 800b650:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b654:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b658:	fa48 f703 	asr.w	r7, r8, r3
 800b65c:	fa07 f303 	lsl.w	r3, r7, r3
 800b660:	4543      	cmp	r3, r8
 800b662:	f040 8274 	bne.w	800bb4e <__ieee754_powf+0x56a>
 800b666:	f007 0701 	and.w	r7, r7, #1
 800b66a:	f1c7 0702 	rsb	r7, r7, #2
 800b66e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b672:	d11f      	bne.n	800b6b4 <__ieee754_powf+0xd0>
 800b674:	2c00      	cmp	r4, #0
 800b676:	f280 8267 	bge.w	800bb48 <__ieee754_powf+0x564>
 800b67a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b67e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b682:	e7c7      	b.n	800b614 <__ieee754_powf+0x30>
 800b684:	2700      	movs	r7, #0
 800b686:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b68a:	d1f0      	bne.n	800b66e <__ieee754_powf+0x8a>
 800b68c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b690:	f000 8254 	beq.w	800bb3c <__ieee754_powf+0x558>
 800b694:	dd08      	ble.n	800b6a8 <__ieee754_powf+0xc4>
 800b696:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b9a0 <__ieee754_powf+0x3bc>
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	bfa8      	it	ge
 800b69e:	eeb0 0a68 	vmovge.f32	s0, s17
 800b6a2:	e7b7      	b.n	800b614 <__ieee754_powf+0x30>
 800b6a4:	2702      	movs	r7, #2
 800b6a6:	e7ee      	b.n	800b686 <__ieee754_powf+0xa2>
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	f280 824a 	bge.w	800bb42 <__ieee754_powf+0x55e>
 800b6ae:	eeb1 0a68 	vneg.f32	s0, s17
 800b6b2:	e7af      	b.n	800b614 <__ieee754_powf+0x30>
 800b6b4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b6b8:	d102      	bne.n	800b6c0 <__ieee754_powf+0xdc>
 800b6ba:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b6be:	e7a9      	b.n	800b614 <__ieee754_powf+0x30>
 800b6c0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b6c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b6c8:	d107      	bne.n	800b6da <__ieee754_powf+0xf6>
 800b6ca:	2e00      	cmp	r6, #0
 800b6cc:	db05      	blt.n	800b6da <__ieee754_powf+0xf6>
 800b6ce:	ecbd 8b02 	vpop	{d8}
 800b6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d6:	f000 bb8f 	b.w	800bdf8 <__ieee754_sqrtf>
 800b6da:	f000 ffa5 	bl	800c628 <fabsf>
 800b6de:	b125      	cbz	r5, 800b6ea <__ieee754_powf+0x106>
 800b6e0:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800b6e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b6e8:	d116      	bne.n	800b718 <__ieee754_powf+0x134>
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	bfbc      	itt	lt
 800b6ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b6f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	da8c      	bge.n	800b614 <__ieee754_powf+0x30>
 800b6fa:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b6fe:	ea55 0307 	orrs.w	r3, r5, r7
 800b702:	d104      	bne.n	800b70e <__ieee754_powf+0x12a>
 800b704:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b708:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b70c:	e782      	b.n	800b614 <__ieee754_powf+0x30>
 800b70e:	2f01      	cmp	r7, #1
 800b710:	d180      	bne.n	800b614 <__ieee754_powf+0x30>
 800b712:	eeb1 0a40 	vneg.f32	s0, s0
 800b716:	e77d      	b.n	800b614 <__ieee754_powf+0x30>
 800b718:	0ff0      	lsrs	r0, r6, #31
 800b71a:	3801      	subs	r0, #1
 800b71c:	ea57 0300 	orrs.w	r3, r7, r0
 800b720:	d104      	bne.n	800b72c <__ieee754_powf+0x148>
 800b722:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b726:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b72a:	e773      	b.n	800b614 <__ieee754_powf+0x30>
 800b72c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b730:	dd74      	ble.n	800b81c <__ieee754_powf+0x238>
 800b732:	4b9c      	ldr	r3, [pc, #624]	; (800b9a4 <__ieee754_powf+0x3c0>)
 800b734:	429d      	cmp	r5, r3
 800b736:	dc08      	bgt.n	800b74a <__ieee754_powf+0x166>
 800b738:	2c00      	cmp	r4, #0
 800b73a:	da0b      	bge.n	800b754 <__ieee754_powf+0x170>
 800b73c:	2000      	movs	r0, #0
 800b73e:	ecbd 8b02 	vpop	{d8}
 800b742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b746:	f000 be95 	b.w	800c474 <__math_oflowf>
 800b74a:	4b97      	ldr	r3, [pc, #604]	; (800b9a8 <__ieee754_powf+0x3c4>)
 800b74c:	429d      	cmp	r5, r3
 800b74e:	dd08      	ble.n	800b762 <__ieee754_powf+0x17e>
 800b750:	2c00      	cmp	r4, #0
 800b752:	dcf3      	bgt.n	800b73c <__ieee754_powf+0x158>
 800b754:	2000      	movs	r0, #0
 800b756:	ecbd 8b02 	vpop	{d8}
 800b75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	f000 be83 	b.w	800c468 <__math_uflowf>
 800b762:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b766:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b76a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b9ac <__ieee754_powf+0x3c8>
 800b76e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b772:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b776:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b77a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b77e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b786:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b9b0 <__ieee754_powf+0x3cc>
 800b78a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800b78e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b9b4 <__ieee754_powf+0x3d0>
 800b792:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b796:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b9b8 <__ieee754_powf+0x3d4>
 800b79a:	eef0 6a67 	vmov.f32	s13, s15
 800b79e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b7a2:	ee16 3a90 	vmov	r3, s13
 800b7a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7aa:	f023 030f 	bic.w	r3, r3, #15
 800b7ae:	ee00 3a90 	vmov	s1, r3
 800b7b2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800b7b6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b7ba:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b7be:	f024 040f 	bic.w	r4, r4, #15
 800b7c2:	ee07 4a10 	vmov	s14, r4
 800b7c6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b7ca:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b7d6:	3f01      	subs	r7, #1
 800b7d8:	ea57 0200 	orrs.w	r2, r7, r0
 800b7dc:	ee07 4a10 	vmov	s14, r4
 800b7e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7e4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b7e8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b7ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b7f0:	ee17 4a10 	vmov	r4, s14
 800b7f4:	bf08      	it	eq
 800b7f6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b800:	f340 817e 	ble.w	800bb00 <__ieee754_powf+0x51c>
 800b804:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b808:	f340 80f8 	ble.w	800b9fc <__ieee754_powf+0x418>
 800b80c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b814:	bf4c      	ite	mi
 800b816:	2001      	movmi	r0, #1
 800b818:	2000      	movpl	r0, #0
 800b81a:	e790      	b.n	800b73e <__ieee754_powf+0x15a>
 800b81c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800b820:	bf01      	itttt	eq
 800b822:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b9bc <__ieee754_powf+0x3d8>
 800b826:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b82a:	f06f 0217 	mvneq.w	r2, #23
 800b82e:	ee17 5a90 	vmoveq	r5, s15
 800b832:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b836:	bf18      	it	ne
 800b838:	2200      	movne	r2, #0
 800b83a:	3b7f      	subs	r3, #127	; 0x7f
 800b83c:	4413      	add	r3, r2
 800b83e:	4a60      	ldr	r2, [pc, #384]	; (800b9c0 <__ieee754_powf+0x3dc>)
 800b840:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800b844:	4295      	cmp	r5, r2
 800b846:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800b84a:	dd06      	ble.n	800b85a <__ieee754_powf+0x276>
 800b84c:	4a5d      	ldr	r2, [pc, #372]	; (800b9c4 <__ieee754_powf+0x3e0>)
 800b84e:	4295      	cmp	r5, r2
 800b850:	f340 80a4 	ble.w	800b99c <__ieee754_powf+0x3b8>
 800b854:	3301      	adds	r3, #1
 800b856:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b85a:	2500      	movs	r5, #0
 800b85c:	4a5a      	ldr	r2, [pc, #360]	; (800b9c8 <__ieee754_powf+0x3e4>)
 800b85e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b862:	ee07 1a90 	vmov	s15, r1
 800b866:	ed92 7a00 	vldr	s14, [r2]
 800b86a:	4a58      	ldr	r2, [pc, #352]	; (800b9cc <__ieee754_powf+0x3e8>)
 800b86c:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b870:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b874:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b878:	1049      	asrs	r1, r1, #1
 800b87a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b87e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b882:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b886:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b88a:	ee06 1a10 	vmov	s12, r1
 800b88e:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b892:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b896:	ee14 6a90 	vmov	r6, s9
 800b89a:	4016      	ands	r6, r2
 800b89c:	ee05 6a90 	vmov	s11, r6
 800b8a0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b8a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8a8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b9d0 <__ieee754_powf+0x3ec>
 800b8ac:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b8b0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b8b4:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b8b8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b9d4 <__ieee754_powf+0x3f0>
 800b8bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b8c0:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b9d8 <__ieee754_powf+0x3f4>
 800b8c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b9ac <__ieee754_powf+0x3c8>
 800b8cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b8d0:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b9dc <__ieee754_powf+0x3f8>
 800b8d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b8d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b9e0 <__ieee754_powf+0x3fc>
 800b8dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b8e0:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b8e4:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b8e8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b8ec:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b8f0:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b8f4:	eef0 7a45 	vmov.f32	s15, s10
 800b8f8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b900:	ee17 1a90 	vmov	r1, s15
 800b904:	4011      	ands	r1, r2
 800b906:	ee07 1a90 	vmov	s15, r1
 800b90a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b90e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b912:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b916:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b91a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b91e:	eeb0 6a47 	vmov.f32	s12, s14
 800b922:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b926:	ee16 1a10 	vmov	r1, s12
 800b92a:	4011      	ands	r1, r2
 800b92c:	ee06 1a90 	vmov	s13, r1
 800b930:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b934:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b9e4 <__ieee754_powf+0x400>
 800b938:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b9e8 <__ieee754_powf+0x404>
 800b93c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b940:	ee06 1a10 	vmov	s12, r1
 800b944:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b948:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b9ec <__ieee754_powf+0x408>
 800b94c:	4928      	ldr	r1, [pc, #160]	; (800b9f0 <__ieee754_powf+0x40c>)
 800b94e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b952:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b956:	edd1 7a00 	vldr	s15, [r1]
 800b95a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	4b24      	ldr	r3, [pc, #144]	; (800b9f4 <__ieee754_powf+0x410>)
 800b964:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b968:	eef0 7a47 	vmov.f32	s15, s14
 800b96c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b970:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b974:	edd5 0a00 	vldr	s1, [r5]
 800b978:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b97c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b980:	ee17 3a90 	vmov	r3, s15
 800b984:	4013      	ands	r3, r2
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b98e:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b992:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b996:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b99a:	e70e      	b.n	800b7ba <__ieee754_powf+0x1d6>
 800b99c:	2501      	movs	r5, #1
 800b99e:	e75d      	b.n	800b85c <__ieee754_powf+0x278>
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	3f7ffff3 	.word	0x3f7ffff3
 800b9a8:	3f800007 	.word	0x3f800007
 800b9ac:	3eaaaaab 	.word	0x3eaaaaab
 800b9b0:	3fb8aa3b 	.word	0x3fb8aa3b
 800b9b4:	36eca570 	.word	0x36eca570
 800b9b8:	3fb8aa00 	.word	0x3fb8aa00
 800b9bc:	4b800000 	.word	0x4b800000
 800b9c0:	001cc471 	.word	0x001cc471
 800b9c4:	005db3d6 	.word	0x005db3d6
 800b9c8:	0800cc84 	.word	0x0800cc84
 800b9cc:	fffff000 	.word	0xfffff000
 800b9d0:	3e6c3255 	.word	0x3e6c3255
 800b9d4:	3e53f142 	.word	0x3e53f142
 800b9d8:	3e8ba305 	.word	0x3e8ba305
 800b9dc:	3edb6db7 	.word	0x3edb6db7
 800b9e0:	3f19999a 	.word	0x3f19999a
 800b9e4:	3f76384f 	.word	0x3f76384f
 800b9e8:	3f763800 	.word	0x3f763800
 800b9ec:	369dc3a0 	.word	0x369dc3a0
 800b9f0:	0800cc94 	.word	0x0800cc94
 800b9f4:	0800cc8c 	.word	0x0800cc8c
 800b9f8:	3338aa3c 	.word	0x3338aa3c
 800b9fc:	f040 8095 	bne.w	800bb2a <__ieee754_powf+0x546>
 800ba00:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b9f8 <__ieee754_powf+0x414>
 800ba04:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba08:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ba0c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	f73f aefa 	bgt.w	800b80c <__ieee754_powf+0x228>
 800ba18:	15db      	asrs	r3, r3, #23
 800ba1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ba1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba22:	4103      	asrs	r3, r0
 800ba24:	4423      	add	r3, r4
 800ba26:	494b      	ldr	r1, [pc, #300]	; (800bb54 <__ieee754_powf+0x570>)
 800ba28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ba2c:	3a7f      	subs	r2, #127	; 0x7f
 800ba2e:	4111      	asrs	r1, r2
 800ba30:	ea23 0101 	bic.w	r1, r3, r1
 800ba34:	ee07 1a10 	vmov	s14, r1
 800ba38:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ba3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ba40:	f1c2 0217 	rsb	r2, r2, #23
 800ba44:	4110      	asrs	r0, r2
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba4c:	bfb8      	it	lt
 800ba4e:	4240      	neglt	r0, r0
 800ba50:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ba54:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800bb58 <__ieee754_powf+0x574>
 800ba58:	eddf 6a40 	vldr	s13, [pc, #256]	; 800bb5c <__ieee754_powf+0x578>
 800ba5c:	ee17 3a10 	vmov	r3, s14
 800ba60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ba64:	f023 030f 	bic.w	r3, r3, #15
 800ba68:	ee07 3a10 	vmov	s14, r3
 800ba6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba70:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ba74:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ba78:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bb60 <__ieee754_powf+0x57c>
 800ba7c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800ba80:	eef0 7a40 	vmov.f32	s15, s0
 800ba84:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ba88:	eeb0 6a67 	vmov.f32	s12, s15
 800ba8c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ba90:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ba94:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ba98:	eddf 6a32 	vldr	s13, [pc, #200]	; 800bb64 <__ieee754_powf+0x580>
 800ba9c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800bb68 <__ieee754_powf+0x584>
 800baa0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800baa4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800bb6c <__ieee754_powf+0x588>
 800baa8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800baac:	eddf 6a30 	vldr	s13, [pc, #192]	; 800bb70 <__ieee754_powf+0x58c>
 800bab0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bab4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800bb74 <__ieee754_powf+0x590>
 800bab8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800babc:	eef0 6a67 	vmov.f32	s13, s15
 800bac0:	eee6 6a47 	vfms.f32	s13, s12, s14
 800bac4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bac8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800bacc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800bad0:	eea7 0a80 	vfma.f32	s0, s15, s0
 800bad4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bad8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800badc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bae0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bae4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bae8:	ee10 3a10 	vmov	r3, s0
 800baec:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800baf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800baf4:	da1f      	bge.n	800bb36 <__ieee754_powf+0x552>
 800baf6:	f000 fdf3 	bl	800c6e0 <scalbnf>
 800bafa:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bafe:	e589      	b.n	800b614 <__ieee754_powf+0x30>
 800bb00:	4a1d      	ldr	r2, [pc, #116]	; (800bb78 <__ieee754_powf+0x594>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	dd07      	ble.n	800bb16 <__ieee754_powf+0x532>
 800bb06:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0e:	bf4c      	ite	mi
 800bb10:	2001      	movmi	r0, #1
 800bb12:	2000      	movpl	r0, #0
 800bb14:	e61f      	b.n	800b756 <__ieee754_powf+0x172>
 800bb16:	d108      	bne.n	800bb2a <__ieee754_powf+0x546>
 800bb18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb1c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	f6ff af78 	blt.w	800ba18 <__ieee754_powf+0x434>
 800bb28:	e7ed      	b.n	800bb06 <__ieee754_powf+0x522>
 800bb2a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800bb2e:	f73f af73 	bgt.w	800ba18 <__ieee754_powf+0x434>
 800bb32:	2000      	movs	r0, #0
 800bb34:	e78c      	b.n	800ba50 <__ieee754_powf+0x46c>
 800bb36:	ee00 3a10 	vmov	s0, r3
 800bb3a:	e7de      	b.n	800bafa <__ieee754_powf+0x516>
 800bb3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bb40:	e568      	b.n	800b614 <__ieee754_powf+0x30>
 800bb42:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bb7c <__ieee754_powf+0x598>
 800bb46:	e565      	b.n	800b614 <__ieee754_powf+0x30>
 800bb48:	eeb0 0a48 	vmov.f32	s0, s16
 800bb4c:	e562      	b.n	800b614 <__ieee754_powf+0x30>
 800bb4e:	2700      	movs	r7, #0
 800bb50:	e58d      	b.n	800b66e <__ieee754_powf+0x8a>
 800bb52:	bf00      	nop
 800bb54:	007fffff 	.word	0x007fffff
 800bb58:	35bfbe8c 	.word	0x35bfbe8c
 800bb5c:	3f317200 	.word	0x3f317200
 800bb60:	3f317218 	.word	0x3f317218
 800bb64:	b5ddea0e 	.word	0xb5ddea0e
 800bb68:	3331bb4c 	.word	0x3331bb4c
 800bb6c:	388ab355 	.word	0x388ab355
 800bb70:	bb360b61 	.word	0xbb360b61
 800bb74:	3e2aaaab 	.word	0x3e2aaaab
 800bb78:	43160000 	.word	0x43160000
 800bb7c:	00000000 	.word	0x00000000

0800bb80 <__ieee754_rem_pio2f>:
 800bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb82:	ee10 6a10 	vmov	r6, s0
 800bb86:	4b8e      	ldr	r3, [pc, #568]	; (800bdc0 <__ieee754_rem_pio2f+0x240>)
 800bb88:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bb8c:	429d      	cmp	r5, r3
 800bb8e:	b087      	sub	sp, #28
 800bb90:	eef0 7a40 	vmov.f32	s15, s0
 800bb94:	4604      	mov	r4, r0
 800bb96:	dc05      	bgt.n	800bba4 <__ieee754_rem_pio2f+0x24>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	ed80 0a00 	vstr	s0, [r0]
 800bb9e:	6043      	str	r3, [r0, #4]
 800bba0:	2000      	movs	r0, #0
 800bba2:	e01a      	b.n	800bbda <__ieee754_rem_pio2f+0x5a>
 800bba4:	4b87      	ldr	r3, [pc, #540]	; (800bdc4 <__ieee754_rem_pio2f+0x244>)
 800bba6:	429d      	cmp	r5, r3
 800bba8:	dc46      	bgt.n	800bc38 <__ieee754_rem_pio2f+0xb8>
 800bbaa:	2e00      	cmp	r6, #0
 800bbac:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bdc8 <__ieee754_rem_pio2f+0x248>
 800bbb0:	4b86      	ldr	r3, [pc, #536]	; (800bdcc <__ieee754_rem_pio2f+0x24c>)
 800bbb2:	f025 050f 	bic.w	r5, r5, #15
 800bbb6:	dd1f      	ble.n	800bbf8 <__ieee754_rem_pio2f+0x78>
 800bbb8:	429d      	cmp	r5, r3
 800bbba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bbbe:	d00e      	beq.n	800bbde <__ieee754_rem_pio2f+0x5e>
 800bbc0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bdd0 <__ieee754_rem_pio2f+0x250>
 800bbc4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bbc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bbcc:	ed80 0a00 	vstr	s0, [r0]
 800bbd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	edc4 7a01 	vstr	s15, [r4, #4]
 800bbda:	b007      	add	sp, #28
 800bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbde:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bdd4 <__ieee754_rem_pio2f+0x254>
 800bbe2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bdd8 <__ieee754_rem_pio2f+0x258>
 800bbe6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bbea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bbee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bbf2:	edc0 6a00 	vstr	s13, [r0]
 800bbf6:	e7eb      	b.n	800bbd0 <__ieee754_rem_pio2f+0x50>
 800bbf8:	429d      	cmp	r5, r3
 800bbfa:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bbfe:	d00e      	beq.n	800bc1e <__ieee754_rem_pio2f+0x9e>
 800bc00:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bdd0 <__ieee754_rem_pio2f+0x250>
 800bc04:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bc08:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bc0c:	ed80 0a00 	vstr	s0, [r0]
 800bc10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc18:	edc4 7a01 	vstr	s15, [r4, #4]
 800bc1c:	e7dd      	b.n	800bbda <__ieee754_rem_pio2f+0x5a>
 800bc1e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bdd4 <__ieee754_rem_pio2f+0x254>
 800bc22:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bdd8 <__ieee754_rem_pio2f+0x258>
 800bc26:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bc2a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bc2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bc32:	edc0 6a00 	vstr	s13, [r0]
 800bc36:	e7eb      	b.n	800bc10 <__ieee754_rem_pio2f+0x90>
 800bc38:	4b68      	ldr	r3, [pc, #416]	; (800bddc <__ieee754_rem_pio2f+0x25c>)
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	dc72      	bgt.n	800bd24 <__ieee754_rem_pio2f+0x1a4>
 800bc3e:	f000 fcf3 	bl	800c628 <fabsf>
 800bc42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bde0 <__ieee754_rem_pio2f+0x260>
 800bc46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bc4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc56:	ee17 0a90 	vmov	r0, s15
 800bc5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bdc8 <__ieee754_rem_pio2f+0x248>
 800bc5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bc62:	281f      	cmp	r0, #31
 800bc64:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bdd0 <__ieee754_rem_pio2f+0x250>
 800bc68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6c:	eeb1 6a47 	vneg.f32	s12, s14
 800bc70:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bc74:	ee16 2a90 	vmov	r2, s13
 800bc78:	dc1c      	bgt.n	800bcb4 <__ieee754_rem_pio2f+0x134>
 800bc7a:	495a      	ldr	r1, [pc, #360]	; (800bde4 <__ieee754_rem_pio2f+0x264>)
 800bc7c:	1e47      	subs	r7, r0, #1
 800bc7e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bc82:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bc86:	428b      	cmp	r3, r1
 800bc88:	d014      	beq.n	800bcb4 <__ieee754_rem_pio2f+0x134>
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	ed94 7a00 	vldr	s14, [r4]
 800bc90:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bc94:	2e00      	cmp	r6, #0
 800bc96:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc9a:	ed84 0a01 	vstr	s0, [r4, #4]
 800bc9e:	da9c      	bge.n	800bbda <__ieee754_rem_pio2f+0x5a>
 800bca0:	eeb1 7a47 	vneg.f32	s14, s14
 800bca4:	eeb1 0a40 	vneg.f32	s0, s0
 800bca8:	ed84 7a00 	vstr	s14, [r4]
 800bcac:	ed84 0a01 	vstr	s0, [r4, #4]
 800bcb0:	4240      	negs	r0, r0
 800bcb2:	e792      	b.n	800bbda <__ieee754_rem_pio2f+0x5a>
 800bcb4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bcb8:	15eb      	asrs	r3, r5, #23
 800bcba:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bcbe:	2d08      	cmp	r5, #8
 800bcc0:	dde3      	ble.n	800bc8a <__ieee754_rem_pio2f+0x10a>
 800bcc2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bdd4 <__ieee754_rem_pio2f+0x254>
 800bcc6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bdd8 <__ieee754_rem_pio2f+0x258>
 800bcca:	eef0 6a40 	vmov.f32	s13, s0
 800bcce:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bcd2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bcd6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800bcda:	eef0 7a40 	vmov.f32	s15, s0
 800bcde:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bce2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bce6:	ee15 2a90 	vmov	r2, s11
 800bcea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bcee:	1a5b      	subs	r3, r3, r1
 800bcf0:	2b19      	cmp	r3, #25
 800bcf2:	dc04      	bgt.n	800bcfe <__ieee754_rem_pio2f+0x17e>
 800bcf4:	edc4 5a00 	vstr	s11, [r4]
 800bcf8:	eeb0 0a66 	vmov.f32	s0, s13
 800bcfc:	e7c6      	b.n	800bc8c <__ieee754_rem_pio2f+0x10c>
 800bcfe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bde8 <__ieee754_rem_pio2f+0x268>
 800bd02:	eeb0 0a66 	vmov.f32	s0, s13
 800bd06:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bd0a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bd0e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bdec <__ieee754_rem_pio2f+0x26c>
 800bd12:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bd16:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bd1a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bd1e:	ed84 7a00 	vstr	s14, [r4]
 800bd22:	e7b3      	b.n	800bc8c <__ieee754_rem_pio2f+0x10c>
 800bd24:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bd28:	db06      	blt.n	800bd38 <__ieee754_rem_pio2f+0x1b8>
 800bd2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bd2e:	edc0 7a01 	vstr	s15, [r0, #4]
 800bd32:	edc0 7a00 	vstr	s15, [r0]
 800bd36:	e733      	b.n	800bba0 <__ieee754_rem_pio2f+0x20>
 800bd38:	15ea      	asrs	r2, r5, #23
 800bd3a:	3a86      	subs	r2, #134	; 0x86
 800bd3c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bd48:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bdf0 <__ieee754_rem_pio2f+0x270>
 800bd4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd54:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bd58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bd60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd68:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bd6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd70:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd78:	edcd 7a05 	vstr	s15, [sp, #20]
 800bd7c:	d11e      	bne.n	800bdbc <__ieee754_rem_pio2f+0x23c>
 800bd7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd86:	bf14      	ite	ne
 800bd88:	2302      	movne	r3, #2
 800bd8a:	2301      	moveq	r3, #1
 800bd8c:	4919      	ldr	r1, [pc, #100]	; (800bdf4 <__ieee754_rem_pio2f+0x274>)
 800bd8e:	9101      	str	r1, [sp, #4]
 800bd90:	2102      	movs	r1, #2
 800bd92:	9100      	str	r1, [sp, #0]
 800bd94:	a803      	add	r0, sp, #12
 800bd96:	4621      	mov	r1, r4
 800bd98:	f000 f892 	bl	800bec0 <__kernel_rem_pio2f>
 800bd9c:	2e00      	cmp	r6, #0
 800bd9e:	f6bf af1c 	bge.w	800bbda <__ieee754_rem_pio2f+0x5a>
 800bda2:	edd4 7a00 	vldr	s15, [r4]
 800bda6:	eef1 7a67 	vneg.f32	s15, s15
 800bdaa:	edc4 7a00 	vstr	s15, [r4]
 800bdae:	edd4 7a01 	vldr	s15, [r4, #4]
 800bdb2:	eef1 7a67 	vneg.f32	s15, s15
 800bdb6:	edc4 7a01 	vstr	s15, [r4, #4]
 800bdba:	e779      	b.n	800bcb0 <__ieee754_rem_pio2f+0x130>
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e7e5      	b.n	800bd8c <__ieee754_rem_pio2f+0x20c>
 800bdc0:	3f490fd8 	.word	0x3f490fd8
 800bdc4:	4016cbe3 	.word	0x4016cbe3
 800bdc8:	3fc90f80 	.word	0x3fc90f80
 800bdcc:	3fc90fd0 	.word	0x3fc90fd0
 800bdd0:	37354443 	.word	0x37354443
 800bdd4:	37354400 	.word	0x37354400
 800bdd8:	2e85a308 	.word	0x2e85a308
 800bddc:	43490f80 	.word	0x43490f80
 800bde0:	3f22f984 	.word	0x3f22f984
 800bde4:	0800cc9c 	.word	0x0800cc9c
 800bde8:	2e85a300 	.word	0x2e85a300
 800bdec:	248d3132 	.word	0x248d3132
 800bdf0:	43800000 	.word	0x43800000
 800bdf4:	0800cd1c 	.word	0x0800cd1c

0800bdf8 <__ieee754_sqrtf>:
 800bdf8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bdfc:	4770      	bx	lr
	...

0800be00 <__kernel_cosf>:
 800be00:	ee10 3a10 	vmov	r3, s0
 800be04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be08:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800be0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800be10:	da05      	bge.n	800be1e <__kernel_cosf+0x1e>
 800be12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be16:	ee17 2a90 	vmov	r2, s15
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	d03d      	beq.n	800be9a <__kernel_cosf+0x9a>
 800be1e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800be22:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bea0 <__kernel_cosf+0xa0>
 800be26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bea4 <__kernel_cosf+0xa4>
 800be2a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bea8 <__kernel_cosf+0xa8>
 800be2e:	4a1f      	ldr	r2, [pc, #124]	; (800beac <__kernel_cosf+0xac>)
 800be30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800be34:	4293      	cmp	r3, r2
 800be36:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800beb0 <__kernel_cosf+0xb0>
 800be3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800be3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800beb4 <__kernel_cosf+0xb4>
 800be42:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800be46:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800beb8 <__kernel_cosf+0xb8>
 800be4a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800be4e:	eeb0 7a66 	vmov.f32	s14, s13
 800be52:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800be56:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800be5a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800be5e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800be62:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800be66:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800be6a:	dc04      	bgt.n	800be76 <__kernel_cosf+0x76>
 800be6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800be70:	ee36 0a47 	vsub.f32	s0, s12, s14
 800be74:	4770      	bx	lr
 800be76:	4a11      	ldr	r2, [pc, #68]	; (800bebc <__kernel_cosf+0xbc>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	bfda      	itte	le
 800be7c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800be80:	ee06 3a90 	vmovle	s13, r3
 800be84:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800be88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be8c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800be90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be94:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be98:	4770      	bx	lr
 800be9a:	eeb0 0a46 	vmov.f32	s0, s12
 800be9e:	4770      	bx	lr
 800bea0:	ad47d74e 	.word	0xad47d74e
 800bea4:	310f74f6 	.word	0x310f74f6
 800bea8:	3d2aaaab 	.word	0x3d2aaaab
 800beac:	3e999999 	.word	0x3e999999
 800beb0:	b493f27c 	.word	0xb493f27c
 800beb4:	37d00d01 	.word	0x37d00d01
 800beb8:	bab60b61 	.word	0xbab60b61
 800bebc:	3f480000 	.word	0x3f480000

0800bec0 <__kernel_rem_pio2f>:
 800bec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	ed2d 8b04 	vpush	{d8-d9}
 800bec8:	b0d9      	sub	sp, #356	; 0x164
 800beca:	4688      	mov	r8, r1
 800becc:	9002      	str	r0, [sp, #8]
 800bece:	49bb      	ldr	r1, [pc, #748]	; (800c1bc <__kernel_rem_pio2f+0x2fc>)
 800bed0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bed8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bedc:	1e59      	subs	r1, r3, #1
 800bede:	1d13      	adds	r3, r2, #4
 800bee0:	db27      	blt.n	800bf32 <__kernel_rem_pio2f+0x72>
 800bee2:	f1b2 0b03 	subs.w	fp, r2, #3
 800bee6:	bf48      	it	mi
 800bee8:	f102 0b04 	addmi.w	fp, r2, #4
 800beec:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bef0:	1c45      	adds	r5, r0, #1
 800bef2:	00ec      	lsls	r4, r5, #3
 800bef4:	1a47      	subs	r7, r0, r1
 800bef6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800befa:	9403      	str	r4, [sp, #12]
 800befc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bf00:	eb0a 0c01 	add.w	ip, sl, r1
 800bf04:	ae1c      	add	r6, sp, #112	; 0x70
 800bf06:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bf0a:	2400      	movs	r4, #0
 800bf0c:	4564      	cmp	r4, ip
 800bf0e:	dd12      	ble.n	800bf36 <__kernel_rem_pio2f+0x76>
 800bf10:	9b01      	ldr	r3, [sp, #4]
 800bf12:	ac1c      	add	r4, sp, #112	; 0x70
 800bf14:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bf18:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bf1c:	f04f 0c00 	mov.w	ip, #0
 800bf20:	45d4      	cmp	ip, sl
 800bf22:	dc27      	bgt.n	800bf74 <__kernel_rem_pio2f+0xb4>
 800bf24:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bf28:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800bf2c:	4627      	mov	r7, r4
 800bf2e:	2600      	movs	r6, #0
 800bf30:	e016      	b.n	800bf60 <__kernel_rem_pio2f+0xa0>
 800bf32:	2000      	movs	r0, #0
 800bf34:	e7dc      	b.n	800bef0 <__kernel_rem_pio2f+0x30>
 800bf36:	42e7      	cmn	r7, r4
 800bf38:	bf5d      	ittte	pl
 800bf3a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bf3e:	ee07 3a90 	vmovpl	s15, r3
 800bf42:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bf46:	eef0 7a47 	vmovmi.f32	s15, s14
 800bf4a:	ece6 7a01 	vstmia	r6!, {s15}
 800bf4e:	3401      	adds	r4, #1
 800bf50:	e7dc      	b.n	800bf0c <__kernel_rem_pio2f+0x4c>
 800bf52:	ecf9 6a01 	vldmia	r9!, {s13}
 800bf56:	ed97 7a00 	vldr	s14, [r7]
 800bf5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf5e:	3601      	adds	r6, #1
 800bf60:	428e      	cmp	r6, r1
 800bf62:	f1a7 0704 	sub.w	r7, r7, #4
 800bf66:	ddf4      	ble.n	800bf52 <__kernel_rem_pio2f+0x92>
 800bf68:	eceb 7a01 	vstmia	fp!, {s15}
 800bf6c:	f10c 0c01 	add.w	ip, ip, #1
 800bf70:	3404      	adds	r4, #4
 800bf72:	e7d5      	b.n	800bf20 <__kernel_rem_pio2f+0x60>
 800bf74:	ab08      	add	r3, sp, #32
 800bf76:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800bf7a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c1c8 <__kernel_rem_pio2f+0x308>
 800bf7e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c1c4 <__kernel_rem_pio2f+0x304>
 800bf82:	9304      	str	r3, [sp, #16]
 800bf84:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bf88:	4656      	mov	r6, sl
 800bf8a:	00b3      	lsls	r3, r6, #2
 800bf8c:	9305      	str	r3, [sp, #20]
 800bf8e:	ab58      	add	r3, sp, #352	; 0x160
 800bf90:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bf94:	ac08      	add	r4, sp, #32
 800bf96:	ab44      	add	r3, sp, #272	; 0x110
 800bf98:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bf9c:	46a4      	mov	ip, r4
 800bf9e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bfa2:	4637      	mov	r7, r6
 800bfa4:	2f00      	cmp	r7, #0
 800bfa6:	f1a0 0004 	sub.w	r0, r0, #4
 800bfaa:	dc4f      	bgt.n	800c04c <__kernel_rem_pio2f+0x18c>
 800bfac:	4628      	mov	r0, r5
 800bfae:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bfb2:	f000 fb95 	bl	800c6e0 <scalbnf>
 800bfb6:	eeb0 8a40 	vmov.f32	s16, s0
 800bfba:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bfbe:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bfc2:	f000 fb45 	bl	800c650 <floorf>
 800bfc6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bfca:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bfd4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bfd8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bfdc:	ee17 9a90 	vmov	r9, s15
 800bfe0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bfe4:	dd44      	ble.n	800c070 <__kernel_rem_pio2f+0x1b0>
 800bfe6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800bfea:	ab08      	add	r3, sp, #32
 800bfec:	f1c5 0e08 	rsb	lr, r5, #8
 800bff0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bff4:	fa47 f00e 	asr.w	r0, r7, lr
 800bff8:	4481      	add	r9, r0
 800bffa:	fa00 f00e 	lsl.w	r0, r0, lr
 800bffe:	1a3f      	subs	r7, r7, r0
 800c000:	f1c5 0007 	rsb	r0, r5, #7
 800c004:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c008:	4107      	asrs	r7, r0
 800c00a:	2f00      	cmp	r7, #0
 800c00c:	dd3f      	ble.n	800c08e <__kernel_rem_pio2f+0x1ce>
 800c00e:	f04f 0e00 	mov.w	lr, #0
 800c012:	f109 0901 	add.w	r9, r9, #1
 800c016:	4673      	mov	r3, lr
 800c018:	4576      	cmp	r6, lr
 800c01a:	dc6b      	bgt.n	800c0f4 <__kernel_rem_pio2f+0x234>
 800c01c:	2d00      	cmp	r5, #0
 800c01e:	dd04      	ble.n	800c02a <__kernel_rem_pio2f+0x16a>
 800c020:	2d01      	cmp	r5, #1
 800c022:	d078      	beq.n	800c116 <__kernel_rem_pio2f+0x256>
 800c024:	2d02      	cmp	r5, #2
 800c026:	f000 8081 	beq.w	800c12c <__kernel_rem_pio2f+0x26c>
 800c02a:	2f02      	cmp	r7, #2
 800c02c:	d12f      	bne.n	800c08e <__kernel_rem_pio2f+0x1ce>
 800c02e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c032:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c036:	b353      	cbz	r3, 800c08e <__kernel_rem_pio2f+0x1ce>
 800c038:	4628      	mov	r0, r5
 800c03a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c03e:	f000 fb4f 	bl	800c6e0 <scalbnf>
 800c042:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c046:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c04a:	e020      	b.n	800c08e <__kernel_rem_pio2f+0x1ce>
 800c04c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c050:	3f01      	subs	r7, #1
 800c052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c05a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c05e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c062:	ecac 0a01 	vstmia	ip!, {s0}
 800c066:	ed90 0a00 	vldr	s0, [r0]
 800c06a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c06e:	e799      	b.n	800bfa4 <__kernel_rem_pio2f+0xe4>
 800c070:	d105      	bne.n	800c07e <__kernel_rem_pio2f+0x1be>
 800c072:	1e70      	subs	r0, r6, #1
 800c074:	ab08      	add	r3, sp, #32
 800c076:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c07a:	11ff      	asrs	r7, r7, #7
 800c07c:	e7c5      	b.n	800c00a <__kernel_rem_pio2f+0x14a>
 800c07e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c082:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c08a:	da31      	bge.n	800c0f0 <__kernel_rem_pio2f+0x230>
 800c08c:	2700      	movs	r7, #0
 800c08e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c096:	f040 809b 	bne.w	800c1d0 <__kernel_rem_pio2f+0x310>
 800c09a:	1e74      	subs	r4, r6, #1
 800c09c:	46a4      	mov	ip, r4
 800c09e:	2000      	movs	r0, #0
 800c0a0:	45d4      	cmp	ip, sl
 800c0a2:	da4a      	bge.n	800c13a <__kernel_rem_pio2f+0x27a>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d07a      	beq.n	800c19e <__kernel_rem_pio2f+0x2de>
 800c0a8:	ab08      	add	r3, sp, #32
 800c0aa:	3d08      	subs	r5, #8
 800c0ac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 8081 	beq.w	800c1b8 <__kernel_rem_pio2f+0x2f8>
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c0bc:	00a5      	lsls	r5, r4, #2
 800c0be:	f000 fb0f 	bl	800c6e0 <scalbnf>
 800c0c2:	aa44      	add	r2, sp, #272	; 0x110
 800c0c4:	1d2b      	adds	r3, r5, #4
 800c0c6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c1c8 <__kernel_rem_pio2f+0x308>
 800c0ca:	18d1      	adds	r1, r2, r3
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	f280 80ae 	bge.w	800c230 <__kernel_rem_pio2f+0x370>
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	f2c0 80cc 	blt.w	800c274 <__kernel_rem_pio2f+0x3b4>
 800c0dc:	a944      	add	r1, sp, #272	; 0x110
 800c0de:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c0e2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c1c0 <__kernel_rem_pio2f+0x300>
 800c0e6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	1aa1      	subs	r1, r4, r2
 800c0ee:	e0b6      	b.n	800c25e <__kernel_rem_pio2f+0x39e>
 800c0f0:	2702      	movs	r7, #2
 800c0f2:	e78c      	b.n	800c00e <__kernel_rem_pio2f+0x14e>
 800c0f4:	6820      	ldr	r0, [r4, #0]
 800c0f6:	b94b      	cbnz	r3, 800c10c <__kernel_rem_pio2f+0x24c>
 800c0f8:	b118      	cbz	r0, 800c102 <__kernel_rem_pio2f+0x242>
 800c0fa:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c0fe:	6020      	str	r0, [r4, #0]
 800c100:	2001      	movs	r0, #1
 800c102:	f10e 0e01 	add.w	lr, lr, #1
 800c106:	3404      	adds	r4, #4
 800c108:	4603      	mov	r3, r0
 800c10a:	e785      	b.n	800c018 <__kernel_rem_pio2f+0x158>
 800c10c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c110:	6020      	str	r0, [r4, #0]
 800c112:	4618      	mov	r0, r3
 800c114:	e7f5      	b.n	800c102 <__kernel_rem_pio2f+0x242>
 800c116:	1e74      	subs	r4, r6, #1
 800c118:	a808      	add	r0, sp, #32
 800c11a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c11e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c122:	f10d 0c20 	add.w	ip, sp, #32
 800c126:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c12a:	e77e      	b.n	800c02a <__kernel_rem_pio2f+0x16a>
 800c12c:	1e74      	subs	r4, r6, #1
 800c12e:	a808      	add	r0, sp, #32
 800c130:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c134:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c138:	e7f3      	b.n	800c122 <__kernel_rem_pio2f+0x262>
 800c13a:	ab08      	add	r3, sp, #32
 800c13c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c140:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c144:	4318      	orrs	r0, r3
 800c146:	e7ab      	b.n	800c0a0 <__kernel_rem_pio2f+0x1e0>
 800c148:	f10c 0c01 	add.w	ip, ip, #1
 800c14c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c150:	2c00      	cmp	r4, #0
 800c152:	d0f9      	beq.n	800c148 <__kernel_rem_pio2f+0x288>
 800c154:	9b05      	ldr	r3, [sp, #20]
 800c156:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c15a:	eb0d 0003 	add.w	r0, sp, r3
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	18f4      	adds	r4, r6, r3
 800c162:	ab1c      	add	r3, sp, #112	; 0x70
 800c164:	1c77      	adds	r7, r6, #1
 800c166:	384c      	subs	r0, #76	; 0x4c
 800c168:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c16c:	4466      	add	r6, ip
 800c16e:	42be      	cmp	r6, r7
 800c170:	f6ff af0b 	blt.w	800bf8a <__kernel_rem_pio2f+0xca>
 800c174:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c178:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c184:	f04f 0c00 	mov.w	ip, #0
 800c188:	ece4 7a01 	vstmia	r4!, {s15}
 800c18c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800c190:	46a1      	mov	r9, r4
 800c192:	458c      	cmp	ip, r1
 800c194:	dd07      	ble.n	800c1a6 <__kernel_rem_pio2f+0x2e6>
 800c196:	ece0 7a01 	vstmia	r0!, {s15}
 800c19a:	3701      	adds	r7, #1
 800c19c:	e7e7      	b.n	800c16e <__kernel_rem_pio2f+0x2ae>
 800c19e:	9804      	ldr	r0, [sp, #16]
 800c1a0:	f04f 0c01 	mov.w	ip, #1
 800c1a4:	e7d2      	b.n	800c14c <__kernel_rem_pio2f+0x28c>
 800c1a6:	ecfe 6a01 	vldmia	lr!, {s13}
 800c1aa:	ed39 7a01 	vldmdb	r9!, {s14}
 800c1ae:	f10c 0c01 	add.w	ip, ip, #1
 800c1b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c1b6:	e7ec      	b.n	800c192 <__kernel_rem_pio2f+0x2d2>
 800c1b8:	3c01      	subs	r4, #1
 800c1ba:	e775      	b.n	800c0a8 <__kernel_rem_pio2f+0x1e8>
 800c1bc:	0800d060 	.word	0x0800d060
 800c1c0:	0800d034 	.word	0x0800d034
 800c1c4:	43800000 	.word	0x43800000
 800c1c8:	3b800000 	.word	0x3b800000
 800c1cc:	00000000 	.word	0x00000000
 800c1d0:	9b03      	ldr	r3, [sp, #12]
 800c1d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c1d6:	1a98      	subs	r0, r3, r2
 800c1d8:	f000 fa82 	bl	800c6e0 <scalbnf>
 800c1dc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c1c4 <__kernel_rem_pio2f+0x304>
 800c1e0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e8:	db19      	blt.n	800c21e <__kernel_rem_pio2f+0x35e>
 800c1ea:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c1c8 <__kernel_rem_pio2f+0x308>
 800c1ee:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c1f2:	aa08      	add	r2, sp, #32
 800c1f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1f8:	1c74      	adds	r4, r6, #1
 800c1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1fe:	3508      	adds	r5, #8
 800c200:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c208:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c20c:	ee10 3a10 	vmov	r3, s0
 800c210:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c214:	ee17 3a90 	vmov	r3, s15
 800c218:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c21c:	e74b      	b.n	800c0b6 <__kernel_rem_pio2f+0x1f6>
 800c21e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c222:	aa08      	add	r2, sp, #32
 800c224:	ee10 3a10 	vmov	r3, s0
 800c228:	4634      	mov	r4, r6
 800c22a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c22e:	e742      	b.n	800c0b6 <__kernel_rem_pio2f+0x1f6>
 800c230:	a808      	add	r0, sp, #32
 800c232:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c236:	9001      	str	r0, [sp, #4]
 800c238:	ee07 0a90 	vmov	s15, r0
 800c23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c240:	3a01      	subs	r2, #1
 800c242:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c246:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c24a:	ed61 7a01 	vstmdb	r1!, {s15}
 800c24e:	e73e      	b.n	800c0ce <__kernel_rem_pio2f+0x20e>
 800c250:	ecfc 6a01 	vldmia	ip!, {s13}
 800c254:	ecb6 7a01 	vldmia	r6!, {s14}
 800c258:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c25c:	3001      	adds	r0, #1
 800c25e:	4550      	cmp	r0, sl
 800c260:	dc01      	bgt.n	800c266 <__kernel_rem_pio2f+0x3a6>
 800c262:	4288      	cmp	r0, r1
 800c264:	ddf4      	ble.n	800c250 <__kernel_rem_pio2f+0x390>
 800c266:	a858      	add	r0, sp, #352	; 0x160
 800c268:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c26c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c270:	3a01      	subs	r2, #1
 800c272:	e730      	b.n	800c0d6 <__kernel_rem_pio2f+0x216>
 800c274:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c276:	2a02      	cmp	r2, #2
 800c278:	dc09      	bgt.n	800c28e <__kernel_rem_pio2f+0x3ce>
 800c27a:	2a00      	cmp	r2, #0
 800c27c:	dc2a      	bgt.n	800c2d4 <__kernel_rem_pio2f+0x414>
 800c27e:	d043      	beq.n	800c308 <__kernel_rem_pio2f+0x448>
 800c280:	f009 0007 	and.w	r0, r9, #7
 800c284:	b059      	add	sp, #356	; 0x164
 800c286:	ecbd 8b04 	vpop	{d8-d9}
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c290:	2b03      	cmp	r3, #3
 800c292:	d1f5      	bne.n	800c280 <__kernel_rem_pio2f+0x3c0>
 800c294:	ab30      	add	r3, sp, #192	; 0xc0
 800c296:	442b      	add	r3, r5
 800c298:	461a      	mov	r2, r3
 800c29a:	4619      	mov	r1, r3
 800c29c:	4620      	mov	r0, r4
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f1a1 0104 	sub.w	r1, r1, #4
 800c2a4:	dc51      	bgt.n	800c34a <__kernel_rem_pio2f+0x48a>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	2901      	cmp	r1, #1
 800c2aa:	f1a2 0204 	sub.w	r2, r2, #4
 800c2ae:	dc5c      	bgt.n	800c36a <__kernel_rem_pio2f+0x4aa>
 800c2b0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	2c01      	cmp	r4, #1
 800c2b8:	dc67      	bgt.n	800c38a <__kernel_rem_pio2f+0x4ca>
 800c2ba:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c2be:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c2c2:	2f00      	cmp	r7, #0
 800c2c4:	d167      	bne.n	800c396 <__kernel_rem_pio2f+0x4d6>
 800c2c6:	edc8 6a00 	vstr	s13, [r8]
 800c2ca:	ed88 7a01 	vstr	s14, [r8, #4]
 800c2ce:	edc8 7a02 	vstr	s15, [r8, #8]
 800c2d2:	e7d5      	b.n	800c280 <__kernel_rem_pio2f+0x3c0>
 800c2d4:	aa30      	add	r2, sp, #192	; 0xc0
 800c2d6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800c2da:	4413      	add	r3, r2
 800c2dc:	4622      	mov	r2, r4
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	da24      	bge.n	800c32c <__kernel_rem_pio2f+0x46c>
 800c2e2:	b34f      	cbz	r7, 800c338 <__kernel_rem_pio2f+0x478>
 800c2e4:	eef1 7a47 	vneg.f32	s15, s14
 800c2e8:	edc8 7a00 	vstr	s15, [r8]
 800c2ec:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c2f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f4:	aa31      	add	r2, sp, #196	; 0xc4
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	da20      	bge.n	800c33e <__kernel_rem_pio2f+0x47e>
 800c2fc:	b10f      	cbz	r7, 800c302 <__kernel_rem_pio2f+0x442>
 800c2fe:	eef1 7a67 	vneg.f32	s15, s15
 800c302:	edc8 7a01 	vstr	s15, [r8, #4]
 800c306:	e7bb      	b.n	800c280 <__kernel_rem_pio2f+0x3c0>
 800c308:	aa30      	add	r2, sp, #192	; 0xc0
 800c30a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c1cc <__kernel_rem_pio2f+0x30c>
 800c30e:	4413      	add	r3, r2
 800c310:	2c00      	cmp	r4, #0
 800c312:	da05      	bge.n	800c320 <__kernel_rem_pio2f+0x460>
 800c314:	b10f      	cbz	r7, 800c31a <__kernel_rem_pio2f+0x45a>
 800c316:	eef1 7a67 	vneg.f32	s15, s15
 800c31a:	edc8 7a00 	vstr	s15, [r8]
 800c31e:	e7af      	b.n	800c280 <__kernel_rem_pio2f+0x3c0>
 800c320:	ed33 7a01 	vldmdb	r3!, {s14}
 800c324:	3c01      	subs	r4, #1
 800c326:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c32a:	e7f1      	b.n	800c310 <__kernel_rem_pio2f+0x450>
 800c32c:	ed73 7a01 	vldmdb	r3!, {s15}
 800c330:	3a01      	subs	r2, #1
 800c332:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c336:	e7d2      	b.n	800c2de <__kernel_rem_pio2f+0x41e>
 800c338:	eef0 7a47 	vmov.f32	s15, s14
 800c33c:	e7d4      	b.n	800c2e8 <__kernel_rem_pio2f+0x428>
 800c33e:	ecb2 7a01 	vldmia	r2!, {s14}
 800c342:	3301      	adds	r3, #1
 800c344:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c348:	e7d6      	b.n	800c2f8 <__kernel_rem_pio2f+0x438>
 800c34a:	edd1 7a00 	vldr	s15, [r1]
 800c34e:	edd1 6a01 	vldr	s13, [r1, #4]
 800c352:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c356:	3801      	subs	r0, #1
 800c358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c35c:	ed81 7a00 	vstr	s14, [r1]
 800c360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c364:	edc1 7a01 	vstr	s15, [r1, #4]
 800c368:	e799      	b.n	800c29e <__kernel_rem_pio2f+0x3de>
 800c36a:	edd2 7a00 	vldr	s15, [r2]
 800c36e:	edd2 6a01 	vldr	s13, [r2, #4]
 800c372:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c376:	3901      	subs	r1, #1
 800c378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c37c:	ed82 7a00 	vstr	s14, [r2]
 800c380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c384:	edc2 7a01 	vstr	s15, [r2, #4]
 800c388:	e78e      	b.n	800c2a8 <__kernel_rem_pio2f+0x3e8>
 800c38a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c38e:	3c01      	subs	r4, #1
 800c390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c394:	e78f      	b.n	800c2b6 <__kernel_rem_pio2f+0x3f6>
 800c396:	eef1 6a66 	vneg.f32	s13, s13
 800c39a:	eeb1 7a47 	vneg.f32	s14, s14
 800c39e:	edc8 6a00 	vstr	s13, [r8]
 800c3a2:	ed88 7a01 	vstr	s14, [r8, #4]
 800c3a6:	eef1 7a67 	vneg.f32	s15, s15
 800c3aa:	e790      	b.n	800c2ce <__kernel_rem_pio2f+0x40e>

0800c3ac <__kernel_sinf>:
 800c3ac:	ee10 3a10 	vmov	r3, s0
 800c3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c3b8:	da04      	bge.n	800c3c4 <__kernel_sinf+0x18>
 800c3ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c3be:	ee17 3a90 	vmov	r3, s15
 800c3c2:	b35b      	cbz	r3, 800c41c <__kernel_sinf+0x70>
 800c3c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c3c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c420 <__kernel_sinf+0x74>
 800c3cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c424 <__kernel_sinf+0x78>
 800c3d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c3d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c428 <__kernel_sinf+0x7c>
 800c3d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c3dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c42c <__kernel_sinf+0x80>
 800c3e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c3e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c430 <__kernel_sinf+0x84>
 800c3e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c3ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c3f0:	b930      	cbnz	r0, 800c400 <__kernel_sinf+0x54>
 800c3f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c434 <__kernel_sinf+0x88>
 800c3f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c3fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c3fe:	4770      	bx	lr
 800c400:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c404:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c408:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c40c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c410:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c438 <__kernel_sinf+0x8c>
 800c414:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c418:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	2f2ec9d3 	.word	0x2f2ec9d3
 800c424:	b2d72f34 	.word	0xb2d72f34
 800c428:	3638ef1b 	.word	0x3638ef1b
 800c42c:	b9500d01 	.word	0xb9500d01
 800c430:	3c088889 	.word	0x3c088889
 800c434:	be2aaaab 	.word	0xbe2aaaab
 800c438:	3e2aaaab 	.word	0x3e2aaaab

0800c43c <with_errnof>:
 800c43c:	b513      	push	{r0, r1, r4, lr}
 800c43e:	4604      	mov	r4, r0
 800c440:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c444:	f7fb fe8c 	bl	8008160 <__errno>
 800c448:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c44c:	6004      	str	r4, [r0, #0]
 800c44e:	b002      	add	sp, #8
 800c450:	bd10      	pop	{r4, pc}

0800c452 <xflowf>:
 800c452:	b130      	cbz	r0, 800c462 <xflowf+0x10>
 800c454:	eef1 7a40 	vneg.f32	s15, s0
 800c458:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c45c:	2022      	movs	r0, #34	; 0x22
 800c45e:	f7ff bfed 	b.w	800c43c <with_errnof>
 800c462:	eef0 7a40 	vmov.f32	s15, s0
 800c466:	e7f7      	b.n	800c458 <xflowf+0x6>

0800c468 <__math_uflowf>:
 800c468:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c470 <__math_uflowf+0x8>
 800c46c:	f7ff bff1 	b.w	800c452 <xflowf>
 800c470:	10000000 	.word	0x10000000

0800c474 <__math_oflowf>:
 800c474:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c47c <__math_oflowf+0x8>
 800c478:	f7ff bfeb 	b.w	800c452 <xflowf>
 800c47c:	70000000 	.word	0x70000000

0800c480 <atanf>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	ee10 5a10 	vmov	r5, s0
 800c486:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c48a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c48e:	eef0 7a40 	vmov.f32	s15, s0
 800c492:	db10      	blt.n	800c4b6 <atanf+0x36>
 800c494:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c498:	dd04      	ble.n	800c4a4 <atanf+0x24>
 800c49a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c49e:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c5dc <atanf+0x15c>
 800c4a8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c5e0 <atanf+0x160>
 800c4ac:	2d00      	cmp	r5, #0
 800c4ae:	bfd8      	it	le
 800c4b0:	eef0 7a40 	vmovle.f32	s15, s0
 800c4b4:	e7f3      	b.n	800c49e <atanf+0x1e>
 800c4b6:	4b4b      	ldr	r3, [pc, #300]	; (800c5e4 <atanf+0x164>)
 800c4b8:	429c      	cmp	r4, r3
 800c4ba:	dc10      	bgt.n	800c4de <atanf+0x5e>
 800c4bc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c4c0:	da0a      	bge.n	800c4d8 <atanf+0x58>
 800c4c2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c5e8 <atanf+0x168>
 800c4c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d6:	dce2      	bgt.n	800c49e <atanf+0x1e>
 800c4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4dc:	e013      	b.n	800c506 <atanf+0x86>
 800c4de:	f000 f8a3 	bl	800c628 <fabsf>
 800c4e2:	4b42      	ldr	r3, [pc, #264]	; (800c5ec <atanf+0x16c>)
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	dc4f      	bgt.n	800c588 <atanf+0x108>
 800c4e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	dc41      	bgt.n	800c574 <atanf+0xf4>
 800c4f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c4f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c4f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c50c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c5f0 <atanf+0x170>
 800c510:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c5f4 <atanf+0x174>
 800c514:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c5f8 <atanf+0x178>
 800c518:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c51c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c520:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c5fc <atanf+0x17c>
 800c524:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c528:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c600 <atanf+0x180>
 800c52c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c530:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c604 <atanf+0x184>
 800c534:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c538:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c608 <atanf+0x188>
 800c53c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c540:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c60c <atanf+0x18c>
 800c544:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c548:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c610 <atanf+0x190>
 800c54c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c550:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c614 <atanf+0x194>
 800c554:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c558:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c618 <atanf+0x198>
 800c55c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c560:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c564:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c56c:	d121      	bne.n	800c5b2 <atanf+0x132>
 800c56e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c572:	e794      	b.n	800c49e <atanf+0x1e>
 800c574:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c578:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c57c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c580:	2301      	movs	r3, #1
 800c582:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c586:	e7be      	b.n	800c506 <atanf+0x86>
 800c588:	4b24      	ldr	r3, [pc, #144]	; (800c61c <atanf+0x19c>)
 800c58a:	429c      	cmp	r4, r3
 800c58c:	dc0b      	bgt.n	800c5a6 <atanf+0x126>
 800c58e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c596:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c59a:	2302      	movs	r3, #2
 800c59c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5a4:	e7af      	b.n	800c506 <atanf+0x86>
 800c5a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c5aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	e7a9      	b.n	800c506 <atanf+0x86>
 800c5b2:	4a1b      	ldr	r2, [pc, #108]	; (800c620 <atanf+0x1a0>)
 800c5b4:	491b      	ldr	r1, [pc, #108]	; (800c624 <atanf+0x1a4>)
 800c5b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c5ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c5be:	ed93 0a00 	vldr	s0, [r3]
 800c5c2:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c5c6:	ed92 0a00 	vldr	s0, [r2]
 800c5ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ce:	2d00      	cmp	r5, #0
 800c5d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c5d4:	bfb8      	it	lt
 800c5d6:	eef1 7a67 	vneglt.f32	s15, s15
 800c5da:	e760      	b.n	800c49e <atanf+0x1e>
 800c5dc:	3fc90fdb 	.word	0x3fc90fdb
 800c5e0:	bfc90fdb 	.word	0xbfc90fdb
 800c5e4:	3edfffff 	.word	0x3edfffff
 800c5e8:	7149f2ca 	.word	0x7149f2ca
 800c5ec:	3f97ffff 	.word	0x3f97ffff
 800c5f0:	3c8569d7 	.word	0x3c8569d7
 800c5f4:	3d4bda59 	.word	0x3d4bda59
 800c5f8:	bd6ef16b 	.word	0xbd6ef16b
 800c5fc:	3d886b35 	.word	0x3d886b35
 800c600:	3dba2e6e 	.word	0x3dba2e6e
 800c604:	3e124925 	.word	0x3e124925
 800c608:	3eaaaaab 	.word	0x3eaaaaab
 800c60c:	bd15a221 	.word	0xbd15a221
 800c610:	bd9d8795 	.word	0xbd9d8795
 800c614:	bde38e38 	.word	0xbde38e38
 800c618:	be4ccccd 	.word	0xbe4ccccd
 800c61c:	401bffff 	.word	0x401bffff
 800c620:	0800d06c 	.word	0x0800d06c
 800c624:	0800d07c 	.word	0x0800d07c

0800c628 <fabsf>:
 800c628:	ee10 3a10 	vmov	r3, s0
 800c62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c630:	ee00 3a10 	vmov	s0, r3
 800c634:	4770      	bx	lr

0800c636 <finitef>:
 800c636:	b082      	sub	sp, #8
 800c638:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c63c:	9801      	ldr	r0, [sp, #4]
 800c63e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c642:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c646:	bfac      	ite	ge
 800c648:	2000      	movge	r0, #0
 800c64a:	2001      	movlt	r0, #1
 800c64c:	b002      	add	sp, #8
 800c64e:	4770      	bx	lr

0800c650 <floorf>:
 800c650:	ee10 3a10 	vmov	r3, s0
 800c654:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c658:	3a7f      	subs	r2, #127	; 0x7f
 800c65a:	2a16      	cmp	r2, #22
 800c65c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c660:	dc2a      	bgt.n	800c6b8 <floorf+0x68>
 800c662:	2a00      	cmp	r2, #0
 800c664:	da11      	bge.n	800c68a <floorf+0x3a>
 800c666:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c6c8 <floorf+0x78>
 800c66a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c66e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c676:	dd05      	ble.n	800c684 <floorf+0x34>
 800c678:	2b00      	cmp	r3, #0
 800c67a:	da23      	bge.n	800c6c4 <floorf+0x74>
 800c67c:	4a13      	ldr	r2, [pc, #76]	; (800c6cc <floorf+0x7c>)
 800c67e:	2900      	cmp	r1, #0
 800c680:	bf18      	it	ne
 800c682:	4613      	movne	r3, r2
 800c684:	ee00 3a10 	vmov	s0, r3
 800c688:	4770      	bx	lr
 800c68a:	4911      	ldr	r1, [pc, #68]	; (800c6d0 <floorf+0x80>)
 800c68c:	4111      	asrs	r1, r2
 800c68e:	420b      	tst	r3, r1
 800c690:	d0fa      	beq.n	800c688 <floorf+0x38>
 800c692:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c6c8 <floorf+0x78>
 800c696:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c69a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a2:	ddef      	ble.n	800c684 <floorf+0x34>
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfbe      	ittt	lt
 800c6a8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c6ac:	fa40 f202 	asrlt.w	r2, r0, r2
 800c6b0:	189b      	addlt	r3, r3, r2
 800c6b2:	ea23 0301 	bic.w	r3, r3, r1
 800c6b6:	e7e5      	b.n	800c684 <floorf+0x34>
 800c6b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c6bc:	d3e4      	bcc.n	800c688 <floorf+0x38>
 800c6be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6c2:	4770      	bx	lr
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e7dd      	b.n	800c684 <floorf+0x34>
 800c6c8:	7149f2ca 	.word	0x7149f2ca
 800c6cc:	bf800000 	.word	0xbf800000
 800c6d0:	007fffff 	.word	0x007fffff

0800c6d4 <nanf>:
 800c6d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c6dc <nanf+0x8>
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	7fc00000 	.word	0x7fc00000

0800c6e0 <scalbnf>:
 800c6e0:	ee10 3a10 	vmov	r3, s0
 800c6e4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c6e8:	d025      	beq.n	800c736 <scalbnf+0x56>
 800c6ea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c6ee:	d302      	bcc.n	800c6f6 <scalbnf+0x16>
 800c6f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6f4:	4770      	bx	lr
 800c6f6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c6fa:	d122      	bne.n	800c742 <scalbnf+0x62>
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <scalbnf+0xc8>)
 800c6fe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c7ac <scalbnf+0xcc>
 800c702:	4298      	cmp	r0, r3
 800c704:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c708:	db16      	blt.n	800c738 <scalbnf+0x58>
 800c70a:	ee10 3a10 	vmov	r3, s0
 800c70e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c712:	3a19      	subs	r2, #25
 800c714:	4402      	add	r2, r0
 800c716:	2afe      	cmp	r2, #254	; 0xfe
 800c718:	dd15      	ble.n	800c746 <scalbnf+0x66>
 800c71a:	ee10 3a10 	vmov	r3, s0
 800c71e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c7b0 <scalbnf+0xd0>
 800c722:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c7b4 <scalbnf+0xd4>
 800c726:	2b00      	cmp	r3, #0
 800c728:	eeb0 7a67 	vmov.f32	s14, s15
 800c72c:	bfb8      	it	lt
 800c72e:	eef0 7a66 	vmovlt.f32	s15, s13
 800c732:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c736:	4770      	bx	lr
 800c738:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c7b8 <scalbnf+0xd8>
 800c73c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c740:	4770      	bx	lr
 800c742:	0dd2      	lsrs	r2, r2, #23
 800c744:	e7e6      	b.n	800c714 <scalbnf+0x34>
 800c746:	2a00      	cmp	r2, #0
 800c748:	dd06      	ble.n	800c758 <scalbnf+0x78>
 800c74a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c74e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c752:	ee00 3a10 	vmov	s0, r3
 800c756:	4770      	bx	lr
 800c758:	f112 0f16 	cmn.w	r2, #22
 800c75c:	da1a      	bge.n	800c794 <scalbnf+0xb4>
 800c75e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c762:	4298      	cmp	r0, r3
 800c764:	ee10 3a10 	vmov	r3, s0
 800c768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c76c:	dd0a      	ble.n	800c784 <scalbnf+0xa4>
 800c76e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c7b0 <scalbnf+0xd0>
 800c772:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c7b4 <scalbnf+0xd4>
 800c776:	eef0 7a40 	vmov.f32	s15, s0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	bf18      	it	ne
 800c77e:	eeb0 0a47 	vmovne.f32	s0, s14
 800c782:	e7db      	b.n	800c73c <scalbnf+0x5c>
 800c784:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c7b8 <scalbnf+0xd8>
 800c788:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c7bc <scalbnf+0xdc>
 800c78c:	eef0 7a40 	vmov.f32	s15, s0
 800c790:	2b00      	cmp	r3, #0
 800c792:	e7f3      	b.n	800c77c <scalbnf+0x9c>
 800c794:	3219      	adds	r2, #25
 800c796:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c79a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c79e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c7c0 <scalbnf+0xe0>
 800c7a2:	ee07 3a10 	vmov	s14, r3
 800c7a6:	e7c4      	b.n	800c732 <scalbnf+0x52>
 800c7a8:	ffff3cb0 	.word	0xffff3cb0
 800c7ac:	4c000000 	.word	0x4c000000
 800c7b0:	7149f2ca 	.word	0x7149f2ca
 800c7b4:	f149f2ca 	.word	0xf149f2ca
 800c7b8:	0da24260 	.word	0x0da24260
 800c7bc:	8da24260 	.word	0x8da24260
 800c7c0:	33000000 	.word	0x33000000

0800c7c4 <_init>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_fini>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr
