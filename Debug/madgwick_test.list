
madgwick_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c588  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800c718  0800c718  0001c718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfc4  0800cfc4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfc4  0800cfc4  0001cfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfcc  0800cfcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfcc  0800cfcc  0001cfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfd0  0800cfd0  0001cfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cfd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000578  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000754  20000754  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e8a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c94  00000000  00000000  00036096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00038d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff9  00000000  00000000  0003b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001363c  00000000  00000000  0005e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4c8  00000000  00000000  000718dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cda5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006750  00000000  00000000  0013cdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c700 	.word	0x0800c700

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c700 	.word	0x0800c700

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <i3g4250d_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t i3g4250d_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	72fb      	strb	r3, [r7, #11]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	813b      	strh	r3, [r7, #8]

	halstatus = HAL_I2C_Mem_Write(handle, I3G4250D_I2C_ADD_L, reg,
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	893b      	ldrh	r3, [r7, #8]
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	21d1      	movs	r1, #209	; 0xd1
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f001 fc74 	bl	80027c4 <HAL_I2C_Mem_Write>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <i3g4250d_write+0x50>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <i3g4250d_write+0x50>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <i3g4250d_write+0x46>
			return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef0:	e000      	b.n	8000ef4 <i3g4250d_write+0x48>
		}
		return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200001f8 	.word	0x200001f8

08000f00 <i3g4250d_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
int32_t i3g4250d_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
 8000f10:	4613      	mov	r3, r2
 8000f12:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, I3G4250D_I2C_ADD_L, reg,
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	893b      	ldrh	r3, [r7, #8]
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	21d1      	movs	r1, #209	; 0xd1
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f001 fd44 	bl	80029b8 <HAL_I2C_Mem_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <i3g4250d_read+0x50>)
 8000f36:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <i3g4250d_read+0x50>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <i3g4250d_read+0x46>
		return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f44:	e000      	b.n	8000f48 <i3g4250d_read+0x48>
	}
	return 0;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001f8 	.word	0x200001f8

08000f54 <configure_i3g4250d>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_i3g4250d(void *handle, stmdev_ctx_t* dev_ctx)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = i3g4250d_write;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <configure_i3g4250d+0x74>)
 8000f62:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = i3g4250d_read;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <configure_i3g4250d+0x78>)
 8000f68:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	i3g4250d_device_id_get(dev_ctx, &who_iam);
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	4619      	mov	r1, r3
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f006 ffc7 	bl	8007f0a <i3g4250d_device_id_get>
	if(who_iam != I3G4250D_ID){
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	2bd3      	cmp	r3, #211	; 0xd3
 8000f80:	d002      	beq.n	8000f88 <configure_i3g4250d+0x34>
		return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f86:	e01b      	b.n	8000fc0 <configure_i3g4250d+0x6c>
	}

	int32_t ret;
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e014      	b.n	8000fb8 <configure_i3g4250d+0x64>
		ret = dev_ctx->write_reg(handle, I3G4250D_REGs_ADDR_conf[i], I3G4250D_REGs_VAL_conf + i, 1);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681c      	ldr	r4, [r3, #0]
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <configure_i3g4250d+0x7c>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4413      	add	r3, r2
 8000f98:	7819      	ldrb	r1, [r3, #0]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <configure_i3g4250d+0x80>)
 8000f9e:	441a      	add	r2, r3
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	47a0      	blx	r4
 8000fa6:	6178      	str	r0, [r7, #20]
		if(ret != 0)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <configure_i3g4250d+0x5e>
		{
			return ret;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	e006      	b.n	8000fc0 <configure_i3g4250d+0x6c>
	for(int i = 0; i < I3G4250D_SEQUENCE_SIZE; i++){
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	dde7      	ble.n	8000f8e <configure_i3g4250d+0x3a>
		}
	}
	return ret;
 8000fbe:	697b      	ldr	r3, [r7, #20]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	08000ead 	.word	0x08000ead
 8000fcc:	08000f01 	.word	0x08000f01
 8000fd0:	0800c77c 	.word	0x0800c77c
 8000fd4:	0800c784 	.word	0x0800c784

08000fd8 <read_gyroscope_data_fifo>:
 * @param dev_ctx    		device structure
 * @param accel_data 		acceleration of device(x,y,z)
 *
 */
int32_t read_gyroscope_data_fifo(stmdev_ctx_t *dev_ctx, float* gyro_data)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 	 int16_t raw_gyro_data[3];
 	 memset(raw_gyro_data, 0x00, 3 * sizeof(int16_t));
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f007 f904 	bl	80081f8 <memset>
	 int ret = i3g4250d_angular_rate_raw_get(dev_ctx, raw_gyro_data);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 ff3c 	bl	8007e74 <i3g4250d_angular_rate_raw_get>
 8000ffc:	6138      	str	r0, [r7, #16]
	 if(ret == 0){
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d119      	bne.n	8001038 <read_gyroscope_data_fifo+0x60>
		 for(int i = 0; i<3; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e013      	b.n	8001032 <read_gyroscope_data_fifo+0x5a>
		 {
			 gyro_data[i] = i3g4250d_from_fs245dps_to_mdps(
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	3318      	adds	r3, #24
 8001010:	443b      	add	r3, r7
 8001012:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	18d4      	adds	r4, r2, r3
 800101e:	4608      	mov	r0, r1
 8001020:	f006 ff10 	bl	8007e44 <i3g4250d_from_fs245dps_to_mdps>
 8001024:	eef0 7a40 	vmov.f32	s15, s0
 8001028:	edc4 7a00 	vstr	s15, [r4]
		 for(int i = 0; i<3; i++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b02      	cmp	r3, #2
 8001036:	dde8      	ble.n	800100a <read_gyroscope_data_fifo+0x32>
											  raw_gyro_data[i]);
		 }
	 }
	 return ret;
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	4618      	mov	r0, r3
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
	...

08001044 <lis331dlh_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis331dlh_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af04      	add	r7, sp, #16
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	4613      	mov	r3, r2
 8001056:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS331DLH_I2C_ADD_L, reg,
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	b29a      	uxth	r2, r3
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	893b      	ldrh	r3, [r7, #8]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2131      	movs	r1, #49	; 0x31
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f001 fba8 	bl	80027c4 <HAL_I2C_Mem_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <lis331dlh_write+0x50>)
 800107a:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <lis331dlh_write+0x50>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <lis331dlh_write+0x46>
			return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001088:	e000      	b.n	800108c <lis331dlh_write+0x48>
		}
		return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001f9 	.word	0x200001f9

08001098 <lis331dlh_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis331dlh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	461a      	mov	r2, r3
 80010a4:	460b      	mov	r3, r1
 80010a6:	72fb      	strb	r3, [r7, #11]
 80010a8:	4613      	mov	r3, r2
 80010aa:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS331DLH_I2C_ADD_L, reg,
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	893b      	ldrh	r3, [r7, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2131      	movs	r1, #49	; 0x31
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 fc78 	bl	80029b8 <HAL_I2C_Mem_Read>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <lis331dlh_read+0x50>)
 80010ce:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <lis331dlh_read+0x50>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <lis331dlh_read+0x46>
		return -1;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	e000      	b.n	80010e0 <lis331dlh_read+0x48>
	}
	return 0;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001f9 	.word	0x200001f9

080010ec <configure_lis331dlh>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis331dlh(void *handle, stmdev_ctx_t *dev_ctx)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = lis331dlh_write;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <configure_lis331dlh+0xb4>)
 80010fa:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = lis331dlh_read;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	4a29      	ldr	r2, [pc, #164]	; (80011a4 <configure_lis331dlh+0xb8>)
 8001100:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	lis331dlh_device_id_get(dev_ctx, &who_iam);
 8001108:	f107 030b 	add.w	r3, r7, #11
 800110c:	4619      	mov	r1, r3
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f006 ff98 	bl	8008044 <lis331dlh_device_id_get>
	if(who_iam != LIS331DLH_ID){
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	2b32      	cmp	r3, #50	; 0x32
 8001118:	d002      	beq.n	8001120 <configure_lis331dlh+0x34>
		return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e03a      	b.n	8001196 <configure_lis331dlh+0xaa>
	}

	int32_t ret;
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	e033      	b.n	800118e <configure_lis331dlh+0xa2>
		if(LIS331DLH_REGs_ADDR_conf[i] == LIS331DLH_HP_FILTER_RESET){
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b25      	cmp	r3, #37	; 0x25
 8001130:	d117      	bne.n	8001162 <configure_lis331dlh+0x76>
			uint8_t *empty_buff = (uint8_t*)malloc(sizeof(uint8_t));
 8001132:	2001      	movs	r0, #1
 8001134:	f007 f850 	bl	80081d8 <malloc>
 8001138:	4603      	mov	r3, r0
 800113a:	60fb      	str	r3, [r7, #12]
			ret = dev_ctx->read_reg(handle, LIS331DLH_REGs_ADDR_conf[i], empty_buff, 1);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685c      	ldr	r4, [r3, #4]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	7819      	ldrb	r1, [r3, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	47a0      	blx	r4
 8001150:	6138      	str	r0, [r7, #16]
			free(empty_buff);
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f007 f848 	bl	80081e8 <free>
			if(ret != 0)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <configure_lis331dlh+0x9a>
			{
				return ret;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	e019      	b.n	8001196 <configure_lis331dlh+0xaa>
			}
			continue;
		}
		ret = dev_ctx->write_reg(handle, LIS331DLH_REGs_ADDR_conf[i], LIS331DLH_REGs_VAL_conf + i, 1);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681c      	ldr	r4, [r3, #0]
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <configure_lis331dlh+0xbc>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	4413      	add	r3, r2
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <configure_lis331dlh+0xc0>)
 8001172:	441a      	add	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	47a0      	blx	r4
 800117a:	6138      	str	r0, [r7, #16]
		if(ret != 0)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <configure_lis331dlh+0x9c>
		{
			return ret;
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	e007      	b.n	8001196 <configure_lis331dlh+0xaa>
			continue;
 8001186:	bf00      	nop
	for(int i = 0; i < LIS331DLH_SEQUENCE_SIZE; i++){
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b0c      	cmp	r3, #12
 8001192:	ddc8      	ble.n	8001126 <configure_lis331dlh+0x3a>
		}
	}
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	08001045 	.word	0x08001045
 80011a4:	08001099 	.word	0x08001099
 80011a8:	0800c78c 	.word	0x0800c78c
 80011ac:	0800c79c 	.word	0x0800c79c

080011b0 <read_acceleration_data>:
 * @param dev_ctx    		device structure
 * @param accel_data 		acceleration of device(x,y,z)
 *
 */
int32_t read_acceleration_data(stmdev_ctx_t *dev_ctx, float* accel_data)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	lis331dlh_status_reg_t status_reg;
	lis331dlh_status_reg_get(dev_ctx, &status_reg);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f006 fee3 	bl	8007f8c <lis331dlh_status_reg_get>
	int32_t ret;
	int16_t raw_accel_data[3];
	memset(raw_accel_data, 0x00, 3 * sizeof(int16_t));
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2206      	movs	r2, #6
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f812 	bl	80081f8 <memset>
	while(1){
		if(status_reg.zyxda != 0)
 80011d4:	7d3b      	ldrb	r3, [r7, #20]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d100      	bne.n	80011e2 <read_acceleration_data+0x32>
 80011e0:	e7f8      	b.n	80011d4 <read_acceleration_data+0x24>
			break;
 80011e2:	bf00      	nop
	}
	ret = lis331dlh_acceleration_raw_get(dev_ctx, raw_accel_data);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f006 fedf 	bl	8007fae <lis331dlh_acceleration_raw_get>
 80011f0:	61b8      	str	r0, [r7, #24]
	if(ret == 0){
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d119      	bne.n	800122c <read_acceleration_data+0x7c>
		for(int i = 0; i<3; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e013      	b.n	8001226 <read_acceleration_data+0x76>
		 {
			 accel_data[i] = lis331dlh_from_fs2_to_mg(raw_accel_data[i]);
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	3320      	adds	r3, #32
 8001204:	443b      	add	r3, r7
 8001206:	f933 1c14 	ldrsh.w	r1, [r3, #-20]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	18d4      	adds	r4, r2, r3
 8001212:	4608      	mov	r0, r1
 8001214:	f006 fea2 	bl	8007f5c <lis331dlh_from_fs2_to_mg>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<3; i++)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	dde8      	ble.n	80011fe <read_acceleration_data+0x4e>
		 }
	}

	return ret;
 800122c:	69bb      	ldr	r3, [r7, #24]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
	...

08001238 <lis3mdl_write>:
 * @param  len       number of consecutive register to write
 *
 */
int32_t lis3mdl_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af04      	add	r7, sp, #16
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	461a      	mov	r2, r3
 8001244:	460b      	mov	r3, r1
 8001246:	72fb      	strb	r3, [r7, #11]
 8001248:	4613      	mov	r3, r2
 800124a:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Write(handle, LIS3MDL_I2C_ADD_L, reg,
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	b29a      	uxth	r2, r3
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	893b      	ldrh	r3, [r7, #8]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2139      	movs	r1, #57	; 0x39
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f001 faae 	bl	80027c4 <HAL_I2C_Mem_Write>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <lis3mdl_write+0x50>)
 800126e:	701a      	strb	r2, [r3, #0]
	                  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	if(halstatus != HAL_OK){
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <lis3mdl_write+0x50>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <lis3mdl_write+0x46>
			return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	e000      	b.n	8001280 <lis3mdl_write+0x48>
		}
		return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200001fa 	.word	0x200001fa

0800128c <lis3mdl_read>:
 * @param  len       number of consecutive register to read
 *
 */
int32_t lis3mdl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	72fb      	strb	r3, [r7, #11]
 800129c:	4613      	mov	r3, r2
 800129e:	813b      	strh	r3, [r7, #8]
	halstatus = HAL_I2C_Mem_Read(handle, LIS3MDL_I2C_ADD_L, reg,
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	893b      	ldrh	r3, [r7, #8]
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2139      	movs	r1, #57	; 0x39
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f001 fb7e 	bl	80029b8 <HAL_I2C_Mem_Read>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <lis3mdl_read+0x50>)
 80012c2:	701a      	strb	r2, [r3, #0]
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	if(halstatus != HAL_OK){
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <lis3mdl_read+0x50>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <lis3mdl_read+0x46>
		return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d0:	e000      	b.n	80012d4 <lis3mdl_read+0x48>
	}
	return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001fa 	.word	0x200001fa

080012e0 <configure_lis3mdl>:
 * @param platform_write 	pointer to function that write data through i2c
 * @param platform_read 	pointer to function that read data through i2c
 *
 */
int32_t configure_lis3mdl(void *handle, stmdev_ctx_t *dev_ctx)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	dev_ctx->write_reg = lis3mdl_write;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <configure_lis3mdl+0x74>)
 80012ee:	601a      	str	r2, [r3, #0]
	dev_ctx->read_reg = lis3mdl_read;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <configure_lis3mdl+0x78>)
 80012f4:	605a      	str	r2, [r3, #4]
	dev_ctx->handle = handle;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	60da      	str	r2, [r3, #12]

	uint8_t who_iam;
	lis3mdl_device_id_get(dev_ctx, &who_iam);
 80012fc:	f107 030f 	add.w	r3, r7, #15
 8001300:	4619      	mov	r1, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f006 ff2d 	bl	8008162 <lis3mdl_device_id_get>
	if(who_iam != LIS3MDL_ID){
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b3d      	cmp	r3, #61	; 0x3d
 800130c:	d002      	beq.n	8001314 <configure_lis3mdl+0x34>
		return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001312:	e01b      	b.n	800134c <configure_lis3mdl+0x6c>
	}

	int32_t ret;
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e014      	b.n	8001344 <configure_lis3mdl+0x64>
		ret = dev_ctx->write_reg(handle, LIS3MDL_REGs_ADDR_conf[i], LIS3MDL_REGs_VAL_conf + i, 1);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681c      	ldr	r4, [r3, #0]
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <configure_lis3mdl+0x7c>)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4413      	add	r3, r2
 8001324:	7819      	ldrb	r1, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <configure_lis3mdl+0x80>)
 800132a:	441a      	add	r2, r3
 800132c:	2301      	movs	r3, #1
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	47a0      	blx	r4
 8001332:	6138      	str	r0, [r7, #16]
		if(ret != 0)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <configure_lis3mdl+0x5e>
		{
			return ret;
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	e006      	b.n	800134c <configure_lis3mdl+0x6c>
	for(int i = 0; i < LIS3MDL_SEQUENCE_SIZE; i++){
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b02      	cmp	r3, #2
 8001348:	dde7      	ble.n	800131a <configure_lis3mdl+0x3a>
		}
	}
	return 0;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	08001239 	.word	0x08001239
 8001358:	0800128d 	.word	0x0800128d
 800135c:	0800c7a8 	.word	0x0800c7a8
 8001360:	0800c7ac 	.word	0x0800c7ac

08001364 <read_mag_data>:
 * @param dev_ctx    		device structure
 * @param mag_data 			magnetic data
 *
 */
int32_t read_mag_data(stmdev_ctx_t *dev_ctx, float* mag_data)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	int32_t ret;
	int16_t raw_mag_data[3];
	memset(raw_mag_data, 0x00, 3 * sizeof(int16_t));
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2206      	movs	r2, #6
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f006 ff3e 	bl	80081f8 <memset>
	ret = lis3mdl_magnetic_raw_get(dev_ctx, raw_mag_data);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4619      	mov	r1, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f006 fea2 	bl	80080cc <lis3mdl_magnetic_raw_get>
 8001388:	6138      	str	r0, [r7, #16]
	if(ret == 0){
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11d      	bne.n	80013cc <read_mag_data+0x68>
		for(int i = 0; i<3; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e017      	b.n	80013c6 <read_mag_data+0x62>
		{
			mag_data[i] = 1000 * lis3mdl_from_fs16_to_gauss(raw_mag_data[i]);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	3318      	adds	r3, #24
 800139c:	443b      	add	r3, r7
 800139e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 fe78 	bl	8008098 <lis3mdl_from_fs16_to_gauss>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013d8 <read_mag_data+0x74>
 80013b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013bc:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i<3; i++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	dde4      	ble.n	8001396 <read_mag_data+0x32>
		}
	}
	return ret;
 80013cc:	693b      	ldr	r3, [r7, #16]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	447a0000 	.word	0x447a0000

080013dc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001400 <FusionRadiansToDegrees+0x24>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	42652ee0 	.word	0x42652ee0

08001404 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 800140e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001412:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d802      	bhi.n	8001426 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8001420:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8001454 <FusionAsin+0x50>
 8001424:	e011      	b.n	800144a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8001426:	edd7 7a01 	vldr	s15, [r7, #4]
 800142a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	db02      	blt.n	800143e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8001438:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001458 <FusionAsin+0x54>
 800143c:	e005      	b.n	800144a <FusionAsin+0x46>
    }
    return asinf(value);
 800143e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001442:	f009 fe61 	bl	800b108 <asinf>
 8001446:	eef0 7a40 	vmov.f32	s15, s0
}
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	bfc90fdb 	.word	0xbfc90fdb
 8001458:	3fc90fdb 	.word	0x3fc90fdb

0800145c <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b090      	sub	sp, #64	; 0x40
 8001460:	af00      	add	r7, sp, #0
 8001462:	eeb0 6a40 	vmov.f32	s12, s0
 8001466:	eef0 6a60 	vmov.f32	s13, s1
 800146a:	eeb0 7a41 	vmov.f32	s14, s2
 800146e:	eef0 7a61 	vmov.f32	s15, s3
 8001472:	ed87 6a04 	vstr	s12, [r7, #16]
 8001476:	edc7 6a05 	vstr	s13, [r7, #20]
 800147a:	ed87 7a06 	vstr	s14, [r7, #24]
 800147e:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8001482:	ed97 7a06 	vldr	s14, [r7, #24]
 8001486:	edd7 7a06 	vldr	s15, [r7, #24]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 800149a:	ed97 7a04 	vldr	s14, [r7, #16]
 800149e:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80014aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80014b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	eef0 0a67 	vmov.f32	s1, s15
 80014ce:	eeb0 0a66 	vmov.f32	s0, s13
 80014d2:	f009 fe45 	bl	800b160 <atan2f>
 80014d6:	eef0 7a40 	vmov.f32	s15, s0
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f7ff ff7d 	bl	80013dc <FusionRadiansToDegrees>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80014e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 80014ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80014ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	f7ff ff79 	bl	8001404 <FusionAsin>
 8001512:	eef0 7a40 	vmov.f32	s15, s0
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f7ff ff5f 	bl	80013dc <FusionRadiansToDegrees>
 800151e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001522:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8001526:	ed97 7a04 	vldr	s14, [r7, #16]
 800152a:	edd7 7a07 	vldr	s15, [r7, #28]
 800152e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001532:	edd7 6a05 	vldr	s13, [r7, #20]
 8001536:	edd7 7a06 	vldr	s15, [r7, #24]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001542:	ed97 7a07 	vldr	s14, [r7, #28]
 8001546:	edd7 7a07 	vldr	s15, [r7, #28]
 800154a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	eeb0 0a66 	vmov.f32	s0, s13
 800155e:	f009 fdff 	bl	800b160 <atan2f>
 8001562:	eef0 7a40 	vmov.f32	s15, s0
 8001566:	eeb0 0a67 	vmov.f32	s0, s15
 800156a:	f7ff ff37 	bl	80013dc <FusionRadiansToDegrees>
 800156e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001572:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 8001576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800157e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001580:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800158a:	ee06 1a90 	vmov	s13, r1
 800158e:	ee07 2a10 	vmov	s14, r2
 8001592:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001596:	eeb0 0a66 	vmov.f32	s0, s13
 800159a:	eef0 0a47 	vmov.f32	s1, s14
 800159e:	eeb0 1a67 	vmov.f32	s2, s15
 80015a2:	3740      	adds	r7, #64	; 0x40
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b0:	1d39      	adds	r1, r7, #4
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b6:	2201      	movs	r2, #1
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <__io_putchar+0x20>)
 80015ba:	f004 f8fe 	bl	80057ba <HAL_UART_Transmit>
  return ch;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000250 	.word	0x20000250

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015d0:	b096      	sub	sp, #88	; 0x58
 80015d2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fc62 	bl	8001e9c <HAL_Init>

  /* USER CODE BEGIN Init */
  FusionAhrsInitialise(&ahrs);
 80015d8:	487a      	ldr	r0, [pc, #488]	; (80017c4 <main+0x1f8>)
 80015da:	f005 f913 	bl	8006804 <FusionAhrsInitialise>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015de:	f000 f90f 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e2:	f000 f9c3 	bl	800196c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015e6:	f000 f969 	bl	80018bc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015ea:	f000 f995 	bl	8001918 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ret = configure_lis331dlh(&hi2c1, &lis331dlh_ctx);
 80015ee:	4976      	ldr	r1, [pc, #472]	; (80017c8 <main+0x1fc>)
 80015f0:	4876      	ldr	r0, [pc, #472]	; (80017cc <main+0x200>)
 80015f2:	f7ff fd7b 	bl	80010ec <configure_lis331dlh>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a75      	ldr	r2, [pc, #468]	; (80017d0 <main+0x204>)
 80015fa:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 80015fc:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <main+0x204>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <main+0x3c>
  {
	  Error_Handler();
 8001604:	f000 fa38 	bl	8001a78 <Error_Handler>
  }

  ret = configure_i3g4250d(&hi2c1, &i3g4250d_ctx);
 8001608:	4972      	ldr	r1, [pc, #456]	; (80017d4 <main+0x208>)
 800160a:	4870      	ldr	r0, [pc, #448]	; (80017cc <main+0x200>)
 800160c:	f7ff fca2 	bl	8000f54 <configure_i3g4250d>
 8001610:	4603      	mov	r3, r0
 8001612:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <main+0x204>)
 8001614:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 8001616:	4b6e      	ldr	r3, [pc, #440]	; (80017d0 <main+0x204>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <main+0x56>
  {
	 Error_Handler();
 800161e:	f000 fa2b 	bl	8001a78 <Error_Handler>
  }

  ret = configure_lis3mdl(&hi2c1, &lis3mdl_ctx);
 8001622:	496d      	ldr	r1, [pc, #436]	; (80017d8 <main+0x20c>)
 8001624:	4869      	ldr	r0, [pc, #420]	; (80017cc <main+0x200>)
 8001626:	f7ff fe5b 	bl	80012e0 <configure_lis3mdl>
 800162a:	4603      	mov	r3, r0
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <main+0x204>)
 800162e:	6013      	str	r3, [r2, #0]
  if(ret != 0)
 8001630:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <main+0x204>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <main+0x70>
  {
    Error_Handler();
 8001638:	f000 fa1e 	bl	8001a78 <Error_Handler>
  }
  sprintf((char *)tx_buffer, "All devices are up!\n");
 800163c:	4967      	ldr	r1, [pc, #412]	; (80017dc <main+0x210>)
 800163e:	4868      	ldr	r0, [pc, #416]	; (80017e0 <main+0x214>)
 8001640:	f007 fb54 	bl	8008cec <siprintf>
  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8001644:	4866      	ldr	r0, [pc, #408]	; (80017e0 <main+0x214>)
 8001646:	f7fe fdc3 	bl	80001d0 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	4863      	ldr	r0, [pc, #396]	; (80017e0 <main+0x214>)
 8001652:	f000 f9fd 	bl	8001a50 <tx_com>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	const char sym = "sas";
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <main+0x218>)
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_UART_Transmit(&huart2, (uint8_t *)&sym, 1, HAL_MAX_DELAY);
 800165e:	f107 0137 	add.w	r1, r7, #55	; 0x37
 8001662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001666:	2201      	movs	r2, #1
 8001668:	485f      	ldr	r0, [pc, #380]	; (80017e8 <main+0x21c>)
 800166a:	f004 f8a6 	bl	80057ba <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ret = read_acceleration_data(&lis331dlh_ctx, acceleration_data);
 800166e:	495f      	ldr	r1, [pc, #380]	; (80017ec <main+0x220>)
 8001670:	4855      	ldr	r0, [pc, #340]	; (80017c8 <main+0x1fc>)
 8001672:	f7ff fd9d 	bl	80011b0 <read_acceleration_data>
 8001676:	4603      	mov	r3, r0
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <main+0x204>)
 800167a:	6013      	str	r3, [r2, #0]
	ret = read_gyroscope_data_fifo(&i3g4250d_ctx, gyro_data);
 800167c:	495c      	ldr	r1, [pc, #368]	; (80017f0 <main+0x224>)
 800167e:	4855      	ldr	r0, [pc, #340]	; (80017d4 <main+0x208>)
 8001680:	f7ff fcaa 	bl	8000fd8 <read_gyroscope_data_fifo>
 8001684:	4603      	mov	r3, r0
 8001686:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <main+0x204>)
 8001688:	6013      	str	r3, [r2, #0]
	ret = read_mag_data(&lis3mdl_ctx, magnetic_data);
 800168a:	495a      	ldr	r1, [pc, #360]	; (80017f4 <main+0x228>)
 800168c:	4852      	ldr	r0, [pc, #328]	; (80017d8 <main+0x20c>)
 800168e:	f7ff fe69 	bl	8001364 <read_mag_data>
 8001692:	4603      	mov	r3, r0
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <main+0x204>)
 8001696:	6013      	str	r3, [r2, #0]
	const FusionVector gyro = {{gyro_data[0], gyro_data[1], gyro_data[2]}};
 8001698:	4b55      	ldr	r3, [pc, #340]	; (80017f0 <main+0x224>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
 800169e:	4b54      	ldr	r3, [pc, #336]	; (80017f0 <main+0x224>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <main+0x224>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
	const FusionVector acceleration = {{acceleration_data[0], acceleration_data[1], acceleration_data[2]}};
 80016aa:	4b50      	ldr	r3, [pc, #320]	; (80017ec <main+0x220>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <main+0x220>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	623b      	str	r3, [r7, #32]
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <main+0x220>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
	const FusionVector magnetic= {{magnetic_data[0], magnetic_data[1], magnetic_data[2]}};
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <main+0x228>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <main+0x228>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <main+0x228>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	61bb      	str	r3, [r7, #24]

	FusionAhrsUpdate(&ahrs, gyro, acceleration, magnetic, 0.01f);
 80016ce:	ed97 3a04 	vldr	s6, [r7, #16]
 80016d2:	edd7 3a05 	vldr	s7, [r7, #20]
 80016d6:	ed97 4a06 	vldr	s8, [r7, #24]
 80016da:	ed97 5a07 	vldr	s10, [r7, #28]
 80016de:	edd7 5a08 	vldr	s11, [r7, #32]
 80016e2:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80016e6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80016ea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016f2:	eddf 4a41 	vldr	s9, [pc, #260]	; 80017f8 <main+0x22c>
 80016f6:	eef0 1a45 	vmov.f32	s3, s10
 80016fa:	eeb0 2a65 	vmov.f32	s4, s11
 80016fe:	eef0 2a46 	vmov.f32	s5, s12
 8001702:	eeb0 0a66 	vmov.f32	s0, s13
 8001706:	eef0 0a47 	vmov.f32	s1, s14
 800170a:	eeb0 1a67 	vmov.f32	s2, s15
 800170e:	482d      	ldr	r0, [pc, #180]	; (80017c4 <main+0x1f8>)
 8001710:	f005 f980 	bl	8006a14 <FusionAhrsUpdate>
	const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001714:	482b      	ldr	r0, [pc, #172]	; (80017c4 <main+0x1f8>)
 8001716:	f005 fea5 	bl	8007464 <FusionAhrsGetQuaternion>
 800171a:	eeb0 6a40 	vmov.f32	s12, s0
 800171e:	eef0 6a60 	vmov.f32	s13, s1
 8001722:	eeb0 7a41 	vmov.f32	s14, s2
 8001726:	eef0 7a61 	vmov.f32	s15, s3
 800172a:	ed87 6a0e 	vstr	s12, [r7, #56]	; 0x38
 800172e:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 8001732:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8001736:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 800173a:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 800173e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001742:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001746:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800174a:	eeb0 0a46 	vmov.f32	s0, s12
 800174e:	eef0 0a66 	vmov.f32	s1, s13
 8001752:	eeb0 1a47 	vmov.f32	s2, s14
 8001756:	eef0 1a67 	vmov.f32	s3, s15
 800175a:	f7ff fe7f 	bl	800145c <FusionQuaternionToEuler>
 800175e:	eef0 6a40 	vmov.f32	s13, s0
 8001762:	eeb0 7a60 	vmov.f32	s14, s1
 8001766:	eef0 7a41 	vmov.f32	s15, s2
 800176a:	edc7 6a01 	vstr	s13, [r7, #4]
 800176e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001772:	edc7 7a03 	vstr	s15, [r7, #12]
	sprintf((char *)tx_buffer, "Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.pitch, euler.angle.yaw);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4680      	mov	r8, r0
 8001780:	4689      	mov	r9, r1
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800179e:	e9cd 4500 	strd	r4, r5, [sp]
 80017a2:	4642      	mov	r2, r8
 80017a4:	464b      	mov	r3, r9
 80017a6:	4915      	ldr	r1, [pc, #84]	; (80017fc <main+0x230>)
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <main+0x214>)
 80017aa:	f007 fa9f 	bl	8008cec <siprintf>
	tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80017ae:	480c      	ldr	r0, [pc, #48]	; (80017e0 <main+0x214>)
 80017b0:	f7fe fd0e 	bl	80001d0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <main+0x214>)
 80017bc:	f000 f948 	bl	8001a50 <tx_com>
  {
 80017c0:	e749      	b.n	8001656 <main+0x8a>
 80017c2:	bf00      	nop
 80017c4:	200002ec 	.word	0x200002ec
 80017c8:	20000294 	.word	0x20000294
 80017cc:	200001fc 	.word	0x200001fc
 80017d0:	200002e8 	.word	0x200002e8
 80017d4:	200002a4 	.word	0x200002a4
 80017d8:	200002b4 	.word	0x200002b4
 80017dc:	0800c718 	.word	0x0800c718
 80017e0:	20000354 	.word	0x20000354
 80017e4:	0800c730 	.word	0x0800c730
 80017e8:	20000250 	.word	0x20000250
 80017ec:	200002d0 	.word	0x200002d0
 80017f0:	200002dc 	.word	0x200002dc
 80017f4:	200002c4 	.word	0x200002c4
 80017f8:	3c23d70a 	.word	0x3c23d70a
 80017fc:	0800c734 	.word	0x0800c734

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b094      	sub	sp, #80	; 0x50
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	2230      	movs	r2, #48	; 0x30
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f006 fcf2 	bl	80081f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <SystemClock_Config+0xb4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <SystemClock_Config+0xb4>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <SystemClock_Config+0xb4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <SystemClock_Config+0xb8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <SystemClock_Config+0xb8>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <SystemClock_Config+0xb8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185c:	2302      	movs	r3, #2
 800185e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001860:	2301      	movs	r3, #1
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001864:	2310      	movs	r3, #16
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001868:	2300      	movs	r3, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 0320 	add.w	r3, r7, #32
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fafd 	bl	8004e70 <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800187c:	f000 f8fc 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	230f      	movs	r3, #15
 8001882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fd60 	bl	8005360 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80018a6:	f000 f8e7 	bl	8001a78 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	; 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_I2C1_Init+0x50>)
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <MX_I2C1_Init+0x54>)
 80018c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_I2C1_Init+0x50>)
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_I2C1_Init+0x58>)
 80018ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_I2C1_Init+0x50>)
 80018da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_I2C1_Init+0x50>)
 80018fa:	f000 fe1f 	bl	800253c <HAL_I2C_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001904:	f000 f8b8 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200001fc 	.word	0x200001fc
 8001910:	40005400 	.word	0x40005400
 8001914:	000186a0 	.word	0x000186a0

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800193e:	2208      	movs	r2, #8
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001950:	f003 fee6 	bl	8005720 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 f88d 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000250 	.word	0x20000250
 8001968:	40004400 	.word	0x40004400

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <MX_GPIO_Init+0xdc>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <MX_GPIO_Init+0xdc>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <MX_GPIO_Init+0xdc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <MX_GPIO_Init+0xdc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <MX_GPIO_Init+0xdc>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct;
  __USART2_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_GPIO_Init+0xdc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fe:	2304      	movs	r3, #4
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a06:	2307      	movs	r3, #7
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_GPIO_Init+0xe0>)
 8001a1a:	f000 fbf3 	bl	8002204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a22:	2307      	movs	r3, #7
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_GPIO_Init+0xe0>)
 8001a3a:	f000 fbe3 	bl	8002204 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020000 	.word	0x40020000

08001a50 <tx_com>:
 * @param  len           number of byte to send
 *
 */

static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <tx_com+0x24>)
 8001a66:	f003 fea8 	bl	80057ba <HAL_UART_Transmit>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000250 	.word	0x20000250

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error occurred");
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <Error_Handler+0x10>)
 8001a82:	f007 f90b 	bl	8008c9c <iprintf>
 8001a86:	e7fb      	b.n	8001a80 <Error_Handler+0x8>
 8001a88:	0800c758 	.word	0x0800c758

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_I2C_MspInit+0xa4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d13b      	bne.n	8001b76 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4814      	ldr	r0, [pc, #80]	; (8001b88 <HAL_I2C_MspInit+0xac>)
 8001b36:	f000 fb65 	bl	8002204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_I2C_MspInit+0xa8>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	201f      	movs	r0, #31
 8001b5c:	f000 faeb 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b60:	201f      	movs	r0, #31
 8001b62:	f000 fb04 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f000 fae3 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b70:	2020      	movs	r0, #32
 8001b72:	f000 fafc 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40005400 	.word	0x40005400
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020400 	.word	0x40020400

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_UART_MspInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d12b      	bne.n	8001c06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_UART_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001be6:	230c      	movs	r3, #12
 8001be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0x8c>)
 8001c02:	f000 faff 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020000 	.word	0x40020000

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 f96a 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <I2C1_EV_IRQHandler+0x10>)
 8001c76:	f001 f8c5 	bl	8002e04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001fc 	.word	0x200001fc

08001c84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <I2C1_ER_IRQHandler+0x10>)
 8001c8a:	f001 fa2c 	bl	80030e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200001fc 	.word	0x200001fc

08001c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return 1;
 8001c9c:	2301      	movs	r3, #1
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_kill>:

int _kill(int pid, int sig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cb2:	f006 fa67 	bl	8008184 <__errno>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2216      	movs	r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_exit>:

void _exit (int status)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ffe7 	bl	8001ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cda:	e7fe      	b.n	8001cda <_exit+0x12>

08001cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e00a      	b.n	8001d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cee:	f3af 8000 	nop.w
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf0      	blt.n	8001cee <_read+0x12>
  }

  return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e009      	b.n	8001d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fc39 	bl	80015a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbf1      	blt.n	8001d28 <_write+0x12>
  }
  return len;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_close>:

int _close(int file)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d76:	605a      	str	r2, [r3, #4]
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_isatty>:

int _isatty(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f006 f9cc 	bl	8008184 <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20020000 	.word	0x20020000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	2000073c 	.word	0x2000073c
 8001e20:	20000758 	.word	0x20000758

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e72:	f7ff ffd7 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f006 f98b 	bl	8008190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7ff fba7 	bl	80015cc <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e8c:	0800cfd4 	.word	0x0800cfd4
  ldr r2, =_sbss
 8001e90:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e94:	20000754 	.word	0x20000754

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f92b 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	200f      	movs	r0, #15
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fddc 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f943 	bl	800218a <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f000 f90b 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000740 	.word	0x20000740

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000740 	.word	0x20000740

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff29 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff3e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e00c      	b.n	80021da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2205      	movs	r2, #5
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f4:	b2db      	uxtb	r3, r3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	e16b      	b.n	80024f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 815a 	bne.w	80024f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d005      	beq.n	8002256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	2b02      	cmp	r3, #2
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d017      	beq.n	80022f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d123      	bne.n	8002348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80b4 	beq.w	80024f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b60      	ldr	r3, [pc, #384]	; (8002510 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a5f      	ldr	r2, [pc, #380]	; (8002510 <HAL_GPIO_Init+0x30c>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b5d      	ldr	r3, [pc, #372]	; (8002510 <HAL_GPIO_Init+0x30c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a5b      	ldr	r2, [pc, #364]	; (8002514 <HAL_GPIO_Init+0x310>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x314>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02b      	beq.n	800242a <HAL_GPIO_Init+0x226>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_GPIO_Init+0x318>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x222>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <HAL_GPIO_Init+0x31c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x21e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_GPIO_Init+0x320>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x21a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_GPIO_Init+0x324>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x216>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4d      	ldr	r2, [pc, #308]	; (800252c <HAL_GPIO_Init+0x328>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x212>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4c      	ldr	r2, [pc, #304]	; (8002530 <HAL_GPIO_Init+0x32c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_GPIO_Init+0x330>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x20a>
 800240a:	2307      	movs	r3, #7
 800240c:	e00e      	b.n	800242c <HAL_GPIO_Init+0x228>
 800240e:	2308      	movs	r3, #8
 8002410:	e00c      	b.n	800242c <HAL_GPIO_Init+0x228>
 8002412:	2306      	movs	r3, #6
 8002414:	e00a      	b.n	800242c <HAL_GPIO_Init+0x228>
 8002416:	2305      	movs	r3, #5
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x228>
 800241a:	2304      	movs	r3, #4
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x228>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x228>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x228>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x228>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x310>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_GPIO_Init+0x334>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246e:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_GPIO_Init+0x334>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_GPIO_Init+0x334>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <HAL_GPIO_Init+0x334>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_GPIO_Init+0x334>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c2:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_GPIO_Init+0x334>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_GPIO_Init+0x334>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_GPIO_Init+0x334>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f ae90 	bls.w	8002220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40021400 	.word	0x40021400
 8002530:	40021800 	.word	0x40021800
 8002534:	40021c00 	.word	0x40021c00
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff faba 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f003 f896 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fbc3 	bl	8001f68 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 80d9 	bne.w	80029a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	496d      	ldr	r1, [pc, #436]	; (80029b0 <HAL_I2C_Mem_Write+0x1ec>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f002 f90d 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e0cc      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Write+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e0c5      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f001 fe9c 	bl	80045d0 <I2C_RequestMemoryWrite>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e081      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f002 f98e 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06b      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d11b      	bne.n	8002944 <HAL_I2C_Mem_Write+0x180>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1aa      	bne.n	80028a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f002 f97a 	bl	8004c4a <I2C_WaitOnBTFFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e016      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000

080029b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d2:	f7ff fac9 	bl	8001f68 <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 8208 	bne.w	8002df6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2319      	movs	r3, #25
 80029ec:	2201      	movs	r2, #1
 80029ee:	497b      	ldr	r1, [pc, #492]	; (8002bdc <HAL_I2C_Mem_Read+0x224>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f002 f813 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	e1fb      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x56>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e1f4      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2222      	movs	r2, #34	; 0x22
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_I2C_Mem_Read+0x228>)
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a76:	88f8      	ldrh	r0, [r7, #6]
 8002a78:	893a      	ldrh	r2, [r7, #8]
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4603      	mov	r3, r0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f001 fe38 	bl	80046fc <I2C_RequestMemoryRead>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1b0      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e184      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d11b      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e164      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d11b      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	e144      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b5c:	e138      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	f200 80f1 	bhi.w	8002d4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d123      	bne.n	8002bb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f002 f8db 	bl	8004d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e139      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb6:	e10b      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d14e      	bne.n	8002c5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4906      	ldr	r1, [pc, #24]	; (8002be4 <HAL_I2C_Mem_Read+0x22c>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f001 ff26 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e10e      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002bda:	bf00      	nop
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000
 8002be4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5c:	e0b8      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2200      	movs	r2, #0
 8002c66:	4966      	ldr	r1, [pc, #408]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f001 fed7 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0bf      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	494f      	ldr	r1, [pc, #316]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 fea9 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e091      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d48:	e042      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f001 ffee 	bl	8004d30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e04c      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d118      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f aec2 	bne.w	8002b5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010004 	.word	0x00010004

08002e04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d003      	beq.n	8002e3c <HAL_I2C_EV_IRQHandler+0x38>
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	f040 80c1 	bne.w	8002fbe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_I2C_EV_IRQHandler+0x6e>
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002e5c:	d003      	beq.n	8002e66 <HAL_I2C_EV_IRQHandler+0x62>
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_EV_IRQHandler+0x66>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_I2C_EV_IRQHandler+0x68>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f000 8132 	beq.w	80030d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x92>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	0a5b      	lsrs	r3, r3, #9
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 ffd6 	bl	8004e3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fd83 	bl	800399a <I2C_Master_SB>
 8002e94:	e092      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fdf9 	bl	8003aa6 <I2C_Master_ADD10>
 8002eb4:	e082      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	0a5b      	lsrs	r3, r3, #9
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 fe13 	bl	8003afa <I2C_Master_ADDR>
 8002ed4:	e072      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03b      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef0:	f000 80f3 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	09db      	lsrs	r3, r3, #7
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00f      	beq.n	8002f20 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	0a9b      	lsrs	r3, r3, #10
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_I2C_EV_IRQHandler+0x11c>
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9f3 	bl	8003304 <I2C_MasterTransmit_TXE>
 8002f1e:	e04d      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80d6 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	0a5b      	lsrs	r3, r3, #9
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80cf 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f3c:	7bbb      	ldrb	r3, [r7, #14]
 8002f3e:	2b21      	cmp	r3, #33	; 0x21
 8002f40:	d103      	bne.n	8002f4a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa7a 	bl	800343c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f48:	e0c7      	b.n	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	f040 80c4 	bne.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fae8 	bl	8003528 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f58:	e0bf      	b.n	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	f000 80b7 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00f      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x194>
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_I2C_EV_IRQHandler+0x194>
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb5d 	bl	8003650 <I2C_MasterReceive_RXNE>
 8002f96:	e011      	b.n	8002fbc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 809a 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8093 	beq.w	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fc06 	bl	80037c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fba:	e08e      	b.n	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
 8002fbc:	e08d      	b.n	80030da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e007      	b.n	8002fe0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x20e>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	0a5b      	lsrs	r3, r3, #9
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 ffc4 	bl	8003f98 <I2C_Slave_ADDR>
 8003010:	e066      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x22e>
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	0a5b      	lsrs	r3, r3, #9
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fffe 	bl	800402c <I2C_Slave_STOPF>
 8003030:	e056      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	2b21      	cmp	r3, #33	; 0x21
 8003036:	d002      	beq.n	800303e <HAL_I2C_EV_IRQHandler+0x23a>
 8003038:	7bbb      	ldrb	r3, [r7, #14]
 800303a:	2b29      	cmp	r3, #41	; 0x29
 800303c:	d125      	bne.n	800308a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	09db      	lsrs	r3, r3, #7
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00f      	beq.n	800306a <HAL_I2C_EV_IRQHandler+0x266>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	0a9b      	lsrs	r3, r3, #10
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_I2C_EV_IRQHandler+0x266>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 feda 	bl	8003e1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003068:	e039      	b.n	80030de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d033      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0x2da>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	0a5b      	lsrs	r3, r3, #9
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02d      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 ff07 	bl	8003e96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003088:	e029      	b.n	80030de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00f      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	0a9b      	lsrs	r3, r3, #10
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 ff12 	bl	8003ed8 <I2C_SlaveReceive_RXNE>
 80030b4:	e014      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00e      	beq.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	0a5b      	lsrs	r3, r3, #9
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 ff40 	bl	8003f54 <I2C_SlaveReceive_BTF>
 80030d4:	e004      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b08a      	sub	sp, #40	; 0x28
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003108:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <HAL_I2C_ER_IRQHandler+0x4e>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003132:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	0a5b      	lsrs	r3, r3, #9
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00e      	beq.n	800315e <HAL_I2C_ER_IRQHandler+0x78>
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800315c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	0a9b      	lsrs	r3, r3, #10
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03f      	beq.n	80031ea <HAL_I2C_ER_IRQHandler+0x104>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d039      	beq.n	80031ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003176:	7efb      	ldrb	r3, [r7, #27]
 8003178:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003188:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003190:	7ebb      	ldrb	r3, [r7, #26]
 8003192:	2b20      	cmp	r3, #32
 8003194:	d112      	bne.n	80031bc <HAL_I2C_ER_IRQHandler+0xd6>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10f      	bne.n	80031bc <HAL_I2C_ER_IRQHandler+0xd6>
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b21      	cmp	r3, #33	; 0x21
 80031a0:	d008      	beq.n	80031b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b29      	cmp	r3, #41	; 0x29
 80031a6:	d005      	beq.n	80031b4 <HAL_I2C_ER_IRQHandler+0xce>
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b28      	cmp	r3, #40	; 0x28
 80031ac:	d106      	bne.n	80031bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b21      	cmp	r3, #33	; 0x21
 80031b2:	d103      	bne.n	80031bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f001 f869 	bl	800428c <I2C_Slave_AF>
 80031ba:	e016      	b.n	80031ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031ce:	7efb      	ldrb	r3, [r7, #27]
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d002      	beq.n	80031da <HAL_I2C_ER_IRQHandler+0xf4>
 80031d4:	7efb      	ldrb	r3, [r7, #27]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d107      	bne.n	80031ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	0adb      	lsrs	r3, r3, #11
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <HAL_I2C_ER_IRQHandler+0x12e>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003212:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f001 f8a0 	bl	800436c <I2C_ITError>
  }
}
 800322c:	bf00      	nop
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
 8003290:	4613      	mov	r3, r2
 8003292:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003312:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d150      	bne.n	80033cc <I2C_MasterTransmit_TXE+0xc8>
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b21      	cmp	r3, #33	; 0x21
 800332e:	d14d      	bne.n	80033cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b08      	cmp	r3, #8
 8003334:	d01d      	beq.n	8003372 <I2C_MasterTransmit_TXE+0x6e>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b20      	cmp	r3, #32
 800333a:	d01a      	beq.n	8003372 <I2C_MasterTransmit_TXE+0x6e>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003342:	d016      	beq.n	8003372 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003352:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2211      	movs	r2, #17
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ff62 	bl	8003234 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003370:	e060      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003380:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d107      	bne.n	80033bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff7d 	bl	80032b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ba:	e03b      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff35 	bl	8003234 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ca:	e033      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b21      	cmp	r3, #33	; 0x21
 80033d0:	d005      	beq.n	80033de <I2C_MasterTransmit_TXE+0xda>
 80033d2:	7bbb      	ldrb	r3, [r7, #14]
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d12d      	bne.n	8003434 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b22      	cmp	r3, #34	; 0x22
 80033dc:	d12a      	bne.n	8003434 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033f8:	e01c      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d103      	bne.n	800340e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f88e 	bl	8003528 <I2C_MemoryTransmit_TXE_BTF>
}
 800340c:	e012      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003432:	e7ff      	b.n	8003434 <I2C_MasterTransmit_TXE+0x130>
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b21      	cmp	r3, #33	; 0x21
 8003454:	d164      	bne.n	8003520 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003484:	e04c      	b.n	8003520 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d01d      	beq.n	80034c8 <I2C_MasterTransmit_BTF+0x8c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d01a      	beq.n	80034c8 <I2C_MasterTransmit_BTF+0x8c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003498:	d016      	beq.n	80034c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2211      	movs	r2, #17
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff feb7 	bl	8003234 <HAL_I2C_MasterTxCpltCallback>
}
 80034c6:	e02b      	b.n	8003520 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b40      	cmp	r3, #64	; 0x40
 8003500:	d107      	bne.n	8003512 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fed2 	bl	80032b4 <HAL_I2C_MemTxCpltCallback>
}
 8003510:	e006      	b.n	8003520 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fe8a 	bl	8003234 <HAL_I2C_MasterTxCpltCallback>
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11d      	bne.n	800357c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10b      	bne.n	8003560 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800355e:	e073      	b.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	b29b      	uxth	r3, r3
 8003566:	121b      	asrs	r3, r3, #8
 8003568:	b2da      	uxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	651a      	str	r2, [r3, #80]	; 0x50
}
 800357a:	e065      	b.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10b      	bne.n	800359c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003588:	b2da      	uxtb	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	651a      	str	r2, [r3, #80]	; 0x50
}
 800359a:	e055      	b.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d151      	bne.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b22      	cmp	r3, #34	; 0x22
 80035a8:	d10d      	bne.n	80035c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035c4:	e040      	b.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b21      	cmp	r3, #33	; 0x21
 80035d4:	d112      	bne.n	80035fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	781a      	ldrb	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035fa:	e025      	b.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d120      	bne.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b21      	cmp	r3, #33	; 0x21
 800360a:	d11d      	bne.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800361a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fe36 	bl	80032b4 <HAL_I2C_MemTxCpltCallback>
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b22      	cmp	r3, #34	; 0x22
 8003662:	f040 80ac 	bne.w	80037be <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d921      	bls.n	80036b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	f040 808c 	bne.w	80037be <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80036b6:	e082      	b.n	80037be <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d075      	beq.n	80037ac <I2C_MasterReceive_RXNE+0x15c>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d002      	beq.n	80036cc <I2C_MasterReceive_RXNE+0x7c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d16f      	bne.n	80037ac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f001 fafd 	bl	8004ccc <I2C_WaitOnSTOPRequestThroughIT>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d142      	bne.n	800375e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d10a      	bne.n	8003748 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fdc1 	bl	80032c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003746:	e03a      	b.n	80037be <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2212      	movs	r2, #18
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fd76 	bl	8003248 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800375c:	e02f      	b.n	80037be <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800376c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fd99 	bl	80032dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037aa:	e008      	b.n	80037be <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ba:	605a      	str	r2, [r3, #4]
}
 80037bc:	e7ff      	b.n	80037be <I2C_MasterReceive_RXNE+0x16e>
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d11b      	bne.n	8003816 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003814:	e0bd      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d129      	bne.n	8003874 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00a      	beq.n	800384c <I2C_MasterReceive_BTF+0x86>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003872:	e08e      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d176      	bne.n	800396c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <I2C_MasterReceive_BTF+0xc4>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b10      	cmp	r3, #16
 8003888:	d108      	bne.n	800389c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e019      	b.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <I2C_MasterReceive_BTF+0xe2>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d108      	bne.n	80038ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e00a      	b.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d007      	beq.n	80038d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800392a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b40      	cmp	r3, #64	; 0x40
 800393e:	d10a      	bne.n	8003956 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fcba 	bl	80032c8 <HAL_I2C_MemRxCpltCallback>
}
 8003954:	e01d      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2212      	movs	r2, #18
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fc6f 	bl	8003248 <HAL_I2C_MasterRxCpltCallback>
}
 800396a:	e012      	b.n	8003992 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d117      	bne.n	80039de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039c8:	e067      	b.n	8003a9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]
}
 80039dc:	e05d      	b.n	8003a9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e6:	d133      	bne.n	8003a50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b21      	cmp	r3, #33	; 0x21
 80039f2:	d109      	bne.n	8003a08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e008      	b.n	8003a1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <I2C_Master_SB+0x92>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d032      	beq.n	8003a9a <I2C_Master_SB+0x100>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d02d      	beq.n	8003a9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]
}
 8003a4e:	e024      	b.n	8003a9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10e      	bne.n	8003a76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	11db      	asrs	r3, r3, #7
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f063 030f 	orn	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]
}
 8003a74:	e011      	b.n	8003a9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10d      	bne.n	8003a9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	11db      	asrs	r3, r3, #7
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f003 0306 	and.w	r3, r3, #6
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f063 030e 	orn	r3, r3, #14
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <I2C_Master_ADD10+0x26>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <I2C_Master_ADD10+0x48>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aec:	605a      	str	r2, [r3, #4]
  }
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b091      	sub	sp, #68	; 0x44
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b22      	cmp	r3, #34	; 0x22
 8003b22:	f040 8169 	bne.w	8003df8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <I2C_Master_ADDR+0x54>
 8003b2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b32:	2b40      	cmp	r3, #64	; 0x40
 8003b34:	d10b      	bne.n	8003b4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	e160      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11d      	bne.n	8003b92 <I2C_Master_ADDR+0x98>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b5e:	d118      	bne.n	8003b92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003b90:	e13e      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e115      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f040 808a 	bne.w	8003ce4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bd6:	d137      	bne.n	8003c48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d113      	bne.n	8003c20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	e0e7      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	623b      	str	r3, [r7, #32]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	623b      	str	r3, [r7, #32]
 8003c34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e0d3      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d02e      	beq.n	8003cac <I2C_Master_ADDR+0x1b2>
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d02b      	beq.n	8003cac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c56:	2b12      	cmp	r3, #18
 8003c58:	d102      	bne.n	8003c60 <I2C_Master_ADDR+0x166>
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d125      	bne.n	8003cac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d00e      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d00b      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d008      	beq.n	8003c84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e007      	b.n	8003c94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	e0a1      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e085      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d14d      	bne.n	8003d8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d016      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d013      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d010      	beq.n	8003d22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d117      	bne.n	8003d72 <I2C_Master_ADDR+0x278>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d48:	d00b      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d008      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d005      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d002      	beq.n	8003d62 <I2C_Master_ADDR+0x268>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d107      	bne.n	8003d72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	e032      	b.n	8003df0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d117      	bne.n	8003dda <I2C_Master_ADDR+0x2e0>
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db0:	d00b      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d008      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d005      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d002      	beq.n	8003dca <I2C_Master_ADDR+0x2d0>
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d107      	bne.n	8003dda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003df6:	e00b      	b.n	8003e10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	e7ff      	b.n	8003e10 <I2C_Master_ADDR+0x316>
 8003e10:	bf00      	nop
 8003e12:	3744      	adds	r7, #68	; 0x44
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02b      	beq.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	781a      	ldrb	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d114      	bne.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b29      	cmp	r3, #41	; 0x29
 8003e68:	d111      	bne.n	8003e8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2221      	movs	r2, #33	; 0x21
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2228      	movs	r2, #40	; 0x28
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff f9e7 	bl	800325c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d011      	beq.n	8003ecc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02c      	beq.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d114      	bne.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d111      	bne.n	8003f4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2222      	movs	r2, #34	; 0x22
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2228      	movs	r2, #40	; 0x28
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff f992 	bl	8003270 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d012      	beq.n	8003f8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fb2:	2b28      	cmp	r3, #40	; 0x28
 8003fb4:	d127      	bne.n	8004006 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	09db      	lsrs	r3, r3, #7
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	e002      	b.n	8003ff0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ff8:	89ba      	ldrh	r2, [r7, #12]
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f940 	bl	8003284 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004004:	e00e      	b.n	8004024 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004078:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d172      	bne.n	8004170 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b22      	cmp	r3, #34	; 0x22
 800408e:	d002      	beq.n	8004096 <I2C_Slave_STOPF+0x6a>
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b2a      	cmp	r3, #42	; 0x2a
 8004094:	d135      	bne.n	8004102 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe f889 	bl	80021e6 <HAL_DMA_GetState>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d049      	beq.n	800416e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	4a69      	ldr	r2, [pc, #420]	; (8004284 <I2C_Slave_STOPF+0x258>)
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe f85b 	bl	80021a2 <HAL_DMA_Abort_IT>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03d      	beq.n	800416e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040fc:	4610      	mov	r0, r2
 80040fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004100:	e035      	b.n	800416e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0204 	orr.w	r2, r3, #4
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004134:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe f853 	bl	80021e6 <HAL_DMA_GetState>
 8004140:	4603      	mov	r3, r0
 8004142:	2b01      	cmp	r3, #1
 8004144:	d014      	beq.n	8004170 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <I2C_Slave_STOPF+0x258>)
 800414c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe f825 	bl	80021a2 <HAL_DMA_Abort_IT>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004168:	4610      	mov	r0, r2
 800416a:	4798      	blx	r3
 800416c:	e000      	b.n	8004170 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800416e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d03e      	beq.n	80041f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d112      	bne.n	80041ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d112      	bne.n	80041e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f043 0204 	orr.w	r2, r3, #4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8b3 	bl	800436c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004206:	e039      	b.n	800427c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b2a      	cmp	r3, #42	; 0x2a
 800420c:	d109      	bne.n	8004222 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2228      	movs	r2, #40	; 0x28
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff f827 	bl	8003270 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b28      	cmp	r3, #40	; 0x28
 800422c:	d111      	bne.n	8004252 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a15      	ldr	r2, [pc, #84]	; (8004288 <I2C_Slave_STOPF+0x25c>)
 8004232:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff f828 	bl	80032a0 <HAL_I2C_ListenCpltCallback>
}
 8004250:	e014      	b.n	800427c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d002      	beq.n	8004260 <I2C_Slave_STOPF+0x234>
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b22      	cmp	r3, #34	; 0x22
 800425e:	d10d      	bne.n	800427c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fffa 	bl	8003270 <HAL_I2C_SlaveRxCpltCallback>
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080048cd 	.word	0x080048cd
 8004288:	ffff0000 	.word	0xffff0000

0800428c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d002      	beq.n	80042ae <I2C_Slave_AF+0x22>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d129      	bne.n	8004302 <I2C_Slave_AF+0x76>
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b28      	cmp	r3, #40	; 0x28
 80042b2:	d126      	bne.n	8004302 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <I2C_Slave_AF+0xdc>)
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fe ffd0 	bl	80032a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004300:	e02e      	b.n	8004360 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b21      	cmp	r3, #33	; 0x21
 8004306:	d126      	bne.n	8004356 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <I2C_Slave_AF+0xdc>)
 800430c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2221      	movs	r2, #33	; 0x21
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004332:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe ff84 	bl	800325c <HAL_I2C_SlaveTxCpltCallback>
}
 8004354:	e004      	b.n	8004360 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800435e:	615a      	str	r2, [r3, #20]
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	ffff0000 	.word	0xffff0000

0800436c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004382:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004384:	7bbb      	ldrb	r3, [r7, #14]
 8004386:	2b10      	cmp	r3, #16
 8004388:	d002      	beq.n	8004390 <I2C_ITError+0x24>
 800438a:	7bbb      	ldrb	r3, [r7, #14]
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d10a      	bne.n	80043a6 <I2C_ITError+0x3a>
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b22      	cmp	r3, #34	; 0x22
 8004394:	d107      	bne.n	80043a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ac:	2b28      	cmp	r3, #40	; 0x28
 80043ae:	d107      	bne.n	80043c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2228      	movs	r2, #40	; 0x28
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043be:	e015      	b.n	80043ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ce:	d00a      	beq.n	80043e6 <I2C_ITError+0x7a>
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b60      	cmp	r3, #96	; 0x60
 80043d4:	d007      	beq.n	80043e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fa:	d162      	bne.n	80044c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d020      	beq.n	800445c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	4a6a      	ldr	r2, [pc, #424]	; (80045c8 <I2C_ITError+0x25c>)
 8004420:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd febb 	bl	80021a2 <HAL_DMA_Abort_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8089 	beq.w	8004546 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004456:	4610      	mov	r0, r2
 8004458:	4798      	blx	r3
 800445a:	e074      	b.n	8004546 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	4a59      	ldr	r2, [pc, #356]	; (80045c8 <I2C_ITError+0x25c>)
 8004462:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	4618      	mov	r0, r3
 800446a:	f7fd fe9a 	bl	80021a2 <HAL_DMA_Abort_IT>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d068      	beq.n	8004546 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d10b      	bne.n	800449a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044bc:	4610      	mov	r0, r2
 80044be:	4798      	blx	r3
 80044c0:	e041      	b.n	8004546 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b60      	cmp	r3, #96	; 0x60
 80044cc:	d125      	bne.n	800451a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d10b      	bne.n	8004502 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fe feec 	bl	80032f0 <HAL_I2C_AbortCpltCallback>
 8004518:	e015      	b.n	8004546 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d10b      	bne.n	8004540 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe fecb 	bl	80032dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10e      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b04      	cmp	r3, #4
 8004596:	d113      	bne.n	80045c0 <I2C_ITError+0x254>
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	2b28      	cmp	r3, #40	; 0x28
 800459c:	d110      	bne.n	80045c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <I2C_ITError+0x260>)
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fe fe70 	bl	80032a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	080048cd 	.word	0x080048cd
 80045cc:	ffff0000 	.word	0xffff0000

080045d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2200      	movs	r2, #0
 8004602:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fa08 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004620:	d103      	bne.n	800462a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e05f      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800463c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	492d      	ldr	r1, [pc, #180]	; (80046f8 <I2C_RequestMemoryWrite+0x128>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fa40 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04c      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 faaa 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e02b      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	e021      	b.n	80046ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa84 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d107      	bne.n	80046de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e005      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	00010002 	.word	0x00010002

080046fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004724:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2200      	movs	r2, #0
 800473e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f96a 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475c:	d103      	bne.n	8004766 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004764:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0aa      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	4952      	ldr	r1, [pc, #328]	; (80048c8 <I2C_RequestMemoryRead+0x1cc>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f9a2 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e097      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	6a39      	ldr	r1, [r7, #32]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fa0c 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d107      	bne.n	80047ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e076      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]
 80047e2:	e021      	b.n	8004828 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f4:	6a39      	ldr	r1, [r7, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f9e6 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b04      	cmp	r3, #4
 8004808:	d107      	bne.n	800481a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e050      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	6a39      	ldr	r1, [r7, #32]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f9cb 	bl	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b04      	cmp	r3, #4
 800483e:	d107      	bne.n	8004850 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e035      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004862:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2200      	movs	r2, #0
 800486c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f8d3 	bl	8004a1c <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488a:	d103      	bne.n	8004894 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e013      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	6a3a      	ldr	r2, [r7, #32]
 80048ac:	4906      	ldr	r1, [pc, #24]	; (80048c8 <I2C_RequestMemoryRead+0x1cc>)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f90b 	bl	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00010002 	.word	0x00010002

080048cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048e6:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <I2C_DMAAbort+0x148>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	08db      	lsrs	r3, r3, #3
 80048ec:	4a4a      	ldr	r2, [pc, #296]	; (8004a18 <I2C_DMAAbort+0x14c>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	0a1a      	lsrs	r2, r3, #8
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00da      	lsls	r2, r3, #3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004912:	e00a      	b.n	800492a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b01      	subs	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d0ea      	beq.n	8004900 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	2200      	movs	r2, #0
 8004938:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004958:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	2200      	movs	r2, #0
 800496e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b60      	cmp	r3, #96	; 0x60
 800499a:	d10e      	bne.n	80049ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7fe fc9c 	bl	80032f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049b8:	e027      	b.n	8004a0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049c0:	2b28      	cmp	r3, #40	; 0x28
 80049c2:	d117      	bne.n	80049f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2228      	movs	r2, #40	; 0x28
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049f2:	e007      	b.n	8004a04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a04:	6978      	ldr	r0, [r7, #20]
 8004a06:	f7fe fc69 	bl	80032dc <HAL_I2C_ErrorCallback>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000
 8004a18:	14f8b589 	.word	0x14f8b589

08004a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a2c:	e025      	b.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a34:	d021      	beq.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fd fa97 	bl	8001f68 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d116      	bne.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e023      	b.n	8004ac2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10d      	bne.n	8004aa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	e00c      	b.n	8004aba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d0b6      	beq.n	8004a2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ad8:	e051      	b.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae8:	d123      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e046      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b38:	d021      	beq.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fd fa15 	bl	8001f68 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e020      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0c1b      	lsrs	r3, r3, #16
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10c      	bne.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e00b      	b.n	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	43da      	mvns	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d18d      	bne.n	8004ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd4:	e02d      	b.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f900 	bl	8004ddc <I2C_IsAcknowledgeFailed>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e02d      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bec:	d021      	beq.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7fd f9bb 	bl	8001f68 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d116      	bne.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d1ca      	bne.n	8004bd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c56:	e02d      	b.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f8bf 	bl	8004ddc <I2C_IsAcknowledgeFailed>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e02d      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6e:	d021      	beq.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fd f97a 	bl	8001f68 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d1ca      	bne.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	0a1a      	lsrs	r2, r3, #8
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e008      	b.n	8004d1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d0e9      	beq.n	8004cee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	14f8b589 	.word	0x14f8b589

08004d30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d3c:	e042      	b.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d119      	bne.n	8004d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0210 	mvn.w	r2, #16
 8004d54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e029      	b.n	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d80:	f7fd f8f2 	bl	8001f68 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d302      	bcc.n	8004d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e007      	b.n	8004dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d1b5      	bne.n	8004d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df2:	d11b      	bne.n	8004e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e4a:	d103      	bne.n	8004e54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e52:	e007      	b.n	8004e64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e5c:	d102      	bne.n	8004e64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e267      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d075      	beq.n	8004f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e8e:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d00c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9a:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d112      	bne.n	8004ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea6:	4b82      	ldr	r3, [pc, #520]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb2:	d10b      	bne.n	8004ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d05b      	beq.n	8004f78 <HAL_RCC_OscConfig+0x108>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d157      	bne.n	8004f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e242      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x74>
 8004ed6:	4b76      	ldr	r3, [pc, #472]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a75      	ldr	r2, [pc, #468]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee0:	6013      	str	r3, [r2, #0]
 8004ee2:	e01d      	b.n	8004f20 <HAL_RCC_OscConfig+0xb0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCC_OscConfig+0x98>
 8004eee:	4b70      	ldr	r3, [pc, #448]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6f      	ldr	r2, [pc, #444]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	4b6d      	ldr	r3, [pc, #436]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a6c      	ldr	r2, [pc, #432]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e00b      	b.n	8004f20 <HAL_RCC_OscConfig+0xb0>
 8004f08:	4b69      	ldr	r3, [pc, #420]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a68      	ldr	r2, [pc, #416]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b66      	ldr	r3, [pc, #408]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a65      	ldr	r2, [pc, #404]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fd f81e 	bl	8001f68 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fd f81a 	bl	8001f68 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e207      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0xc0>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fd f80a 	bl	8001f68 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fd f806 	bl	8001f68 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e1f3      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	4b51      	ldr	r3, [pc, #324]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0xe8>
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d063      	beq.n	800504e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d11c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9e:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x152>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e1c7      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4937      	ldr	r1, [pc, #220]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	e03a      	b.n	800504e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d020      	beq.n	8005022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <HAL_RCC_OscConfig+0x244>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc ffbf 	bl	8001f68 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fc ffbb 	bl	8001f68 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e1a8      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500c:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4925      	ldr	r1, [pc, #148]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
 8005020:	e015      	b.n	800504e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCC_OscConfig+0x244>)
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fc ff9e 	bl	8001f68 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005030:	f7fc ff9a 	bl	8001f68 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e187      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d036      	beq.n	80050c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d016      	beq.n	8005090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_RCC_OscConfig+0x248>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fc ff7e 	bl	8001f68 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005070:	f7fc ff7a 	bl	8001f68 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e167      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x240>)
 8005084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x200>
 800508e:	e01b      	b.n	80050c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_OscConfig+0x248>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005096:	f7fc ff67 	bl	8001f68 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	e00e      	b.n	80050bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800509e:	f7fc ff63 	bl	8001f68 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d907      	bls.n	80050bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e150      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
 80050b0:	40023800 	.word	0x40023800
 80050b4:	42470000 	.word	0x42470000
 80050b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80050be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ea      	bne.n	800509e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8097 	beq.w	8005204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d6:	2300      	movs	r3, #0
 80050d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050da:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10f      	bne.n	8005106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	4b7d      	ldr	r3, [pc, #500]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	4a7c      	ldr	r2, [pc, #496]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80050f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f4:	6413      	str	r3, [r2, #64]	; 0x40
 80050f6:	4b7a      	ldr	r3, [pc, #488]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b77      	ldr	r3, [pc, #476]	; (80052e4 <HAL_RCC_OscConfig+0x474>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d118      	bne.n	8005144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b74      	ldr	r3, [pc, #464]	; (80052e4 <HAL_RCC_OscConfig+0x474>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a73      	ldr	r2, [pc, #460]	; (80052e4 <HAL_RCC_OscConfig+0x474>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7fc ff23 	bl	8001f68 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005126:	f7fc ff1f 	bl	8001f68 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e10c      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b6a      	ldr	r3, [pc, #424]	; (80052e4 <HAL_RCC_OscConfig+0x474>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x2ea>
 800514c:	4b64      	ldr	r3, [pc, #400]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a63      	ldr	r2, [pc, #396]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	e01c      	b.n	8005194 <HAL_RCC_OscConfig+0x324>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x30c>
 8005162:	4b5f      	ldr	r3, [pc, #380]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a5e      	ldr	r2, [pc, #376]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
 800516e:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a5b      	ldr	r2, [pc, #364]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	e00b      	b.n	8005194 <HAL_RCC_OscConfig+0x324>
 800517c:	4b58      	ldr	r3, [pc, #352]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4a57      	ldr	r2, [pc, #348]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	; 0x70
 8005188:	4b55      	ldr	r3, [pc, #340]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 800518e:	f023 0304 	bic.w	r3, r3, #4
 8005192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d015      	beq.n	80051c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fc fee4 	bl	8001f68 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fc fee0 	bl	8001f68 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0cb      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	4b49      	ldr	r3, [pc, #292]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ee      	beq.n	80051a4 <HAL_RCC_OscConfig+0x334>
 80051c6:	e014      	b.n	80051f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c8:	f7fc fece 	bl	8001f68 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d0:	f7fc feca 	bl	8001f68 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e0b5      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e6:	4b3e      	ldr	r3, [pc, #248]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ee      	bne.n	80051d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f8:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80051fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80a1 	beq.w	8005350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b08      	cmp	r3, #8
 8005218:	d05c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d141      	bne.n	80052a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <HAL_RCC_OscConfig+0x478>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fc fe9e 	bl	8001f68 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc fe9a 	bl	8001f68 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e087      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	491b      	ldr	r1, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x478>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7fc fe73 	bl	8001f68 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005286:	f7fc fe6f 	bl	8001f68 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e05c      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x416>
 80052a4:	e054      	b.n	8005350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCC_OscConfig+0x478>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fc fe5c 	bl	8001f68 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fc fe58 	bl	8001f68 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e045      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x470>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x444>
 80052d2:	e03d      	b.n	8005350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d107      	bne.n	80052ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e038      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
 80052e0:	40023800 	.word	0x40023800
 80052e4:	40007000 	.word	0x40007000
 80052e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x4ec>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d028      	beq.n	800534c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d121      	bne.n	800534c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	429a      	cmp	r2, r3
 8005314:	d11a      	bne.n	800534c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005324:	4293      	cmp	r3, r2
 8005326:	d111      	bne.n	800534c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	3b01      	subs	r3, #1
 8005336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800

08005360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0cc      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005374:	4b68      	ldr	r3, [pc, #416]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d90c      	bls.n	800539c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b65      	ldr	r3, [pc, #404]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b63      	ldr	r3, [pc, #396]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0b8      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b4:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a58      	ldr	r2, [pc, #352]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053cc:	4b53      	ldr	r3, [pc, #332]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a52      	ldr	r2, [pc, #328]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d8:	4b50      	ldr	r3, [pc, #320]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	494d      	ldr	r1, [pc, #308]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d044      	beq.n	8005480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d119      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e07f      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d003      	beq.n	800541e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541a:	2b03      	cmp	r3, #3
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541e:	4b3f      	ldr	r3, [pc, #252]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e06f      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542e:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e067      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 0203 	bic.w	r2, r3, #3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4934      	ldr	r1, [pc, #208]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005450:	f7fc fd8a 	bl	8001f68 <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc fd86 	bl	8001f68 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e04f      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	4b2b      	ldr	r3, [pc, #172]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 020c 	and.w	r2, r3, #12
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	429a      	cmp	r2, r3
 800547e:	d1eb      	bne.n	8005458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005480:	4b25      	ldr	r3, [pc, #148]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d20c      	bcs.n	80054a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b22      	ldr	r3, [pc, #136]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e032      	b.n	800550e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b4:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4916      	ldr	r1, [pc, #88]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	490e      	ldr	r1, [pc, #56]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054e6:	f000 f821 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054ea:	4602      	mov	r2, r0
 80054ec:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	490a      	ldr	r1, [pc, #40]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	5ccb      	ldrb	r3, [r1, r3]
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	4a09      	ldr	r2, [pc, #36]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fcea 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40023c00 	.word	0x40023c00
 800551c:	40023800 	.word	0x40023800
 8005520:	0800c7b0 	.word	0x0800c7b0
 8005524:	20000000 	.word	0x20000000
 8005528:	20000004 	.word	0x20000004

0800552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005530:	b090      	sub	sp, #64	; 0x40
 8005532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	2300      	movs	r3, #0
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 030c 	and.w	r3, r3, #12
 800554c:	2b08      	cmp	r3, #8
 800554e:	d00d      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x40>
 8005550:	2b08      	cmp	r3, #8
 8005552:	f200 80a1 	bhi.w	8005698 <HAL_RCC_GetSysClockFreq+0x16c>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x34>
 800555a:	2b04      	cmp	r3, #4
 800555c:	d003      	beq.n	8005566 <HAL_RCC_GetSysClockFreq+0x3a>
 800555e:	e09b      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005560:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005564:	e09b      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005566:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800556a:	e098      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800556c:	4b4f      	ldr	r3, [pc, #316]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005576:	4b4d      	ldr	r3, [pc, #308]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d028      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005582:	4b4a      	ldr	r3, [pc, #296]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	099b      	lsrs	r3, r3, #6
 8005588:	2200      	movs	r2, #0
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	627a      	str	r2, [r7, #36]	; 0x24
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005594:	2100      	movs	r1, #0
 8005596:	4b47      	ldr	r3, [pc, #284]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005598:	fb03 f201 	mul.w	r2, r3, r1
 800559c:	2300      	movs	r3, #0
 800559e:	fb00 f303 	mul.w	r3, r0, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	4a43      	ldr	r2, [pc, #268]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80055a6:	fba0 1202 	umull	r1, r2, r0, r2
 80055aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ac:	460a      	mov	r2, r1
 80055ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80055b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b2:	4413      	add	r3, r2
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	2200      	movs	r2, #0
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	61fa      	str	r2, [r7, #28]
 80055be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055c6:	f7fb faef 	bl	8000ba8 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4613      	mov	r3, r2
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d2:	e053      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d4:	4b35      	ldr	r3, [pc, #212]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	099b      	lsrs	r3, r3, #6
 80055da:	2200      	movs	r2, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	617a      	str	r2, [r7, #20]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055e6:	f04f 0b00 	mov.w	fp, #0
 80055ea:	4652      	mov	r2, sl
 80055ec:	465b      	mov	r3, fp
 80055ee:	f04f 0000 	mov.w	r0, #0
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	0159      	lsls	r1, r3, #5
 80055f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055fc:	0150      	lsls	r0, r2, #5
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	ebb2 080a 	subs.w	r8, r2, sl
 8005606:	eb63 090b 	sbc.w	r9, r3, fp
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005616:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800561a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800561e:	ebb2 0408 	subs.w	r4, r2, r8
 8005622:	eb63 0509 	sbc.w	r5, r3, r9
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	00eb      	lsls	r3, r5, #3
 8005630:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005634:	00e2      	lsls	r2, r4, #3
 8005636:	4614      	mov	r4, r2
 8005638:	461d      	mov	r5, r3
 800563a:	eb14 030a 	adds.w	r3, r4, sl
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	eb45 030b 	adc.w	r3, r5, fp
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005652:	4629      	mov	r1, r5
 8005654:	028b      	lsls	r3, r1, #10
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800565c:	4621      	mov	r1, r4
 800565e:	028a      	lsls	r2, r1, #10
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	2200      	movs	r2, #0
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	60fa      	str	r2, [r7, #12]
 800566c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005670:	f7fb fa9a 	bl	8000ba8 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_RCC_GetSysClockFreq+0x180>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	0c1b      	lsrs	r3, r3, #16
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	3301      	adds	r3, #1
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800568c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005696:	e002      	b.n	800569e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800569c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3740      	adds	r7, #64	; 0x40
 80056a4:	46bd      	mov	sp, r7
 80056a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	017d7840 	.word	0x017d7840

080056b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056bc:	4b03      	ldr	r3, [pc, #12]	; (80056cc <HAL_RCC_GetHCLKFreq+0x14>)
 80056be:	681b      	ldr	r3, [r3, #0]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000000 	.word	0x20000000

080056d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056d4:	f7ff fff0 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0a9b      	lsrs	r3, r3, #10
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	; (80056f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	0800c7c0 	.word	0x0800c7c0

080056f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056fc:	f7ff ffdc 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 8005700:	4602      	mov	r2, r0
 8005702:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	0b5b      	lsrs	r3, r3, #13
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	4903      	ldr	r1, [pc, #12]	; (800571c <HAL_RCC_GetPCLK2Freq+0x24>)
 800570e:	5ccb      	ldrb	r3, [r1, r3]
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005714:	4618      	mov	r0, r3
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40023800 	.word	0x40023800
 800571c:	0800c7c0 	.word	0x0800c7c0

08005720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e03f      	b.n	80057b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fa20 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	; 0x24
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f929 	bl	80059bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b08a      	sub	sp, #40	; 0x28
 80057be:	af02      	add	r7, sp, #8
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d17c      	bne.n	80058d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_UART_Transmit+0x2c>
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e075      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x3e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e06e      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2221      	movs	r2, #33	; 0x21
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fc fbab 	bl	8001f68 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005828:	d108      	bne.n	800583c <HAL_UART_Transmit+0x82>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e003      	b.n	8005844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800584c:	e02a      	b.n	80058a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2200      	movs	r2, #0
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f840 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e036      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3302      	adds	r3, #2
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	e007      	b.n	8005896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1cf      	bne.n	800584e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2140      	movs	r1, #64	; 0x40
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f810 	bl	80058de <UART_WaitOnFlagUntilTimeout>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e006      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b090      	sub	sp, #64	; 0x40
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ee:	e050      	b.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f6:	d04c      	beq.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0x30>
 80058fe:	f7fc fb33 	bl	8001f68 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590a:	429a      	cmp	r2, r3
 800590c:	d241      	bcs.n	8005992 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800592e:	637a      	str	r2, [r7, #52]	; 0x34
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e5      	bne.n	800590e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3314      	adds	r3, #20
 8005948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	613b      	str	r3, [r7, #16]
   return(result);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005962:	623a      	str	r2, [r7, #32]
 8005964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	69f9      	ldr	r1, [r7, #28]
 8005968:	6a3a      	ldr	r2, [r7, #32]
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e5      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e00f      	b.n	80059b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d09f      	beq.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3740      	adds	r7, #64	; 0x40
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c0:	b0c0      	sub	sp, #256	; 0x100
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	68d9      	ldr	r1, [r3, #12]
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	ea40 0301 	orr.w	r3, r0, r1
 80059e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a14:	f021 010c 	bic.w	r1, r1, #12
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a22:	430b      	orrs	r3, r1
 8005a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	6999      	ldr	r1, [r3, #24]
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	ea40 0301 	orr.w	r3, r0, r1
 8005a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b8f      	ldr	r3, [pc, #572]	; (8005c88 <UART_SetConfig+0x2cc>)
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d005      	beq.n	8005a5c <UART_SetConfig+0xa0>
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4b8d      	ldr	r3, [pc, #564]	; (8005c8c <UART_SetConfig+0x2d0>)
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d104      	bne.n	8005a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a5c:	f7ff fe4c 	bl	80056f8 <HAL_RCC_GetPCLK2Freq>
 8005a60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a64:	e003      	b.n	8005a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a66:	f7ff fe33 	bl	80056d0 <HAL_RCC_GetPCLK1Freq>
 8005a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a78:	f040 810c 	bne.w	8005c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a8e:	4622      	mov	r2, r4
 8005a90:	462b      	mov	r3, r5
 8005a92:	1891      	adds	r1, r2, r2
 8005a94:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a96:	415b      	adcs	r3, r3
 8005a98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	eb12 0801 	adds.w	r8, r2, r1
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	eb43 0901 	adc.w	r9, r3, r1
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005abe:	4690      	mov	r8, r2
 8005ac0:	4699      	mov	r9, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	eb18 0303 	adds.w	r3, r8, r3
 8005ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005acc:	462b      	mov	r3, r5
 8005ace:	eb49 0303 	adc.w	r3, r9, r3
 8005ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005aea:	460b      	mov	r3, r1
 8005aec:	18db      	adds	r3, r3, r3
 8005aee:	653b      	str	r3, [r7, #80]	; 0x50
 8005af0:	4613      	mov	r3, r2
 8005af2:	eb42 0303 	adc.w	r3, r2, r3
 8005af6:	657b      	str	r3, [r7, #84]	; 0x54
 8005af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b00:	f7fb f852 	bl	8000ba8 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	011c      	lsls	r4, r3, #4
 8005b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	1891      	adds	r1, r2, r2
 8005b2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b2c:	415b      	adcs	r3, r3
 8005b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b34:	4641      	mov	r1, r8
 8005b36:	eb12 0a01 	adds.w	sl, r2, r1
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b54:	4692      	mov	sl, r2
 8005b56:	469b      	mov	fp, r3
 8005b58:	4643      	mov	r3, r8
 8005b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b62:	464b      	mov	r3, r9
 8005b64:	eb4b 0303 	adc.w	r3, fp, r3
 8005b68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b80:	460b      	mov	r3, r1
 8005b82:	18db      	adds	r3, r3, r3
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
 8005b86:	4613      	mov	r3, r2
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b96:	f7fb f807 	bl	8000ba8 <__aeabi_uldivmod>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2264      	movs	r2, #100	; 0x64
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	1acb      	subs	r3, r1, r3
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bc4:	441c      	add	r4, r3
 8005bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	1891      	adds	r1, r2, r2
 8005bde:	63b9      	str	r1, [r7, #56]	; 0x38
 8005be0:	415b      	adcs	r3, r3
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005be8:	4641      	mov	r1, r8
 8005bea:	1851      	adds	r1, r2, r1
 8005bec:	6339      	str	r1, [r7, #48]	; 0x30
 8005bee:	4649      	mov	r1, r9
 8005bf0:	414b      	adcs	r3, r1
 8005bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c00:	4659      	mov	r1, fp
 8005c02:	00cb      	lsls	r3, r1, #3
 8005c04:	4651      	mov	r1, sl
 8005c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c0a:	4651      	mov	r1, sl
 8005c0c:	00ca      	lsls	r2, r1, #3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	4603      	mov	r3, r0
 8005c14:	4642      	mov	r2, r8
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	460a      	mov	r2, r1
 8005c20:	eb42 0303 	adc.w	r3, r2, r3
 8005c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	18db      	adds	r3, r3, r3
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c42:	4613      	mov	r3, r2
 8005c44:	eb42 0303 	adc.w	r3, r2, r3
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c52:	f7fa ffa9 	bl	8000ba8 <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	2164      	movs	r1, #100	; 0x64
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	3332      	adds	r3, #50	; 0x32
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <UART_SetConfig+0x2d4>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	f003 0207 	and.w	r2, r3, #7
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4422      	add	r2, r4
 8005c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c84:	e105      	b.n	8005e92 <UART_SetConfig+0x4d6>
 8005c86:	bf00      	nop
 8005c88:	40011000 	.word	0x40011000
 8005c8c:	40011400 	.word	0x40011400
 8005c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	464b      	mov	r3, r9
 8005caa:	1891      	adds	r1, r2, r2
 8005cac:	6239      	str	r1, [r7, #32]
 8005cae:	415b      	adcs	r3, r3
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	1854      	adds	r4, r2, r1
 8005cba:	4649      	mov	r1, r9
 8005cbc:	eb43 0501 	adc.w	r5, r3, r1
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	00eb      	lsls	r3, r5, #3
 8005cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cce:	00e2      	lsls	r2, r4, #3
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	18e3      	adds	r3, r4, r3
 8005cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cdc:	464b      	mov	r3, r9
 8005cde:	eb45 0303 	adc.w	r3, r5, r3
 8005ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	f04f 0300 	mov.w	r3, #0
 8005cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d02:	4629      	mov	r1, r5
 8005d04:	008b      	lsls	r3, r1, #2
 8005d06:	4621      	mov	r1, r4
 8005d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	008a      	lsls	r2, r1, #2
 8005d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d14:	f7fa ff48 	bl	8000ba8 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4b60      	ldr	r3, [pc, #384]	; (8005ea0 <UART_SetConfig+0x4e4>)
 8005d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	011c      	lsls	r4, r3, #4
 8005d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	1891      	adds	r1, r2, r2
 8005d3e:	61b9      	str	r1, [r7, #24]
 8005d40:	415b      	adcs	r3, r3
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d48:	4641      	mov	r1, r8
 8005d4a:	1851      	adds	r1, r2, r1
 8005d4c:	6139      	str	r1, [r7, #16]
 8005d4e:	4649      	mov	r1, r9
 8005d50:	414b      	adcs	r3, r1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d60:	4659      	mov	r1, fp
 8005d62:	00cb      	lsls	r3, r1, #3
 8005d64:	4651      	mov	r1, sl
 8005d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	00ca      	lsls	r2, r1, #3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	4619      	mov	r1, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	4642      	mov	r2, r8
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	460a      	mov	r2, r1
 8005d80:	eb42 0303 	adc.w	r3, r2, r3
 8005d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005da0:	4649      	mov	r1, r9
 8005da2:	008b      	lsls	r3, r1, #2
 8005da4:	4641      	mov	r1, r8
 8005da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005daa:	4641      	mov	r1, r8
 8005dac:	008a      	lsls	r2, r1, #2
 8005dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005db2:	f7fa fef9 	bl	8000ba8 <__aeabi_uldivmod>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <UART_SetConfig+0x4e4>)
 8005dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	2164      	movs	r1, #100	; 0x64
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	3332      	adds	r3, #50	; 0x32
 8005dce:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <UART_SetConfig+0x4e4>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dda:	441c      	add	r4, r3
 8005ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005de0:	2200      	movs	r2, #0
 8005de2:	673b      	str	r3, [r7, #112]	; 0x70
 8005de4:	677a      	str	r2, [r7, #116]	; 0x74
 8005de6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005dea:	4642      	mov	r2, r8
 8005dec:	464b      	mov	r3, r9
 8005dee:	1891      	adds	r1, r2, r2
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	415b      	adcs	r3, r3
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	1851      	adds	r1, r2, r1
 8005dfe:	6039      	str	r1, [r7, #0]
 8005e00:	4649      	mov	r1, r9
 8005e02:	414b      	adcs	r3, r1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e12:	4659      	mov	r1, fp
 8005e14:	00cb      	lsls	r3, r1, #3
 8005e16:	4651      	mov	r1, sl
 8005e18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	00ca      	lsls	r2, r1, #3
 8005e20:	4610      	mov	r0, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	4603      	mov	r3, r0
 8005e26:	4642      	mov	r2, r8
 8005e28:	189b      	adds	r3, r3, r2
 8005e2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	460a      	mov	r2, r1
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e40:	667a      	str	r2, [r7, #100]	; 0x64
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e4e:	4649      	mov	r1, r9
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	4641      	mov	r1, r8
 8005e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e58:	4641      	mov	r1, r8
 8005e5a:	008a      	lsls	r2, r1, #2
 8005e5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e60:	f7fa fea2 	bl	8000ba8 <__aeabi_uldivmod>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <UART_SetConfig+0x4e4>)
 8005e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	2164      	movs	r1, #100	; 0x64
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	3332      	adds	r3, #50	; 0x32
 8005e7c:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <UART_SetConfig+0x4e4>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4422      	add	r2, r4
 8005e90:	609a      	str	r2, [r3, #8]
}
 8005e92:	bf00      	nop
 8005e94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9e:	bf00      	nop
 8005ea0:	51eb851f 	.word	0x51eb851f

08005ea4 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8005eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eb2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ec8 <FusionDegreesToRadians+0x24>
 8005eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005eba:	eeb0 0a67 	vmov.f32	s0, s15
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	3c8efa35 	.word	0x3c8efa35

08005ecc <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	105a      	asrs	r2, r3, #1
 8005ede:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <FusionFastInverseSqrt+0x54>)
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8005ee4:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eec:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8005f24 <FusionFastInverseSqrt+0x58>
 8005ef0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ef8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f04:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005f28 <FusionFastInverseSqrt+0x5c>
 8005f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005f10:	eeb0 0a67 	vmov.f32	s0, s15
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	5f1f1412 	.word	0x5f1f1412
 8005f24:	3f36d312 	.word	0x3f36d312
 8005f28:	3fd851ff 	.word	0x3fd851ff

08005f2c <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	eef0 6a40 	vmov.f32	s13, s0
 8005f36:	eeb0 7a60 	vmov.f32	s14, s1
 8005f3a:	eef0 7a41 	vmov.f32	s15, s2
 8005f3e:	edc7 6a01 	vstr	s13, [r7, #4]
 8005f42:	ed87 7a02 	vstr	s14, [r7, #8]
 8005f46:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8005f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f56:	d10f      	bne.n	8005f78 <FusionVectorIsZero+0x4c>
 8005f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d108      	bne.n	8005f78 <FusionVectorIsZero+0x4c>
 8005f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	d101      	bne.n	8005f78 <FusionVectorIsZero+0x4c>
 8005f74:	2301      	movs	r3, #1
 8005f76:	e000      	b.n	8005f7a <FusionVectorIsZero+0x4e>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8005f8c:	b480      	push	{r7}
 8005f8e:	b091      	sub	sp, #68	; 0x44
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	eeb0 5a40 	vmov.f32	s10, s0
 8005f96:	eef0 5a60 	vmov.f32	s11, s1
 8005f9a:	eeb0 6a41 	vmov.f32	s12, s2
 8005f9e:	eef0 6a61 	vmov.f32	s13, s3
 8005fa2:	eeb0 7a42 	vmov.f32	s14, s4
 8005fa6:	eef0 7a62 	vmov.f32	s15, s5
 8005faa:	ed87 5a07 	vstr	s10, [r7, #28]
 8005fae:	edc7 5a08 	vstr	s11, [r7, #32]
 8005fb2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8005fb6:	edc7 6a04 	vstr	s13, [r7, #16]
 8005fba:	ed87 7a05 	vstr	s14, [r7, #20]
 8005fbe:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 8005fc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fca:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005fce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8005fd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8005fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8005fda:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005fde:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8005fe2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8005fee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8005ff2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ffc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006000:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006006:	ee06 1a90 	vmov	s13, r1
 800600a:	ee07 2a10 	vmov	s14, r2
 800600e:	ee07 3a90 	vmov	s15, r3
}
 8006012:	eeb0 0a66 	vmov.f32	s0, s13
 8006016:	eef0 0a47 	vmov.f32	s1, s14
 800601a:	eeb0 1a67 	vmov.f32	s2, s15
 800601e:	3744      	adds	r7, #68	; 0x44
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	eef0 6a40 	vmov.f32	s13, s0
 8006032:	eeb0 7a60 	vmov.f32	s14, s1
 8006036:	eef0 7a41 	vmov.f32	s15, s2
 800603a:	edc7 6a01 	vstr	s13, [r7, #4]
 800603e:	ed87 7a02 	vstr	s14, [r7, #8]
 8006042:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8006046:	ed97 7a01 	vldr	s14, [r7, #4]
 800604a:	edd7 7a02 	vldr	s15, [r7, #8]
 800604e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006052:	edd7 7a03 	vldr	s15, [r7, #12]
 8006056:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800605a:	eeb0 0a67 	vmov.f32	s0, s15
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8006068:	b480      	push	{r7}
 800606a:	b08f      	sub	sp, #60	; 0x3c
 800606c:	af00      	add	r7, sp, #0
 800606e:	eef0 6a40 	vmov.f32	s13, s0
 8006072:	eeb0 7a60 	vmov.f32	s14, s1
 8006076:	eef0 7a41 	vmov.f32	s15, s2
 800607a:	edc7 1a04 	vstr	s3, [r7, #16]
 800607e:	edc7 6a05 	vstr	s13, [r7, #20]
 8006082:	ed87 7a06 	vstr	s14, [r7, #24]
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 800608a:	ed97 7a05 	vldr	s14, [r7, #20]
 800608e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006096:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800609a:	ed97 7a06 	vldr	s14, [r7, #24]
 800609e:	edd7 7a04 	vldr	s15, [r7, #16]
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80060a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80060aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80060ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80060b6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 80060ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060be:	f107 0220 	add.w	r2, r7, #32
 80060c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80060c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	ee06 1a90 	vmov	s13, r1
 80060d2:	ee07 2a10 	vmov	s14, r2
 80060d6:	ee07 3a90 	vmov	s15, r3
}
 80060da:	eeb0 0a66 	vmov.f32	s0, s13
 80060de:	eef0 0a47 	vmov.f32	s1, s14
 80060e2:	eeb0 1a67 	vmov.f32	s2, s15
 80060e6:	373c      	adds	r7, #60	; 0x3c
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80060f0:	b480      	push	{r7}
 80060f2:	b091      	sub	sp, #68	; 0x44
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	eeb0 5a40 	vmov.f32	s10, s0
 80060fa:	eef0 5a60 	vmov.f32	s11, s1
 80060fe:	eeb0 6a41 	vmov.f32	s12, s2
 8006102:	eef0 6a61 	vmov.f32	s13, s3
 8006106:	eeb0 7a42 	vmov.f32	s14, s4
 800610a:	eef0 7a62 	vmov.f32	s15, s5
 800610e:	ed87 5a07 	vstr	s10, [r7, #28]
 8006112:	edc7 5a08 	vstr	s11, [r7, #32]
 8006116:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800611a:	edc7 6a04 	vstr	s13, [r7, #16]
 800611e:	ed87 7a05 	vstr	s14, [r7, #20]
 8006122:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 8006126:	ed97 7a07 	vldr	s14, [r7, #28]
 800612a:	edd7 7a04 	vldr	s15, [r7, #16]
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006132:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8006136:	ed97 7a08 	vldr	s14, [r7, #32]
 800613a:	edd7 7a05 	vldr	s15, [r7, #20]
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006142:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8006146:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800614a:	edd7 7a06 	vldr	s15, [r7, #24]
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8006152:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8006156:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800615a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800615e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800616a:	ee06 1a90 	vmov	s13, r1
 800616e:	ee07 2a10 	vmov	s14, r2
 8006172:	ee07 3a90 	vmov	s15, r3
}
 8006176:	eeb0 0a66 	vmov.f32	s0, s13
 800617a:	eef0 0a47 	vmov.f32	s1, s14
 800617e:	eeb0 1a67 	vmov.f32	s2, s15
 8006182:	3744      	adds	r7, #68	; 0x44
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800618c:	b480      	push	{r7}
 800618e:	b091      	sub	sp, #68	; 0x44
 8006190:	af00      	add	r7, sp, #0
 8006192:	eeb0 5a40 	vmov.f32	s10, s0
 8006196:	eef0 5a60 	vmov.f32	s11, s1
 800619a:	eeb0 6a41 	vmov.f32	s12, s2
 800619e:	eef0 6a61 	vmov.f32	s13, s3
 80061a2:	eeb0 7a42 	vmov.f32	s14, s4
 80061a6:	eef0 7a62 	vmov.f32	s15, s5
 80061aa:	ed87 5a07 	vstr	s10, [r7, #28]
 80061ae:	edc7 5a08 	vstr	s11, [r7, #32]
 80061b2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80061b6:	edc7 6a04 	vstr	s13, [r7, #16]
 80061ba:	ed87 7a05 	vstr	s14, [r7, #20]
 80061be:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 80061c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80061c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80061ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80061d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061da:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80061de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80061e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80061e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80061f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80061f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80061fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8006202:	ed97 7a07 	vldr	s14, [r7, #28]
 8006206:	edd7 7a05 	vldr	s15, [r7, #20]
 800620a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800620e:	edd7 6a08 	vldr	s13, [r7, #32]
 8006212:	edd7 7a04 	vldr	s15, [r7, #16]
 8006216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800621a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800621e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8006222:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800622a:	ca07      	ldmia	r2, {r0, r1, r2}
 800622c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006230:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006236:	ee06 1a90 	vmov	s13, r1
 800623a:	ee07 2a10 	vmov	s14, r2
 800623e:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 8006242:	eeb0 0a66 	vmov.f32	s0, s13
 8006246:	eef0 0a47 	vmov.f32	s1, s14
 800624a:	eeb0 1a67 	vmov.f32	s2, s15
 800624e:	3744      	adds	r7, #68	; 0x44
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	eef0 6a40 	vmov.f32	s13, s0
 8006262:	eeb0 7a60 	vmov.f32	s14, s1
 8006266:	eef0 7a41 	vmov.f32	s15, s2
 800626a:	edc7 6a01 	vstr	s13, [r7, #4]
 800626e:	ed87 7a02 	vstr	s14, [r7, #8]
 8006272:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8006276:	ed97 5a01 	vldr	s10, [r7, #4]
 800627a:	edd7 5a02 	vldr	s11, [r7, #8]
 800627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006282:	edd7 6a01 	vldr	s13, [r7, #4]
 8006286:	ed97 7a02 	vldr	s14, [r7, #8]
 800628a:	edd7 7a03 	vldr	s15, [r7, #12]
 800628e:	eef0 1a45 	vmov.f32	s3, s10
 8006292:	eeb0 2a65 	vmov.f32	s4, s11
 8006296:	eef0 2a46 	vmov.f32	s5, s12
 800629a:	eeb0 0a66 	vmov.f32	s0, s13
 800629e:	eef0 0a47 	vmov.f32	s1, s14
 80062a2:	eeb0 1a67 	vmov.f32	s2, s15
 80062a6:	f7ff ff23 	bl	80060f0 <FusionVectorHadamardProduct>
 80062aa:	eef0 6a40 	vmov.f32	s13, s0
 80062ae:	eeb0 7a60 	vmov.f32	s14, s1
 80062b2:	eef0 7a41 	vmov.f32	s15, s2
 80062b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80062ba:	ed87 7a06 	vstr	s14, [r7, #24]
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]
 80062c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80062c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80062ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80062ce:	eeb0 0a66 	vmov.f32	s0, s13
 80062d2:	eef0 0a47 	vmov.f32	s1, s14
 80062d6:	eeb0 1a67 	vmov.f32	s2, s15
 80062da:	f7ff fea5 	bl	8006028 <FusionVectorSum>
 80062de:	eef0 7a40 	vmov.f32	s15, s0
}
 80062e2:	eeb0 0a67 	vmov.f32	s0, s15
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	; 0x30
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	eef0 6a40 	vmov.f32	s13, s0
 80062f6:	eeb0 7a60 	vmov.f32	s14, s1
 80062fa:	eef0 7a41 	vmov.f32	s15, s2
 80062fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8006302:	ed87 7a06 	vstr	s14, [r7, #24]
 8006306:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800630a:	edd7 6a05 	vldr	s13, [r7, #20]
 800630e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006312:	edd7 7a07 	vldr	s15, [r7, #28]
 8006316:	eeb0 0a66 	vmov.f32	s0, s13
 800631a:	eef0 0a47 	vmov.f32	s1, s14
 800631e:	eeb0 1a67 	vmov.f32	s2, s15
 8006322:	f7ff ff99 	bl	8006258 <FusionVectorMagnitudeSquared>
 8006326:	eef0 7a40 	vmov.f32	s15, s0
 800632a:	eeb0 0a67 	vmov.f32	s0, s15
 800632e:	f7ff fdcd 	bl	8005ecc <FusionFastInverseSqrt>
 8006332:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8006336:	edd7 6a05 	vldr	s13, [r7, #20]
 800633a:	ed97 7a06 	vldr	s14, [r7, #24]
 800633e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006342:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8006346:	eeb0 0a66 	vmov.f32	s0, s13
 800634a:	eef0 0a47 	vmov.f32	s1, s14
 800634e:	eeb0 1a67 	vmov.f32	s2, s15
 8006352:	f7ff fe89 	bl	8006068 <FusionVectorMultiplyScalar>
 8006356:	eef0 6a40 	vmov.f32	s13, s0
 800635a:	eeb0 7a60 	vmov.f32	s14, s1
 800635e:	eef0 7a41 	vmov.f32	s15, s2
 8006362:	edc7 6a08 	vstr	s13, [r7, #32]
 8006366:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800636a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800636e:	6a39      	ldr	r1, [r7, #32]
 8006370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	ee06 1a90 	vmov	s13, r1
 8006378:	ee07 2a10 	vmov	s14, r2
 800637c:	ee07 3a90 	vmov	s15, r3
}
 8006380:	eeb0 0a66 	vmov.f32	s0, s13
 8006384:	eef0 0a47 	vmov.f32	s1, s14
 8006388:	eeb0 1a67 	vmov.f32	s2, s15
 800638c:	3730      	adds	r7, #48	; 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8006392:	b490      	push	{r4, r7}
 8006394:	b094      	sub	sp, #80	; 0x50
 8006396:	af00      	add	r7, sp, #0
 8006398:	eeb0 4a40 	vmov.f32	s8, s0
 800639c:	eef0 4a60 	vmov.f32	s9, s1
 80063a0:	eeb0 5a41 	vmov.f32	s10, s2
 80063a4:	eef0 5a61 	vmov.f32	s11, s3
 80063a8:	eeb0 6a42 	vmov.f32	s12, s4
 80063ac:	eef0 6a62 	vmov.f32	s13, s5
 80063b0:	eeb0 7a43 	vmov.f32	s14, s6
 80063b4:	eef0 7a63 	vmov.f32	s15, s7
 80063b8:	ed87 4a08 	vstr	s8, [r7, #32]
 80063bc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80063c0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80063c4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80063c8:	ed87 6a04 	vstr	s12, [r7, #16]
 80063cc:	edc7 6a05 	vstr	s13, [r7, #20]
 80063d0:	ed87 7a06 	vstr	s14, [r7, #24]
 80063d4:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 80063d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80063dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80063e0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063e4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 80063e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80063ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80063f0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80063f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 80063f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80063fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006400:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006404:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8006408:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800640c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006410:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006414:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 8006418:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800641c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006426:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006428:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800642a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800642c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642e:	ee06 0a10 	vmov	s12, r0
 8006432:	ee06 1a90 	vmov	s13, r1
 8006436:	ee07 2a10 	vmov	s14, r2
 800643a:	ee07 3a90 	vmov	s15, r3
}
 800643e:	eeb0 0a46 	vmov.f32	s0, s12
 8006442:	eef0 0a66 	vmov.f32	s1, s13
 8006446:	eeb0 1a47 	vmov.f32	s2, s14
 800644a:	eef0 1a67 	vmov.f32	s3, s15
 800644e:	3750      	adds	r7, #80	; 0x50
 8006450:	46bd      	mov	sp, r7
 8006452:	bc90      	pop	{r4, r7}
 8006454:	4770      	bx	lr

08006456 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8006456:	b490      	push	{r4, r7}
 8006458:	b094      	sub	sp, #80	; 0x50
 800645a:	af00      	add	r7, sp, #0
 800645c:	eeb0 4a40 	vmov.f32	s8, s0
 8006460:	eef0 4a60 	vmov.f32	s9, s1
 8006464:	eeb0 5a41 	vmov.f32	s10, s2
 8006468:	eef0 5a61 	vmov.f32	s11, s3
 800646c:	eeb0 6a42 	vmov.f32	s12, s4
 8006470:	eef0 6a62 	vmov.f32	s13, s5
 8006474:	eeb0 7a43 	vmov.f32	s14, s6
 8006478:	eef0 7a63 	vmov.f32	s15, s7
 800647c:	ed87 4a08 	vstr	s8, [r7, #32]
 8006480:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8006484:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8006488:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 800648c:	ed87 6a04 	vstr	s12, [r7, #16]
 8006490:	edc7 6a05 	vstr	s13, [r7, #20]
 8006494:	ed87 7a06 	vstr	s14, [r7, #24]
 8006498:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 800649c:	ed97 7a08 	vldr	s14, [r7, #32]
 80064a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80064a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80064b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80064c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064c8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80064cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80064d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80064d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 80064dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80064e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80064e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80064ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80064f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80064fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006508:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800650c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006514:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006518:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 800651c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006520:	edd7 7a06 	vldr	s15, [r7, #24]
 8006524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006528:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800652c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006538:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800653c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006548:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800654c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006554:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006558:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 800655c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006560:	edd7 7a07 	vldr	s15, [r7, #28]
 8006564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006568:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800656c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006578:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800657c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006584:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006588:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800658c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006594:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006598:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 800659c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80065a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80065aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80065ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b2:	ee06 0a10 	vmov	s12, r0
 80065b6:	ee06 1a90 	vmov	s13, r1
 80065ba:	ee07 2a10 	vmov	s14, r2
 80065be:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 80065c2:	eeb0 0a46 	vmov.f32	s0, s12
 80065c6:	eef0 0a66 	vmov.f32	s1, s13
 80065ca:	eeb0 1a47 	vmov.f32	s2, s14
 80065ce:	eef0 1a67 	vmov.f32	s3, s15
 80065d2:	3750      	adds	r7, #80	; 0x50
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc90      	pop	{r4, r7}
 80065d8:	4770      	bx	lr

080065da <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 80065da:	b490      	push	{r4, r7}
 80065dc:	b094      	sub	sp, #80	; 0x50
 80065de:	af00      	add	r7, sp, #0
 80065e0:	eef0 4a40 	vmov.f32	s9, s0
 80065e4:	eeb0 5a60 	vmov.f32	s10, s1
 80065e8:	eef0 5a41 	vmov.f32	s11, s2
 80065ec:	eeb0 6a61 	vmov.f32	s12, s3
 80065f0:	eef0 6a42 	vmov.f32	s13, s4
 80065f4:	eeb0 7a62 	vmov.f32	s14, s5
 80065f8:	eef0 7a43 	vmov.f32	s15, s6
 80065fc:	edc7 4a08 	vstr	s9, [r7, #32]
 8006600:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8006604:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8006608:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800660c:	edc7 6a05 	vstr	s13, [r7, #20]
 8006610:	ed87 7a06 	vstr	s14, [r7, #24]
 8006614:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8006618:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800661c:	eeb1 7a67 	vneg.f32	s14, s15
 8006620:	edd7 7a05 	vldr	s15, [r7, #20]
 8006624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006628:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800662c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006638:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800663c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006644:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006648:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800664c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006650:	edd7 7a05 	vldr	s15, [r7, #20]
 8006654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006658:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800665c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006668:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800666c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006674:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006678:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800667c:	ed97 7a08 	vldr	s14, [r7, #32]
 8006680:	edd7 7a06 	vldr	s15, [r7, #24]
 8006684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006688:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800668c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006698:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800669c:	edd7 7a05 	vldr	s15, [r7, #20]
 80066a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066a4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80066a8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80066ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80066b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80066b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066b8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80066c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80066cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80066d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066d4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80066d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }};
    return result;
 80066dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80066e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80066ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80066ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	ee06 0a10 	vmov	s12, r0
 80066f6:	ee06 1a90 	vmov	s13, r1
 80066fa:	ee07 2a10 	vmov	s14, r2
 80066fe:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 8006702:	eeb0 0a46 	vmov.f32	s0, s12
 8006706:	eef0 0a66 	vmov.f32	s1, s13
 800670a:	eeb0 1a47 	vmov.f32	s2, s14
 800670e:	eef0 1a67 	vmov.f32	s3, s15
 8006712:	3750      	adds	r7, #80	; 0x50
 8006714:	46bd      	mov	sp, r7
 8006716:	bc90      	pop	{r4, r7}
 8006718:	4770      	bx	lr

0800671a <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800671a:	b590      	push	{r4, r7, lr}
 800671c:	b093      	sub	sp, #76	; 0x4c
 800671e:	af00      	add	r7, sp, #0
 8006720:	eeb0 6a40 	vmov.f32	s12, s0
 8006724:	eef0 6a60 	vmov.f32	s13, s1
 8006728:	eeb0 7a41 	vmov.f32	s14, s2
 800672c:	eef0 7a61 	vmov.f32	s15, s3
 8006730:	ed87 6a04 	vstr	s12, [r7, #16]
 8006734:	edc7 6a05 	vstr	s13, [r7, #20]
 8006738:	ed87 7a06 	vstr	s14, [r7, #24]
 800673c:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8006740:	ed97 7a04 	vldr	s14, [r7, #16]
 8006744:	edd7 7a04 	vldr	s15, [r7, #16]
 8006748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800674c:	edd7 6a05 	vldr	s13, [r7, #20]
 8006750:	edd7 7a05 	vldr	s15, [r7, #20]
 8006754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800675c:	edd7 6a06 	vldr	s13, [r7, #24]
 8006760:	edd7 7a06 	vldr	s15, [r7, #24]
 8006764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800676c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006770:	edd7 7a07 	vldr	s15, [r7, #28]
 8006774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800677c:	eeb0 0a67 	vmov.f32	s0, s15
 8006780:	f7ff fba4 	bl	8005ecc <FusionFastInverseSqrt>
 8006784:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8006788:	ed97 7a04 	vldr	s14, [r7, #16]
 800678c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006790:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8006794:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8006798:	ed97 7a05 	vldr	s14, [r7, #20]
 800679c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80067a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80067a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80067a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80067ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80067b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80067b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80067bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80067c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80067c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 80067c8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80067cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80067d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067de:	ee06 0a10 	vmov	s12, r0
 80067e2:	ee06 1a90 	vmov	s13, r1
 80067e6:	ee07 2a10 	vmov	s14, r2
 80067ea:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80067ee:	eeb0 0a46 	vmov.f32	s0, s12
 80067f2:	eef0 0a66 	vmov.f32	s1, s13
 80067f6:	eeb0 1a47 	vmov.f32	s2, s14
 80067fa:	eef0 1a67 	vmov.f32	s3, s15
 80067fe:	374c      	adds	r7, #76	; 0x4c
 8006800:	46bd      	mov	sp, r7
 8006802:	bd90      	pop	{r4, r7, pc}

08006804 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8006804:	b5b0      	push	{r4, r5, r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <FusionAhrsInitialise+0x34>)
 800680e:	f107 040c 	add.w	r4, r7, #12
 8006812:	461d      	mov	r5, r3
 8006814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800681c:	f107 030c 	add.w	r3, r7, #12
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f868 	bl	80068f8 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f807 	bl	800683c <FusionAhrsReset>
}
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bdb0      	pop	{r4, r5, r7, pc}
 8006836:	bf00      	nop
 8006838:	0800c768 	.word	0x0800c768

0800683c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800683c:	b480      	push	{r7}
 800683e:	b091      	sub	sp, #68	; 0x44
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800684a:	615a      	str	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	619a      	str	r2, [r3, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	61da      	str	r2, [r3, #28]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f04f 0200 	mov.w	r2, #0
 800686a:	625a      	str	r2, [r3, #36]	; 0x24
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	629a      	str	r2, [r3, #40]	; 0x28
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1b      	ldr	r2, [pc, #108]	; (80068f4 <FusionAhrsReset+0xb8>)
 8006888:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	63da      	str	r2, [r3, #60]	; 0x3c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	649a      	str	r2, [r3, #72]	; 0x48
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80068e6:	bf00      	nop
 80068e8:	3744      	adds	r7, #68	; 0x44
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	41200000 	.word	0x41200000

080068f8 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	edd3 7a02 	vldr	s15, [r3, #8]
 8006918:	eef5 7a40 	vcmp.f32	s15, #0.0
 800691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006920:	d003      	beq.n	800692a <FusionAhrsSetSettings+0x32>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <FusionAhrsSetSettings+0x118>)
 800692e:	609a      	str	r2, [r3, #8]
 8006930:	e01d      	b.n	800696e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	edd3 7a02 	vldr	s15, [r3, #8]
 8006938:	eeb0 0a67 	vmov.f32	s0, s15
 800693c:	f7ff fab2 	bl	8005ea4 <FusionDegreesToRadians>
 8006940:	eef0 7a40 	vmov.f32	s15, s0
 8006944:	eeb0 0a67 	vmov.f32	s0, s15
 8006948:	f004 fb98 	bl	800b07c <sinf>
 800694c:	eef0 7a40 	vmov.f32	s15, s0
 8006950:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006958:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800695c:	eeb0 0a67 	vmov.f32	s0, s15
 8006960:	f004 fc00 	bl	800b164 <powf>
 8006964:	eef0 7a40 	vmov.f32	s15, s0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	edd3 7a03 	vldr	s15, [r3, #12]
 8006974:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697c:	d003      	beq.n	8006986 <FusionAhrsSetSettings+0x8e>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <FusionAhrsSetSettings+0x118>)
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e01d      	b.n	80069ca <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	edd3 7a03 	vldr	s15, [r3, #12]
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	f7ff fa84 	bl	8005ea4 <FusionDegreesToRadians>
 800699c:	eef0 7a40 	vmov.f32	s15, s0
 80069a0:	eeb0 0a67 	vmov.f32	s0, s15
 80069a4:	f004 fb6a 	bl	800b07c <sinf>
 80069a8:	eef0 7a40 	vmov.f32	s15, s0
 80069ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80069b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069b4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80069b8:	eeb0 0a67 	vmov.f32	s0, s15
 80069bc:	f004 fbd2 	bl	800b164 <powf>
 80069c0:	eef0 7a40 	vmov.f32	s15, s0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069d8:	f083 0301 	eor.w	r3, r3, #1
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80069f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80069f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069f8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80069fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	7f7fffff 	.word	0x7f7fffff

08006a14 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b0bf      	sub	sp, #252	; 0xfc
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a1c:	eeb0 5a61 	vmov.f32	s10, s3
 8006a20:	eef0 5a42 	vmov.f32	s11, s4
 8006a24:	eeb0 6a62 	vmov.f32	s12, s5
 8006a28:	eef0 6a43 	vmov.f32	s13, s6
 8006a2c:	eeb0 7a63 	vmov.f32	s14, s7
 8006a30:	eef0 7a44 	vmov.f32	s15, s8
 8006a34:	edc7 4a01 	vstr	s9, [r7, #4]
 8006a38:	ed87 0a08 	vstr	s0, [r7, #32]
 8006a3c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8006a40:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8006a44:	ed87 5a05 	vstr	s10, [r7, #20]
 8006a48:	edc7 5a06 	vstr	s11, [r7, #24]
 8006a4c:	ed87 6a07 	vstr	s12, [r7, #28]
 8006a50:	edc7 6a02 	vstr	s13, [r7, #8]
 8006a54:	ed87 7a03 	vstr	s14, [r7, #12]
 8006a58:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	f107 0214 	add.w	r2, r7, #20
 8006a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d025      	beq.n	8006ac0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8006a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa6:	d50b      	bpl.n	8006ac0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8006ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ac2:	f000 fb08 	bl	80070d6 <HalfGravity>
 8006ac6:	eef0 6a40 	vmov.f32	s13, s0
 8006aca:	eeb0 7a60 	vmov.f32	s14, s1
 8006ace:	eef0 7a41 	vmov.f32	s15, s2
 8006ad2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8006ad6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8006ada:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 8006afe:	edd7 6a05 	vldr	s13, [r7, #20]
 8006b02:	ed97 7a06 	vldr	s14, [r7, #24]
 8006b06:	edd7 7a07 	vldr	s15, [r7, #28]
 8006b0a:	eeb0 0a66 	vmov.f32	s0, s13
 8006b0e:	eef0 0a47 	vmov.f32	s1, s14
 8006b12:	eeb0 1a67 	vmov.f32	s2, s15
 8006b16:	f7ff fa09 	bl	8005f2c <FusionVectorIsZero>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f083 0301 	eor.w	r3, r3, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 809b 	beq.w	8006c5e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d918      	bls.n	8006b66 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8006b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b44:	f7ff fe7a 	bl	800683c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	f103 0414 	add.w	r4, r3, #20
 8006b4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8006b66:	edd7 6a05 	vldr	s13, [r7, #20]
 8006b6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8006b6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006b72:	eeb0 0a66 	vmov.f32	s0, s13
 8006b76:	eef0 0a47 	vmov.f32	s1, s14
 8006b7a:	eeb0 1a67 	vmov.f32	s2, s15
 8006b7e:	f7ff fbb5 	bl	80062ec <FusionVectorNormalise>
 8006b82:	eef0 6a40 	vmov.f32	s13, s0
 8006b86:	eeb0 7a60 	vmov.f32	s14, s1
 8006b8a:	eef0 7a41 	vmov.f32	s15, s2
 8006b8e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8006b92:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8006b96:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8006b9a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006b9c:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8006ba0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8006ba4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8006ba8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8006bac:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006bb0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006bb4:	eef0 1a45 	vmov.f32	s3, s10
 8006bb8:	eeb0 2a65 	vmov.f32	s4, s11
 8006bbc:	eef0 2a46 	vmov.f32	s5, s12
 8006bc0:	eeb0 0a66 	vmov.f32	s0, s13
 8006bc4:	eef0 0a47 	vmov.f32	s1, s14
 8006bc8:	eeb0 1a67 	vmov.f32	s2, s15
 8006bcc:	f7ff fade 	bl	800618c <FusionVectorCrossProduct>
 8006bd0:	eef0 6a40 	vmov.f32	s13, s0
 8006bd4:	eeb0 7a60 	vmov.f32	s14, s1
 8006bd8:	eef0 7a41 	vmov.f32	s15, s2
 8006bdc:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8006be0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8006be4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d118      	bne.n	8006c24 <FusionAhrsUpdate+0x210>
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8006bf8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006bfc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006c00:	eeb0 0a66 	vmov.f32	s0, s13
 8006c04:	eef0 0a47 	vmov.f32	s1, s14
 8006c08:	eeb0 1a67 	vmov.f32	s2, s15
 8006c0c:	f7ff fb24 	bl	8006258 <FusionVectorMagnitudeSquared>
 8006c10:	eeb0 7a40 	vmov.f32	s14, s0
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c22:	d817      	bhi.n	8006c54 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8006c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c26:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006c2a:	323c      	adds	r2, #60	; 0x3c
 8006c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	2b09      	cmp	r3, #9
 8006c44:	d901      	bls.n	8006c4a <FusionAhrsUpdate+0x236>
 8006c46:	230a      	movs	r3, #10
 8006c48:	e000      	b.n	8006c4c <FusionAhrsUpdate+0x238>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	659a      	str	r2, [r3, #88]	; 0x58
 8006c52:	e004      	b.n	8006c5e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	673b      	str	r3, [r7, #112]	; 0x70
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	677b      	str	r3, [r7, #116]	; 0x74
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8006c78:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c84:	eeb0 0a66 	vmov.f32	s0, s13
 8006c88:	eef0 0a47 	vmov.f32	s1, s14
 8006c8c:	eeb0 1a67 	vmov.f32	s2, s15
 8006c90:	f7ff f94c 	bl	8005f2c <FusionVectorIsZero>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f083 0301 	eor.w	r3, r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80e6 	beq.w	8006e6e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d92a      	bls.n	8006d0c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	ed97 5a02 	vldr	s10, [r7, #8]
 8006cbe:	edd7 5a03 	vldr	s11, [r7, #12]
 8006cc2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006cc6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006cca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006cce:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006cd2:	eef0 1a45 	vmov.f32	s3, s10
 8006cd6:	eeb0 2a65 	vmov.f32	s4, s11
 8006cda:	eef0 2a46 	vmov.f32	s5, s12
 8006cde:	eeb0 0a66 	vmov.f32	s0, s13
 8006ce2:	eef0 0a47 	vmov.f32	s1, s14
 8006ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fe6e 	bl	80079cc <FusionCompassCalculateHeading>
 8006cf0:	eef0 7a40 	vmov.f32	s15, s0
 8006cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8006cf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cfa:	f000 fbd6 	bl	80074aa <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	2200      	movs	r2, #0
 8006d02:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8006d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0e:	f000 fa9f 	bl	8007250 <HalfMagnetic>
 8006d12:	eef0 6a40 	vmov.f32	s13, s0
 8006d16:	eeb0 7a60 	vmov.f32	s14, s1
 8006d1a:	eef0 7a41 	vmov.f32	s15, s2
 8006d1e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8006d22:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8006d26:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 8006d2a:	ed97 5a02 	vldr	s10, [r7, #8]
 8006d2e:	edd7 5a03 	vldr	s11, [r7, #12]
 8006d32:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d36:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8006d3a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006d3e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006d42:	eef0 1a45 	vmov.f32	s3, s10
 8006d46:	eeb0 2a65 	vmov.f32	s4, s11
 8006d4a:	eef0 2a46 	vmov.f32	s5, s12
 8006d4e:	eeb0 0a66 	vmov.f32	s0, s13
 8006d52:	eef0 0a47 	vmov.f32	s1, s14
 8006d56:	eeb0 1a67 	vmov.f32	s2, s15
 8006d5a:	f7ff fa17 	bl	800618c <FusionVectorCrossProduct>
 8006d5e:	eef0 6a40 	vmov.f32	s13, s0
 8006d62:	eeb0 7a60 	vmov.f32	s14, s1
 8006d66:	eef0 7a41 	vmov.f32	s15, s2
 8006d6a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 8006d6e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8006d72:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8006d76:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8006d7a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8006d7e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006d82:	eeb0 0a66 	vmov.f32	s0, s13
 8006d86:	eef0 0a47 	vmov.f32	s1, s14
 8006d8a:	eeb0 1a67 	vmov.f32	s2, s15
 8006d8e:	f7ff faad 	bl	80062ec <FusionVectorNormalise>
 8006d92:	eef0 6a40 	vmov.f32	s13, s0
 8006d96:	eeb0 7a60 	vmov.f32	s14, s1
 8006d9a:	eef0 7a41 	vmov.f32	s15, s2
 8006d9e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8006da2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8006da6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8006daa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006dac:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8006db0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8006db4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8006db8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006dbc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006dc0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006dc4:	eef0 1a45 	vmov.f32	s3, s10
 8006dc8:	eeb0 2a65 	vmov.f32	s4, s11
 8006dcc:	eef0 2a46 	vmov.f32	s5, s12
 8006dd0:	eeb0 0a66 	vmov.f32	s0, s13
 8006dd4:	eef0 0a47 	vmov.f32	s1, s14
 8006dd8:	eeb0 1a67 	vmov.f32	s2, s15
 8006ddc:	f7ff f9d6 	bl	800618c <FusionVectorCrossProduct>
 8006de0:	eef0 6a40 	vmov.f32	s13, s0
 8006de4:	eeb0 7a60 	vmov.f32	s14, s1
 8006de8:	eef0 7a41 	vmov.f32	s15, s2
 8006dec:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8006df0:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8006df4:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d118      	bne.n	8006e34 <FusionAhrsUpdate+0x420>
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8006e08:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8006e0c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006e10:	eeb0 0a66 	vmov.f32	s0, s13
 8006e14:	eef0 0a47 	vmov.f32	s1, s14
 8006e18:	eeb0 1a67 	vmov.f32	s2, s15
 8006e1c:	f7ff fa1c 	bl	8006258 <FusionVectorMagnitudeSquared>
 8006e20:	eeb0 7a40 	vmov.f32	s14, s0
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e32:	d817      	bhi.n	8006e64 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8006e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006e3a:	3248      	adds	r2, #72	; 0x48
 8006e3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d901      	bls.n	8006e5a <FusionAhrsUpdate+0x446>
 8006e56:	230a      	movs	r3, #10
 8006e58:	e000      	b.n	8006e5c <FusionAhrsUpdate+0x448>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	1ad2      	subs	r2, r2, r3
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60
 8006e62:	e004      	b.n	8006e6e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8006e6e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006e72:	f7ff f817 	bl	8005ea4 <FusionDegreesToRadians>
 8006e76:	eeb0 6a40 	vmov.f32	s12, s0
 8006e7a:	edd7 6a08 	vldr	s13, [r7, #32]
 8006e7e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006e82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006e86:	eef0 1a46 	vmov.f32	s3, s12
 8006e8a:	eeb0 0a66 	vmov.f32	s0, s13
 8006e8e:	eef0 0a47 	vmov.f32	s1, s14
 8006e92:	eeb0 1a67 	vmov.f32	s2, s15
 8006e96:	f7ff f8e7 	bl	8006068 <FusionVectorMultiplyScalar>
 8006e9a:	eef0 6a40 	vmov.f32	s13, s0
 8006e9e:	eeb0 7a60 	vmov.f32	s14, s1
 8006ea2:	eef0 7a41 	vmov.f32	s15, s2
 8006ea6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 8006eaa:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 8006eae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8006eb2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8006eb6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8006eba:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 8006ebe:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8006ec2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006ec6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006eca:	eef0 1a45 	vmov.f32	s3, s10
 8006ece:	eeb0 2a65 	vmov.f32	s4, s11
 8006ed2:	eef0 2a46 	vmov.f32	s5, s12
 8006ed6:	eeb0 0a66 	vmov.f32	s0, s13
 8006eda:	eef0 0a47 	vmov.f32	s1, s14
 8006ede:	eeb0 1a67 	vmov.f32	s2, s15
 8006ee2:	f7ff f853 	bl	8005f8c <FusionVectorAdd>
 8006ee6:	eef0 6a40 	vmov.f32	s13, s0
 8006eea:	eeb0 7a60 	vmov.f32	s14, s1
 8006eee:	eef0 7a41 	vmov.f32	s15, s2
 8006ef2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8006ef6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 8006efa:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8006f04:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8006f08:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006f0c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8006f10:	eef0 1a46 	vmov.f32	s3, s12
 8006f14:	eeb0 0a66 	vmov.f32	s0, s13
 8006f18:	eef0 0a47 	vmov.f32	s1, s14
 8006f1c:	eeb0 1a67 	vmov.f32	s2, s15
 8006f20:	f7ff f8a2 	bl	8006068 <FusionVectorMultiplyScalar>
 8006f24:	eef0 6a40 	vmov.f32	s13, s0
 8006f28:	eeb0 7a60 	vmov.f32	s14, s1
 8006f2c:	eef0 7a41 	vmov.f32	s15, s2
 8006f30:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8006f34:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8006f38:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 8006f3c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8006f40:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8006f44:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8006f48:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006f4c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006f50:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006f54:	eef0 1a45 	vmov.f32	s3, s10
 8006f58:	eeb0 2a65 	vmov.f32	s4, s11
 8006f5c:	eef0 2a46 	vmov.f32	s5, s12
 8006f60:	eeb0 0a66 	vmov.f32	s0, s13
 8006f64:	eef0 0a47 	vmov.f32	s1, s14
 8006f68:	eeb0 1a67 	vmov.f32	s2, s15
 8006f6c:	f7ff f80e 	bl	8005f8c <FusionVectorAdd>
 8006f70:	eef0 6a40 	vmov.f32	s13, s0
 8006f74:	eeb0 7a60 	vmov.f32	s14, s1
 8006f78:	eef0 7a41 	vmov.f32	s15, s2
 8006f7c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8006f80:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8006f84:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8006f88:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006f8c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006f90:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006f94:	edd7 1a01 	vldr	s3, [r7, #4]
 8006f98:	eeb0 0a66 	vmov.f32	s0, s13
 8006f9c:	eef0 0a47 	vmov.f32	s1, s14
 8006fa0:	eeb0 1a67 	vmov.f32	s2, s15
 8006fa4:	f7ff f860 	bl	8006068 <FusionVectorMultiplyScalar>
 8006fa8:	eef0 6a40 	vmov.f32	s13, s0
 8006fac:	eeb0 7a60 	vmov.f32	s14, s1
 8006fb0:	eef0 7a41 	vmov.f32	s15, s2
 8006fb4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8006fb8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8006fbc:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8006fc0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8006fc4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8006fc8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	ed93 6a05 	vldr	s12, [r3, #20]
 8006fd2:	edd3 6a06 	vldr	s13, [r3, #24]
 8006fd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8006fda:	edd3 7a08 	vldr	s15, [r3, #32]
 8006fde:	eeb0 2a64 	vmov.f32	s4, s9
 8006fe2:	eef0 2a45 	vmov.f32	s5, s10
 8006fe6:	eeb0 3a65 	vmov.f32	s6, s11
 8006fea:	eeb0 0a46 	vmov.f32	s0, s12
 8006fee:	eef0 0a66 	vmov.f32	s1, s13
 8006ff2:	eeb0 1a47 	vmov.f32	s2, s14
 8006ff6:	eef0 1a67 	vmov.f32	s3, s15
 8006ffa:	f7ff faee 	bl	80065da <FusionQuaternionMultiplyVector>
 8006ffe:	eeb0 6a40 	vmov.f32	s12, s0
 8007002:	eef0 6a60 	vmov.f32	s13, s1
 8007006:	eeb0 7a41 	vmov.f32	s14, s2
 800700a:	eef0 7a61 	vmov.f32	s15, s3
 800700e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8007012:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8007016:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800701a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800701e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007020:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8007024:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8007028:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800702c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	ed93 6a05 	vldr	s12, [r3, #20]
 8007036:	edd3 6a06 	vldr	s13, [r3, #24]
 800703a:	ed93 7a07 	vldr	s14, [r3, #28]
 800703e:	edd3 7a08 	vldr	s15, [r3, #32]
 8007042:	eeb0 2a44 	vmov.f32	s4, s8
 8007046:	eef0 2a64 	vmov.f32	s5, s9
 800704a:	eeb0 3a45 	vmov.f32	s6, s10
 800704e:	eef0 3a65 	vmov.f32	s7, s11
 8007052:	eeb0 0a46 	vmov.f32	s0, s12
 8007056:	eef0 0a66 	vmov.f32	s1, s13
 800705a:	eeb0 1a47 	vmov.f32	s2, s14
 800705e:	eef0 1a67 	vmov.f32	s3, s15
 8007062:	f7ff f996 	bl	8006392 <FusionQuaternionAdd>
 8007066:	eeb0 6a40 	vmov.f32	s12, s0
 800706a:	eef0 6a60 	vmov.f32	s13, s1
 800706e:	eeb0 7a41 	vmov.f32	s14, s2
 8007072:	eef0 7a61 	vmov.f32	s15, s3
 8007076:	ed84 6a05 	vstr	s12, [r4, #20]
 800707a:	edc4 6a06 	vstr	s13, [r4, #24]
 800707e:	ed84 7a07 	vstr	s14, [r4, #28]
 8007082:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8007086:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	ed93 6a05 	vldr	s12, [r3, #20]
 800708e:	edd3 6a06 	vldr	s13, [r3, #24]
 8007092:	ed93 7a07 	vldr	s14, [r3, #28]
 8007096:	edd3 7a08 	vldr	s15, [r3, #32]
 800709a:	eeb0 0a46 	vmov.f32	s0, s12
 800709e:	eef0 0a66 	vmov.f32	s1, s13
 80070a2:	eeb0 1a47 	vmov.f32	s2, s14
 80070a6:	eef0 1a67 	vmov.f32	s3, s15
 80070aa:	f7ff fb36 	bl	800671a <FusionQuaternionNormalise>
 80070ae:	eeb0 6a40 	vmov.f32	s12, s0
 80070b2:	eef0 6a60 	vmov.f32	s13, s1
 80070b6:	eeb0 7a41 	vmov.f32	s14, s2
 80070ba:	eef0 7a61 	vmov.f32	s15, s3
 80070be:	ed84 6a05 	vstr	s12, [r4, #20]
 80070c2:	edc4 6a06 	vstr	s13, [r4, #24]
 80070c6:	ed84 7a07 	vstr	s14, [r4, #28]
 80070ca:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80070ce:	bf00      	nop
 80070d0:	37fc      	adds	r7, #252	; 0xfc
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd90      	pop	{r4, r7, pc}

080070d6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80070d6:	b480      	push	{r7}
 80070d8:	b093      	sub	sp, #76	; 0x4c
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	dc02      	bgt.n	80070ec <HalfGravity+0x16>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da03      	bge.n	80070f2 <HalfGravity+0x1c>
 80070ea:	e094      	b.n	8007216 <HalfGravity+0x140>
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d048      	beq.n	8007182 <HalfGravity+0xac>
 80070f0:	e091      	b.n	8007216 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80070fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	edd3 6a05 	vldr	s13, [r3, #20]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	edd3 7a07 	vldr	s15, [r3, #28]
 800710e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007112:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8007116:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	ed93 7a07 	vldr	s14, [r3, #28]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	edd3 7a08 	vldr	s15, [r3, #32]
 8007126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	edd3 7a06 	vldr	s15, [r3, #24]
 8007136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800713a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800713e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	ed93 7a05 	vldr	s14, [r3, #20]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	edd3 7a05 	vldr	s15, [r3, #20]
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007156:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	edd3 6a08 	vldr	s13, [r3, #32]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	edd3 7a08 	vldr	s15, [r3, #32]
 8007166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800716a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800716e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8007172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007176:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800717a:	ca07      	ldmia	r2, {r0, r1, r2}
 800717c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007180:	e052      	b.n	8007228 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ed93 7a05 	vldr	s14, [r3, #20]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	edd3 7a07 	vldr	s15, [r3, #28]
 800718e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	edd3 6a06 	vldr	s13, [r3, #24]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	edd3 7a08 	vldr	s15, [r3, #32]
 800719e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071a2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80071a6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80071b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80071c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ce:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	edd3 7a05 	vldr	s15, [r3, #20]
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	edd3 6a08 	vldr	s13, [r3, #32]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80071fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071fe:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8007202:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8007206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800720a:	f107 0218 	add.w	r2, r7, #24
 800720e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007214:	e008      	b.n	8007228 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	643b      	str	r3, [r7, #64]	; 0x40
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8007228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800722a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800722c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722e:	ee06 1a90 	vmov	s13, r1
 8007232:	ee07 2a10 	vmov	s14, r2
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eeb0 0a66 	vmov.f32	s0, s13
 800723e:	eef0 0a47 	vmov.f32	s1, s14
 8007242:	eeb0 1a67 	vmov.f32	s2, s15
 8007246:	374c      	adds	r7, #76	; 0x4c
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8007250:	b480      	push	{r7}
 8007252:	b097      	sub	sp, #92	; 0x5c
 8007254:	af00      	add	r7, sp, #0
 8007256:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f000 809a 	beq.w	8007396 <HalfMagnetic+0x146>
 8007262:	2b02      	cmp	r3, #2
 8007264:	f300 80e1 	bgt.w	800742a <HalfMagnetic+0x1da>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HalfMagnetic+0x22>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d048      	beq.n	8007302 <HalfMagnetic+0xb2>
 8007270:	e0db      	b.n	800742a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	ed93 7a06 	vldr	s14, [r3, #24]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	edd3 7a07 	vldr	s15, [r3, #28]
 800727e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	edd3 6a05 	vldr	s13, [r3, #20]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	edd3 7a08 	vldr	s15, [r3, #32]
 800728e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007292:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8007296:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	ed93 7a05 	vldr	s14, [r3, #20]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	edd3 6a07 	vldr	s13, [r3, #28]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80072be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072c2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80072c6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80072d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80072e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ea:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80072ee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 80072f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80072f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80072fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80072fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007300:	e09c      	b.n	800743c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	ed93 7a05 	vldr	s14, [r3, #20]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	edd3 7a05 	vldr	s15, [r3, #20]
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	edd3 6a06 	vldr	s13, [r3, #24]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	edd3 7a06 	vldr	s15, [r3, #24]
 8007326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800732a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800732e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	ed93 7a05 	vldr	s14, [r3, #20]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	edd3 7a08 	vldr	s15, [r3, #32]
 800733e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	edd3 6a06 	vldr	s13, [r3, #24]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	edd3 7a07 	vldr	s15, [r3, #28]
 800734e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007352:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8007356:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	edd3 7a08 	vldr	s15, [r3, #32]
 8007366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	edd3 6a05 	vldr	s13, [r3, #20]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	edd3 7a07 	vldr	s15, [r3, #28]
 8007376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800737a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800737e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8007382:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8007386:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800738a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800738e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007394:	e052      	b.n	800743c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	ed93 7a06 	vldr	s14, [r3, #24]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	edd3 7a07 	vldr	s15, [r3, #28]
 80073a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80073b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073ba:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80073ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	edd3 6a07 	vldr	s13, [r3, #28]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80073e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073ea:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80073ee:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80073fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	edd3 6a07 	vldr	s13, [r3, #28]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	edd3 7a08 	vldr	s15, [r3, #32]
 800740e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007412:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8007416:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800741a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800741e:	f107 021c 	add.w	r2, r7, #28
 8007422:	ca07      	ldmia	r2, {r0, r1, r2}
 8007424:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007428:	e008      	b.n	800743c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 800743c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800743e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007442:	ee06 1a90 	vmov	s13, r1
 8007446:	ee07 2a10 	vmov	s14, r2
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eeb0 0a66 	vmov.f32	s0, s13
 8007452:	eef0 0a47 	vmov.f32	s1, s14
 8007456:	eeb0 1a67 	vmov.f32	s2, s15
 800745a:	375c      	adds	r7, #92	; 0x5c
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8007464:	b490      	push	{r4, r7}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f107 0418 	add.w	r4, r7, #24
 8007472:	3314      	adds	r3, #20
 8007474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800747a:	69b8      	ldr	r0, [r7, #24]
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	6a3a      	ldr	r2, [r7, #32]
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	ee06 0a10 	vmov	s12, r0
 8007486:	ee06 1a90 	vmov	s13, r1
 800748a:	ee07 2a10 	vmov	s14, r2
 800748e:	ee07 3a90 	vmov	s15, r3
}
 8007492:	eeb0 0a46 	vmov.f32	s0, s12
 8007496:	eef0 0a66 	vmov.f32	s1, s13
 800749a:	eeb0 1a47 	vmov.f32	s2, s14
 800749e:	eef0 1a67 	vmov.f32	s3, s15
 80074a2:	3728      	adds	r7, #40	; 0x28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc90      	pop	{r4, r7}
 80074a8:	4770      	bx	lr

080074aa <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 80074aa:	b590      	push	{r4, r7, lr}
 80074ac:	b089      	sub	sp, #36	; 0x24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	edd3 7a08 	vldr	s15, [r3, #32]
 80074c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	edd3 6a06 	vldr	s13, [r3, #24]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80074d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074d6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80074e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	edd3 6a08 	vldr	s13, [r3, #32]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80074fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007506:	eef0 0a67 	vmov.f32	s1, s15
 800750a:	eeb0 0a46 	vmov.f32	s0, s12
 800750e:	f003 fe27 	bl	800b160 <atan2f>
 8007512:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8007516:	ed97 0a00 	vldr	s0, [r7]
 800751a:	f7fe fcc3 	bl	8005ea4 <FusionDegreesToRadians>
 800751e:	eeb0 7a40 	vmov.f32	s14, s0
 8007522:	edd7 7a07 	vldr	s15, [r7, #28]
 8007526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800752a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800752e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007532:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8007536:	ed97 0a06 	vldr	s0, [r7, #24]
 800753a:	f003 fd5b 	bl	800aff4 <cosf>
 800753e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8007542:	edc7 7a02 	vstr	s15, [r7, #8]
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8007552:	ed97 0a06 	vldr	s0, [r7, #24]
 8007556:	f003 fd91 	bl	800b07c <sinf>
 800755a:	eef0 7a40 	vmov.f32	s15, s0
 800755e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8007562:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8007566:	687c      	ldr	r4, [r7, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	ed93 4a05 	vldr	s8, [r3, #20]
 800756e:	edd3 4a06 	vldr	s9, [r3, #24]
 8007572:	ed93 5a07 	vldr	s10, [r3, #28]
 8007576:	edd3 5a08 	vldr	s11, [r3, #32]
 800757a:	ed97 6a02 	vldr	s12, [r7, #8]
 800757e:	edd7 6a03 	vldr	s13, [r7, #12]
 8007582:	ed97 7a04 	vldr	s14, [r7, #16]
 8007586:	edd7 7a05 	vldr	s15, [r7, #20]
 800758a:	eeb0 2a44 	vmov.f32	s4, s8
 800758e:	eef0 2a64 	vmov.f32	s5, s9
 8007592:	eeb0 3a45 	vmov.f32	s6, s10
 8007596:	eef0 3a65 	vmov.f32	s7, s11
 800759a:	eeb0 0a46 	vmov.f32	s0, s12
 800759e:	eef0 0a66 	vmov.f32	s1, s13
 80075a2:	eeb0 1a47 	vmov.f32	s2, s14
 80075a6:	eef0 1a67 	vmov.f32	s3, s15
 80075aa:	f7fe ff54 	bl	8006456 <FusionQuaternionMultiply>
 80075ae:	eeb0 6a40 	vmov.f32	s12, s0
 80075b2:	eef0 6a60 	vmov.f32	s13, s1
 80075b6:	eeb0 7a41 	vmov.f32	s14, s2
 80075ba:	eef0 7a61 	vmov.f32	s15, s3
 80075be:	ed84 6a05 	vstr	s12, [r4, #20]
 80075c2:	edc4 6a06 	vstr	s13, [r4, #24]
 80075c6:	ed84 7a07 	vstr	s14, [r4, #28]
 80075ca:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80075ce:	bf00      	nop
 80075d0:	3724      	adds	r7, #36	; 0x24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd90      	pop	{r4, r7, pc}
	...

080075d8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80075e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80075e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80075fc <FusionRadiansToDegrees+0x24>
 80075ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80075ee:	eeb0 0a67 	vmov.f32	s0, s15
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	42652ee0 	.word	0x42652ee0

08007600 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	105a      	asrs	r2, r3, #1
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <FusionFastInverseSqrt+0x54>)
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8007618:	ed97 7a03 	vldr	s14, [r7, #12]
 800761c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007620:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8007658 <FusionFastInverseSqrt+0x58>
 8007624:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007628:	edd7 7a03 	vldr	s15, [r7, #12]
 800762c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007630:	edd7 7a03 	vldr	s15, [r7, #12]
 8007634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007638:	eddf 6a08 	vldr	s13, [pc, #32]	; 800765c <FusionFastInverseSqrt+0x5c>
 800763c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007640:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8007644:	eeb0 0a67 	vmov.f32	s0, s15
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	5f1f1412 	.word	0x5f1f1412
 8007658:	3f36d312 	.word	0x3f36d312
 800765c:	3fd851ff 	.word	0x3fd851ff

08007660 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	eef0 6a40 	vmov.f32	s13, s0
 800766a:	eeb0 7a60 	vmov.f32	s14, s1
 800766e:	eef0 7a41 	vmov.f32	s15, s2
 8007672:	edc7 6a01 	vstr	s13, [r7, #4]
 8007676:	ed87 7a02 	vstr	s14, [r7, #8]
 800767a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800767e:	ed97 7a01 	vldr	s14, [r7, #4]
 8007682:	edd7 7a02 	vldr	s15, [r7, #8]
 8007686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800768a:	edd7 7a03 	vldr	s15, [r7, #12]
 800768e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007692:	eeb0 0a67 	vmov.f32	s0, s15
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80076a0:	b480      	push	{r7}
 80076a2:	b08f      	sub	sp, #60	; 0x3c
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	eef0 6a40 	vmov.f32	s13, s0
 80076aa:	eeb0 7a60 	vmov.f32	s14, s1
 80076ae:	eef0 7a41 	vmov.f32	s15, s2
 80076b2:	edc7 1a04 	vstr	s3, [r7, #16]
 80076b6:	edc7 6a05 	vstr	s13, [r7, #20]
 80076ba:	ed87 7a06 	vstr	s14, [r7, #24]
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80076c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80076c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80076ca:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076ce:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80076d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80076d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80076e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80076e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80076ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80076f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80076f6:	f107 0220 	add.w	r2, r7, #32
 80076fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80076fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	ee06 1a90 	vmov	s13, r1
 800770a:	ee07 2a10 	vmov	s14, r2
 800770e:	ee07 3a90 	vmov	s15, r3
}
 8007712:	eeb0 0a66 	vmov.f32	s0, s13
 8007716:	eef0 0a47 	vmov.f32	s1, s14
 800771a:	eeb0 1a67 	vmov.f32	s2, s15
 800771e:	373c      	adds	r7, #60	; 0x3c
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8007728:	b480      	push	{r7}
 800772a:	b091      	sub	sp, #68	; 0x44
 800772c:	af00      	add	r7, sp, #0
 800772e:	eeb0 5a40 	vmov.f32	s10, s0
 8007732:	eef0 5a60 	vmov.f32	s11, s1
 8007736:	eeb0 6a41 	vmov.f32	s12, s2
 800773a:	eef0 6a61 	vmov.f32	s13, s3
 800773e:	eeb0 7a42 	vmov.f32	s14, s4
 8007742:	eef0 7a62 	vmov.f32	s15, s5
 8007746:	ed87 5a07 	vstr	s10, [r7, #28]
 800774a:	edc7 5a08 	vstr	s11, [r7, #32]
 800774e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007752:	edc7 6a04 	vstr	s13, [r7, #16]
 8007756:	ed87 7a05 	vstr	s14, [r7, #20]
 800775a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800775e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007762:	edd7 7a04 	vldr	s15, [r7, #16]
 8007766:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800776a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800776e:	ed97 7a08 	vldr	s14, [r7, #32]
 8007772:	edd7 7a05 	vldr	s15, [r7, #20]
 8007776:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800777a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800777e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007782:	edd7 7a06 	vldr	s15, [r7, #24]
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800778a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800778e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007796:	ca07      	ldmia	r2, {r0, r1, r2}
 8007798:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800779c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800779e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	ee06 1a90 	vmov	s13, r1
 80077a6:	ee07 2a10 	vmov	s14, r2
 80077aa:	ee07 3a90 	vmov	s15, r3
}
 80077ae:	eeb0 0a66 	vmov.f32	s0, s13
 80077b2:	eef0 0a47 	vmov.f32	s1, s14
 80077b6:	eeb0 1a67 	vmov.f32	s2, s15
 80077ba:	3744      	adds	r7, #68	; 0x44
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80077c4:	b480      	push	{r7}
 80077c6:	b091      	sub	sp, #68	; 0x44
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	eeb0 5a40 	vmov.f32	s10, s0
 80077ce:	eef0 5a60 	vmov.f32	s11, s1
 80077d2:	eeb0 6a41 	vmov.f32	s12, s2
 80077d6:	eef0 6a61 	vmov.f32	s13, s3
 80077da:	eeb0 7a42 	vmov.f32	s14, s4
 80077de:	eef0 7a62 	vmov.f32	s15, s5
 80077e2:	ed87 5a07 	vstr	s10, [r7, #28]
 80077e6:	edc7 5a08 	vstr	s11, [r7, #32]
 80077ea:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80077ee:	edc7 6a04 	vstr	s13, [r7, #16]
 80077f2:	ed87 7a05 	vstr	s14, [r7, #20]
 80077f6:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80077fa:	ed97 7a08 	vldr	s14, [r7, #32]
 80077fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8007802:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007806:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800780a:	edd7 7a05 	vldr	s15, [r7, #20]
 800780e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007812:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007816:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800781a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800781e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007826:	edd7 6a07 	vldr	s13, [r7, #28]
 800782a:	edd7 7a06 	vldr	s15, [r7, #24]
 800782e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007832:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007836:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800783a:	ed97 7a07 	vldr	s14, [r7, #28]
 800783e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007846:	edd7 6a08 	vldr	s13, [r7, #32]
 800784a:	edd7 7a04 	vldr	s15, [r7, #16]
 800784e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007852:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8007856:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800785a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800785e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007862:	ca07      	ldmia	r2, {r0, r1, r2}
 8007864:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800786a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800786c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786e:	ee06 1a90 	vmov	s13, r1
 8007872:	ee07 2a10 	vmov	s14, r2
 8007876:	ee07 3a90 	vmov	s15, r3
}
 800787a:	eeb0 0a66 	vmov.f32	s0, s13
 800787e:	eef0 0a47 	vmov.f32	s1, s14
 8007882:	eeb0 1a67 	vmov.f32	s2, s15
 8007886:	3744      	adds	r7, #68	; 0x44
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	eef0 6a40 	vmov.f32	s13, s0
 800789a:	eeb0 7a60 	vmov.f32	s14, s1
 800789e:	eef0 7a41 	vmov.f32	s15, s2
 80078a2:	edc7 6a01 	vstr	s13, [r7, #4]
 80078a6:	ed87 7a02 	vstr	s14, [r7, #8]
 80078aa:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80078ae:	ed97 5a01 	vldr	s10, [r7, #4]
 80078b2:	edd7 5a02 	vldr	s11, [r7, #8]
 80078b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80078be:	ed97 7a02 	vldr	s14, [r7, #8]
 80078c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80078c6:	eef0 1a45 	vmov.f32	s3, s10
 80078ca:	eeb0 2a65 	vmov.f32	s4, s11
 80078ce:	eef0 2a46 	vmov.f32	s5, s12
 80078d2:	eeb0 0a66 	vmov.f32	s0, s13
 80078d6:	eef0 0a47 	vmov.f32	s1, s14
 80078da:	eeb0 1a67 	vmov.f32	s2, s15
 80078de:	f7ff ff23 	bl	8007728 <FusionVectorHadamardProduct>
 80078e2:	eef0 6a40 	vmov.f32	s13, s0
 80078e6:	eeb0 7a60 	vmov.f32	s14, s1
 80078ea:	eef0 7a41 	vmov.f32	s15, s2
 80078ee:	edc7 6a05 	vstr	s13, [r7, #20]
 80078f2:	ed87 7a06 	vstr	s14, [r7, #24]
 80078f6:	edc7 7a07 	vstr	s15, [r7, #28]
 80078fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80078fe:	ed97 7a06 	vldr	s14, [r7, #24]
 8007902:	edd7 7a07 	vldr	s15, [r7, #28]
 8007906:	eeb0 0a66 	vmov.f32	s0, s13
 800790a:	eef0 0a47 	vmov.f32	s1, s14
 800790e:	eeb0 1a67 	vmov.f32	s2, s15
 8007912:	f7ff fea5 	bl	8007660 <FusionVectorSum>
 8007916:	eef0 7a40 	vmov.f32	s15, s0
}
 800791a:	eeb0 0a67 	vmov.f32	s0, s15
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af00      	add	r7, sp, #0
 800792a:	eef0 6a40 	vmov.f32	s13, s0
 800792e:	eeb0 7a60 	vmov.f32	s14, s1
 8007932:	eef0 7a41 	vmov.f32	s15, s2
 8007936:	edc7 6a05 	vstr	s13, [r7, #20]
 800793a:	ed87 7a06 	vstr	s14, [r7, #24]
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8007942:	edd7 6a05 	vldr	s13, [r7, #20]
 8007946:	ed97 7a06 	vldr	s14, [r7, #24]
 800794a:	edd7 7a07 	vldr	s15, [r7, #28]
 800794e:	eeb0 0a66 	vmov.f32	s0, s13
 8007952:	eef0 0a47 	vmov.f32	s1, s14
 8007956:	eeb0 1a67 	vmov.f32	s2, s15
 800795a:	f7ff ff99 	bl	8007890 <FusionVectorMagnitudeSquared>
 800795e:	eef0 7a40 	vmov.f32	s15, s0
 8007962:	eeb0 0a67 	vmov.f32	s0, s15
 8007966:	f7ff fe4b 	bl	8007600 <FusionFastInverseSqrt>
 800796a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800796e:	edd7 6a05 	vldr	s13, [r7, #20]
 8007972:	ed97 7a06 	vldr	s14, [r7, #24]
 8007976:	edd7 7a07 	vldr	s15, [r7, #28]
 800797a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800797e:	eeb0 0a66 	vmov.f32	s0, s13
 8007982:	eef0 0a47 	vmov.f32	s1, s14
 8007986:	eeb0 1a67 	vmov.f32	s2, s15
 800798a:	f7ff fe89 	bl	80076a0 <FusionVectorMultiplyScalar>
 800798e:	eef0 6a40 	vmov.f32	s13, s0
 8007992:	eeb0 7a60 	vmov.f32	s14, s1
 8007996:	eef0 7a41 	vmov.f32	s15, s2
 800799a:	edc7 6a08 	vstr	s13, [r7, #32]
 800799e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80079a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80079a6:	6a39      	ldr	r1, [r7, #32]
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	ee06 1a90 	vmov	s13, r1
 80079b0:	ee07 2a10 	vmov	s14, r2
 80079b4:	ee07 3a90 	vmov	s15, r3
}
 80079b8:	eeb0 0a66 	vmov.f32	s0, s13
 80079bc:	eef0 0a47 	vmov.f32	s1, s14
 80079c0:	eeb0 1a67 	vmov.f32	s2, s15
 80079c4:	3730      	adds	r7, #48	; 0x30
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b0b2      	sub	sp, #200	; 0xc8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	4603      	mov	r3, r0
 80079d4:	eeb0 5a40 	vmov.f32	s10, s0
 80079d8:	eef0 5a60 	vmov.f32	s11, s1
 80079dc:	eeb0 6a41 	vmov.f32	s12, s2
 80079e0:	eef0 6a61 	vmov.f32	s13, s3
 80079e4:	eeb0 7a42 	vmov.f32	s14, s4
 80079e8:	eef0 7a62 	vmov.f32	s15, s5
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	ed87 5a04 	vstr	s10, [r7, #16]
 80079f2:	edc7 5a05 	vstr	s11, [r7, #20]
 80079f6:	ed87 6a06 	vstr	s12, [r7, #24]
 80079fa:	edc7 6a01 	vstr	s13, [r7, #4]
 80079fe:	ed87 7a02 	vstr	s14, [r7, #8]
 8007a02:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8007a06:	7ffb      	ldrb	r3, [r7, #31]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f000 814b 	beq.w	8007ca4 <FusionCompassCalculateHeading+0x2d8>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	f300 81f7 	bgt.w	8007e02 <FusionCompassCalculateHeading+0x436>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <FusionCompassCalculateHeading+0x54>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f000 8094 	beq.w	8007b46 <FusionCompassCalculateHeading+0x17a>
 8007a1e:	e1f0      	b.n	8007e02 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8007a20:	ed97 5a01 	vldr	s10, [r7, #4]
 8007a24:	edd7 5a02 	vldr	s11, [r7, #8]
 8007a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2c:	edd7 6a04 	vldr	s13, [r7, #16]
 8007a30:	ed97 7a05 	vldr	s14, [r7, #20]
 8007a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8007a38:	eef0 1a45 	vmov.f32	s3, s10
 8007a3c:	eeb0 2a65 	vmov.f32	s4, s11
 8007a40:	eef0 2a46 	vmov.f32	s5, s12
 8007a44:	eeb0 0a66 	vmov.f32	s0, s13
 8007a48:	eef0 0a47 	vmov.f32	s1, s14
 8007a4c:	eeb0 1a67 	vmov.f32	s2, s15
 8007a50:	f7ff feb8 	bl	80077c4 <FusionVectorCrossProduct>
 8007a54:	eef0 6a40 	vmov.f32	s13, s0
 8007a58:	eeb0 7a60 	vmov.f32	s14, s1
 8007a5c:	eef0 7a41 	vmov.f32	s15, s2
 8007a60:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8007a64:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8007a68:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8007a6c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8007a70:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8007a74:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8007a78:	eeb0 0a66 	vmov.f32	s0, s13
 8007a7c:	eef0 0a47 	vmov.f32	s1, s14
 8007a80:	eeb0 1a67 	vmov.f32	s2, s15
 8007a84:	f7ff ff4e 	bl	8007924 <FusionVectorNormalise>
 8007a88:	eef0 6a40 	vmov.f32	s13, s0
 8007a8c:	eeb0 7a60 	vmov.f32	s14, s1
 8007a90:	eef0 7a41 	vmov.f32	s15, s2
 8007a94:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8007a98:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 8007a9c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8007aa0:	ed97 5a04 	vldr	s10, [r7, #16]
 8007aa4:	edd7 5a05 	vldr	s11, [r7, #20]
 8007aa8:	ed97 6a06 	vldr	s12, [r7, #24]
 8007aac:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8007ab0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8007ab4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8007ab8:	eef0 1a45 	vmov.f32	s3, s10
 8007abc:	eeb0 2a65 	vmov.f32	s4, s11
 8007ac0:	eef0 2a46 	vmov.f32	s5, s12
 8007ac4:	eeb0 0a66 	vmov.f32	s0, s13
 8007ac8:	eef0 0a47 	vmov.f32	s1, s14
 8007acc:	eeb0 1a67 	vmov.f32	s2, s15
 8007ad0:	f7ff fe78 	bl	80077c4 <FusionVectorCrossProduct>
 8007ad4:	eef0 6a40 	vmov.f32	s13, s0
 8007ad8:	eeb0 7a60 	vmov.f32	s14, s1
 8007adc:	eef0 7a41 	vmov.f32	s15, s2
 8007ae0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8007ae4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 8007ae8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8007aec:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8007af0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8007af4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8007af8:	eeb0 0a66 	vmov.f32	s0, s13
 8007afc:	eef0 0a47 	vmov.f32	s1, s14
 8007b00:	eeb0 1a67 	vmov.f32	s2, s15
 8007b04:	f7ff ff0e 	bl	8007924 <FusionVectorNormalise>
 8007b08:	eef0 6a40 	vmov.f32	s13, s0
 8007b0c:	eeb0 7a60 	vmov.f32	s14, s1
 8007b10:	eef0 7a41 	vmov.f32	s15, s2
 8007b14:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8007b18:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8007b1c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8007b20:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8007b24:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8007b28:	eef0 0a47 	vmov.f32	s1, s14
 8007b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b30:	f003 fb16 	bl	800b160 <atan2f>
 8007b34:	eef0 7a40 	vmov.f32	s15, s0
 8007b38:	eeb0 0a67 	vmov.f32	s0, s15
 8007b3c:	f7ff fd4c 	bl	80075d8 <FusionRadiansToDegrees>
 8007b40:	eef0 7a40 	vmov.f32	s15, s0
 8007b44:	e15f      	b.n	8007e06 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8007b46:	ed97 5a01 	vldr	s10, [r7, #4]
 8007b4a:	edd7 5a02 	vldr	s11, [r7, #8]
 8007b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b52:	edd7 6a04 	vldr	s13, [r7, #16]
 8007b56:	ed97 7a05 	vldr	s14, [r7, #20]
 8007b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8007b5e:	eef0 1a45 	vmov.f32	s3, s10
 8007b62:	eeb0 2a65 	vmov.f32	s4, s11
 8007b66:	eef0 2a46 	vmov.f32	s5, s12
 8007b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8007b6e:	eef0 0a47 	vmov.f32	s1, s14
 8007b72:	eeb0 1a67 	vmov.f32	s2, s15
 8007b76:	f7ff fe25 	bl	80077c4 <FusionVectorCrossProduct>
 8007b7a:	eef0 6a40 	vmov.f32	s13, s0
 8007b7e:	eeb0 7a60 	vmov.f32	s14, s1
 8007b82:	eef0 7a41 	vmov.f32	s15, s2
 8007b86:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8007b8a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8007b8e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8007b92:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8007b96:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8007b9a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8007b9e:	eeb0 0a66 	vmov.f32	s0, s13
 8007ba2:	eef0 0a47 	vmov.f32	s1, s14
 8007ba6:	eeb0 1a67 	vmov.f32	s2, s15
 8007baa:	f7ff febb 	bl	8007924 <FusionVectorNormalise>
 8007bae:	eef0 6a40 	vmov.f32	s13, s0
 8007bb2:	eeb0 7a60 	vmov.f32	s14, s1
 8007bb6:	eef0 7a41 	vmov.f32	s15, s2
 8007bba:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 8007bbe:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8007bc2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8007bc6:	ed97 5a04 	vldr	s10, [r7, #16]
 8007bca:	edd7 5a05 	vldr	s11, [r7, #20]
 8007bce:	ed97 6a06 	vldr	s12, [r7, #24]
 8007bd2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8007bd6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007bda:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007bde:	eef0 1a45 	vmov.f32	s3, s10
 8007be2:	eeb0 2a65 	vmov.f32	s4, s11
 8007be6:	eef0 2a46 	vmov.f32	s5, s12
 8007bea:	eeb0 0a66 	vmov.f32	s0, s13
 8007bee:	eef0 0a47 	vmov.f32	s1, s14
 8007bf2:	eeb0 1a67 	vmov.f32	s2, s15
 8007bf6:	f7ff fde5 	bl	80077c4 <FusionVectorCrossProduct>
 8007bfa:	eef0 6a40 	vmov.f32	s13, s0
 8007bfe:	eeb0 7a60 	vmov.f32	s14, s1
 8007c02:	eef0 7a41 	vmov.f32	s15, s2
 8007c06:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 8007c0a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 8007c0e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8007c12:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8007c16:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8007c1a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8007c1e:	eeb0 0a66 	vmov.f32	s0, s13
 8007c22:	eef0 0a47 	vmov.f32	s1, s14
 8007c26:	eeb0 1a67 	vmov.f32	s2, s15
 8007c2a:	f7ff fe7b 	bl	8007924 <FusionVectorNormalise>
 8007c2e:	eef0 6a40 	vmov.f32	s13, s0
 8007c32:	eeb0 7a60 	vmov.f32	s14, s1
 8007c36:	eef0 7a41 	vmov.f32	s15, s2
 8007c3a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 8007c3e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8007c42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8007c46:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8007c4a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8007c4e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8007c52:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8007c56:	eeb0 0a66 	vmov.f32	s0, s13
 8007c5a:	eef0 0a47 	vmov.f32	s1, s14
 8007c5e:	eeb0 1a67 	vmov.f32	s2, s15
 8007c62:	f7ff fd1d 	bl	80076a0 <FusionVectorMultiplyScalar>
 8007c66:	eef0 6a40 	vmov.f32	s13, s0
 8007c6a:	eeb0 7a60 	vmov.f32	s14, s1
 8007c6e:	eef0 7a41 	vmov.f32	s15, s2
 8007c72:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8007c76:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8007c7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 8007c7e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8007c82:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8007c86:	eef0 0a47 	vmov.f32	s1, s14
 8007c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c8e:	f003 fa67 	bl	800b160 <atan2f>
 8007c92:	eef0 7a40 	vmov.f32	s15, s0
 8007c96:	eeb0 0a67 	vmov.f32	s0, s15
 8007c9a:	f7ff fc9d 	bl	80075d8 <FusionRadiansToDegrees>
 8007c9e:	eef0 7a40 	vmov.f32	s15, s0
 8007ca2:	e0b0      	b.n	8007e06 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8007ca4:	edd7 6a04 	vldr	s13, [r7, #16]
 8007ca8:	ed97 7a05 	vldr	s14, [r7, #20]
 8007cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8007cb0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8007cb4:	eeb0 0a66 	vmov.f32	s0, s13
 8007cb8:	eef0 0a47 	vmov.f32	s1, s14
 8007cbc:	eeb0 1a67 	vmov.f32	s2, s15
 8007cc0:	f7ff fcee 	bl	80076a0 <FusionVectorMultiplyScalar>
 8007cc4:	eef0 6a40 	vmov.f32	s13, s0
 8007cc8:	eeb0 7a60 	vmov.f32	s14, s1
 8007ccc:	eef0 7a41 	vmov.f32	s15, s2
 8007cd0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8007cd4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8007cd8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 8007cdc:	ed97 5a01 	vldr	s10, [r7, #4]
 8007ce0:	edd7 5a02 	vldr	s11, [r7, #8]
 8007ce4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ce8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8007cec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007cf0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8007cf4:	eef0 1a45 	vmov.f32	s3, s10
 8007cf8:	eeb0 2a65 	vmov.f32	s4, s11
 8007cfc:	eef0 2a46 	vmov.f32	s5, s12
 8007d00:	eeb0 0a66 	vmov.f32	s0, s13
 8007d04:	eef0 0a47 	vmov.f32	s1, s14
 8007d08:	eeb0 1a67 	vmov.f32	s2, s15
 8007d0c:	f7ff fd5a 	bl	80077c4 <FusionVectorCrossProduct>
 8007d10:	eef0 6a40 	vmov.f32	s13, s0
 8007d14:	eeb0 7a60 	vmov.f32	s14, s1
 8007d18:	eef0 7a41 	vmov.f32	s15, s2
 8007d1c:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8007d20:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8007d24:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8007d28:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8007d2c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8007d30:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8007d34:	eeb0 0a66 	vmov.f32	s0, s13
 8007d38:	eef0 0a47 	vmov.f32	s1, s14
 8007d3c:	eeb0 1a67 	vmov.f32	s2, s15
 8007d40:	f7ff fdf0 	bl	8007924 <FusionVectorNormalise>
 8007d44:	eef0 6a40 	vmov.f32	s13, s0
 8007d48:	eeb0 7a60 	vmov.f32	s14, s1
 8007d4c:	eef0 7a41 	vmov.f32	s15, s2
 8007d50:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8007d54:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8007d58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 8007d5c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8007d60:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8007d64:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8007d68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007d6c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007d70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007d74:	eef0 1a45 	vmov.f32	s3, s10
 8007d78:	eeb0 2a65 	vmov.f32	s4, s11
 8007d7c:	eef0 2a46 	vmov.f32	s5, s12
 8007d80:	eeb0 0a66 	vmov.f32	s0, s13
 8007d84:	eef0 0a47 	vmov.f32	s1, s14
 8007d88:	eeb0 1a67 	vmov.f32	s2, s15
 8007d8c:	f7ff fd1a 	bl	80077c4 <FusionVectorCrossProduct>
 8007d90:	eef0 6a40 	vmov.f32	s13, s0
 8007d94:	eeb0 7a60 	vmov.f32	s14, s1
 8007d98:	eef0 7a41 	vmov.f32	s15, s2
 8007d9c:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8007da0:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8007da4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 8007da8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8007dac:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8007db0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8007db4:	eeb0 0a66 	vmov.f32	s0, s13
 8007db8:	eef0 0a47 	vmov.f32	s1, s14
 8007dbc:	eeb0 1a67 	vmov.f32	s2, s15
 8007dc0:	f7ff fdb0 	bl	8007924 <FusionVectorNormalise>
 8007dc4:	eef0 6a40 	vmov.f32	s13, s0
 8007dc8:	eeb0 7a60 	vmov.f32	s14, s1
 8007dcc:	eef0 7a41 	vmov.f32	s15, s2
 8007dd0:	edc7 6a08 	vstr	s13, [r7, #32]
 8007dd4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8007dd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8007ddc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007de0:	ed97 7a08 	vldr	s14, [r7, #32]
 8007de4:	eef0 0a47 	vmov.f32	s1, s14
 8007de8:	eeb0 0a67 	vmov.f32	s0, s15
 8007dec:	f003 f9b8 	bl	800b160 <atan2f>
 8007df0:	eef0 7a40 	vmov.f32	s15, s0
 8007df4:	eeb0 0a67 	vmov.f32	s0, s15
 8007df8:	f7ff fbee 	bl	80075d8 <FusionRadiansToDegrees>
 8007dfc:	eef0 7a40 	vmov.f32	s15, s0
 8007e00:	e001      	b.n	8007e06 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8007e02:	eddf 7a03 	vldr	s15, [pc, #12]	; 8007e10 <FusionCompassCalculateHeading+0x444>
}
 8007e06:	eeb0 0a67 	vmov.f32	s0, s15
 8007e0a:	37c8      	adds	r7, #200	; 0xc8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	00000000 	.word	0x00000000

08007e14 <i3g4250d_read_reg>:
  *
  */
int32_t __weak i3g4250d_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	460b      	mov	r3, r1
 8007e22:	72fb      	strb	r3, [r7, #11]
 8007e24:	4613      	mov	r3, r2
 8007e26:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685c      	ldr	r4, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68d8      	ldr	r0, [r3, #12]
 8007e30:	893b      	ldrh	r3, [r7, #8]
 8007e32:	7af9      	ldrb	r1, [r7, #11]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	47a0      	blx	r4
 8007e38:	6178      	str	r0, [r7, #20]

  return ret;
 8007e3a:	697b      	ldr	r3, [r7, #20]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd90      	pop	{r4, r7, pc}

08007e44 <i3g4250d_from_fs245dps_to_mdps>:
  * @{
  *
  */

float_t i3g4250d_from_fs245dps_to_mdps(int16_t lsb)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 8.75f);
 8007e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007e70 <i3g4250d_from_fs245dps_to_mdps+0x2c>
 8007e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007e62:	eeb0 0a67 	vmov.f32	s0, s15
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	410c0000 	.word	0x410c0000

08007e74 <i3g4250d_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  i3g4250d_read_reg(ctx, I3G4250D_OUT_X_L, buff, 6);
 8007e7e:	f107 020c 	add.w	r2, r7, #12
 8007e82:	2306      	movs	r3, #6
 8007e84:	2128      	movs	r1, #40	; 0x28
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff ffc4 	bl	8007e14 <i3g4250d_read_reg>
 8007e8c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	b21a      	sxth	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	7b3b      	ldrb	r3, [r7, #12]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4413      	add	r3, r2
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	b21a      	sxth	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007eb0:	7bfa      	ldrb	r2, [r7, #15]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	b212      	sxth	r2, r2
 8007eb8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	b212      	sxth	r2, r2
 8007ed6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007ed8:	7c7a      	ldrb	r2, [r7, #17]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	3304      	adds	r3, #4
 8007ede:	b212      	sxth	r2, r2
 8007ee0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	7c3b      	ldrb	r3, [r7, #16]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	3304      	adds	r3, #4
 8007efc:	b212      	sxth	r2, r2
 8007efe:	801a      	strh	r2, [r3, #0]

  return ret;
 8007f00:	697b      	ldr	r3, [r7, #20]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <i3g4250d_device_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t i3g4250d_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = i3g4250d_read_reg(ctx, I3G4250D_WHO_AM_I, buff, 1);
 8007f14:	2301      	movs	r3, #1
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	210f      	movs	r1, #15
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ff7a 	bl	8007e14 <i3g4250d_read_reg>
 8007f20:	60f8      	str	r0, [r7, #12]

  return ret;
 8007f22:	68fb      	ldr	r3, [r7, #12]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <lis331dlh_read_reg>:
  *
  */
int32_t __weak lis331dlh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	607a      	str	r2, [r7, #4]
 8007f36:	461a      	mov	r2, r3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	72fb      	strb	r3, [r7, #11]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685c      	ldr	r4, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68d8      	ldr	r0, [r3, #12]
 8007f48:	893b      	ldrh	r3, [r7, #8]
 8007f4a:	7af9      	ldrb	r1, [r7, #11]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	47a0      	blx	r4
 8007f50:	6178      	str	r0, [r7, #20]

  return ret;
 8007f52:	697b      	ldr	r3, [r7, #20]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd90      	pop	{r4, r7, pc}

08007f5c <lis331dlh_from_fs2_to_mg>:
  * @{
  *
  */

float_t lis331dlh_from_fs2_to_mg(int16_t lsb)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f);
 8007f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f6a:	ee07 3a90 	vmov	s15, r3
 8007f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f72:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8007f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007f7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8007f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <lis331dlh_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_status_reg_get(stmdev_ctx_t *ctx,
                                 lis331dlh_status_reg_t *val)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_STATUS_REG, (uint8_t *) val, 1);
 8007f96:	2301      	movs	r3, #1
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	2127      	movs	r1, #39	; 0x27
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ffc5 	bl	8007f2c <lis331dlh_read_reg>
 8007fa2:	60f8      	str	r0, [r7, #12]

  return ret;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <lis331dlh_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_OUT_X_L, buff, 6);
 8007fb8:	f107 020c 	add.w	r2, r7, #12
 8007fbc:	2306      	movs	r3, #6
 8007fbe:	2128      	movs	r1, #40	; 0x28
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ffb3 	bl	8007f2c <lis331dlh_read_reg>
 8007fc6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007fc8:	7b7b      	ldrb	r3, [r7, #13]
 8007fca:	b21a      	sxth	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	7b3b      	ldrb	r3, [r7, #12]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	b21a      	sxth	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007fea:	7bfa      	ldrb	r2, [r7, #15]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3302      	adds	r3, #2
 8007ff0:	b212      	sxth	r2, r2
 8007ff2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	3302      	adds	r3, #2
 8007ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	b29a      	uxth	r2, r3
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	b29b      	uxth	r3, r3
 8008006:	4413      	add	r3, r2
 8008008:	b29a      	uxth	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	3302      	adds	r3, #2
 800800e:	b212      	sxth	r2, r2
 8008010:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008012:	7c7a      	ldrb	r2, [r7, #17]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	3304      	adds	r3, #4
 8008018:	b212      	sxth	r2, r2
 800801a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	3304      	adds	r3, #4
 8008020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008024:	b29b      	uxth	r3, r3
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	b29a      	uxth	r2, r3
 800802a:	7c3b      	ldrb	r3, [r7, #16]
 800802c:	b29b      	uxth	r3, r3
 800802e:	4413      	add	r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	3304      	adds	r3, #4
 8008036:	b212      	sxth	r2, r2
 8008038:	801a      	strh	r2, [r3, #0]

  return ret;
 800803a:	697b      	ldr	r3, [r7, #20]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <lis331dlh_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis331dlh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis331dlh_read_reg(ctx, LIS331DLH_WHO_AM_I, buff, 1);
 800804e:	2301      	movs	r3, #1
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	210f      	movs	r1, #15
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff ff69 	bl	8007f2c <lis331dlh_read_reg>
 800805a:	60f8      	str	r0, [r7, #12]

  return ret;
 800805c:	68fb      	ldr	r3, [r7, #12]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8008066:	b590      	push	{r4, r7, lr}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	461a      	mov	r2, r3
 8008072:	460b      	mov	r3, r1
 8008074:	72fb      	strb	r3, [r7, #11]
 8008076:	4613      	mov	r3, r2
 8008078:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685c      	ldr	r4, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68d8      	ldr	r0, [r3, #12]
 8008082:	893b      	ldrh	r3, [r7, #8]
 8008084:	7af9      	ldrb	r1, [r7, #11]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	47a0      	blx	r4
 800808a:	6178      	str	r0, [r7, #20]

  return ret;
 800808c:	697b      	ldr	r3, [r7, #20]
}
 800808e:	4618      	mov	r0, r3
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	bd90      	pop	{r4, r7, pc}
	...

08008098 <lis3mdl_from_fs16_to_gauss>:
{
  return ((float_t)lsb / 2281.0f);
}

float_t lis3mdl_from_fs16_to_gauss(int16_t lsb)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 1711.0f);
 80080a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80080c8 <lis3mdl_from_fs16_to_gauss+0x30>
 80080b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80080ba:	eeb0 0a67 	vmov.f32	s0, s15
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	44d5e000 	.word	0x44d5e000

080080cc <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 80080d6:	f107 020c 	add.w	r2, r7, #12
 80080da:	2306      	movs	r3, #6
 80080dc:	2128      	movs	r1, #40	; 0x28
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff ffc1 	bl	8008066 <lis3mdl_read_reg>
 80080e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80080e6:	7b7b      	ldrb	r3, [r7, #13]
 80080e8:	b21a      	sxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	021b      	lsls	r3, r3, #8
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	7b3b      	ldrb	r3, [r7, #12]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	4413      	add	r3, r2
 8008100:	b29b      	uxth	r3, r3
 8008102:	b21a      	sxth	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008108:	7bfa      	ldrb	r2, [r7, #15]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	3302      	adds	r3, #2
 800810e:	b212      	sxth	r2, r2
 8008110:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	3302      	adds	r3, #2
 8008116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800811a:	b29b      	uxth	r3, r3
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	b29a      	uxth	r2, r3
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	b29b      	uxth	r3, r3
 8008124:	4413      	add	r3, r2
 8008126:	b29a      	uxth	r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	3302      	adds	r3, #2
 800812c:	b212      	sxth	r2, r2
 800812e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008130:	7c7a      	ldrb	r2, [r7, #17]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	3304      	adds	r3, #4
 8008136:	b212      	sxth	r2, r2
 8008138:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008142:	b29b      	uxth	r3, r3
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	b29a      	uxth	r2, r3
 8008148:	7c3b      	ldrb	r3, [r7, #16]
 800814a:	b29b      	uxth	r3, r3
 800814c:	4413      	add	r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	3304      	adds	r3, #4
 8008154:	b212      	sxth	r2, r2
 8008156:	801a      	strh	r2, [r3, #0]

  return ret;
 8008158:	697b      	ldr	r3, [r7, #20]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 800816c:	2301      	movs	r3, #1
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	210f      	movs	r1, #15
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff77 	bl	8008066 <lis3mdl_read_reg>
 8008178:	60f8      	str	r0, [r7, #12]

  return ret;
 800817a:	68fb      	ldr	r3, [r7, #12]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <__errno>:
 8008184:	4b01      	ldr	r3, [pc, #4]	; (800818c <__errno+0x8>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	2000000c 	.word	0x2000000c

08008190 <__libc_init_array>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	4d0d      	ldr	r5, [pc, #52]	; (80081c8 <__libc_init_array+0x38>)
 8008194:	4c0d      	ldr	r4, [pc, #52]	; (80081cc <__libc_init_array+0x3c>)
 8008196:	1b64      	subs	r4, r4, r5
 8008198:	10a4      	asrs	r4, r4, #2
 800819a:	2600      	movs	r6, #0
 800819c:	42a6      	cmp	r6, r4
 800819e:	d109      	bne.n	80081b4 <__libc_init_array+0x24>
 80081a0:	4d0b      	ldr	r5, [pc, #44]	; (80081d0 <__libc_init_array+0x40>)
 80081a2:	4c0c      	ldr	r4, [pc, #48]	; (80081d4 <__libc_init_array+0x44>)
 80081a4:	f004 faac 	bl	800c700 <_init>
 80081a8:	1b64      	subs	r4, r4, r5
 80081aa:	10a4      	asrs	r4, r4, #2
 80081ac:	2600      	movs	r6, #0
 80081ae:	42a6      	cmp	r6, r4
 80081b0:	d105      	bne.n	80081be <__libc_init_array+0x2e>
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b8:	4798      	blx	r3
 80081ba:	3601      	adds	r6, #1
 80081bc:	e7ee      	b.n	800819c <__libc_init_array+0xc>
 80081be:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c2:	4798      	blx	r3
 80081c4:	3601      	adds	r6, #1
 80081c6:	e7f2      	b.n	80081ae <__libc_init_array+0x1e>
 80081c8:	0800cfcc 	.word	0x0800cfcc
 80081cc:	0800cfcc 	.word	0x0800cfcc
 80081d0:	0800cfcc 	.word	0x0800cfcc
 80081d4:	0800cfd0 	.word	0x0800cfd0

080081d8 <malloc>:
 80081d8:	4b02      	ldr	r3, [pc, #8]	; (80081e4 <malloc+0xc>)
 80081da:	4601      	mov	r1, r0
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	f000 b87f 	b.w	80082e0 <_malloc_r>
 80081e2:	bf00      	nop
 80081e4:	2000000c 	.word	0x2000000c

080081e8 <free>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <free+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f000 b80b 	b.w	8008208 <_free_r>
 80081f2:	bf00      	nop
 80081f4:	2000000c 	.word	0x2000000c

080081f8 <memset>:
 80081f8:	4402      	add	r2, r0
 80081fa:	4603      	mov	r3, r0
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d100      	bne.n	8008202 <memset+0xa>
 8008200:	4770      	bx	lr
 8008202:	f803 1b01 	strb.w	r1, [r3], #1
 8008206:	e7f9      	b.n	80081fc <memset+0x4>

08008208 <_free_r>:
 8008208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820a:	2900      	cmp	r1, #0
 800820c:	d044      	beq.n	8008298 <_free_r+0x90>
 800820e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008212:	9001      	str	r0, [sp, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f1a1 0404 	sub.w	r4, r1, #4
 800821a:	bfb8      	it	lt
 800821c:	18e4      	addlt	r4, r4, r3
 800821e:	f001 fd0d 	bl	8009c3c <__malloc_lock>
 8008222:	4a1e      	ldr	r2, [pc, #120]	; (800829c <_free_r+0x94>)
 8008224:	9801      	ldr	r0, [sp, #4]
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	b933      	cbnz	r3, 8008238 <_free_r+0x30>
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	6014      	str	r4, [r2, #0]
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008234:	f001 bd08 	b.w	8009c48 <__malloc_unlock>
 8008238:	42a3      	cmp	r3, r4
 800823a:	d908      	bls.n	800824e <_free_r+0x46>
 800823c:	6825      	ldr	r5, [r4, #0]
 800823e:	1961      	adds	r1, r4, r5
 8008240:	428b      	cmp	r3, r1
 8008242:	bf01      	itttt	eq
 8008244:	6819      	ldreq	r1, [r3, #0]
 8008246:	685b      	ldreq	r3, [r3, #4]
 8008248:	1949      	addeq	r1, r1, r5
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	e7ed      	b.n	800822a <_free_r+0x22>
 800824e:	461a      	mov	r2, r3
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	b10b      	cbz	r3, 8008258 <_free_r+0x50>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d9fa      	bls.n	800824e <_free_r+0x46>
 8008258:	6811      	ldr	r1, [r2, #0]
 800825a:	1855      	adds	r5, r2, r1
 800825c:	42a5      	cmp	r5, r4
 800825e:	d10b      	bne.n	8008278 <_free_r+0x70>
 8008260:	6824      	ldr	r4, [r4, #0]
 8008262:	4421      	add	r1, r4
 8008264:	1854      	adds	r4, r2, r1
 8008266:	42a3      	cmp	r3, r4
 8008268:	6011      	str	r1, [r2, #0]
 800826a:	d1e0      	bne.n	800822e <_free_r+0x26>
 800826c:	681c      	ldr	r4, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	6053      	str	r3, [r2, #4]
 8008272:	4421      	add	r1, r4
 8008274:	6011      	str	r1, [r2, #0]
 8008276:	e7da      	b.n	800822e <_free_r+0x26>
 8008278:	d902      	bls.n	8008280 <_free_r+0x78>
 800827a:	230c      	movs	r3, #12
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	e7d6      	b.n	800822e <_free_r+0x26>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	1961      	adds	r1, r4, r5
 8008284:	428b      	cmp	r3, r1
 8008286:	bf04      	itt	eq
 8008288:	6819      	ldreq	r1, [r3, #0]
 800828a:	685b      	ldreq	r3, [r3, #4]
 800828c:	6063      	str	r3, [r4, #4]
 800828e:	bf04      	itt	eq
 8008290:	1949      	addeq	r1, r1, r5
 8008292:	6021      	streq	r1, [r4, #0]
 8008294:	6054      	str	r4, [r2, #4]
 8008296:	e7ca      	b.n	800822e <_free_r+0x26>
 8008298:	b003      	add	sp, #12
 800829a:	bd30      	pop	{r4, r5, pc}
 800829c:	20000744 	.word	0x20000744

080082a0 <sbrk_aligned>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4e0e      	ldr	r6, [pc, #56]	; (80082dc <sbrk_aligned+0x3c>)
 80082a4:	460c      	mov	r4, r1
 80082a6:	6831      	ldr	r1, [r6, #0]
 80082a8:	4605      	mov	r5, r0
 80082aa:	b911      	cbnz	r1, 80082b2 <sbrk_aligned+0x12>
 80082ac:	f000 fd0e 	bl	8008ccc <_sbrk_r>
 80082b0:	6030      	str	r0, [r6, #0]
 80082b2:	4621      	mov	r1, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 fd09 	bl	8008ccc <_sbrk_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d00a      	beq.n	80082d4 <sbrk_aligned+0x34>
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d007      	beq.n	80082d8 <sbrk_aligned+0x38>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 fcfe 	bl	8008ccc <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d101      	bne.n	80082d8 <sbrk_aligned+0x38>
 80082d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082d8:	4620      	mov	r0, r4
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	20000748 	.word	0x20000748

080082e0 <_malloc_r>:
 80082e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	1ccd      	adds	r5, r1, #3
 80082e6:	f025 0503 	bic.w	r5, r5, #3
 80082ea:	3508      	adds	r5, #8
 80082ec:	2d0c      	cmp	r5, #12
 80082ee:	bf38      	it	cc
 80082f0:	250c      	movcc	r5, #12
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	4607      	mov	r7, r0
 80082f6:	db01      	blt.n	80082fc <_malloc_r+0x1c>
 80082f8:	42a9      	cmp	r1, r5
 80082fa:	d905      	bls.n	8008308 <_malloc_r+0x28>
 80082fc:	230c      	movs	r3, #12
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	2600      	movs	r6, #0
 8008302:	4630      	mov	r0, r6
 8008304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008308:	4e2e      	ldr	r6, [pc, #184]	; (80083c4 <_malloc_r+0xe4>)
 800830a:	f001 fc97 	bl	8009c3c <__malloc_lock>
 800830e:	6833      	ldr	r3, [r6, #0]
 8008310:	461c      	mov	r4, r3
 8008312:	bb34      	cbnz	r4, 8008362 <_malloc_r+0x82>
 8008314:	4629      	mov	r1, r5
 8008316:	4638      	mov	r0, r7
 8008318:	f7ff ffc2 	bl	80082a0 <sbrk_aligned>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	4604      	mov	r4, r0
 8008320:	d14d      	bne.n	80083be <_malloc_r+0xde>
 8008322:	6834      	ldr	r4, [r6, #0]
 8008324:	4626      	mov	r6, r4
 8008326:	2e00      	cmp	r6, #0
 8008328:	d140      	bne.n	80083ac <_malloc_r+0xcc>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	4631      	mov	r1, r6
 800832e:	4638      	mov	r0, r7
 8008330:	eb04 0803 	add.w	r8, r4, r3
 8008334:	f000 fcca 	bl	8008ccc <_sbrk_r>
 8008338:	4580      	cmp	r8, r0
 800833a:	d13a      	bne.n	80083b2 <_malloc_r+0xd2>
 800833c:	6821      	ldr	r1, [r4, #0]
 800833e:	3503      	adds	r5, #3
 8008340:	1a6d      	subs	r5, r5, r1
 8008342:	f025 0503 	bic.w	r5, r5, #3
 8008346:	3508      	adds	r5, #8
 8008348:	2d0c      	cmp	r5, #12
 800834a:	bf38      	it	cc
 800834c:	250c      	movcc	r5, #12
 800834e:	4629      	mov	r1, r5
 8008350:	4638      	mov	r0, r7
 8008352:	f7ff ffa5 	bl	80082a0 <sbrk_aligned>
 8008356:	3001      	adds	r0, #1
 8008358:	d02b      	beq.n	80083b2 <_malloc_r+0xd2>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	442b      	add	r3, r5
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	e00e      	b.n	8008380 <_malloc_r+0xa0>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	1b52      	subs	r2, r2, r5
 8008366:	d41e      	bmi.n	80083a6 <_malloc_r+0xc6>
 8008368:	2a0b      	cmp	r2, #11
 800836a:	d916      	bls.n	800839a <_malloc_r+0xba>
 800836c:	1961      	adds	r1, r4, r5
 800836e:	42a3      	cmp	r3, r4
 8008370:	6025      	str	r5, [r4, #0]
 8008372:	bf18      	it	ne
 8008374:	6059      	strne	r1, [r3, #4]
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	bf08      	it	eq
 800837a:	6031      	streq	r1, [r6, #0]
 800837c:	5162      	str	r2, [r4, r5]
 800837e:	604b      	str	r3, [r1, #4]
 8008380:	4638      	mov	r0, r7
 8008382:	f104 060b 	add.w	r6, r4, #11
 8008386:	f001 fc5f 	bl	8009c48 <__malloc_unlock>
 800838a:	f026 0607 	bic.w	r6, r6, #7
 800838e:	1d23      	adds	r3, r4, #4
 8008390:	1af2      	subs	r2, r6, r3
 8008392:	d0b6      	beq.n	8008302 <_malloc_r+0x22>
 8008394:	1b9b      	subs	r3, r3, r6
 8008396:	50a3      	str	r3, [r4, r2]
 8008398:	e7b3      	b.n	8008302 <_malloc_r+0x22>
 800839a:	6862      	ldr	r2, [r4, #4]
 800839c:	42a3      	cmp	r3, r4
 800839e:	bf0c      	ite	eq
 80083a0:	6032      	streq	r2, [r6, #0]
 80083a2:	605a      	strne	r2, [r3, #4]
 80083a4:	e7ec      	b.n	8008380 <_malloc_r+0xa0>
 80083a6:	4623      	mov	r3, r4
 80083a8:	6864      	ldr	r4, [r4, #4]
 80083aa:	e7b2      	b.n	8008312 <_malloc_r+0x32>
 80083ac:	4634      	mov	r4, r6
 80083ae:	6876      	ldr	r6, [r6, #4]
 80083b0:	e7b9      	b.n	8008326 <_malloc_r+0x46>
 80083b2:	230c      	movs	r3, #12
 80083b4:	603b      	str	r3, [r7, #0]
 80083b6:	4638      	mov	r0, r7
 80083b8:	f001 fc46 	bl	8009c48 <__malloc_unlock>
 80083bc:	e7a1      	b.n	8008302 <_malloc_r+0x22>
 80083be:	6025      	str	r5, [r4, #0]
 80083c0:	e7de      	b.n	8008380 <_malloc_r+0xa0>
 80083c2:	bf00      	nop
 80083c4:	20000744 	.word	0x20000744

080083c8 <__cvt>:
 80083c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	ec55 4b10 	vmov	r4, r5, d0
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	460e      	mov	r6, r1
 80083d4:	4619      	mov	r1, r3
 80083d6:	462b      	mov	r3, r5
 80083d8:	bfbb      	ittet	lt
 80083da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083de:	461d      	movlt	r5, r3
 80083e0:	2300      	movge	r3, #0
 80083e2:	232d      	movlt	r3, #45	; 0x2d
 80083e4:	700b      	strb	r3, [r1, #0]
 80083e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083ec:	4691      	mov	r9, r2
 80083ee:	f023 0820 	bic.w	r8, r3, #32
 80083f2:	bfbc      	itt	lt
 80083f4:	4622      	movlt	r2, r4
 80083f6:	4614      	movlt	r4, r2
 80083f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083fc:	d005      	beq.n	800840a <__cvt+0x42>
 80083fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008402:	d100      	bne.n	8008406 <__cvt+0x3e>
 8008404:	3601      	adds	r6, #1
 8008406:	2102      	movs	r1, #2
 8008408:	e000      	b.n	800840c <__cvt+0x44>
 800840a:	2103      	movs	r1, #3
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	ab02      	add	r3, sp, #8
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	ec45 4b10 	vmov	d0, r4, r5
 8008418:	4653      	mov	r3, sl
 800841a:	4632      	mov	r2, r6
 800841c:	f000 fd14 	bl	8008e48 <_dtoa_r>
 8008420:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008424:	4607      	mov	r7, r0
 8008426:	d102      	bne.n	800842e <__cvt+0x66>
 8008428:	f019 0f01 	tst.w	r9, #1
 800842c:	d022      	beq.n	8008474 <__cvt+0xac>
 800842e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008432:	eb07 0906 	add.w	r9, r7, r6
 8008436:	d110      	bne.n	800845a <__cvt+0x92>
 8008438:	783b      	ldrb	r3, [r7, #0]
 800843a:	2b30      	cmp	r3, #48	; 0x30
 800843c:	d10a      	bne.n	8008454 <__cvt+0x8c>
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f8 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800844a:	b918      	cbnz	r0, 8008454 <__cvt+0x8c>
 800844c:	f1c6 0601 	rsb	r6, r6, #1
 8008450:	f8ca 6000 	str.w	r6, [sl]
 8008454:	f8da 3000 	ldr.w	r3, [sl]
 8008458:	4499      	add	r9, r3
 800845a:	2200      	movs	r2, #0
 800845c:	2300      	movs	r3, #0
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008466:	b108      	cbz	r0, 800846c <__cvt+0xa4>
 8008468:	f8cd 900c 	str.w	r9, [sp, #12]
 800846c:	2230      	movs	r2, #48	; 0x30
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	454b      	cmp	r3, r9
 8008472:	d307      	bcc.n	8008484 <__cvt+0xbc>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008478:	1bdb      	subs	r3, r3, r7
 800847a:	4638      	mov	r0, r7
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	b004      	add	sp, #16
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	1c59      	adds	r1, r3, #1
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e7f0      	b.n	800846e <__cvt+0xa6>

0800848c <__exponent>:
 800848c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800848e:	4603      	mov	r3, r0
 8008490:	2900      	cmp	r1, #0
 8008492:	bfb8      	it	lt
 8008494:	4249      	neglt	r1, r1
 8008496:	f803 2b02 	strb.w	r2, [r3], #2
 800849a:	bfb4      	ite	lt
 800849c:	222d      	movlt	r2, #45	; 0x2d
 800849e:	222b      	movge	r2, #43	; 0x2b
 80084a0:	2909      	cmp	r1, #9
 80084a2:	7042      	strb	r2, [r0, #1]
 80084a4:	dd2a      	ble.n	80084fc <__exponent+0x70>
 80084a6:	f10d 0407 	add.w	r4, sp, #7
 80084aa:	46a4      	mov	ip, r4
 80084ac:	270a      	movs	r7, #10
 80084ae:	46a6      	mov	lr, r4
 80084b0:	460a      	mov	r2, r1
 80084b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80084b6:	fb07 1516 	mls	r5, r7, r6, r1
 80084ba:	3530      	adds	r5, #48	; 0x30
 80084bc:	2a63      	cmp	r2, #99	; 0x63
 80084be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80084c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084c6:	4631      	mov	r1, r6
 80084c8:	dcf1      	bgt.n	80084ae <__exponent+0x22>
 80084ca:	3130      	adds	r1, #48	; 0x30
 80084cc:	f1ae 0502 	sub.w	r5, lr, #2
 80084d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084d4:	1c44      	adds	r4, r0, #1
 80084d6:	4629      	mov	r1, r5
 80084d8:	4561      	cmp	r1, ip
 80084da:	d30a      	bcc.n	80084f2 <__exponent+0x66>
 80084dc:	f10d 0209 	add.w	r2, sp, #9
 80084e0:	eba2 020e 	sub.w	r2, r2, lr
 80084e4:	4565      	cmp	r5, ip
 80084e6:	bf88      	it	hi
 80084e8:	2200      	movhi	r2, #0
 80084ea:	4413      	add	r3, r2
 80084ec:	1a18      	subs	r0, r3, r0
 80084ee:	b003      	add	sp, #12
 80084f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084fa:	e7ed      	b.n	80084d8 <__exponent+0x4c>
 80084fc:	2330      	movs	r3, #48	; 0x30
 80084fe:	3130      	adds	r1, #48	; 0x30
 8008500:	7083      	strb	r3, [r0, #2]
 8008502:	70c1      	strb	r1, [r0, #3]
 8008504:	1d03      	adds	r3, r0, #4
 8008506:	e7f1      	b.n	80084ec <__exponent+0x60>

08008508 <_printf_float>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	ed2d 8b02 	vpush	{d8}
 8008510:	b08d      	sub	sp, #52	; 0x34
 8008512:	460c      	mov	r4, r1
 8008514:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008518:	4616      	mov	r6, r2
 800851a:	461f      	mov	r7, r3
 800851c:	4605      	mov	r5, r0
 800851e:	f001 fb77 	bl	8009c10 <_localeconv_r>
 8008522:	f8d0 a000 	ldr.w	sl, [r0]
 8008526:	4650      	mov	r0, sl
 8008528:	f7f7 fe52 	bl	80001d0 <strlen>
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	9305      	str	r3, [sp, #20]
 8008534:	f8d8 3000 	ldr.w	r3, [r8]
 8008538:	f894 b018 	ldrb.w	fp, [r4, #24]
 800853c:	3307      	adds	r3, #7
 800853e:	f023 0307 	bic.w	r3, r3, #7
 8008542:	f103 0208 	add.w	r2, r3, #8
 8008546:	f8c8 2000 	str.w	r2, [r8]
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008552:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800855a:	9307      	str	r3, [sp, #28]
 800855c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008560:	ee08 0a10 	vmov	s16, r0
 8008564:	4b9f      	ldr	r3, [pc, #636]	; (80087e4 <_printf_float+0x2dc>)
 8008566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800856a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856e:	f7f8 fadd 	bl	8000b2c <__aeabi_dcmpun>
 8008572:	bb88      	cbnz	r0, 80085d8 <_printf_float+0xd0>
 8008574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008578:	4b9a      	ldr	r3, [pc, #616]	; (80087e4 <_printf_float+0x2dc>)
 800857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800857e:	f7f8 fab7 	bl	8000af0 <__aeabi_dcmple>
 8008582:	bb48      	cbnz	r0, 80085d8 <_printf_float+0xd0>
 8008584:	2200      	movs	r2, #0
 8008586:	2300      	movs	r3, #0
 8008588:	4640      	mov	r0, r8
 800858a:	4649      	mov	r1, r9
 800858c:	f7f8 faa6 	bl	8000adc <__aeabi_dcmplt>
 8008590:	b110      	cbz	r0, 8008598 <_printf_float+0x90>
 8008592:	232d      	movs	r3, #45	; 0x2d
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008598:	4b93      	ldr	r3, [pc, #588]	; (80087e8 <_printf_float+0x2e0>)
 800859a:	4894      	ldr	r0, [pc, #592]	; (80087ec <_printf_float+0x2e4>)
 800859c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085a0:	bf94      	ite	ls
 80085a2:	4698      	movls	r8, r3
 80085a4:	4680      	movhi	r8, r0
 80085a6:	2303      	movs	r3, #3
 80085a8:	6123      	str	r3, [r4, #16]
 80085aa:	9b05      	ldr	r3, [sp, #20]
 80085ac:	f023 0204 	bic.w	r2, r3, #4
 80085b0:	6022      	str	r2, [r4, #0]
 80085b2:	f04f 0900 	mov.w	r9, #0
 80085b6:	9700      	str	r7, [sp, #0]
 80085b8:	4633      	mov	r3, r6
 80085ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f9d8 	bl	8008974 <_printf_common>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f040 8090 	bne.w	80086ea <_printf_float+0x1e2>
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ce:	b00d      	add	sp, #52	; 0x34
 80085d0:	ecbd 8b02 	vpop	{d8}
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 faa4 	bl	8000b2c <__aeabi_dcmpun>
 80085e4:	b140      	cbz	r0, 80085f8 <_printf_float+0xf0>
 80085e6:	464b      	mov	r3, r9
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bfbc      	itt	lt
 80085ec:	232d      	movlt	r3, #45	; 0x2d
 80085ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085f2:	487f      	ldr	r0, [pc, #508]	; (80087f0 <_printf_float+0x2e8>)
 80085f4:	4b7f      	ldr	r3, [pc, #508]	; (80087f4 <_printf_float+0x2ec>)
 80085f6:	e7d1      	b.n	800859c <_printf_float+0x94>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085fe:	9206      	str	r2, [sp, #24]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	d13f      	bne.n	8008684 <_printf_float+0x17c>
 8008604:	2306      	movs	r3, #6
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	6861      	ldr	r1, [r4, #4]
 800860c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008610:	2300      	movs	r3, #0
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	ab0a      	add	r3, sp, #40	; 0x28
 8008616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800861a:	ab09      	add	r3, sp, #36	; 0x24
 800861c:	ec49 8b10 	vmov	d0, r8, r9
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff fecd 	bl	80083c8 <__cvt>
 800862e:	9b06      	ldr	r3, [sp, #24]
 8008630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008632:	2b47      	cmp	r3, #71	; 0x47
 8008634:	4680      	mov	r8, r0
 8008636:	d108      	bne.n	800864a <_printf_float+0x142>
 8008638:	1cc8      	adds	r0, r1, #3
 800863a:	db02      	blt.n	8008642 <_printf_float+0x13a>
 800863c:	6863      	ldr	r3, [r4, #4]
 800863e:	4299      	cmp	r1, r3
 8008640:	dd41      	ble.n	80086c6 <_printf_float+0x1be>
 8008642:	f1ab 0b02 	sub.w	fp, fp, #2
 8008646:	fa5f fb8b 	uxtb.w	fp, fp
 800864a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800864e:	d820      	bhi.n	8008692 <_printf_float+0x18a>
 8008650:	3901      	subs	r1, #1
 8008652:	465a      	mov	r2, fp
 8008654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008658:	9109      	str	r1, [sp, #36]	; 0x24
 800865a:	f7ff ff17 	bl	800848c <__exponent>
 800865e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008660:	1813      	adds	r3, r2, r0
 8008662:	2a01      	cmp	r2, #1
 8008664:	4681      	mov	r9, r0
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	dc02      	bgt.n	8008670 <_printf_float+0x168>
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	07d2      	lsls	r2, r2, #31
 800866e:	d501      	bpl.n	8008674 <_printf_float+0x16c>
 8008670:	3301      	adds	r3, #1
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008678:	2b00      	cmp	r3, #0
 800867a:	d09c      	beq.n	80085b6 <_printf_float+0xae>
 800867c:	232d      	movs	r3, #45	; 0x2d
 800867e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008682:	e798      	b.n	80085b6 <_printf_float+0xae>
 8008684:	9a06      	ldr	r2, [sp, #24]
 8008686:	2a47      	cmp	r2, #71	; 0x47
 8008688:	d1be      	bne.n	8008608 <_printf_float+0x100>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1bc      	bne.n	8008608 <_printf_float+0x100>
 800868e:	2301      	movs	r3, #1
 8008690:	e7b9      	b.n	8008606 <_printf_float+0xfe>
 8008692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008696:	d118      	bne.n	80086ca <_printf_float+0x1c2>
 8008698:	2900      	cmp	r1, #0
 800869a:	6863      	ldr	r3, [r4, #4]
 800869c:	dd0b      	ble.n	80086b6 <_printf_float+0x1ae>
 800869e:	6121      	str	r1, [r4, #16]
 80086a0:	b913      	cbnz	r3, 80086a8 <_printf_float+0x1a0>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	07d0      	lsls	r0, r2, #31
 80086a6:	d502      	bpl.n	80086ae <_printf_float+0x1a6>
 80086a8:	3301      	adds	r3, #1
 80086aa:	440b      	add	r3, r1
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	e7de      	b.n	8008674 <_printf_float+0x16c>
 80086b6:	b913      	cbnz	r3, 80086be <_printf_float+0x1b6>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	07d2      	lsls	r2, r2, #31
 80086bc:	d501      	bpl.n	80086c2 <_printf_float+0x1ba>
 80086be:	3302      	adds	r3, #2
 80086c0:	e7f4      	b.n	80086ac <_printf_float+0x1a4>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e7f2      	b.n	80086ac <_printf_float+0x1a4>
 80086c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086cc:	4299      	cmp	r1, r3
 80086ce:	db05      	blt.n	80086dc <_printf_float+0x1d4>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	6121      	str	r1, [r4, #16]
 80086d4:	07d8      	lsls	r0, r3, #31
 80086d6:	d5ea      	bpl.n	80086ae <_printf_float+0x1a6>
 80086d8:	1c4b      	adds	r3, r1, #1
 80086da:	e7e7      	b.n	80086ac <_printf_float+0x1a4>
 80086dc:	2900      	cmp	r1, #0
 80086de:	bfd4      	ite	le
 80086e0:	f1c1 0202 	rsble	r2, r1, #2
 80086e4:	2201      	movgt	r2, #1
 80086e6:	4413      	add	r3, r2
 80086e8:	e7e0      	b.n	80086ac <_printf_float+0x1a4>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	055a      	lsls	r2, r3, #21
 80086ee:	d407      	bmi.n	8008700 <_printf_float+0x1f8>
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	4642      	mov	r2, r8
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	d12c      	bne.n	8008758 <_printf_float+0x250>
 80086fe:	e764      	b.n	80085ca <_printf_float+0xc2>
 8008700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008704:	f240 80e0 	bls.w	80088c8 <_printf_float+0x3c0>
 8008708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800870c:	2200      	movs	r2, #0
 800870e:	2300      	movs	r3, #0
 8008710:	f7f8 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	d034      	beq.n	8008782 <_printf_float+0x27a>
 8008718:	4a37      	ldr	r2, [pc, #220]	; (80087f8 <_printf_float+0x2f0>)
 800871a:	2301      	movs	r3, #1
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f af51 	beq.w	80085ca <_printf_float+0xc2>
 8008728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800872c:	429a      	cmp	r2, r3
 800872e:	db02      	blt.n	8008736 <_printf_float+0x22e>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	07d8      	lsls	r0, r3, #31
 8008734:	d510      	bpl.n	8008758 <_printf_float+0x250>
 8008736:	ee18 3a10 	vmov	r3, s16
 800873a:	4652      	mov	r2, sl
 800873c:	4631      	mov	r1, r6
 800873e:	4628      	mov	r0, r5
 8008740:	47b8      	blx	r7
 8008742:	3001      	adds	r0, #1
 8008744:	f43f af41 	beq.w	80085ca <_printf_float+0xc2>
 8008748:	f04f 0800 	mov.w	r8, #0
 800874c:	f104 091a 	add.w	r9, r4, #26
 8008750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008752:	3b01      	subs	r3, #1
 8008754:	4543      	cmp	r3, r8
 8008756:	dc09      	bgt.n	800876c <_printf_float+0x264>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	079b      	lsls	r3, r3, #30
 800875c:	f100 8105 	bmi.w	800896a <_printf_float+0x462>
 8008760:	68e0      	ldr	r0, [r4, #12]
 8008762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008764:	4298      	cmp	r0, r3
 8008766:	bfb8      	it	lt
 8008768:	4618      	movlt	r0, r3
 800876a:	e730      	b.n	80085ce <_printf_float+0xc6>
 800876c:	2301      	movs	r3, #1
 800876e:	464a      	mov	r2, r9
 8008770:	4631      	mov	r1, r6
 8008772:	4628      	mov	r0, r5
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f af27 	beq.w	80085ca <_printf_float+0xc2>
 800877c:	f108 0801 	add.w	r8, r8, #1
 8008780:	e7e6      	b.n	8008750 <_printf_float+0x248>
 8008782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	dc39      	bgt.n	80087fc <_printf_float+0x2f4>
 8008788:	4a1b      	ldr	r2, [pc, #108]	; (80087f8 <_printf_float+0x2f0>)
 800878a:	2301      	movs	r3, #1
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f af19 	beq.w	80085ca <_printf_float+0xc2>
 8008798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879c:	4313      	orrs	r3, r2
 800879e:	d102      	bne.n	80087a6 <_printf_float+0x29e>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d5d8      	bpl.n	8008758 <_printf_float+0x250>
 80087a6:	ee18 3a10 	vmov	r3, s16
 80087aa:	4652      	mov	r2, sl
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b8      	blx	r7
 80087b2:	3001      	adds	r0, #1
 80087b4:	f43f af09 	beq.w	80085ca <_printf_float+0xc2>
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	f104 0a1a 	add.w	sl, r4, #26
 80087c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c2:	425b      	negs	r3, r3
 80087c4:	454b      	cmp	r3, r9
 80087c6:	dc01      	bgt.n	80087cc <_printf_float+0x2c4>
 80087c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ca:	e792      	b.n	80086f2 <_printf_float+0x1ea>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f aef7 	beq.w	80085ca <_printf_float+0xc2>
 80087dc:	f109 0901 	add.w	r9, r9, #1
 80087e0:	e7ee      	b.n	80087c0 <_printf_float+0x2b8>
 80087e2:	bf00      	nop
 80087e4:	7fefffff 	.word	0x7fefffff
 80087e8:	0800c7cc 	.word	0x0800c7cc
 80087ec:	0800c7d0 	.word	0x0800c7d0
 80087f0:	0800c7d8 	.word	0x0800c7d8
 80087f4:	0800c7d4 	.word	0x0800c7d4
 80087f8:	0800c7dc 	.word	0x0800c7dc
 80087fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008800:	429a      	cmp	r2, r3
 8008802:	bfa8      	it	ge
 8008804:	461a      	movge	r2, r3
 8008806:	2a00      	cmp	r2, #0
 8008808:	4691      	mov	r9, r2
 800880a:	dc37      	bgt.n	800887c <_printf_float+0x374>
 800880c:	f04f 0b00 	mov.w	fp, #0
 8008810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008814:	f104 021a 	add.w	r2, r4, #26
 8008818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	eba3 0309 	sub.w	r3, r3, r9
 8008820:	455b      	cmp	r3, fp
 8008822:	dc33      	bgt.n	800888c <_printf_float+0x384>
 8008824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008828:	429a      	cmp	r2, r3
 800882a:	db3b      	blt.n	80088a4 <_printf_float+0x39c>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	07da      	lsls	r2, r3, #31
 8008830:	d438      	bmi.n	80088a4 <_printf_float+0x39c>
 8008832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008834:	9a05      	ldr	r2, [sp, #20]
 8008836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008838:	1a9a      	subs	r2, r3, r2
 800883a:	eba3 0901 	sub.w	r9, r3, r1
 800883e:	4591      	cmp	r9, r2
 8008840:	bfa8      	it	ge
 8008842:	4691      	movge	r9, r2
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	dc35      	bgt.n	80088b6 <_printf_float+0x3ae>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008852:	f104 0a1a 	add.w	sl, r4, #26
 8008856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	eba3 0309 	sub.w	r3, r3, r9
 8008860:	4543      	cmp	r3, r8
 8008862:	f77f af79 	ble.w	8008758 <_printf_float+0x250>
 8008866:	2301      	movs	r3, #1
 8008868:	4652      	mov	r2, sl
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	f43f aeaa 	beq.w	80085ca <_printf_float+0xc2>
 8008876:	f108 0801 	add.w	r8, r8, #1
 800887a:	e7ec      	b.n	8008856 <_printf_float+0x34e>
 800887c:	4613      	mov	r3, r2
 800887e:	4631      	mov	r1, r6
 8008880:	4642      	mov	r2, r8
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	d1c0      	bne.n	800880c <_printf_float+0x304>
 800888a:	e69e      	b.n	80085ca <_printf_float+0xc2>
 800888c:	2301      	movs	r3, #1
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	9205      	str	r2, [sp, #20]
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	f43f ae97 	beq.w	80085ca <_printf_float+0xc2>
 800889c:	9a05      	ldr	r2, [sp, #20]
 800889e:	f10b 0b01 	add.w	fp, fp, #1
 80088a2:	e7b9      	b.n	8008818 <_printf_float+0x310>
 80088a4:	ee18 3a10 	vmov	r3, s16
 80088a8:	4652      	mov	r2, sl
 80088aa:	4631      	mov	r1, r6
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b8      	blx	r7
 80088b0:	3001      	adds	r0, #1
 80088b2:	d1be      	bne.n	8008832 <_printf_float+0x32a>
 80088b4:	e689      	b.n	80085ca <_printf_float+0xc2>
 80088b6:	9a05      	ldr	r2, [sp, #20]
 80088b8:	464b      	mov	r3, r9
 80088ba:	4442      	add	r2, r8
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	d1c1      	bne.n	800884a <_printf_float+0x342>
 80088c6:	e680      	b.n	80085ca <_printf_float+0xc2>
 80088c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	dc01      	bgt.n	80088d2 <_printf_float+0x3ca>
 80088ce:	07db      	lsls	r3, r3, #31
 80088d0:	d538      	bpl.n	8008944 <_printf_float+0x43c>
 80088d2:	2301      	movs	r3, #1
 80088d4:	4642      	mov	r2, r8
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	f43f ae74 	beq.w	80085ca <_printf_float+0xc2>
 80088e2:	ee18 3a10 	vmov	r3, s16
 80088e6:	4652      	mov	r2, sl
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f ae6b 	beq.w	80085ca <_printf_float+0xc2>
 80088f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	f7f8 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008900:	b9d8      	cbnz	r0, 800893a <_printf_float+0x432>
 8008902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008904:	f108 0201 	add.w	r2, r8, #1
 8008908:	3b01      	subs	r3, #1
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	d10e      	bne.n	8008932 <_printf_float+0x42a>
 8008914:	e659      	b.n	80085ca <_printf_float+0xc2>
 8008916:	2301      	movs	r3, #1
 8008918:	4652      	mov	r2, sl
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f ae52 	beq.w	80085ca <_printf_float+0xc2>
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892c:	3b01      	subs	r3, #1
 800892e:	4543      	cmp	r3, r8
 8008930:	dcf1      	bgt.n	8008916 <_printf_float+0x40e>
 8008932:	464b      	mov	r3, r9
 8008934:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008938:	e6dc      	b.n	80086f4 <_printf_float+0x1ec>
 800893a:	f04f 0800 	mov.w	r8, #0
 800893e:	f104 0a1a 	add.w	sl, r4, #26
 8008942:	e7f2      	b.n	800892a <_printf_float+0x422>
 8008944:	2301      	movs	r3, #1
 8008946:	4642      	mov	r2, r8
 8008948:	e7df      	b.n	800890a <_printf_float+0x402>
 800894a:	2301      	movs	r3, #1
 800894c:	464a      	mov	r2, r9
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	47b8      	blx	r7
 8008954:	3001      	adds	r0, #1
 8008956:	f43f ae38 	beq.w	80085ca <_printf_float+0xc2>
 800895a:	f108 0801 	add.w	r8, r8, #1
 800895e:	68e3      	ldr	r3, [r4, #12]
 8008960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008962:	1a5b      	subs	r3, r3, r1
 8008964:	4543      	cmp	r3, r8
 8008966:	dcf0      	bgt.n	800894a <_printf_float+0x442>
 8008968:	e6fa      	b.n	8008760 <_printf_float+0x258>
 800896a:	f04f 0800 	mov.w	r8, #0
 800896e:	f104 0919 	add.w	r9, r4, #25
 8008972:	e7f4      	b.n	800895e <_printf_float+0x456>

08008974 <_printf_common>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	4616      	mov	r6, r2
 800897a:	4699      	mov	r9, r3
 800897c:	688a      	ldr	r2, [r1, #8]
 800897e:	690b      	ldr	r3, [r1, #16]
 8008980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008984:	4293      	cmp	r3, r2
 8008986:	bfb8      	it	lt
 8008988:	4613      	movlt	r3, r2
 800898a:	6033      	str	r3, [r6, #0]
 800898c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008990:	4607      	mov	r7, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b10a      	cbz	r2, 800899a <_printf_common+0x26>
 8008996:	3301      	adds	r3, #1
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	0699      	lsls	r1, r3, #26
 800899e:	bf42      	ittt	mi
 80089a0:	6833      	ldrmi	r3, [r6, #0]
 80089a2:	3302      	addmi	r3, #2
 80089a4:	6033      	strmi	r3, [r6, #0]
 80089a6:	6825      	ldr	r5, [r4, #0]
 80089a8:	f015 0506 	ands.w	r5, r5, #6
 80089ac:	d106      	bne.n	80089bc <_printf_common+0x48>
 80089ae:	f104 0a19 	add.w	sl, r4, #25
 80089b2:	68e3      	ldr	r3, [r4, #12]
 80089b4:	6832      	ldr	r2, [r6, #0]
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	dc26      	bgt.n	8008a0a <_printf_common+0x96>
 80089bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089c0:	1e13      	subs	r3, r2, #0
 80089c2:	6822      	ldr	r2, [r4, #0]
 80089c4:	bf18      	it	ne
 80089c6:	2301      	movne	r3, #1
 80089c8:	0692      	lsls	r2, r2, #26
 80089ca:	d42b      	bmi.n	8008a24 <_printf_common+0xb0>
 80089cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089d0:	4649      	mov	r1, r9
 80089d2:	4638      	mov	r0, r7
 80089d4:	47c0      	blx	r8
 80089d6:	3001      	adds	r0, #1
 80089d8:	d01e      	beq.n	8008a18 <_printf_common+0xa4>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	68e5      	ldr	r5, [r4, #12]
 80089de:	6832      	ldr	r2, [r6, #0]
 80089e0:	f003 0306 	and.w	r3, r3, #6
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	bf08      	it	eq
 80089e8:	1aad      	subeq	r5, r5, r2
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	6922      	ldr	r2, [r4, #16]
 80089ee:	bf0c      	ite	eq
 80089f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089f4:	2500      	movne	r5, #0
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bfc4      	itt	gt
 80089fa:	1a9b      	subgt	r3, r3, r2
 80089fc:	18ed      	addgt	r5, r5, r3
 80089fe:	2600      	movs	r6, #0
 8008a00:	341a      	adds	r4, #26
 8008a02:	42b5      	cmp	r5, r6
 8008a04:	d11a      	bne.n	8008a3c <_printf_common+0xc8>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e008      	b.n	8008a1c <_printf_common+0xa8>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4638      	mov	r0, r7
 8008a12:	47c0      	blx	r8
 8008a14:	3001      	adds	r0, #1
 8008a16:	d103      	bne.n	8008a20 <_printf_common+0xac>
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a20:	3501      	adds	r5, #1
 8008a22:	e7c6      	b.n	80089b2 <_printf_common+0x3e>
 8008a24:	18e1      	adds	r1, r4, r3
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	2030      	movs	r0, #48	; 0x30
 8008a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a2e:	4422      	add	r2, r4
 8008a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a38:	3302      	adds	r3, #2
 8008a3a:	e7c7      	b.n	80089cc <_printf_common+0x58>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4649      	mov	r1, r9
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c0      	blx	r8
 8008a46:	3001      	adds	r0, #1
 8008a48:	d0e6      	beq.n	8008a18 <_printf_common+0xa4>
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7d9      	b.n	8008a02 <_printf_common+0x8e>
	...

08008a50 <_printf_i>:
 8008a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	7e0f      	ldrb	r7, [r1, #24]
 8008a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a58:	2f78      	cmp	r7, #120	; 0x78
 8008a5a:	4691      	mov	r9, r2
 8008a5c:	4680      	mov	r8, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	469a      	mov	sl, r3
 8008a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a66:	d807      	bhi.n	8008a78 <_printf_i+0x28>
 8008a68:	2f62      	cmp	r7, #98	; 0x62
 8008a6a:	d80a      	bhi.n	8008a82 <_printf_i+0x32>
 8008a6c:	2f00      	cmp	r7, #0
 8008a6e:	f000 80d8 	beq.w	8008c22 <_printf_i+0x1d2>
 8008a72:	2f58      	cmp	r7, #88	; 0x58
 8008a74:	f000 80a3 	beq.w	8008bbe <_printf_i+0x16e>
 8008a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a80:	e03a      	b.n	8008af8 <_printf_i+0xa8>
 8008a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a86:	2b15      	cmp	r3, #21
 8008a88:	d8f6      	bhi.n	8008a78 <_printf_i+0x28>
 8008a8a:	a101      	add	r1, pc, #4	; (adr r1, 8008a90 <_printf_i+0x40>)
 8008a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a90:	08008ae9 	.word	0x08008ae9
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	08008a79 	.word	0x08008a79
 8008a9c:	08008a79 	.word	0x08008a79
 8008aa0:	08008a79 	.word	0x08008a79
 8008aa4:	08008a79 	.word	0x08008a79
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008a79 	.word	0x08008a79
 8008ab0:	08008a79 	.word	0x08008a79
 8008ab4:	08008a79 	.word	0x08008a79
 8008ab8:	08008a79 	.word	0x08008a79
 8008abc:	08008c09 	.word	0x08008c09
 8008ac0:	08008b2d 	.word	0x08008b2d
 8008ac4:	08008beb 	.word	0x08008beb
 8008ac8:	08008a79 	.word	0x08008a79
 8008acc:	08008a79 	.word	0x08008a79
 8008ad0:	08008c2b 	.word	0x08008c2b
 8008ad4:	08008a79 	.word	0x08008a79
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008a79 	.word	0x08008a79
 8008ae0:	08008a79 	.word	0x08008a79
 8008ae4:	08008bf3 	.word	0x08008bf3
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	602a      	str	r2, [r5, #0]
 8008af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0a3      	b.n	8008c44 <_printf_i+0x1f4>
 8008afc:	6820      	ldr	r0, [r4, #0]
 8008afe:	6829      	ldr	r1, [r5, #0]
 8008b00:	0606      	lsls	r6, r0, #24
 8008b02:	f101 0304 	add.w	r3, r1, #4
 8008b06:	d50a      	bpl.n	8008b1e <_printf_i+0xce>
 8008b08:	680e      	ldr	r6, [r1, #0]
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	da03      	bge.n	8008b18 <_printf_i+0xc8>
 8008b10:	232d      	movs	r3, #45	; 0x2d
 8008b12:	4276      	negs	r6, r6
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	485e      	ldr	r0, [pc, #376]	; (8008c94 <_printf_i+0x244>)
 8008b1a:	230a      	movs	r3, #10
 8008b1c:	e019      	b.n	8008b52 <_printf_i+0x102>
 8008b1e:	680e      	ldr	r6, [r1, #0]
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b26:	bf18      	it	ne
 8008b28:	b236      	sxthne	r6, r6
 8008b2a:	e7ef      	b.n	8008b0c <_printf_i+0xbc>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	6820      	ldr	r0, [r4, #0]
 8008b30:	1d19      	adds	r1, r3, #4
 8008b32:	6029      	str	r1, [r5, #0]
 8008b34:	0601      	lsls	r1, r0, #24
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0xec>
 8008b38:	681e      	ldr	r6, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <_printf_i+0xf2>
 8008b3c:	0646      	lsls	r6, r0, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0xe8>
 8008b40:	881e      	ldrh	r6, [r3, #0]
 8008b42:	4854      	ldr	r0, [pc, #336]	; (8008c94 <_printf_i+0x244>)
 8008b44:	2f6f      	cmp	r7, #111	; 0x6f
 8008b46:	bf0c      	ite	eq
 8008b48:	2308      	moveq	r3, #8
 8008b4a:	230a      	movne	r3, #10
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b52:	6865      	ldr	r5, [r4, #4]
 8008b54:	60a5      	str	r5, [r4, #8]
 8008b56:	2d00      	cmp	r5, #0
 8008b58:	bfa2      	ittt	ge
 8008b5a:	6821      	ldrge	r1, [r4, #0]
 8008b5c:	f021 0104 	bicge.w	r1, r1, #4
 8008b60:	6021      	strge	r1, [r4, #0]
 8008b62:	b90e      	cbnz	r6, 8008b68 <_printf_i+0x118>
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	d04d      	beq.n	8008c04 <_printf_i+0x1b4>
 8008b68:	4615      	mov	r5, r2
 8008b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8008b72:	5dc7      	ldrb	r7, [r0, r7]
 8008b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b78:	4637      	mov	r7, r6
 8008b7a:	42bb      	cmp	r3, r7
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	d9f4      	bls.n	8008b6a <_printf_i+0x11a>
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d10b      	bne.n	8008b9c <_printf_i+0x14c>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	07de      	lsls	r6, r3, #31
 8008b88:	d508      	bpl.n	8008b9c <_printf_i+0x14c>
 8008b8a:	6923      	ldr	r3, [r4, #16]
 8008b8c:	6861      	ldr	r1, [r4, #4]
 8008b8e:	4299      	cmp	r1, r3
 8008b90:	bfde      	ittt	le
 8008b92:	2330      	movle	r3, #48	; 0x30
 8008b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b9c:	1b52      	subs	r2, r2, r5
 8008b9e:	6122      	str	r2, [r4, #16]
 8008ba0:	f8cd a000 	str.w	sl, [sp]
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	aa03      	add	r2, sp, #12
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7ff fee2 	bl	8008974 <_printf_common>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d14c      	bne.n	8008c4e <_printf_i+0x1fe>
 8008bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb8:	b004      	add	sp, #16
 8008bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbe:	4835      	ldr	r0, [pc, #212]	; (8008c94 <_printf_i+0x244>)
 8008bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bc4:	6829      	ldr	r1, [r5, #0]
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bcc:	6029      	str	r1, [r5, #0]
 8008bce:	061d      	lsls	r5, r3, #24
 8008bd0:	d514      	bpl.n	8008bfc <_printf_i+0x1ac>
 8008bd2:	07df      	lsls	r7, r3, #31
 8008bd4:	bf44      	itt	mi
 8008bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bda:	6023      	strmi	r3, [r4, #0]
 8008bdc:	b91e      	cbnz	r6, 8008be6 <_printf_i+0x196>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f023 0320 	bic.w	r3, r3, #32
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	2310      	movs	r3, #16
 8008be8:	e7b0      	b.n	8008b4c <_printf_i+0xfc>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	f043 0320 	orr.w	r3, r3, #32
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	2378      	movs	r3, #120	; 0x78
 8008bf4:	4828      	ldr	r0, [pc, #160]	; (8008c98 <_printf_i+0x248>)
 8008bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bfa:	e7e3      	b.n	8008bc4 <_printf_i+0x174>
 8008bfc:	0659      	lsls	r1, r3, #25
 8008bfe:	bf48      	it	mi
 8008c00:	b2b6      	uxthmi	r6, r6
 8008c02:	e7e6      	b.n	8008bd2 <_printf_i+0x182>
 8008c04:	4615      	mov	r5, r2
 8008c06:	e7bb      	b.n	8008b80 <_printf_i+0x130>
 8008c08:	682b      	ldr	r3, [r5, #0]
 8008c0a:	6826      	ldr	r6, [r4, #0]
 8008c0c:	6961      	ldr	r1, [r4, #20]
 8008c0e:	1d18      	adds	r0, r3, #4
 8008c10:	6028      	str	r0, [r5, #0]
 8008c12:	0635      	lsls	r5, r6, #24
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	d501      	bpl.n	8008c1c <_printf_i+0x1cc>
 8008c18:	6019      	str	r1, [r3, #0]
 8008c1a:	e002      	b.n	8008c22 <_printf_i+0x1d2>
 8008c1c:	0670      	lsls	r0, r6, #25
 8008c1e:	d5fb      	bpl.n	8008c18 <_printf_i+0x1c8>
 8008c20:	8019      	strh	r1, [r3, #0]
 8008c22:	2300      	movs	r3, #0
 8008c24:	6123      	str	r3, [r4, #16]
 8008c26:	4615      	mov	r5, r2
 8008c28:	e7ba      	b.n	8008ba0 <_printf_i+0x150>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	1d1a      	adds	r2, r3, #4
 8008c2e:	602a      	str	r2, [r5, #0]
 8008c30:	681d      	ldr	r5, [r3, #0]
 8008c32:	6862      	ldr	r2, [r4, #4]
 8008c34:	2100      	movs	r1, #0
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7f7 fad2 	bl	80001e0 <memchr>
 8008c3c:	b108      	cbz	r0, 8008c42 <_printf_i+0x1f2>
 8008c3e:	1b40      	subs	r0, r0, r5
 8008c40:	6060      	str	r0, [r4, #4]
 8008c42:	6863      	ldr	r3, [r4, #4]
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	2300      	movs	r3, #0
 8008c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4c:	e7a8      	b.n	8008ba0 <_printf_i+0x150>
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4649      	mov	r1, r9
 8008c54:	4640      	mov	r0, r8
 8008c56:	47d0      	blx	sl
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d0ab      	beq.n	8008bb4 <_printf_i+0x164>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	079b      	lsls	r3, r3, #30
 8008c60:	d413      	bmi.n	8008c8a <_printf_i+0x23a>
 8008c62:	68e0      	ldr	r0, [r4, #12]
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	4298      	cmp	r0, r3
 8008c68:	bfb8      	it	lt
 8008c6a:	4618      	movlt	r0, r3
 8008c6c:	e7a4      	b.n	8008bb8 <_printf_i+0x168>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	47d0      	blx	sl
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d09b      	beq.n	8008bb4 <_printf_i+0x164>
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	68e3      	ldr	r3, [r4, #12]
 8008c80:	9903      	ldr	r1, [sp, #12]
 8008c82:	1a5b      	subs	r3, r3, r1
 8008c84:	42ab      	cmp	r3, r5
 8008c86:	dcf2      	bgt.n	8008c6e <_printf_i+0x21e>
 8008c88:	e7eb      	b.n	8008c62 <_printf_i+0x212>
 8008c8a:	2500      	movs	r5, #0
 8008c8c:	f104 0619 	add.w	r6, r4, #25
 8008c90:	e7f5      	b.n	8008c7e <_printf_i+0x22e>
 8008c92:	bf00      	nop
 8008c94:	0800c7de 	.word	0x0800c7de
 8008c98:	0800c7ef 	.word	0x0800c7ef

08008c9c <iprintf>:
 8008c9c:	b40f      	push	{r0, r1, r2, r3}
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <iprintf+0x2c>)
 8008ca0:	b513      	push	{r0, r1, r4, lr}
 8008ca2:	681c      	ldr	r4, [r3, #0]
 8008ca4:	b124      	cbz	r4, 8008cb0 <iprintf+0x14>
 8008ca6:	69a3      	ldr	r3, [r4, #24]
 8008ca8:	b913      	cbnz	r3, 8008cb0 <iprintf+0x14>
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 ff12 	bl	8009ad4 <__sinit>
 8008cb0:	ab05      	add	r3, sp, #20
 8008cb2:	9a04      	ldr	r2, [sp, #16]
 8008cb4:	68a1      	ldr	r1, [r4, #8]
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f001 fceb 	bl	800a694 <_vfiprintf_r>
 8008cbe:	b002      	add	sp, #8
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr
 8008cc8:	2000000c 	.word	0x2000000c

08008ccc <_sbrk_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4d06      	ldr	r5, [pc, #24]	; (8008ce8 <_sbrk_r+0x1c>)
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	602b      	str	r3, [r5, #0]
 8008cd8:	f7f9 f86e 	bl	8001db8 <_sbrk>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d102      	bne.n	8008ce6 <_sbrk_r+0x1a>
 8008ce0:	682b      	ldr	r3, [r5, #0]
 8008ce2:	b103      	cbz	r3, 8008ce6 <_sbrk_r+0x1a>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	bd38      	pop	{r3, r4, r5, pc}
 8008ce8:	20000750 	.word	0x20000750

08008cec <siprintf>:
 8008cec:	b40e      	push	{r1, r2, r3}
 8008cee:	b500      	push	{lr}
 8008cf0:	b09c      	sub	sp, #112	; 0x70
 8008cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8008cf4:	9002      	str	r0, [sp, #8]
 8008cf6:	9006      	str	r0, [sp, #24]
 8008cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cfc:	4809      	ldr	r0, [pc, #36]	; (8008d24 <siprintf+0x38>)
 8008cfe:	9107      	str	r1, [sp, #28]
 8008d00:	9104      	str	r1, [sp, #16]
 8008d02:	4909      	ldr	r1, [pc, #36]	; (8008d28 <siprintf+0x3c>)
 8008d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d08:	9105      	str	r1, [sp, #20]
 8008d0a:	6800      	ldr	r0, [r0, #0]
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	a902      	add	r1, sp, #8
 8008d10:	f001 fb96 	bl	800a440 <_svfiprintf_r>
 8008d14:	9b02      	ldr	r3, [sp, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	b01c      	add	sp, #112	; 0x70
 8008d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d20:	b003      	add	sp, #12
 8008d22:	4770      	bx	lr
 8008d24:	2000000c 	.word	0x2000000c
 8008d28:	ffff0208 	.word	0xffff0208

08008d2c <quorem>:
 8008d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	6903      	ldr	r3, [r0, #16]
 8008d32:	690c      	ldr	r4, [r1, #16]
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	4607      	mov	r7, r0
 8008d38:	f2c0 8081 	blt.w	8008e3e <quorem+0x112>
 8008d3c:	3c01      	subs	r4, #1
 8008d3e:	f101 0814 	add.w	r8, r1, #20
 8008d42:	f100 0514 	add.w	r5, r0, #20
 8008d46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d4a:	9301      	str	r3, [sp, #4]
 8008d4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d54:	3301      	adds	r3, #1
 8008d56:	429a      	cmp	r2, r3
 8008d58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d64:	d331      	bcc.n	8008dca <quorem+0x9e>
 8008d66:	f04f 0e00 	mov.w	lr, #0
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	46ac      	mov	ip, r5
 8008d6e:	46f2      	mov	sl, lr
 8008d70:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d74:	b293      	uxth	r3, r2
 8008d76:	fb06 e303 	mla	r3, r6, r3, lr
 8008d7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	ebaa 0303 	sub.w	r3, sl, r3
 8008d84:	f8dc a000 	ldr.w	sl, [ip]
 8008d88:	0c12      	lsrs	r2, r2, #16
 8008d8a:	fa13 f38a 	uxtah	r3, r3, sl
 8008d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	9b00      	ldr	r3, [sp, #0]
 8008d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d9a:	b292      	uxth	r2, r2
 8008d9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008da4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008da8:	4581      	cmp	r9, r0
 8008daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dae:	f84c 3b04 	str.w	r3, [ip], #4
 8008db2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008db6:	d2db      	bcs.n	8008d70 <quorem+0x44>
 8008db8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008dbc:	b92b      	cbnz	r3, 8008dca <quorem+0x9e>
 8008dbe:	9b01      	ldr	r3, [sp, #4]
 8008dc0:	3b04      	subs	r3, #4
 8008dc2:	429d      	cmp	r5, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	d32e      	bcc.n	8008e26 <quorem+0xfa>
 8008dc8:	613c      	str	r4, [r7, #16]
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f001 f9c4 	bl	800a158 <__mcmp>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	db24      	blt.n	8008e1e <quorem+0xf2>
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f04f 0c00 	mov.w	ip, #0
 8008ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008de0:	f8d0 e000 	ldr.w	lr, [r0]
 8008de4:	b293      	uxth	r3, r2
 8008de6:	ebac 0303 	sub.w	r3, ip, r3
 8008dea:	0c12      	lsrs	r2, r2, #16
 8008dec:	fa13 f38e 	uxtah	r3, r3, lr
 8008df0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dfe:	45c1      	cmp	r9, r8
 8008e00:	f840 3b04 	str.w	r3, [r0], #4
 8008e04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e08:	d2e8      	bcs.n	8008ddc <quorem+0xb0>
 8008e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e12:	b922      	cbnz	r2, 8008e1e <quorem+0xf2>
 8008e14:	3b04      	subs	r3, #4
 8008e16:	429d      	cmp	r5, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	d30a      	bcc.n	8008e32 <quorem+0x106>
 8008e1c:	613c      	str	r4, [r7, #16]
 8008e1e:	4630      	mov	r0, r6
 8008e20:	b003      	add	sp, #12
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	3b04      	subs	r3, #4
 8008e2a:	2a00      	cmp	r2, #0
 8008e2c:	d1cc      	bne.n	8008dc8 <quorem+0x9c>
 8008e2e:	3c01      	subs	r4, #1
 8008e30:	e7c7      	b.n	8008dc2 <quorem+0x96>
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	d1f0      	bne.n	8008e1c <quorem+0xf0>
 8008e3a:	3c01      	subs	r4, #1
 8008e3c:	e7eb      	b.n	8008e16 <quorem+0xea>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e7ee      	b.n	8008e20 <quorem+0xf4>
 8008e42:	0000      	movs	r0, r0
 8008e44:	0000      	movs	r0, r0
	...

08008e48 <_dtoa_r>:
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	ed2d 8b04 	vpush	{d8-d9}
 8008e50:	ec57 6b10 	vmov	r6, r7, d0
 8008e54:	b093      	sub	sp, #76	; 0x4c
 8008e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e5c:	9106      	str	r1, [sp, #24]
 8008e5e:	ee10 aa10 	vmov	sl, s0
 8008e62:	4604      	mov	r4, r0
 8008e64:	9209      	str	r2, [sp, #36]	; 0x24
 8008e66:	930c      	str	r3, [sp, #48]	; 0x30
 8008e68:	46bb      	mov	fp, r7
 8008e6a:	b975      	cbnz	r5, 8008e8a <_dtoa_r+0x42>
 8008e6c:	2010      	movs	r0, #16
 8008e6e:	f7ff f9b3 	bl	80081d8 <malloc>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6260      	str	r0, [r4, #36]	; 0x24
 8008e76:	b920      	cbnz	r0, 8008e82 <_dtoa_r+0x3a>
 8008e78:	4ba7      	ldr	r3, [pc, #668]	; (8009118 <_dtoa_r+0x2d0>)
 8008e7a:	21ea      	movs	r1, #234	; 0xea
 8008e7c:	48a7      	ldr	r0, [pc, #668]	; (800911c <_dtoa_r+0x2d4>)
 8008e7e:	f001 fe4f 	bl	800ab20 <__assert_func>
 8008e82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e86:	6005      	str	r5, [r0, #0]
 8008e88:	60c5      	str	r5, [r0, #12]
 8008e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e8c:	6819      	ldr	r1, [r3, #0]
 8008e8e:	b151      	cbz	r1, 8008ea6 <_dtoa_r+0x5e>
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	604a      	str	r2, [r1, #4]
 8008e94:	2301      	movs	r3, #1
 8008e96:	4093      	lsls	r3, r2
 8008e98:	608b      	str	r3, [r1, #8]
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 ff1a 	bl	8009cd4 <_Bfree>
 8008ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	1e3b      	subs	r3, r7, #0
 8008ea8:	bfaa      	itet	ge
 8008eaa:	2300      	movge	r3, #0
 8008eac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008eb0:	f8c8 3000 	strge.w	r3, [r8]
 8008eb4:	4b9a      	ldr	r3, [pc, #616]	; (8009120 <_dtoa_r+0x2d8>)
 8008eb6:	bfbc      	itt	lt
 8008eb8:	2201      	movlt	r2, #1
 8008eba:	f8c8 2000 	strlt.w	r2, [r8]
 8008ebe:	ea33 030b 	bics.w	r3, r3, fp
 8008ec2:	d11b      	bne.n	8008efc <_dtoa_r+0xb4>
 8008ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ed0:	4333      	orrs	r3, r6
 8008ed2:	f000 8592 	beq.w	80099fa <_dtoa_r+0xbb2>
 8008ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ed8:	b963      	cbnz	r3, 8008ef4 <_dtoa_r+0xac>
 8008eda:	4b92      	ldr	r3, [pc, #584]	; (8009124 <_dtoa_r+0x2dc>)
 8008edc:	e022      	b.n	8008f24 <_dtoa_r+0xdc>
 8008ede:	4b92      	ldr	r3, [pc, #584]	; (8009128 <_dtoa_r+0x2e0>)
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	b013      	add	sp, #76	; 0x4c
 8008eec:	ecbd 8b04 	vpop	{d8-d9}
 8008ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef4:	4b8b      	ldr	r3, [pc, #556]	; (8009124 <_dtoa_r+0x2dc>)
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	3303      	adds	r3, #3
 8008efa:	e7f3      	b.n	8008ee4 <_dtoa_r+0x9c>
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	f7f7 fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f08:	ec4b ab19 	vmov	d9, sl, fp
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	b158      	cbz	r0, 8008f28 <_dtoa_r+0xe0>
 8008f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f12:	2301      	movs	r3, #1
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 856b 	beq.w	80099f4 <_dtoa_r+0xbac>
 8008f1e:	4883      	ldr	r0, [pc, #524]	; (800912c <_dtoa_r+0x2e4>)
 8008f20:	6018      	str	r0, [r3, #0]
 8008f22:	1e43      	subs	r3, r0, #1
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	e7df      	b.n	8008ee8 <_dtoa_r+0xa0>
 8008f28:	ec4b ab10 	vmov	d0, sl, fp
 8008f2c:	aa10      	add	r2, sp, #64	; 0x40
 8008f2e:	a911      	add	r1, sp, #68	; 0x44
 8008f30:	4620      	mov	r0, r4
 8008f32:	f001 f9b7 	bl	800a2a4 <__d2b>
 8008f36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f3a:	ee08 0a10 	vmov	s16, r0
 8008f3e:	2d00      	cmp	r5, #0
 8008f40:	f000 8084 	beq.w	800904c <_dtoa_r+0x204>
 8008f44:	ee19 3a90 	vmov	r3, s19
 8008f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f50:	4656      	mov	r6, sl
 8008f52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f5e:	4b74      	ldr	r3, [pc, #464]	; (8009130 <_dtoa_r+0x2e8>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 f98f 	bl	8000288 <__aeabi_dsub>
 8008f6a:	a365      	add	r3, pc, #404	; (adr r3, 8009100 <_dtoa_r+0x2b8>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	a364      	add	r3, pc, #400	; (adr r3, 8009108 <_dtoa_r+0x2c0>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f987 	bl	800028c <__adddf3>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	4628      	mov	r0, r5
 8008f82:	460f      	mov	r7, r1
 8008f84:	f7f7 face 	bl	8000524 <__aeabi_i2d>
 8008f88:	a361      	add	r3, pc, #388	; (adr r3, 8009110 <_dtoa_r+0x2c8>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 fb33 	bl	80005f8 <__aeabi_dmul>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4630      	mov	r0, r6
 8008f98:	4639      	mov	r1, r7
 8008f9a:	f7f7 f977 	bl	800028c <__adddf3>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	460f      	mov	r7, r1
 8008fa2:	f7f7 fdd9 	bl	8000b58 <__aeabi_d2iz>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	9000      	str	r0, [sp, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 fd94 	bl	8000adc <__aeabi_dcmplt>
 8008fb4:	b150      	cbz	r0, 8008fcc <_dtoa_r+0x184>
 8008fb6:	9800      	ldr	r0, [sp, #0]
 8008fb8:	f7f7 fab4 	bl	8000524 <__aeabi_i2d>
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	463b      	mov	r3, r7
 8008fc0:	f7f7 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc4:	b910      	cbnz	r0, 8008fcc <_dtoa_r+0x184>
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	9b00      	ldr	r3, [sp, #0]
 8008fce:	2b16      	cmp	r3, #22
 8008fd0:	d85a      	bhi.n	8009088 <_dtoa_r+0x240>
 8008fd2:	9a00      	ldr	r2, [sp, #0]
 8008fd4:	4b57      	ldr	r3, [pc, #348]	; (8009134 <_dtoa_r+0x2ec>)
 8008fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fde:	ec51 0b19 	vmov	r0, r1, d9
 8008fe2:	f7f7 fd7b 	bl	8000adc <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d050      	beq.n	800908c <_dtoa_r+0x244>
 8008fea:	9b00      	ldr	r3, [sp, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ff6:	1b5d      	subs	r5, r3, r5
 8008ff8:	1e6b      	subs	r3, r5, #1
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	bf45      	ittet	mi
 8008ffe:	f1c5 0301 	rsbmi	r3, r5, #1
 8009002:	9304      	strmi	r3, [sp, #16]
 8009004:	2300      	movpl	r3, #0
 8009006:	2300      	movmi	r3, #0
 8009008:	bf4c      	ite	mi
 800900a:	9305      	strmi	r3, [sp, #20]
 800900c:	9304      	strpl	r3, [sp, #16]
 800900e:	9b00      	ldr	r3, [sp, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	db3d      	blt.n	8009090 <_dtoa_r+0x248>
 8009014:	9b05      	ldr	r3, [sp, #20]
 8009016:	9a00      	ldr	r2, [sp, #0]
 8009018:	920a      	str	r2, [sp, #40]	; 0x28
 800901a:	4413      	add	r3, r2
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	2300      	movs	r3, #0
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	2b09      	cmp	r3, #9
 8009026:	f200 8089 	bhi.w	800913c <_dtoa_r+0x2f4>
 800902a:	2b05      	cmp	r3, #5
 800902c:	bfc4      	itt	gt
 800902e:	3b04      	subgt	r3, #4
 8009030:	9306      	strgt	r3, [sp, #24]
 8009032:	9b06      	ldr	r3, [sp, #24]
 8009034:	f1a3 0302 	sub.w	r3, r3, #2
 8009038:	bfcc      	ite	gt
 800903a:	2500      	movgt	r5, #0
 800903c:	2501      	movle	r5, #1
 800903e:	2b03      	cmp	r3, #3
 8009040:	f200 8087 	bhi.w	8009152 <_dtoa_r+0x30a>
 8009044:	e8df f003 	tbb	[pc, r3]
 8009048:	59383a2d 	.word	0x59383a2d
 800904c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009050:	441d      	add	r5, r3
 8009052:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009056:	2b20      	cmp	r3, #32
 8009058:	bfc1      	itttt	gt
 800905a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800905e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009062:	fa0b f303 	lslgt.w	r3, fp, r3
 8009066:	fa26 f000 	lsrgt.w	r0, r6, r0
 800906a:	bfda      	itte	le
 800906c:	f1c3 0320 	rsble	r3, r3, #32
 8009070:	fa06 f003 	lslle.w	r0, r6, r3
 8009074:	4318      	orrgt	r0, r3
 8009076:	f7f7 fa45 	bl	8000504 <__aeabi_ui2d>
 800907a:	2301      	movs	r3, #1
 800907c:	4606      	mov	r6, r0
 800907e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009082:	3d01      	subs	r5, #1
 8009084:	930e      	str	r3, [sp, #56]	; 0x38
 8009086:	e76a      	b.n	8008f5e <_dtoa_r+0x116>
 8009088:	2301      	movs	r3, #1
 800908a:	e7b2      	b.n	8008ff2 <_dtoa_r+0x1aa>
 800908c:	900b      	str	r0, [sp, #44]	; 0x2c
 800908e:	e7b1      	b.n	8008ff4 <_dtoa_r+0x1ac>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	9a00      	ldr	r2, [sp, #0]
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	4253      	negs	r3, r2
 800909a:	9307      	str	r3, [sp, #28]
 800909c:	2300      	movs	r3, #0
 800909e:	930a      	str	r3, [sp, #40]	; 0x28
 80090a0:	e7bf      	b.n	8009022 <_dtoa_r+0x1da>
 80090a2:	2300      	movs	r3, #0
 80090a4:	9308      	str	r3, [sp, #32]
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dc55      	bgt.n	8009158 <_dtoa_r+0x310>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090b2:	461a      	mov	r2, r3
 80090b4:	9209      	str	r2, [sp, #36]	; 0x24
 80090b6:	e00c      	b.n	80090d2 <_dtoa_r+0x28a>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e7f3      	b.n	80090a4 <_dtoa_r+0x25c>
 80090bc:	2300      	movs	r3, #0
 80090be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	9b00      	ldr	r3, [sp, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	9302      	str	r3, [sp, #8]
 80090c8:	3301      	adds	r3, #1
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	bfb8      	it	lt
 80090d0:	2301      	movlt	r3, #1
 80090d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090d4:	2200      	movs	r2, #0
 80090d6:	6042      	str	r2, [r0, #4]
 80090d8:	2204      	movs	r2, #4
 80090da:	f102 0614 	add.w	r6, r2, #20
 80090de:	429e      	cmp	r6, r3
 80090e0:	6841      	ldr	r1, [r0, #4]
 80090e2:	d93d      	bls.n	8009160 <_dtoa_r+0x318>
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fdb5 	bl	8009c54 <_Balloc>
 80090ea:	9001      	str	r0, [sp, #4]
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d13b      	bne.n	8009168 <_dtoa_r+0x320>
 80090f0:	4b11      	ldr	r3, [pc, #68]	; (8009138 <_dtoa_r+0x2f0>)
 80090f2:	4602      	mov	r2, r0
 80090f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090f8:	e6c0      	b.n	8008e7c <_dtoa_r+0x34>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e7df      	b.n	80090be <_dtoa_r+0x276>
 80090fe:	bf00      	nop
 8009100:	636f4361 	.word	0x636f4361
 8009104:	3fd287a7 	.word	0x3fd287a7
 8009108:	8b60c8b3 	.word	0x8b60c8b3
 800910c:	3fc68a28 	.word	0x3fc68a28
 8009110:	509f79fb 	.word	0x509f79fb
 8009114:	3fd34413 	.word	0x3fd34413
 8009118:	0800c80d 	.word	0x0800c80d
 800911c:	0800c824 	.word	0x0800c824
 8009120:	7ff00000 	.word	0x7ff00000
 8009124:	0800c809 	.word	0x0800c809
 8009128:	0800c800 	.word	0x0800c800
 800912c:	0800c7dd 	.word	0x0800c7dd
 8009130:	3ff80000 	.word	0x3ff80000
 8009134:	0800c978 	.word	0x0800c978
 8009138:	0800c87f 	.word	0x0800c87f
 800913c:	2501      	movs	r5, #1
 800913e:	2300      	movs	r3, #0
 8009140:	9306      	str	r3, [sp, #24]
 8009142:	9508      	str	r5, [sp, #32]
 8009144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009148:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800914c:	2200      	movs	r2, #0
 800914e:	2312      	movs	r3, #18
 8009150:	e7b0      	b.n	80090b4 <_dtoa_r+0x26c>
 8009152:	2301      	movs	r3, #1
 8009154:	9308      	str	r3, [sp, #32]
 8009156:	e7f5      	b.n	8009144 <_dtoa_r+0x2fc>
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800915e:	e7b8      	b.n	80090d2 <_dtoa_r+0x28a>
 8009160:	3101      	adds	r1, #1
 8009162:	6041      	str	r1, [r0, #4]
 8009164:	0052      	lsls	r2, r2, #1
 8009166:	e7b8      	b.n	80090da <_dtoa_r+0x292>
 8009168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800916a:	9a01      	ldr	r2, [sp, #4]
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	2b0e      	cmp	r3, #14
 8009172:	f200 809d 	bhi.w	80092b0 <_dtoa_r+0x468>
 8009176:	2d00      	cmp	r5, #0
 8009178:	f000 809a 	beq.w	80092b0 <_dtoa_r+0x468>
 800917c:	9b00      	ldr	r3, [sp, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd32      	ble.n	80091e8 <_dtoa_r+0x3a0>
 8009182:	4ab7      	ldr	r2, [pc, #732]	; (8009460 <_dtoa_r+0x618>)
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800918c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009190:	9b00      	ldr	r3, [sp, #0]
 8009192:	05d8      	lsls	r0, r3, #23
 8009194:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009198:	d516      	bpl.n	80091c8 <_dtoa_r+0x380>
 800919a:	4bb2      	ldr	r3, [pc, #712]	; (8009464 <_dtoa_r+0x61c>)
 800919c:	ec51 0b19 	vmov	r0, r1, d9
 80091a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091a4:	f7f7 fb52 	bl	800084c <__aeabi_ddiv>
 80091a8:	f007 070f 	and.w	r7, r7, #15
 80091ac:	4682      	mov	sl, r0
 80091ae:	468b      	mov	fp, r1
 80091b0:	2503      	movs	r5, #3
 80091b2:	4eac      	ldr	r6, [pc, #688]	; (8009464 <_dtoa_r+0x61c>)
 80091b4:	b957      	cbnz	r7, 80091cc <_dtoa_r+0x384>
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	4650      	mov	r0, sl
 80091bc:	4659      	mov	r1, fp
 80091be:	f7f7 fb45 	bl	800084c <__aeabi_ddiv>
 80091c2:	4682      	mov	sl, r0
 80091c4:	468b      	mov	fp, r1
 80091c6:	e028      	b.n	800921a <_dtoa_r+0x3d2>
 80091c8:	2502      	movs	r5, #2
 80091ca:	e7f2      	b.n	80091b2 <_dtoa_r+0x36a>
 80091cc:	07f9      	lsls	r1, r7, #31
 80091ce:	d508      	bpl.n	80091e2 <_dtoa_r+0x39a>
 80091d0:	4640      	mov	r0, r8
 80091d2:	4649      	mov	r1, r9
 80091d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091d8:	f7f7 fa0e 	bl	80005f8 <__aeabi_dmul>
 80091dc:	3501      	adds	r5, #1
 80091de:	4680      	mov	r8, r0
 80091e0:	4689      	mov	r9, r1
 80091e2:	107f      	asrs	r7, r7, #1
 80091e4:	3608      	adds	r6, #8
 80091e6:	e7e5      	b.n	80091b4 <_dtoa_r+0x36c>
 80091e8:	f000 809b 	beq.w	8009322 <_dtoa_r+0x4da>
 80091ec:	9b00      	ldr	r3, [sp, #0]
 80091ee:	4f9d      	ldr	r7, [pc, #628]	; (8009464 <_dtoa_r+0x61c>)
 80091f0:	425e      	negs	r6, r3
 80091f2:	4b9b      	ldr	r3, [pc, #620]	; (8009460 <_dtoa_r+0x618>)
 80091f4:	f006 020f 	and.w	r2, r6, #15
 80091f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	ec51 0b19 	vmov	r0, r1, d9
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	1136      	asrs	r6, r6, #4
 800920a:	4682      	mov	sl, r0
 800920c:	468b      	mov	fp, r1
 800920e:	2300      	movs	r3, #0
 8009210:	2502      	movs	r5, #2
 8009212:	2e00      	cmp	r6, #0
 8009214:	d17a      	bne.n	800930c <_dtoa_r+0x4c4>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1d3      	bne.n	80091c2 <_dtoa_r+0x37a>
 800921a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8082 	beq.w	8009326 <_dtoa_r+0x4de>
 8009222:	4b91      	ldr	r3, [pc, #580]	; (8009468 <_dtoa_r+0x620>)
 8009224:	2200      	movs	r2, #0
 8009226:	4650      	mov	r0, sl
 8009228:	4659      	mov	r1, fp
 800922a:	f7f7 fc57 	bl	8000adc <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	d079      	beq.n	8009326 <_dtoa_r+0x4de>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d076      	beq.n	8009326 <_dtoa_r+0x4de>
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dd36      	ble.n	80092ac <_dtoa_r+0x464>
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	4650      	mov	r0, sl
 8009242:	4659      	mov	r1, fp
 8009244:	1e5f      	subs	r7, r3, #1
 8009246:	2200      	movs	r2, #0
 8009248:	4b88      	ldr	r3, [pc, #544]	; (800946c <_dtoa_r+0x624>)
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	9e02      	ldr	r6, [sp, #8]
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	3501      	adds	r5, #1
 8009256:	4628      	mov	r0, r5
 8009258:	f7f7 f964 	bl	8000524 <__aeabi_i2d>
 800925c:	4652      	mov	r2, sl
 800925e:	465b      	mov	r3, fp
 8009260:	f7f7 f9ca 	bl	80005f8 <__aeabi_dmul>
 8009264:	4b82      	ldr	r3, [pc, #520]	; (8009470 <_dtoa_r+0x628>)
 8009266:	2200      	movs	r2, #0
 8009268:	f7f7 f810 	bl	800028c <__adddf3>
 800926c:	46d0      	mov	r8, sl
 800926e:	46d9      	mov	r9, fp
 8009270:	4682      	mov	sl, r0
 8009272:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009276:	2e00      	cmp	r6, #0
 8009278:	d158      	bne.n	800932c <_dtoa_r+0x4e4>
 800927a:	4b7e      	ldr	r3, [pc, #504]	; (8009474 <_dtoa_r+0x62c>)
 800927c:	2200      	movs	r2, #0
 800927e:	4640      	mov	r0, r8
 8009280:	4649      	mov	r1, r9
 8009282:	f7f7 f801 	bl	8000288 <__aeabi_dsub>
 8009286:	4652      	mov	r2, sl
 8009288:	465b      	mov	r3, fp
 800928a:	4680      	mov	r8, r0
 800928c:	4689      	mov	r9, r1
 800928e:	f7f7 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 8009292:	2800      	cmp	r0, #0
 8009294:	f040 8295 	bne.w	80097c2 <_dtoa_r+0x97a>
 8009298:	4652      	mov	r2, sl
 800929a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800929e:	4640      	mov	r0, r8
 80092a0:	4649      	mov	r1, r9
 80092a2:	f7f7 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f040 8289 	bne.w	80097be <_dtoa_r+0x976>
 80092ac:	ec5b ab19 	vmov	sl, fp, d9
 80092b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f2c0 8148 	blt.w	8009548 <_dtoa_r+0x700>
 80092b8:	9a00      	ldr	r2, [sp, #0]
 80092ba:	2a0e      	cmp	r2, #14
 80092bc:	f300 8144 	bgt.w	8009548 <_dtoa_r+0x700>
 80092c0:	4b67      	ldr	r3, [pc, #412]	; (8009460 <_dtoa_r+0x618>)
 80092c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f280 80d5 	bge.w	800947c <_dtoa_r+0x634>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f300 80d1 	bgt.w	800947c <_dtoa_r+0x634>
 80092da:	f040 826f 	bne.w	80097bc <_dtoa_r+0x974>
 80092de:	4b65      	ldr	r3, [pc, #404]	; (8009474 <_dtoa_r+0x62c>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4652      	mov	r2, sl
 80092ec:	465b      	mov	r3, fp
 80092ee:	f7f7 fc09 	bl	8000b04 <__aeabi_dcmpge>
 80092f2:	9e03      	ldr	r6, [sp, #12]
 80092f4:	4637      	mov	r7, r6
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f040 8245 	bne.w	8009786 <_dtoa_r+0x93e>
 80092fc:	9d01      	ldr	r5, [sp, #4]
 80092fe:	2331      	movs	r3, #49	; 0x31
 8009300:	f805 3b01 	strb.w	r3, [r5], #1
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	3301      	adds	r3, #1
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	e240      	b.n	800978e <_dtoa_r+0x946>
 800930c:	07f2      	lsls	r2, r6, #31
 800930e:	d505      	bpl.n	800931c <_dtoa_r+0x4d4>
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	f7f7 f970 	bl	80005f8 <__aeabi_dmul>
 8009318:	3501      	adds	r5, #1
 800931a:	2301      	movs	r3, #1
 800931c:	1076      	asrs	r6, r6, #1
 800931e:	3708      	adds	r7, #8
 8009320:	e777      	b.n	8009212 <_dtoa_r+0x3ca>
 8009322:	2502      	movs	r5, #2
 8009324:	e779      	b.n	800921a <_dtoa_r+0x3d2>
 8009326:	9f00      	ldr	r7, [sp, #0]
 8009328:	9e03      	ldr	r6, [sp, #12]
 800932a:	e794      	b.n	8009256 <_dtoa_r+0x40e>
 800932c:	9901      	ldr	r1, [sp, #4]
 800932e:	4b4c      	ldr	r3, [pc, #304]	; (8009460 <_dtoa_r+0x618>)
 8009330:	4431      	add	r1, r6
 8009332:	910d      	str	r1, [sp, #52]	; 0x34
 8009334:	9908      	ldr	r1, [sp, #32]
 8009336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800933a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800933e:	2900      	cmp	r1, #0
 8009340:	d043      	beq.n	80093ca <_dtoa_r+0x582>
 8009342:	494d      	ldr	r1, [pc, #308]	; (8009478 <_dtoa_r+0x630>)
 8009344:	2000      	movs	r0, #0
 8009346:	f7f7 fa81 	bl	800084c <__aeabi_ddiv>
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	f7f6 ff9b 	bl	8000288 <__aeabi_dsub>
 8009352:	9d01      	ldr	r5, [sp, #4]
 8009354:	4682      	mov	sl, r0
 8009356:	468b      	mov	fp, r1
 8009358:	4649      	mov	r1, r9
 800935a:	4640      	mov	r0, r8
 800935c:	f7f7 fbfc 	bl	8000b58 <__aeabi_d2iz>
 8009360:	4606      	mov	r6, r0
 8009362:	f7f7 f8df 	bl	8000524 <__aeabi_i2d>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4640      	mov	r0, r8
 800936c:	4649      	mov	r1, r9
 800936e:	f7f6 ff8b 	bl	8000288 <__aeabi_dsub>
 8009372:	3630      	adds	r6, #48	; 0x30
 8009374:	f805 6b01 	strb.w	r6, [r5], #1
 8009378:	4652      	mov	r2, sl
 800937a:	465b      	mov	r3, fp
 800937c:	4680      	mov	r8, r0
 800937e:	4689      	mov	r9, r1
 8009380:	f7f7 fbac 	bl	8000adc <__aeabi_dcmplt>
 8009384:	2800      	cmp	r0, #0
 8009386:	d163      	bne.n	8009450 <_dtoa_r+0x608>
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	4936      	ldr	r1, [pc, #216]	; (8009468 <_dtoa_r+0x620>)
 800938e:	2000      	movs	r0, #0
 8009390:	f7f6 ff7a 	bl	8000288 <__aeabi_dsub>
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	f7f7 fba0 	bl	8000adc <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	f040 80b5 	bne.w	800950c <_dtoa_r+0x6c4>
 80093a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a4:	429d      	cmp	r5, r3
 80093a6:	d081      	beq.n	80092ac <_dtoa_r+0x464>
 80093a8:	4b30      	ldr	r3, [pc, #192]	; (800946c <_dtoa_r+0x624>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	f7f7 f922 	bl	80005f8 <__aeabi_dmul>
 80093b4:	4b2d      	ldr	r3, [pc, #180]	; (800946c <_dtoa_r+0x624>)
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	2200      	movs	r2, #0
 80093c0:	f7f7 f91a 	bl	80005f8 <__aeabi_dmul>
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	e7c6      	b.n	8009358 <_dtoa_r+0x510>
 80093ca:	4650      	mov	r0, sl
 80093cc:	4659      	mov	r1, fp
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d4:	9d01      	ldr	r5, [sp, #4]
 80093d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d8:	4682      	mov	sl, r0
 80093da:	468b      	mov	fp, r1
 80093dc:	4649      	mov	r1, r9
 80093de:	4640      	mov	r0, r8
 80093e0:	f7f7 fbba 	bl	8000b58 <__aeabi_d2iz>
 80093e4:	4606      	mov	r6, r0
 80093e6:	f7f7 f89d 	bl	8000524 <__aeabi_i2d>
 80093ea:	3630      	adds	r6, #48	; 0x30
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f7f6 ff48 	bl	8000288 <__aeabi_dsub>
 80093f8:	f805 6b01 	strb.w	r6, [r5], #1
 80093fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093fe:	429d      	cmp	r5, r3
 8009400:	4680      	mov	r8, r0
 8009402:	4689      	mov	r9, r1
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	d124      	bne.n	8009454 <_dtoa_r+0x60c>
 800940a:	4b1b      	ldr	r3, [pc, #108]	; (8009478 <_dtoa_r+0x630>)
 800940c:	4650      	mov	r0, sl
 800940e:	4659      	mov	r1, fp
 8009410:	f7f6 ff3c 	bl	800028c <__adddf3>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fb7c 	bl	8000b18 <__aeabi_dcmpgt>
 8009420:	2800      	cmp	r0, #0
 8009422:	d173      	bne.n	800950c <_dtoa_r+0x6c4>
 8009424:	4652      	mov	r2, sl
 8009426:	465b      	mov	r3, fp
 8009428:	4913      	ldr	r1, [pc, #76]	; (8009478 <_dtoa_r+0x630>)
 800942a:	2000      	movs	r0, #0
 800942c:	f7f6 ff2c 	bl	8000288 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4640      	mov	r0, r8
 8009436:	4649      	mov	r1, r9
 8009438:	f7f7 fb50 	bl	8000adc <__aeabi_dcmplt>
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f af35 	beq.w	80092ac <_dtoa_r+0x464>
 8009442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009444:	1e6b      	subs	r3, r5, #1
 8009446:	930f      	str	r3, [sp, #60]	; 0x3c
 8009448:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800944c:	2b30      	cmp	r3, #48	; 0x30
 800944e:	d0f8      	beq.n	8009442 <_dtoa_r+0x5fa>
 8009450:	9700      	str	r7, [sp, #0]
 8009452:	e049      	b.n	80094e8 <_dtoa_r+0x6a0>
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <_dtoa_r+0x624>)
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	4680      	mov	r8, r0
 800945c:	4689      	mov	r9, r1
 800945e:	e7bd      	b.n	80093dc <_dtoa_r+0x594>
 8009460:	0800c978 	.word	0x0800c978
 8009464:	0800c950 	.word	0x0800c950
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	40240000 	.word	0x40240000
 8009470:	401c0000 	.word	0x401c0000
 8009474:	40140000 	.word	0x40140000
 8009478:	3fe00000 	.word	0x3fe00000
 800947c:	9d01      	ldr	r5, [sp, #4]
 800947e:	4656      	mov	r6, sl
 8009480:	465f      	mov	r7, fp
 8009482:	4642      	mov	r2, r8
 8009484:	464b      	mov	r3, r9
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 f9df 	bl	800084c <__aeabi_ddiv>
 800948e:	f7f7 fb63 	bl	8000b58 <__aeabi_d2iz>
 8009492:	4682      	mov	sl, r0
 8009494:	f7f7 f846 	bl	8000524 <__aeabi_i2d>
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094ac:	f7f6 feec 	bl	8000288 <__aeabi_dsub>
 80094b0:	f805 6b01 	strb.w	r6, [r5], #1
 80094b4:	9e01      	ldr	r6, [sp, #4]
 80094b6:	9f03      	ldr	r7, [sp, #12]
 80094b8:	1bae      	subs	r6, r5, r6
 80094ba:	42b7      	cmp	r7, r6
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	d135      	bne.n	800952e <_dtoa_r+0x6e6>
 80094c2:	f7f6 fee3 	bl	800028c <__adddf3>
 80094c6:	4642      	mov	r2, r8
 80094c8:	464b      	mov	r3, r9
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	f7f7 fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80094d2:	b9d0      	cbnz	r0, 800950a <_dtoa_r+0x6c2>
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	4630      	mov	r0, r6
 80094da:	4639      	mov	r1, r7
 80094dc:	f7f7 faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80094e0:	b110      	cbz	r0, 80094e8 <_dtoa_r+0x6a0>
 80094e2:	f01a 0f01 	tst.w	sl, #1
 80094e6:	d110      	bne.n	800950a <_dtoa_r+0x6c2>
 80094e8:	4620      	mov	r0, r4
 80094ea:	ee18 1a10 	vmov	r1, s16
 80094ee:	f000 fbf1 	bl	8009cd4 <_Bfree>
 80094f2:	2300      	movs	r3, #0
 80094f4:	9800      	ldr	r0, [sp, #0]
 80094f6:	702b      	strb	r3, [r5, #0]
 80094f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094fa:	3001      	adds	r0, #1
 80094fc:	6018      	str	r0, [r3, #0]
 80094fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009500:	2b00      	cmp	r3, #0
 8009502:	f43f acf1 	beq.w	8008ee8 <_dtoa_r+0xa0>
 8009506:	601d      	str	r5, [r3, #0]
 8009508:	e4ee      	b.n	8008ee8 <_dtoa_r+0xa0>
 800950a:	9f00      	ldr	r7, [sp, #0]
 800950c:	462b      	mov	r3, r5
 800950e:	461d      	mov	r5, r3
 8009510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009514:	2a39      	cmp	r2, #57	; 0x39
 8009516:	d106      	bne.n	8009526 <_dtoa_r+0x6de>
 8009518:	9a01      	ldr	r2, [sp, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d1f7      	bne.n	800950e <_dtoa_r+0x6c6>
 800951e:	9901      	ldr	r1, [sp, #4]
 8009520:	2230      	movs	r2, #48	; 0x30
 8009522:	3701      	adds	r7, #1
 8009524:	700a      	strb	r2, [r1, #0]
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	3201      	adds	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	e790      	b.n	8009450 <_dtoa_r+0x608>
 800952e:	4ba6      	ldr	r3, [pc, #664]	; (80097c8 <_dtoa_r+0x980>)
 8009530:	2200      	movs	r2, #0
 8009532:	f7f7 f861 	bl	80005f8 <__aeabi_dmul>
 8009536:	2200      	movs	r2, #0
 8009538:	2300      	movs	r3, #0
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	f7f7 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009542:	2800      	cmp	r0, #0
 8009544:	d09d      	beq.n	8009482 <_dtoa_r+0x63a>
 8009546:	e7cf      	b.n	80094e8 <_dtoa_r+0x6a0>
 8009548:	9a08      	ldr	r2, [sp, #32]
 800954a:	2a00      	cmp	r2, #0
 800954c:	f000 80d7 	beq.w	80096fe <_dtoa_r+0x8b6>
 8009550:	9a06      	ldr	r2, [sp, #24]
 8009552:	2a01      	cmp	r2, #1
 8009554:	f300 80ba 	bgt.w	80096cc <_dtoa_r+0x884>
 8009558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800955a:	2a00      	cmp	r2, #0
 800955c:	f000 80b2 	beq.w	80096c4 <_dtoa_r+0x87c>
 8009560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009564:	9e07      	ldr	r6, [sp, #28]
 8009566:	9d04      	ldr	r5, [sp, #16]
 8009568:	9a04      	ldr	r2, [sp, #16]
 800956a:	441a      	add	r2, r3
 800956c:	9204      	str	r2, [sp, #16]
 800956e:	9a05      	ldr	r2, [sp, #20]
 8009570:	2101      	movs	r1, #1
 8009572:	441a      	add	r2, r3
 8009574:	4620      	mov	r0, r4
 8009576:	9205      	str	r2, [sp, #20]
 8009578:	f000 fc64 	bl	8009e44 <__i2b>
 800957c:	4607      	mov	r7, r0
 800957e:	2d00      	cmp	r5, #0
 8009580:	dd0c      	ble.n	800959c <_dtoa_r+0x754>
 8009582:	9b05      	ldr	r3, [sp, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dd09      	ble.n	800959c <_dtoa_r+0x754>
 8009588:	42ab      	cmp	r3, r5
 800958a:	9a04      	ldr	r2, [sp, #16]
 800958c:	bfa8      	it	ge
 800958e:	462b      	movge	r3, r5
 8009590:	1ad2      	subs	r2, r2, r3
 8009592:	9204      	str	r2, [sp, #16]
 8009594:	9a05      	ldr	r2, [sp, #20]
 8009596:	1aed      	subs	r5, r5, r3
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	9b07      	ldr	r3, [sp, #28]
 800959e:	b31b      	cbz	r3, 80095e8 <_dtoa_r+0x7a0>
 80095a0:	9b08      	ldr	r3, [sp, #32]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 80af 	beq.w	8009706 <_dtoa_r+0x8be>
 80095a8:	2e00      	cmp	r6, #0
 80095aa:	dd13      	ble.n	80095d4 <_dtoa_r+0x78c>
 80095ac:	4639      	mov	r1, r7
 80095ae:	4632      	mov	r2, r6
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fd07 	bl	8009fc4 <__pow5mult>
 80095b6:	ee18 2a10 	vmov	r2, s16
 80095ba:	4601      	mov	r1, r0
 80095bc:	4607      	mov	r7, r0
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 fc56 	bl	8009e70 <__multiply>
 80095c4:	ee18 1a10 	vmov	r1, s16
 80095c8:	4680      	mov	r8, r0
 80095ca:	4620      	mov	r0, r4
 80095cc:	f000 fb82 	bl	8009cd4 <_Bfree>
 80095d0:	ee08 8a10 	vmov	s16, r8
 80095d4:	9b07      	ldr	r3, [sp, #28]
 80095d6:	1b9a      	subs	r2, r3, r6
 80095d8:	d006      	beq.n	80095e8 <_dtoa_r+0x7a0>
 80095da:	ee18 1a10 	vmov	r1, s16
 80095de:	4620      	mov	r0, r4
 80095e0:	f000 fcf0 	bl	8009fc4 <__pow5mult>
 80095e4:	ee08 0a10 	vmov	s16, r0
 80095e8:	2101      	movs	r1, #1
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 fc2a 	bl	8009e44 <__i2b>
 80095f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	4606      	mov	r6, r0
 80095f6:	f340 8088 	ble.w	800970a <_dtoa_r+0x8c2>
 80095fa:	461a      	mov	r2, r3
 80095fc:	4601      	mov	r1, r0
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fce0 	bl	8009fc4 <__pow5mult>
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	2b01      	cmp	r3, #1
 8009608:	4606      	mov	r6, r0
 800960a:	f340 8081 	ble.w	8009710 <_dtoa_r+0x8c8>
 800960e:	f04f 0800 	mov.w	r8, #0
 8009612:	6933      	ldr	r3, [r6, #16]
 8009614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009618:	6918      	ldr	r0, [r3, #16]
 800961a:	f000 fbc3 	bl	8009da4 <__hi0bits>
 800961e:	f1c0 0020 	rsb	r0, r0, #32
 8009622:	9b05      	ldr	r3, [sp, #20]
 8009624:	4418      	add	r0, r3
 8009626:	f010 001f 	ands.w	r0, r0, #31
 800962a:	f000 8092 	beq.w	8009752 <_dtoa_r+0x90a>
 800962e:	f1c0 0320 	rsb	r3, r0, #32
 8009632:	2b04      	cmp	r3, #4
 8009634:	f340 808a 	ble.w	800974c <_dtoa_r+0x904>
 8009638:	f1c0 001c 	rsb	r0, r0, #28
 800963c:	9b04      	ldr	r3, [sp, #16]
 800963e:	4403      	add	r3, r0
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	9b05      	ldr	r3, [sp, #20]
 8009644:	4403      	add	r3, r0
 8009646:	4405      	add	r5, r0
 8009648:	9305      	str	r3, [sp, #20]
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd07      	ble.n	8009660 <_dtoa_r+0x818>
 8009650:	ee18 1a10 	vmov	r1, s16
 8009654:	461a      	mov	r2, r3
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fd0e 	bl	800a078 <__lshift>
 800965c:	ee08 0a10 	vmov	s16, r0
 8009660:	9b05      	ldr	r3, [sp, #20]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd05      	ble.n	8009672 <_dtoa_r+0x82a>
 8009666:	4631      	mov	r1, r6
 8009668:	461a      	mov	r2, r3
 800966a:	4620      	mov	r0, r4
 800966c:	f000 fd04 	bl	800a078 <__lshift>
 8009670:	4606      	mov	r6, r0
 8009672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d06e      	beq.n	8009756 <_dtoa_r+0x90e>
 8009678:	ee18 0a10 	vmov	r0, s16
 800967c:	4631      	mov	r1, r6
 800967e:	f000 fd6b 	bl	800a158 <__mcmp>
 8009682:	2800      	cmp	r0, #0
 8009684:	da67      	bge.n	8009756 <_dtoa_r+0x90e>
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	3b01      	subs	r3, #1
 800968a:	ee18 1a10 	vmov	r1, s16
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	220a      	movs	r2, #10
 8009692:	2300      	movs	r3, #0
 8009694:	4620      	mov	r0, r4
 8009696:	f000 fb3f 	bl	8009d18 <__multadd>
 800969a:	9b08      	ldr	r3, [sp, #32]
 800969c:	ee08 0a10 	vmov	s16, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 81b1 	beq.w	8009a08 <_dtoa_r+0xbc0>
 80096a6:	2300      	movs	r3, #0
 80096a8:	4639      	mov	r1, r7
 80096aa:	220a      	movs	r2, #10
 80096ac:	4620      	mov	r0, r4
 80096ae:	f000 fb33 	bl	8009d18 <__multadd>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	4607      	mov	r7, r0
 80096b8:	f300 808e 	bgt.w	80097d8 <_dtoa_r+0x990>
 80096bc:	9b06      	ldr	r3, [sp, #24]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	dc51      	bgt.n	8009766 <_dtoa_r+0x91e>
 80096c2:	e089      	b.n	80097d8 <_dtoa_r+0x990>
 80096c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096ca:	e74b      	b.n	8009564 <_dtoa_r+0x71c>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	1e5e      	subs	r6, r3, #1
 80096d0:	9b07      	ldr	r3, [sp, #28]
 80096d2:	42b3      	cmp	r3, r6
 80096d4:	bfbf      	itttt	lt
 80096d6:	9b07      	ldrlt	r3, [sp, #28]
 80096d8:	9607      	strlt	r6, [sp, #28]
 80096da:	1af2      	sublt	r2, r6, r3
 80096dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096de:	bfb6      	itet	lt
 80096e0:	189b      	addlt	r3, r3, r2
 80096e2:	1b9e      	subge	r6, r3, r6
 80096e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	bfb8      	it	lt
 80096ea:	2600      	movlt	r6, #0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bfb7      	itett	lt
 80096f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096f8:	1a9d      	sublt	r5, r3, r2
 80096fa:	2300      	movlt	r3, #0
 80096fc:	e734      	b.n	8009568 <_dtoa_r+0x720>
 80096fe:	9e07      	ldr	r6, [sp, #28]
 8009700:	9d04      	ldr	r5, [sp, #16]
 8009702:	9f08      	ldr	r7, [sp, #32]
 8009704:	e73b      	b.n	800957e <_dtoa_r+0x736>
 8009706:	9a07      	ldr	r2, [sp, #28]
 8009708:	e767      	b.n	80095da <_dtoa_r+0x792>
 800970a:	9b06      	ldr	r3, [sp, #24]
 800970c:	2b01      	cmp	r3, #1
 800970e:	dc18      	bgt.n	8009742 <_dtoa_r+0x8fa>
 8009710:	f1ba 0f00 	cmp.w	sl, #0
 8009714:	d115      	bne.n	8009742 <_dtoa_r+0x8fa>
 8009716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800971a:	b993      	cbnz	r3, 8009742 <_dtoa_r+0x8fa>
 800971c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009720:	0d1b      	lsrs	r3, r3, #20
 8009722:	051b      	lsls	r3, r3, #20
 8009724:	b183      	cbz	r3, 8009748 <_dtoa_r+0x900>
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	3301      	adds	r3, #1
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	9b05      	ldr	r3, [sp, #20]
 800972e:	3301      	adds	r3, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	f04f 0801 	mov.w	r8, #1
 8009736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	f47f af6a 	bne.w	8009612 <_dtoa_r+0x7ca>
 800973e:	2001      	movs	r0, #1
 8009740:	e76f      	b.n	8009622 <_dtoa_r+0x7da>
 8009742:	f04f 0800 	mov.w	r8, #0
 8009746:	e7f6      	b.n	8009736 <_dtoa_r+0x8ee>
 8009748:	4698      	mov	r8, r3
 800974a:	e7f4      	b.n	8009736 <_dtoa_r+0x8ee>
 800974c:	f43f af7d 	beq.w	800964a <_dtoa_r+0x802>
 8009750:	4618      	mov	r0, r3
 8009752:	301c      	adds	r0, #28
 8009754:	e772      	b.n	800963c <_dtoa_r+0x7f4>
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc37      	bgt.n	80097cc <_dtoa_r+0x984>
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	2b02      	cmp	r3, #2
 8009760:	dd34      	ble.n	80097cc <_dtoa_r+0x984>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	9302      	str	r3, [sp, #8]
 8009766:	9b02      	ldr	r3, [sp, #8]
 8009768:	b96b      	cbnz	r3, 8009786 <_dtoa_r+0x93e>
 800976a:	4631      	mov	r1, r6
 800976c:	2205      	movs	r2, #5
 800976e:	4620      	mov	r0, r4
 8009770:	f000 fad2 	bl	8009d18 <__multadd>
 8009774:	4601      	mov	r1, r0
 8009776:	4606      	mov	r6, r0
 8009778:	ee18 0a10 	vmov	r0, s16
 800977c:	f000 fcec 	bl	800a158 <__mcmp>
 8009780:	2800      	cmp	r0, #0
 8009782:	f73f adbb 	bgt.w	80092fc <_dtoa_r+0x4b4>
 8009786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009788:	9d01      	ldr	r5, [sp, #4]
 800978a:	43db      	mvns	r3, r3
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	f04f 0800 	mov.w	r8, #0
 8009792:	4631      	mov	r1, r6
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fa9d 	bl	8009cd4 <_Bfree>
 800979a:	2f00      	cmp	r7, #0
 800979c:	f43f aea4 	beq.w	80094e8 <_dtoa_r+0x6a0>
 80097a0:	f1b8 0f00 	cmp.w	r8, #0
 80097a4:	d005      	beq.n	80097b2 <_dtoa_r+0x96a>
 80097a6:	45b8      	cmp	r8, r7
 80097a8:	d003      	beq.n	80097b2 <_dtoa_r+0x96a>
 80097aa:	4641      	mov	r1, r8
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 fa91 	bl	8009cd4 <_Bfree>
 80097b2:	4639      	mov	r1, r7
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 fa8d 	bl	8009cd4 <_Bfree>
 80097ba:	e695      	b.n	80094e8 <_dtoa_r+0x6a0>
 80097bc:	2600      	movs	r6, #0
 80097be:	4637      	mov	r7, r6
 80097c0:	e7e1      	b.n	8009786 <_dtoa_r+0x93e>
 80097c2:	9700      	str	r7, [sp, #0]
 80097c4:	4637      	mov	r7, r6
 80097c6:	e599      	b.n	80092fc <_dtoa_r+0x4b4>
 80097c8:	40240000 	.word	0x40240000
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 80ca 	beq.w	8009968 <_dtoa_r+0xb20>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	9302      	str	r3, [sp, #8]
 80097d8:	2d00      	cmp	r5, #0
 80097da:	dd05      	ble.n	80097e8 <_dtoa_r+0x9a0>
 80097dc:	4639      	mov	r1, r7
 80097de:	462a      	mov	r2, r5
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fc49 	bl	800a078 <__lshift>
 80097e6:	4607      	mov	r7, r0
 80097e8:	f1b8 0f00 	cmp.w	r8, #0
 80097ec:	d05b      	beq.n	80098a6 <_dtoa_r+0xa5e>
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fa2f 	bl	8009c54 <_Balloc>
 80097f6:	4605      	mov	r5, r0
 80097f8:	b928      	cbnz	r0, 8009806 <_dtoa_r+0x9be>
 80097fa:	4b87      	ldr	r3, [pc, #540]	; (8009a18 <_dtoa_r+0xbd0>)
 80097fc:	4602      	mov	r2, r0
 80097fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009802:	f7ff bb3b 	b.w	8008e7c <_dtoa_r+0x34>
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	3202      	adds	r2, #2
 800980a:	0092      	lsls	r2, r2, #2
 800980c:	f107 010c 	add.w	r1, r7, #12
 8009810:	300c      	adds	r0, #12
 8009812:	f000 fa04 	bl	8009c1e <memcpy>
 8009816:	2201      	movs	r2, #1
 8009818:	4629      	mov	r1, r5
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fc2c 	bl	800a078 <__lshift>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	f103 0901 	add.w	r9, r3, #1
 8009826:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800982a:	4413      	add	r3, r2
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	f00a 0301 	and.w	r3, sl, #1
 8009832:	46b8      	mov	r8, r7
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	4607      	mov	r7, r0
 8009838:	4631      	mov	r1, r6
 800983a:	ee18 0a10 	vmov	r0, s16
 800983e:	f7ff fa75 	bl	8008d2c <quorem>
 8009842:	4641      	mov	r1, r8
 8009844:	9002      	str	r0, [sp, #8]
 8009846:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800984a:	ee18 0a10 	vmov	r0, s16
 800984e:	f000 fc83 	bl	800a158 <__mcmp>
 8009852:	463a      	mov	r2, r7
 8009854:	9003      	str	r0, [sp, #12]
 8009856:	4631      	mov	r1, r6
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fc99 	bl	800a190 <__mdiff>
 800985e:	68c2      	ldr	r2, [r0, #12]
 8009860:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009864:	4605      	mov	r5, r0
 8009866:	bb02      	cbnz	r2, 80098aa <_dtoa_r+0xa62>
 8009868:	4601      	mov	r1, r0
 800986a:	ee18 0a10 	vmov	r0, s16
 800986e:	f000 fc73 	bl	800a158 <__mcmp>
 8009872:	4602      	mov	r2, r0
 8009874:	4629      	mov	r1, r5
 8009876:	4620      	mov	r0, r4
 8009878:	9207      	str	r2, [sp, #28]
 800987a:	f000 fa2b 	bl	8009cd4 <_Bfree>
 800987e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009882:	ea43 0102 	orr.w	r1, r3, r2
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	430b      	orrs	r3, r1
 800988a:	464d      	mov	r5, r9
 800988c:	d10f      	bne.n	80098ae <_dtoa_r+0xa66>
 800988e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009892:	d02a      	beq.n	80098ea <_dtoa_r+0xaa2>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	dd02      	ble.n	80098a0 <_dtoa_r+0xa58>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098a0:	f88b a000 	strb.w	sl, [fp]
 80098a4:	e775      	b.n	8009792 <_dtoa_r+0x94a>
 80098a6:	4638      	mov	r0, r7
 80098a8:	e7ba      	b.n	8009820 <_dtoa_r+0x9d8>
 80098aa:	2201      	movs	r2, #1
 80098ac:	e7e2      	b.n	8009874 <_dtoa_r+0xa2c>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	db04      	blt.n	80098be <_dtoa_r+0xa76>
 80098b4:	9906      	ldr	r1, [sp, #24]
 80098b6:	430b      	orrs	r3, r1
 80098b8:	9904      	ldr	r1, [sp, #16]
 80098ba:	430b      	orrs	r3, r1
 80098bc:	d122      	bne.n	8009904 <_dtoa_r+0xabc>
 80098be:	2a00      	cmp	r2, #0
 80098c0:	ddee      	ble.n	80098a0 <_dtoa_r+0xa58>
 80098c2:	ee18 1a10 	vmov	r1, s16
 80098c6:	2201      	movs	r2, #1
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fbd5 	bl	800a078 <__lshift>
 80098ce:	4631      	mov	r1, r6
 80098d0:	ee08 0a10 	vmov	s16, r0
 80098d4:	f000 fc40 	bl	800a158 <__mcmp>
 80098d8:	2800      	cmp	r0, #0
 80098da:	dc03      	bgt.n	80098e4 <_dtoa_r+0xa9c>
 80098dc:	d1e0      	bne.n	80098a0 <_dtoa_r+0xa58>
 80098de:	f01a 0f01 	tst.w	sl, #1
 80098e2:	d0dd      	beq.n	80098a0 <_dtoa_r+0xa58>
 80098e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098e8:	d1d7      	bne.n	800989a <_dtoa_r+0xa52>
 80098ea:	2339      	movs	r3, #57	; 0x39
 80098ec:	f88b 3000 	strb.w	r3, [fp]
 80098f0:	462b      	mov	r3, r5
 80098f2:	461d      	mov	r5, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098fa:	2a39      	cmp	r2, #57	; 0x39
 80098fc:	d071      	beq.n	80099e2 <_dtoa_r+0xb9a>
 80098fe:	3201      	adds	r2, #1
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	e746      	b.n	8009792 <_dtoa_r+0x94a>
 8009904:	2a00      	cmp	r2, #0
 8009906:	dd07      	ble.n	8009918 <_dtoa_r+0xad0>
 8009908:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800990c:	d0ed      	beq.n	80098ea <_dtoa_r+0xaa2>
 800990e:	f10a 0301 	add.w	r3, sl, #1
 8009912:	f88b 3000 	strb.w	r3, [fp]
 8009916:	e73c      	b.n	8009792 <_dtoa_r+0x94a>
 8009918:	9b05      	ldr	r3, [sp, #20]
 800991a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800991e:	4599      	cmp	r9, r3
 8009920:	d047      	beq.n	80099b2 <_dtoa_r+0xb6a>
 8009922:	ee18 1a10 	vmov	r1, s16
 8009926:	2300      	movs	r3, #0
 8009928:	220a      	movs	r2, #10
 800992a:	4620      	mov	r0, r4
 800992c:	f000 f9f4 	bl	8009d18 <__multadd>
 8009930:	45b8      	cmp	r8, r7
 8009932:	ee08 0a10 	vmov	s16, r0
 8009936:	f04f 0300 	mov.w	r3, #0
 800993a:	f04f 020a 	mov.w	r2, #10
 800993e:	4641      	mov	r1, r8
 8009940:	4620      	mov	r0, r4
 8009942:	d106      	bne.n	8009952 <_dtoa_r+0xb0a>
 8009944:	f000 f9e8 	bl	8009d18 <__multadd>
 8009948:	4680      	mov	r8, r0
 800994a:	4607      	mov	r7, r0
 800994c:	f109 0901 	add.w	r9, r9, #1
 8009950:	e772      	b.n	8009838 <_dtoa_r+0x9f0>
 8009952:	f000 f9e1 	bl	8009d18 <__multadd>
 8009956:	4639      	mov	r1, r7
 8009958:	4680      	mov	r8, r0
 800995a:	2300      	movs	r3, #0
 800995c:	220a      	movs	r2, #10
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f9da 	bl	8009d18 <__multadd>
 8009964:	4607      	mov	r7, r0
 8009966:	e7f1      	b.n	800994c <_dtoa_r+0xb04>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	9302      	str	r3, [sp, #8]
 800996c:	9d01      	ldr	r5, [sp, #4]
 800996e:	ee18 0a10 	vmov	r0, s16
 8009972:	4631      	mov	r1, r6
 8009974:	f7ff f9da 	bl	8008d2c <quorem>
 8009978:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	f805 ab01 	strb.w	sl, [r5], #1
 8009982:	1aea      	subs	r2, r5, r3
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	4293      	cmp	r3, r2
 8009988:	dd09      	ble.n	800999e <_dtoa_r+0xb56>
 800998a:	ee18 1a10 	vmov	r1, s16
 800998e:	2300      	movs	r3, #0
 8009990:	220a      	movs	r2, #10
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f9c0 	bl	8009d18 <__multadd>
 8009998:	ee08 0a10 	vmov	s16, r0
 800999c:	e7e7      	b.n	800996e <_dtoa_r+0xb26>
 800999e:	9b02      	ldr	r3, [sp, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bfc8      	it	gt
 80099a4:	461d      	movgt	r5, r3
 80099a6:	9b01      	ldr	r3, [sp, #4]
 80099a8:	bfd8      	it	le
 80099aa:	2501      	movle	r5, #1
 80099ac:	441d      	add	r5, r3
 80099ae:	f04f 0800 	mov.w	r8, #0
 80099b2:	ee18 1a10 	vmov	r1, s16
 80099b6:	2201      	movs	r2, #1
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 fb5d 	bl	800a078 <__lshift>
 80099be:	4631      	mov	r1, r6
 80099c0:	ee08 0a10 	vmov	s16, r0
 80099c4:	f000 fbc8 	bl	800a158 <__mcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dc91      	bgt.n	80098f0 <_dtoa_r+0xaa8>
 80099cc:	d102      	bne.n	80099d4 <_dtoa_r+0xb8c>
 80099ce:	f01a 0f01 	tst.w	sl, #1
 80099d2:	d18d      	bne.n	80098f0 <_dtoa_r+0xaa8>
 80099d4:	462b      	mov	r3, r5
 80099d6:	461d      	mov	r5, r3
 80099d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099dc:	2a30      	cmp	r2, #48	; 0x30
 80099de:	d0fa      	beq.n	80099d6 <_dtoa_r+0xb8e>
 80099e0:	e6d7      	b.n	8009792 <_dtoa_r+0x94a>
 80099e2:	9a01      	ldr	r2, [sp, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d184      	bne.n	80098f2 <_dtoa_r+0xaaa>
 80099e8:	9b00      	ldr	r3, [sp, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	2331      	movs	r3, #49	; 0x31
 80099f0:	7013      	strb	r3, [r2, #0]
 80099f2:	e6ce      	b.n	8009792 <_dtoa_r+0x94a>
 80099f4:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <_dtoa_r+0xbd4>)
 80099f6:	f7ff ba95 	b.w	8008f24 <_dtoa_r+0xdc>
 80099fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f47f aa6e 	bne.w	8008ede <_dtoa_r+0x96>
 8009a02:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <_dtoa_r+0xbd8>)
 8009a04:	f7ff ba8e 	b.w	8008f24 <_dtoa_r+0xdc>
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	dcae      	bgt.n	800996c <_dtoa_r+0xb24>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f73f aea8 	bgt.w	8009766 <_dtoa_r+0x91e>
 8009a16:	e7a9      	b.n	800996c <_dtoa_r+0xb24>
 8009a18:	0800c87f 	.word	0x0800c87f
 8009a1c:	0800c7dc 	.word	0x0800c7dc
 8009a20:	0800c800 	.word	0x0800c800

08009a24 <std>:
 8009a24:	2300      	movs	r3, #0
 8009a26:	b510      	push	{r4, lr}
 8009a28:	4604      	mov	r4, r0
 8009a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a32:	6083      	str	r3, [r0, #8]
 8009a34:	8181      	strh	r1, [r0, #12]
 8009a36:	6643      	str	r3, [r0, #100]	; 0x64
 8009a38:	81c2      	strh	r2, [r0, #14]
 8009a3a:	6183      	str	r3, [r0, #24]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	2208      	movs	r2, #8
 8009a40:	305c      	adds	r0, #92	; 0x5c
 8009a42:	f7fe fbd9 	bl	80081f8 <memset>
 8009a46:	4b05      	ldr	r3, [pc, #20]	; (8009a5c <std+0x38>)
 8009a48:	6263      	str	r3, [r4, #36]	; 0x24
 8009a4a:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <std+0x3c>)
 8009a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <std+0x40>)
 8009a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <std+0x44>)
 8009a54:	6224      	str	r4, [r4, #32]
 8009a56:	6323      	str	r3, [r4, #48]	; 0x30
 8009a58:	bd10      	pop	{r4, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0800a8f5 	.word	0x0800a8f5
 8009a60:	0800a917 	.word	0x0800a917
 8009a64:	0800a94f 	.word	0x0800a94f
 8009a68:	0800a973 	.word	0x0800a973

08009a6c <_cleanup_r>:
 8009a6c:	4901      	ldr	r1, [pc, #4]	; (8009a74 <_cleanup_r+0x8>)
 8009a6e:	f000 b8af 	b.w	8009bd0 <_fwalk_reent>
 8009a72:	bf00      	nop
 8009a74:	0800ac89 	.word	0x0800ac89

08009a78 <__sfmoreglue>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	2268      	movs	r2, #104	; 0x68
 8009a7c:	1e4d      	subs	r5, r1, #1
 8009a7e:	4355      	muls	r5, r2
 8009a80:	460e      	mov	r6, r1
 8009a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a86:	f7fe fc2b 	bl	80082e0 <_malloc_r>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	b140      	cbz	r0, 8009aa0 <__sfmoreglue+0x28>
 8009a8e:	2100      	movs	r1, #0
 8009a90:	e9c0 1600 	strd	r1, r6, [r0]
 8009a94:	300c      	adds	r0, #12
 8009a96:	60a0      	str	r0, [r4, #8]
 8009a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a9c:	f7fe fbac 	bl	80081f8 <memset>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}

08009aa4 <__sfp_lock_acquire>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__sfp_lock_acquire+0x8>)
 8009aa6:	f000 b8b8 	b.w	8009c1a <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	2000074d 	.word	0x2000074d

08009ab0 <__sfp_lock_release>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__sfp_lock_release+0x8>)
 8009ab2:	f000 b8b3 	b.w	8009c1c <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	2000074d 	.word	0x2000074d

08009abc <__sinit_lock_acquire>:
 8009abc:	4801      	ldr	r0, [pc, #4]	; (8009ac4 <__sinit_lock_acquire+0x8>)
 8009abe:	f000 b8ac 	b.w	8009c1a <__retarget_lock_acquire_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	2000074e 	.word	0x2000074e

08009ac8 <__sinit_lock_release>:
 8009ac8:	4801      	ldr	r0, [pc, #4]	; (8009ad0 <__sinit_lock_release+0x8>)
 8009aca:	f000 b8a7 	b.w	8009c1c <__retarget_lock_release_recursive>
 8009ace:	bf00      	nop
 8009ad0:	2000074e 	.word	0x2000074e

08009ad4 <__sinit>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	f7ff fff0 	bl	8009abc <__sinit_lock_acquire>
 8009adc:	69a3      	ldr	r3, [r4, #24]
 8009ade:	b11b      	cbz	r3, 8009ae8 <__sinit+0x14>
 8009ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae4:	f7ff bff0 	b.w	8009ac8 <__sinit_lock_release>
 8009ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009aec:	6523      	str	r3, [r4, #80]	; 0x50
 8009aee:	4b13      	ldr	r3, [pc, #76]	; (8009b3c <__sinit+0x68>)
 8009af0:	4a13      	ldr	r2, [pc, #76]	; (8009b40 <__sinit+0x6c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	bf04      	itt	eq
 8009afa:	2301      	moveq	r3, #1
 8009afc:	61a3      	streq	r3, [r4, #24]
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 f820 	bl	8009b44 <__sfp>
 8009b04:	6060      	str	r0, [r4, #4]
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 f81c 	bl	8009b44 <__sfp>
 8009b0c:	60a0      	str	r0, [r4, #8]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 f818 	bl	8009b44 <__sfp>
 8009b14:	2200      	movs	r2, #0
 8009b16:	60e0      	str	r0, [r4, #12]
 8009b18:	2104      	movs	r1, #4
 8009b1a:	6860      	ldr	r0, [r4, #4]
 8009b1c:	f7ff ff82 	bl	8009a24 <std>
 8009b20:	68a0      	ldr	r0, [r4, #8]
 8009b22:	2201      	movs	r2, #1
 8009b24:	2109      	movs	r1, #9
 8009b26:	f7ff ff7d 	bl	8009a24 <std>
 8009b2a:	68e0      	ldr	r0, [r4, #12]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	2112      	movs	r1, #18
 8009b30:	f7ff ff78 	bl	8009a24 <std>
 8009b34:	2301      	movs	r3, #1
 8009b36:	61a3      	str	r3, [r4, #24]
 8009b38:	e7d2      	b.n	8009ae0 <__sinit+0xc>
 8009b3a:	bf00      	nop
 8009b3c:	0800c7c8 	.word	0x0800c7c8
 8009b40:	08009a6d 	.word	0x08009a6d

08009b44 <__sfp>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	4607      	mov	r7, r0
 8009b48:	f7ff ffac 	bl	8009aa4 <__sfp_lock_acquire>
 8009b4c:	4b1e      	ldr	r3, [pc, #120]	; (8009bc8 <__sfp+0x84>)
 8009b4e:	681e      	ldr	r6, [r3, #0]
 8009b50:	69b3      	ldr	r3, [r6, #24]
 8009b52:	b913      	cbnz	r3, 8009b5a <__sfp+0x16>
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ffbd 	bl	8009ad4 <__sinit>
 8009b5a:	3648      	adds	r6, #72	; 0x48
 8009b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	d503      	bpl.n	8009b6c <__sfp+0x28>
 8009b64:	6833      	ldr	r3, [r6, #0]
 8009b66:	b30b      	cbz	r3, 8009bac <__sfp+0x68>
 8009b68:	6836      	ldr	r6, [r6, #0]
 8009b6a:	e7f7      	b.n	8009b5c <__sfp+0x18>
 8009b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b70:	b9d5      	cbnz	r5, 8009ba8 <__sfp+0x64>
 8009b72:	4b16      	ldr	r3, [pc, #88]	; (8009bcc <__sfp+0x88>)
 8009b74:	60e3      	str	r3, [r4, #12]
 8009b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b7c:	f000 f84c 	bl	8009c18 <__retarget_lock_init_recursive>
 8009b80:	f7ff ff96 	bl	8009ab0 <__sfp_lock_release>
 8009b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b8c:	6025      	str	r5, [r4, #0]
 8009b8e:	61a5      	str	r5, [r4, #24]
 8009b90:	2208      	movs	r2, #8
 8009b92:	4629      	mov	r1, r5
 8009b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b98:	f7fe fb2e 	bl	80081f8 <memset>
 8009b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ba8:	3468      	adds	r4, #104	; 0x68
 8009baa:	e7d9      	b.n	8009b60 <__sfp+0x1c>
 8009bac:	2104      	movs	r1, #4
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f7ff ff62 	bl	8009a78 <__sfmoreglue>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	6030      	str	r0, [r6, #0]
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1d5      	bne.n	8009b68 <__sfp+0x24>
 8009bbc:	f7ff ff78 	bl	8009ab0 <__sfp_lock_release>
 8009bc0:	230c      	movs	r3, #12
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	e7ee      	b.n	8009ba4 <__sfp+0x60>
 8009bc6:	bf00      	nop
 8009bc8:	0800c7c8 	.word	0x0800c7c8
 8009bcc:	ffff0001 	.word	0xffff0001

08009bd0 <_fwalk_reent>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	4688      	mov	r8, r1
 8009bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bdc:	2700      	movs	r7, #0
 8009bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be2:	f1b9 0901 	subs.w	r9, r9, #1
 8009be6:	d505      	bpl.n	8009bf4 <_fwalk_reent+0x24>
 8009be8:	6824      	ldr	r4, [r4, #0]
 8009bea:	2c00      	cmp	r4, #0
 8009bec:	d1f7      	bne.n	8009bde <_fwalk_reent+0xe>
 8009bee:	4638      	mov	r0, r7
 8009bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf4:	89ab      	ldrh	r3, [r5, #12]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d907      	bls.n	8009c0a <_fwalk_reent+0x3a>
 8009bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	d003      	beq.n	8009c0a <_fwalk_reent+0x3a>
 8009c02:	4629      	mov	r1, r5
 8009c04:	4630      	mov	r0, r6
 8009c06:	47c0      	blx	r8
 8009c08:	4307      	orrs	r7, r0
 8009c0a:	3568      	adds	r5, #104	; 0x68
 8009c0c:	e7e9      	b.n	8009be2 <_fwalk_reent+0x12>
	...

08009c10 <_localeconv_r>:
 8009c10:	4800      	ldr	r0, [pc, #0]	; (8009c14 <_localeconv_r+0x4>)
 8009c12:	4770      	bx	lr
 8009c14:	20000160 	.word	0x20000160

08009c18 <__retarget_lock_init_recursive>:
 8009c18:	4770      	bx	lr

08009c1a <__retarget_lock_acquire_recursive>:
 8009c1a:	4770      	bx	lr

08009c1c <__retarget_lock_release_recursive>:
 8009c1c:	4770      	bx	lr

08009c1e <memcpy>:
 8009c1e:	440a      	add	r2, r1
 8009c20:	4291      	cmp	r1, r2
 8009c22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009c26:	d100      	bne.n	8009c2a <memcpy+0xc>
 8009c28:	4770      	bx	lr
 8009c2a:	b510      	push	{r4, lr}
 8009c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c34:	4291      	cmp	r1, r2
 8009c36:	d1f9      	bne.n	8009c2c <memcpy+0xe>
 8009c38:	bd10      	pop	{r4, pc}
	...

08009c3c <__malloc_lock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	; (8009c44 <__malloc_lock+0x8>)
 8009c3e:	f7ff bfec 	b.w	8009c1a <__retarget_lock_acquire_recursive>
 8009c42:	bf00      	nop
 8009c44:	2000074c 	.word	0x2000074c

08009c48 <__malloc_unlock>:
 8009c48:	4801      	ldr	r0, [pc, #4]	; (8009c50 <__malloc_unlock+0x8>)
 8009c4a:	f7ff bfe7 	b.w	8009c1c <__retarget_lock_release_recursive>
 8009c4e:	bf00      	nop
 8009c50:	2000074c 	.word	0x2000074c

08009c54 <_Balloc>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Balloc+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7fe faba 	bl	80081d8 <malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6260      	str	r0, [r4, #36]	; 0x24
 8009c68:	b920      	cbnz	r0, 8009c74 <_Balloc+0x20>
 8009c6a:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <_Balloc+0x78>)
 8009c6c:	4818      	ldr	r0, [pc, #96]	; (8009cd0 <_Balloc+0x7c>)
 8009c6e:	2166      	movs	r1, #102	; 0x66
 8009c70:	f000 ff56 	bl	800ab20 <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c7e:	68f3      	ldr	r3, [r6, #12]
 8009c80:	b183      	cbz	r3, 8009ca4 <_Balloc+0x50>
 8009c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c8a:	b9b8      	cbnz	r0, 8009cbc <_Balloc+0x68>
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c92:	1d72      	adds	r2, r6, #5
 8009c94:	0092      	lsls	r2, r2, #2
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fb60 	bl	800a35c <_calloc_r>
 8009c9c:	b160      	cbz	r0, 8009cb8 <_Balloc+0x64>
 8009c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ca2:	e00e      	b.n	8009cc2 <_Balloc+0x6e>
 8009ca4:	2221      	movs	r2, #33	; 0x21
 8009ca6:	2104      	movs	r1, #4
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fb57 	bl	800a35c <_calloc_r>
 8009cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb0:	60f0      	str	r0, [r6, #12]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <_Balloc+0x2e>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	6802      	ldr	r2, [r0, #0]
 8009cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cc8:	e7f7      	b.n	8009cba <_Balloc+0x66>
 8009cca:	bf00      	nop
 8009ccc:	0800c80d 	.word	0x0800c80d
 8009cd0:	0800c8f0 	.word	0x0800c8f0

08009cd4 <_Bfree>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b976      	cbnz	r6, 8009cfc <_Bfree+0x28>
 8009cde:	2010      	movs	r0, #16
 8009ce0:	f7fe fa7a 	bl	80081d8 <malloc>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ce8:	b920      	cbnz	r0, 8009cf4 <_Bfree+0x20>
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <_Bfree+0x3c>)
 8009cec:	4809      	ldr	r0, [pc, #36]	; (8009d14 <_Bfree+0x40>)
 8009cee:	218a      	movs	r1, #138	; 0x8a
 8009cf0:	f000 ff16 	bl	800ab20 <__assert_func>
 8009cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cf8:	6006      	str	r6, [r0, #0]
 8009cfa:	60c6      	str	r6, [r0, #12]
 8009cfc:	b13c      	cbz	r4, 8009d0e <_Bfree+0x3a>
 8009cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d00:	6862      	ldr	r2, [r4, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d08:	6021      	str	r1, [r4, #0]
 8009d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	0800c80d 	.word	0x0800c80d
 8009d14:	0800c8f0 	.word	0x0800c8f0

08009d18 <__multadd>:
 8009d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	690d      	ldr	r5, [r1, #16]
 8009d1e:	4607      	mov	r7, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	461e      	mov	r6, r3
 8009d24:	f101 0c14 	add.w	ip, r1, #20
 8009d28:	2000      	movs	r0, #0
 8009d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009d2e:	b299      	uxth	r1, r3
 8009d30:	fb02 6101 	mla	r1, r2, r1, r6
 8009d34:	0c1e      	lsrs	r6, r3, #16
 8009d36:	0c0b      	lsrs	r3, r1, #16
 8009d38:	fb02 3306 	mla	r3, r2, r6, r3
 8009d3c:	b289      	uxth	r1, r1
 8009d3e:	3001      	adds	r0, #1
 8009d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d44:	4285      	cmp	r5, r0
 8009d46:	f84c 1b04 	str.w	r1, [ip], #4
 8009d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d4e:	dcec      	bgt.n	8009d2a <__multadd+0x12>
 8009d50:	b30e      	cbz	r6, 8009d96 <__multadd+0x7e>
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	dc19      	bgt.n	8009d8c <__multadd+0x74>
 8009d58:	6861      	ldr	r1, [r4, #4]
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	3101      	adds	r1, #1
 8009d5e:	f7ff ff79 	bl	8009c54 <_Balloc>
 8009d62:	4680      	mov	r8, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <__multadd+0x5a>
 8009d66:	4602      	mov	r2, r0
 8009d68:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <__multadd+0x84>)
 8009d6a:	480d      	ldr	r0, [pc, #52]	; (8009da0 <__multadd+0x88>)
 8009d6c:	21b5      	movs	r1, #181	; 0xb5
 8009d6e:	f000 fed7 	bl	800ab20 <__assert_func>
 8009d72:	6922      	ldr	r2, [r4, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	f104 010c 	add.w	r1, r4, #12
 8009d7a:	0092      	lsls	r2, r2, #2
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f7ff ff4e 	bl	8009c1e <memcpy>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4638      	mov	r0, r7
 8009d86:	f7ff ffa5 	bl	8009cd4 <_Bfree>
 8009d8a:	4644      	mov	r4, r8
 8009d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d90:	3501      	adds	r5, #1
 8009d92:	615e      	str	r6, [r3, #20]
 8009d94:	6125      	str	r5, [r4, #16]
 8009d96:	4620      	mov	r0, r4
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	0800c87f 	.word	0x0800c87f
 8009da0:	0800c8f0 	.word	0x0800c8f0

08009da4 <__hi0bits>:
 8009da4:	0c03      	lsrs	r3, r0, #16
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	b9d3      	cbnz	r3, 8009de0 <__hi0bits+0x3c>
 8009daa:	0400      	lsls	r0, r0, #16
 8009dac:	2310      	movs	r3, #16
 8009dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009db2:	bf04      	itt	eq
 8009db4:	0200      	lsleq	r0, r0, #8
 8009db6:	3308      	addeq	r3, #8
 8009db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009dbc:	bf04      	itt	eq
 8009dbe:	0100      	lsleq	r0, r0, #4
 8009dc0:	3304      	addeq	r3, #4
 8009dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dc6:	bf04      	itt	eq
 8009dc8:	0080      	lsleq	r0, r0, #2
 8009dca:	3302      	addeq	r3, #2
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	db05      	blt.n	8009ddc <__hi0bits+0x38>
 8009dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dd4:	f103 0301 	add.w	r3, r3, #1
 8009dd8:	bf08      	it	eq
 8009dda:	2320      	moveq	r3, #32
 8009ddc:	4618      	mov	r0, r3
 8009dde:	4770      	bx	lr
 8009de0:	2300      	movs	r3, #0
 8009de2:	e7e4      	b.n	8009dae <__hi0bits+0xa>

08009de4 <__lo0bits>:
 8009de4:	6803      	ldr	r3, [r0, #0]
 8009de6:	f013 0207 	ands.w	r2, r3, #7
 8009dea:	4601      	mov	r1, r0
 8009dec:	d00b      	beq.n	8009e06 <__lo0bits+0x22>
 8009dee:	07da      	lsls	r2, r3, #31
 8009df0:	d423      	bmi.n	8009e3a <__lo0bits+0x56>
 8009df2:	0798      	lsls	r0, r3, #30
 8009df4:	bf49      	itett	mi
 8009df6:	085b      	lsrmi	r3, r3, #1
 8009df8:	089b      	lsrpl	r3, r3, #2
 8009dfa:	2001      	movmi	r0, #1
 8009dfc:	600b      	strmi	r3, [r1, #0]
 8009dfe:	bf5c      	itt	pl
 8009e00:	600b      	strpl	r3, [r1, #0]
 8009e02:	2002      	movpl	r0, #2
 8009e04:	4770      	bx	lr
 8009e06:	b298      	uxth	r0, r3
 8009e08:	b9a8      	cbnz	r0, 8009e36 <__lo0bits+0x52>
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	b90a      	cbnz	r2, 8009e16 <__lo0bits+0x32>
 8009e12:	3008      	adds	r0, #8
 8009e14:	0a1b      	lsrs	r3, r3, #8
 8009e16:	071a      	lsls	r2, r3, #28
 8009e18:	bf04      	itt	eq
 8009e1a:	091b      	lsreq	r3, r3, #4
 8009e1c:	3004      	addeq	r0, #4
 8009e1e:	079a      	lsls	r2, r3, #30
 8009e20:	bf04      	itt	eq
 8009e22:	089b      	lsreq	r3, r3, #2
 8009e24:	3002      	addeq	r0, #2
 8009e26:	07da      	lsls	r2, r3, #31
 8009e28:	d403      	bmi.n	8009e32 <__lo0bits+0x4e>
 8009e2a:	085b      	lsrs	r3, r3, #1
 8009e2c:	f100 0001 	add.w	r0, r0, #1
 8009e30:	d005      	beq.n	8009e3e <__lo0bits+0x5a>
 8009e32:	600b      	str	r3, [r1, #0]
 8009e34:	4770      	bx	lr
 8009e36:	4610      	mov	r0, r2
 8009e38:	e7e9      	b.n	8009e0e <__lo0bits+0x2a>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	4770      	bx	lr
 8009e3e:	2020      	movs	r0, #32
 8009e40:	4770      	bx	lr
	...

08009e44 <__i2b>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	460c      	mov	r4, r1
 8009e48:	2101      	movs	r1, #1
 8009e4a:	f7ff ff03 	bl	8009c54 <_Balloc>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	b928      	cbnz	r0, 8009e5e <__i2b+0x1a>
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <__i2b+0x24>)
 8009e54:	4805      	ldr	r0, [pc, #20]	; (8009e6c <__i2b+0x28>)
 8009e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e5a:	f000 fe61 	bl	800ab20 <__assert_func>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	6144      	str	r4, [r0, #20]
 8009e62:	6103      	str	r3, [r0, #16]
 8009e64:	bd10      	pop	{r4, pc}
 8009e66:	bf00      	nop
 8009e68:	0800c87f 	.word	0x0800c87f
 8009e6c:	0800c8f0 	.word	0x0800c8f0

08009e70 <__multiply>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	4691      	mov	r9, r2
 8009e76:	690a      	ldr	r2, [r1, #16]
 8009e78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	bfb8      	it	lt
 8009e80:	460b      	movlt	r3, r1
 8009e82:	460c      	mov	r4, r1
 8009e84:	bfbc      	itt	lt
 8009e86:	464c      	movlt	r4, r9
 8009e88:	4699      	movlt	r9, r3
 8009e8a:	6927      	ldr	r7, [r4, #16]
 8009e8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e90:	68a3      	ldr	r3, [r4, #8]
 8009e92:	6861      	ldr	r1, [r4, #4]
 8009e94:	eb07 060a 	add.w	r6, r7, sl
 8009e98:	42b3      	cmp	r3, r6
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	bfb8      	it	lt
 8009e9e:	3101      	addlt	r1, #1
 8009ea0:	f7ff fed8 	bl	8009c54 <_Balloc>
 8009ea4:	b930      	cbnz	r0, 8009eb4 <__multiply+0x44>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	4b44      	ldr	r3, [pc, #272]	; (8009fbc <__multiply+0x14c>)
 8009eaa:	4845      	ldr	r0, [pc, #276]	; (8009fc0 <__multiply+0x150>)
 8009eac:	f240 115d 	movw	r1, #349	; 0x15d
 8009eb0:	f000 fe36 	bl	800ab20 <__assert_func>
 8009eb4:	f100 0514 	add.w	r5, r0, #20
 8009eb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4543      	cmp	r3, r8
 8009ec2:	d321      	bcc.n	8009f08 <__multiply+0x98>
 8009ec4:	f104 0314 	add.w	r3, r4, #20
 8009ec8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ecc:	f109 0314 	add.w	r3, r9, #20
 8009ed0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ed4:	9202      	str	r2, [sp, #8]
 8009ed6:	1b3a      	subs	r2, r7, r4
 8009ed8:	3a15      	subs	r2, #21
 8009eda:	f022 0203 	bic.w	r2, r2, #3
 8009ede:	3204      	adds	r2, #4
 8009ee0:	f104 0115 	add.w	r1, r4, #21
 8009ee4:	428f      	cmp	r7, r1
 8009ee6:	bf38      	it	cc
 8009ee8:	2204      	movcc	r2, #4
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9a02      	ldr	r2, [sp, #8]
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d80c      	bhi.n	8009f0e <__multiply+0x9e>
 8009ef4:	2e00      	cmp	r6, #0
 8009ef6:	dd03      	ble.n	8009f00 <__multiply+0x90>
 8009ef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05a      	beq.n	8009fb6 <__multiply+0x146>
 8009f00:	6106      	str	r6, [r0, #16]
 8009f02:	b005      	add	sp, #20
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	f843 2b04 	str.w	r2, [r3], #4
 8009f0c:	e7d8      	b.n	8009ec0 <__multiply+0x50>
 8009f0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f12:	f1ba 0f00 	cmp.w	sl, #0
 8009f16:	d024      	beq.n	8009f62 <__multiply+0xf2>
 8009f18:	f104 0e14 	add.w	lr, r4, #20
 8009f1c:	46a9      	mov	r9, r5
 8009f1e:	f04f 0c00 	mov.w	ip, #0
 8009f22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f26:	f8d9 1000 	ldr.w	r1, [r9]
 8009f2a:	fa1f fb82 	uxth.w	fp, r2
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f38:	f8d9 2000 	ldr.w	r2, [r9]
 8009f3c:	4461      	add	r1, ip
 8009f3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f42:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f4a:	b289      	uxth	r1, r1
 8009f4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f50:	4577      	cmp	r7, lr
 8009f52:	f849 1b04 	str.w	r1, [r9], #4
 8009f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f5a:	d8e2      	bhi.n	8009f22 <__multiply+0xb2>
 8009f5c:	9a01      	ldr	r2, [sp, #4]
 8009f5e:	f845 c002 	str.w	ip, [r5, r2]
 8009f62:	9a03      	ldr	r2, [sp, #12]
 8009f64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	f1b9 0f00 	cmp.w	r9, #0
 8009f6e:	d020      	beq.n	8009fb2 <__multiply+0x142>
 8009f70:	6829      	ldr	r1, [r5, #0]
 8009f72:	f104 0c14 	add.w	ip, r4, #20
 8009f76:	46ae      	mov	lr, r5
 8009f78:	f04f 0a00 	mov.w	sl, #0
 8009f7c:	f8bc b000 	ldrh.w	fp, [ip]
 8009f80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f84:	fb09 220b 	mla	r2, r9, fp, r2
 8009f88:	4492      	add	sl, r2
 8009f8a:	b289      	uxth	r1, r1
 8009f8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f90:	f84e 1b04 	str.w	r1, [lr], #4
 8009f94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f98:	f8be 1000 	ldrh.w	r1, [lr]
 8009f9c:	0c12      	lsrs	r2, r2, #16
 8009f9e:	fb09 1102 	mla	r1, r9, r2, r1
 8009fa2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009fa6:	4567      	cmp	r7, ip
 8009fa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fac:	d8e6      	bhi.n	8009f7c <__multiply+0x10c>
 8009fae:	9a01      	ldr	r2, [sp, #4]
 8009fb0:	50a9      	str	r1, [r5, r2]
 8009fb2:	3504      	adds	r5, #4
 8009fb4:	e79a      	b.n	8009eec <__multiply+0x7c>
 8009fb6:	3e01      	subs	r6, #1
 8009fb8:	e79c      	b.n	8009ef4 <__multiply+0x84>
 8009fba:	bf00      	nop
 8009fbc:	0800c87f 	.word	0x0800c87f
 8009fc0:	0800c8f0 	.word	0x0800c8f0

08009fc4 <__pow5mult>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	4615      	mov	r5, r2
 8009fca:	f012 0203 	ands.w	r2, r2, #3
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	d007      	beq.n	8009fe4 <__pow5mult+0x20>
 8009fd4:	4c25      	ldr	r4, [pc, #148]	; (800a06c <__pow5mult+0xa8>)
 8009fd6:	3a01      	subs	r2, #1
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fde:	f7ff fe9b 	bl	8009d18 <__multadd>
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	10ad      	asrs	r5, r5, #2
 8009fe6:	d03d      	beq.n	800a064 <__pow5mult+0xa0>
 8009fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fea:	b97c      	cbnz	r4, 800a00c <__pow5mult+0x48>
 8009fec:	2010      	movs	r0, #16
 8009fee:	f7fe f8f3 	bl	80081d8 <malloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ff6:	b928      	cbnz	r0, 800a004 <__pow5mult+0x40>
 8009ff8:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <__pow5mult+0xac>)
 8009ffa:	481e      	ldr	r0, [pc, #120]	; (800a074 <__pow5mult+0xb0>)
 8009ffc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a000:	f000 fd8e 	bl	800ab20 <__assert_func>
 800a004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a008:	6004      	str	r4, [r0, #0]
 800a00a:	60c4      	str	r4, [r0, #12]
 800a00c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a014:	b94c      	cbnz	r4, 800a02a <__pow5mult+0x66>
 800a016:	f240 2171 	movw	r1, #625	; 0x271
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff ff12 	bl	8009e44 <__i2b>
 800a020:	2300      	movs	r3, #0
 800a022:	f8c8 0008 	str.w	r0, [r8, #8]
 800a026:	4604      	mov	r4, r0
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	07eb      	lsls	r3, r5, #31
 800a030:	d50a      	bpl.n	800a048 <__pow5mult+0x84>
 800a032:	4639      	mov	r1, r7
 800a034:	4622      	mov	r2, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff1a 	bl	8009e70 <__multiply>
 800a03c:	4639      	mov	r1, r7
 800a03e:	4680      	mov	r8, r0
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fe47 	bl	8009cd4 <_Bfree>
 800a046:	4647      	mov	r7, r8
 800a048:	106d      	asrs	r5, r5, #1
 800a04a:	d00b      	beq.n	800a064 <__pow5mult+0xa0>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	b938      	cbnz	r0, 800a060 <__pow5mult+0x9c>
 800a050:	4622      	mov	r2, r4
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ff0b 	bl	8009e70 <__multiply>
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f8c0 9000 	str.w	r9, [r0]
 800a060:	4604      	mov	r4, r0
 800a062:	e7e4      	b.n	800a02e <__pow5mult+0x6a>
 800a064:	4638      	mov	r0, r7
 800a066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06a:	bf00      	nop
 800a06c:	0800ca40 	.word	0x0800ca40
 800a070:	0800c80d 	.word	0x0800c80d
 800a074:	0800c8f0 	.word	0x0800c8f0

0800a078 <__lshift>:
 800a078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a07c:	460c      	mov	r4, r1
 800a07e:	6849      	ldr	r1, [r1, #4]
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a086:	68a3      	ldr	r3, [r4, #8]
 800a088:	4607      	mov	r7, r0
 800a08a:	4691      	mov	r9, r2
 800a08c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a090:	f108 0601 	add.w	r6, r8, #1
 800a094:	42b3      	cmp	r3, r6
 800a096:	db0b      	blt.n	800a0b0 <__lshift+0x38>
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff fddb 	bl	8009c54 <_Balloc>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b948      	cbnz	r0, 800a0b6 <__lshift+0x3e>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b2a      	ldr	r3, [pc, #168]	; (800a150 <__lshift+0xd8>)
 800a0a6:	482b      	ldr	r0, [pc, #172]	; (800a154 <__lshift+0xdc>)
 800a0a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0ac:	f000 fd38 	bl	800ab20 <__assert_func>
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	005b      	lsls	r3, r3, #1
 800a0b4:	e7ee      	b.n	800a094 <__lshift+0x1c>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f100 0114 	add.w	r1, r0, #20
 800a0bc:	f100 0210 	add.w	r2, r0, #16
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	4553      	cmp	r3, sl
 800a0c4:	db37      	blt.n	800a136 <__lshift+0xbe>
 800a0c6:	6920      	ldr	r0, [r4, #16]
 800a0c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0cc:	f104 0314 	add.w	r3, r4, #20
 800a0d0:	f019 091f 	ands.w	r9, r9, #31
 800a0d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0dc:	d02f      	beq.n	800a13e <__lshift+0xc6>
 800a0de:	f1c9 0e20 	rsb	lr, r9, #32
 800a0e2:	468a      	mov	sl, r1
 800a0e4:	f04f 0c00 	mov.w	ip, #0
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	fa02 f209 	lsl.w	r2, r2, r9
 800a0ee:	ea42 020c 	orr.w	r2, r2, ip
 800a0f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fa:	4298      	cmp	r0, r3
 800a0fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a100:	d8f2      	bhi.n	800a0e8 <__lshift+0x70>
 800a102:	1b03      	subs	r3, r0, r4
 800a104:	3b15      	subs	r3, #21
 800a106:	f023 0303 	bic.w	r3, r3, #3
 800a10a:	3304      	adds	r3, #4
 800a10c:	f104 0215 	add.w	r2, r4, #21
 800a110:	4290      	cmp	r0, r2
 800a112:	bf38      	it	cc
 800a114:	2304      	movcc	r3, #4
 800a116:	f841 c003 	str.w	ip, [r1, r3]
 800a11a:	f1bc 0f00 	cmp.w	ip, #0
 800a11e:	d001      	beq.n	800a124 <__lshift+0xac>
 800a120:	f108 0602 	add.w	r6, r8, #2
 800a124:	3e01      	subs	r6, #1
 800a126:	4638      	mov	r0, r7
 800a128:	612e      	str	r6, [r5, #16]
 800a12a:	4621      	mov	r1, r4
 800a12c:	f7ff fdd2 	bl	8009cd4 <_Bfree>
 800a130:	4628      	mov	r0, r5
 800a132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a136:	f842 0f04 	str.w	r0, [r2, #4]!
 800a13a:	3301      	adds	r3, #1
 800a13c:	e7c1      	b.n	800a0c2 <__lshift+0x4a>
 800a13e:	3904      	subs	r1, #4
 800a140:	f853 2b04 	ldr.w	r2, [r3], #4
 800a144:	f841 2f04 	str.w	r2, [r1, #4]!
 800a148:	4298      	cmp	r0, r3
 800a14a:	d8f9      	bhi.n	800a140 <__lshift+0xc8>
 800a14c:	e7ea      	b.n	800a124 <__lshift+0xac>
 800a14e:	bf00      	nop
 800a150:	0800c87f 	.word	0x0800c87f
 800a154:	0800c8f0 	.word	0x0800c8f0

0800a158 <__mcmp>:
 800a158:	b530      	push	{r4, r5, lr}
 800a15a:	6902      	ldr	r2, [r0, #16]
 800a15c:	690c      	ldr	r4, [r1, #16]
 800a15e:	1b12      	subs	r2, r2, r4
 800a160:	d10e      	bne.n	800a180 <__mcmp+0x28>
 800a162:	f100 0314 	add.w	r3, r0, #20
 800a166:	3114      	adds	r1, #20
 800a168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a16c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a178:	42a5      	cmp	r5, r4
 800a17a:	d003      	beq.n	800a184 <__mcmp+0x2c>
 800a17c:	d305      	bcc.n	800a18a <__mcmp+0x32>
 800a17e:	2201      	movs	r2, #1
 800a180:	4610      	mov	r0, r2
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	4283      	cmp	r3, r0
 800a186:	d3f3      	bcc.n	800a170 <__mcmp+0x18>
 800a188:	e7fa      	b.n	800a180 <__mcmp+0x28>
 800a18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18e:	e7f7      	b.n	800a180 <__mcmp+0x28>

0800a190 <__mdiff>:
 800a190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a194:	460c      	mov	r4, r1
 800a196:	4606      	mov	r6, r0
 800a198:	4611      	mov	r1, r2
 800a19a:	4620      	mov	r0, r4
 800a19c:	4690      	mov	r8, r2
 800a19e:	f7ff ffdb 	bl	800a158 <__mcmp>
 800a1a2:	1e05      	subs	r5, r0, #0
 800a1a4:	d110      	bne.n	800a1c8 <__mdiff+0x38>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7ff fd53 	bl	8009c54 <_Balloc>
 800a1ae:	b930      	cbnz	r0, 800a1be <__mdiff+0x2e>
 800a1b0:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <__mdiff+0x10c>)
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	f240 2132 	movw	r1, #562	; 0x232
 800a1b8:	4839      	ldr	r0, [pc, #228]	; (800a2a0 <__mdiff+0x110>)
 800a1ba:	f000 fcb1 	bl	800ab20 <__assert_func>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	bfa4      	itt	ge
 800a1ca:	4643      	movge	r3, r8
 800a1cc:	46a0      	movge	r8, r4
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1d4:	bfa6      	itte	ge
 800a1d6:	461c      	movge	r4, r3
 800a1d8:	2500      	movge	r5, #0
 800a1da:	2501      	movlt	r5, #1
 800a1dc:	f7ff fd3a 	bl	8009c54 <_Balloc>
 800a1e0:	b920      	cbnz	r0, 800a1ec <__mdiff+0x5c>
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <__mdiff+0x10c>)
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1ea:	e7e5      	b.n	800a1b8 <__mdiff+0x28>
 800a1ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1f0:	6926      	ldr	r6, [r4, #16]
 800a1f2:	60c5      	str	r5, [r0, #12]
 800a1f4:	f104 0914 	add.w	r9, r4, #20
 800a1f8:	f108 0514 	add.w	r5, r8, #20
 800a1fc:	f100 0e14 	add.w	lr, r0, #20
 800a200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a208:	f108 0210 	add.w	r2, r8, #16
 800a20c:	46f2      	mov	sl, lr
 800a20e:	2100      	movs	r1, #0
 800a210:	f859 3b04 	ldr.w	r3, [r9], #4
 800a214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a218:	fa1f f883 	uxth.w	r8, r3
 800a21c:	fa11 f18b 	uxtah	r1, r1, fp
 800a220:	0c1b      	lsrs	r3, r3, #16
 800a222:	eba1 0808 	sub.w	r8, r1, r8
 800a226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a22a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a22e:	fa1f f888 	uxth.w	r8, r8
 800a232:	1419      	asrs	r1, r3, #16
 800a234:	454e      	cmp	r6, r9
 800a236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a23a:	f84a 3b04 	str.w	r3, [sl], #4
 800a23e:	d8e7      	bhi.n	800a210 <__mdiff+0x80>
 800a240:	1b33      	subs	r3, r6, r4
 800a242:	3b15      	subs	r3, #21
 800a244:	f023 0303 	bic.w	r3, r3, #3
 800a248:	3304      	adds	r3, #4
 800a24a:	3415      	adds	r4, #21
 800a24c:	42a6      	cmp	r6, r4
 800a24e:	bf38      	it	cc
 800a250:	2304      	movcc	r3, #4
 800a252:	441d      	add	r5, r3
 800a254:	4473      	add	r3, lr
 800a256:	469e      	mov	lr, r3
 800a258:	462e      	mov	r6, r5
 800a25a:	4566      	cmp	r6, ip
 800a25c:	d30e      	bcc.n	800a27c <__mdiff+0xec>
 800a25e:	f10c 0203 	add.w	r2, ip, #3
 800a262:	1b52      	subs	r2, r2, r5
 800a264:	f022 0203 	bic.w	r2, r2, #3
 800a268:	3d03      	subs	r5, #3
 800a26a:	45ac      	cmp	ip, r5
 800a26c:	bf38      	it	cc
 800a26e:	2200      	movcc	r2, #0
 800a270:	441a      	add	r2, r3
 800a272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a276:	b17b      	cbz	r3, 800a298 <__mdiff+0x108>
 800a278:	6107      	str	r7, [r0, #16]
 800a27a:	e7a3      	b.n	800a1c4 <__mdiff+0x34>
 800a27c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a280:	fa11 f288 	uxtah	r2, r1, r8
 800a284:	1414      	asrs	r4, r2, #16
 800a286:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a28a:	b292      	uxth	r2, r2
 800a28c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a290:	f84e 2b04 	str.w	r2, [lr], #4
 800a294:	1421      	asrs	r1, r4, #16
 800a296:	e7e0      	b.n	800a25a <__mdiff+0xca>
 800a298:	3f01      	subs	r7, #1
 800a29a:	e7ea      	b.n	800a272 <__mdiff+0xe2>
 800a29c:	0800c87f 	.word	0x0800c87f
 800a2a0:	0800c8f0 	.word	0x0800c8f0

0800a2a4 <__d2b>:
 800a2a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	ec57 6b10 	vmov	r6, r7, d0
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	f7ff fccf 	bl	8009c54 <_Balloc>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	b930      	cbnz	r0, 800a2c8 <__d2b+0x24>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	4b25      	ldr	r3, [pc, #148]	; (800a354 <__d2b+0xb0>)
 800a2be:	4826      	ldr	r0, [pc, #152]	; (800a358 <__d2b+0xb4>)
 800a2c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a2c4:	f000 fc2c 	bl	800ab20 <__assert_func>
 800a2c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2d0:	bb35      	cbnz	r5, 800a320 <__d2b+0x7c>
 800a2d2:	2e00      	cmp	r6, #0
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	d028      	beq.n	800a32a <__d2b+0x86>
 800a2d8:	4668      	mov	r0, sp
 800a2da:	9600      	str	r6, [sp, #0]
 800a2dc:	f7ff fd82 	bl	8009de4 <__lo0bits>
 800a2e0:	9900      	ldr	r1, [sp, #0]
 800a2e2:	b300      	cbz	r0, 800a326 <__d2b+0x82>
 800a2e4:	9a01      	ldr	r2, [sp, #4]
 800a2e6:	f1c0 0320 	rsb	r3, r0, #32
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	430b      	orrs	r3, r1
 800a2f0:	40c2      	lsrs	r2, r0
 800a2f2:	6163      	str	r3, [r4, #20]
 800a2f4:	9201      	str	r2, [sp, #4]
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	61a3      	str	r3, [r4, #24]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	2202      	movne	r2, #2
 800a300:	2201      	moveq	r2, #1
 800a302:	6122      	str	r2, [r4, #16]
 800a304:	b1d5      	cbz	r5, 800a33c <__d2b+0x98>
 800a306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a30a:	4405      	add	r5, r0
 800a30c:	f8c9 5000 	str.w	r5, [r9]
 800a310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a314:	f8c8 0000 	str.w	r0, [r8]
 800a318:	4620      	mov	r0, r4
 800a31a:	b003      	add	sp, #12
 800a31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a324:	e7d5      	b.n	800a2d2 <__d2b+0x2e>
 800a326:	6161      	str	r1, [r4, #20]
 800a328:	e7e5      	b.n	800a2f6 <__d2b+0x52>
 800a32a:	a801      	add	r0, sp, #4
 800a32c:	f7ff fd5a 	bl	8009de4 <__lo0bits>
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	6163      	str	r3, [r4, #20]
 800a334:	2201      	movs	r2, #1
 800a336:	6122      	str	r2, [r4, #16]
 800a338:	3020      	adds	r0, #32
 800a33a:	e7e3      	b.n	800a304 <__d2b+0x60>
 800a33c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a344:	f8c9 0000 	str.w	r0, [r9]
 800a348:	6918      	ldr	r0, [r3, #16]
 800a34a:	f7ff fd2b 	bl	8009da4 <__hi0bits>
 800a34e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a352:	e7df      	b.n	800a314 <__d2b+0x70>
 800a354:	0800c87f 	.word	0x0800c87f
 800a358:	0800c8f0 	.word	0x0800c8f0

0800a35c <_calloc_r>:
 800a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35e:	fba1 2402 	umull	r2, r4, r1, r2
 800a362:	b94c      	cbnz	r4, 800a378 <_calloc_r+0x1c>
 800a364:	4611      	mov	r1, r2
 800a366:	9201      	str	r2, [sp, #4]
 800a368:	f7fd ffba 	bl	80082e0 <_malloc_r>
 800a36c:	9a01      	ldr	r2, [sp, #4]
 800a36e:	4605      	mov	r5, r0
 800a370:	b930      	cbnz	r0, 800a380 <_calloc_r+0x24>
 800a372:	4628      	mov	r0, r5
 800a374:	b003      	add	sp, #12
 800a376:	bd30      	pop	{r4, r5, pc}
 800a378:	220c      	movs	r2, #12
 800a37a:	6002      	str	r2, [r0, #0]
 800a37c:	2500      	movs	r5, #0
 800a37e:	e7f8      	b.n	800a372 <_calloc_r+0x16>
 800a380:	4621      	mov	r1, r4
 800a382:	f7fd ff39 	bl	80081f8 <memset>
 800a386:	e7f4      	b.n	800a372 <_calloc_r+0x16>

0800a388 <__ssputs_r>:
 800a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	688e      	ldr	r6, [r1, #8]
 800a38e:	429e      	cmp	r6, r3
 800a390:	4682      	mov	sl, r0
 800a392:	460c      	mov	r4, r1
 800a394:	4690      	mov	r8, r2
 800a396:	461f      	mov	r7, r3
 800a398:	d838      	bhi.n	800a40c <__ssputs_r+0x84>
 800a39a:	898a      	ldrh	r2, [r1, #12]
 800a39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a0:	d032      	beq.n	800a408 <__ssputs_r+0x80>
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	6909      	ldr	r1, [r1, #16]
 800a3a6:	eba5 0901 	sub.w	r9, r5, r1
 800a3aa:	6965      	ldr	r5, [r4, #20]
 800a3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	444b      	add	r3, r9
 800a3b8:	106d      	asrs	r5, r5, #1
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	bf38      	it	cc
 800a3be:	461d      	movcc	r5, r3
 800a3c0:	0553      	lsls	r3, r2, #21
 800a3c2:	d531      	bpl.n	800a428 <__ssputs_r+0xa0>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7fd ff8b 	bl	80082e0 <_malloc_r>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	b950      	cbnz	r0, 800a3e4 <__ssputs_r+0x5c>
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	f8ca 3000 	str.w	r3, [sl]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e4:	6921      	ldr	r1, [r4, #16]
 800a3e6:	464a      	mov	r2, r9
 800a3e8:	f7ff fc19 	bl	8009c1e <memcpy>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	6126      	str	r6, [r4, #16]
 800a3fa:	6165      	str	r5, [r4, #20]
 800a3fc:	444e      	add	r6, r9
 800a3fe:	eba5 0509 	sub.w	r5, r5, r9
 800a402:	6026      	str	r6, [r4, #0]
 800a404:	60a5      	str	r5, [r4, #8]
 800a406:	463e      	mov	r6, r7
 800a408:	42be      	cmp	r6, r7
 800a40a:	d900      	bls.n	800a40e <__ssputs_r+0x86>
 800a40c:	463e      	mov	r6, r7
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	4632      	mov	r2, r6
 800a412:	4641      	mov	r1, r8
 800a414:	f000 fd10 	bl	800ae38 <memmove>
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	1b9b      	subs	r3, r3, r6
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	4433      	add	r3, r6
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	2000      	movs	r0, #0
 800a426:	e7db      	b.n	800a3e0 <__ssputs_r+0x58>
 800a428:	462a      	mov	r2, r5
 800a42a:	f000 fd1f 	bl	800ae6c <_realloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d1e1      	bne.n	800a3f8 <__ssputs_r+0x70>
 800a434:	6921      	ldr	r1, [r4, #16]
 800a436:	4650      	mov	r0, sl
 800a438:	f7fd fee6 	bl	8008208 <_free_r>
 800a43c:	e7c7      	b.n	800a3ce <__ssputs_r+0x46>
	...

0800a440 <_svfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4698      	mov	r8, r3
 800a446:	898b      	ldrh	r3, [r1, #12]
 800a448:	061b      	lsls	r3, r3, #24
 800a44a:	b09d      	sub	sp, #116	; 0x74
 800a44c:	4607      	mov	r7, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	4614      	mov	r4, r2
 800a452:	d50e      	bpl.n	800a472 <_svfiprintf_r+0x32>
 800a454:	690b      	ldr	r3, [r1, #16]
 800a456:	b963      	cbnz	r3, 800a472 <_svfiprintf_r+0x32>
 800a458:	2140      	movs	r1, #64	; 0x40
 800a45a:	f7fd ff41 	bl	80082e0 <_malloc_r>
 800a45e:	6028      	str	r0, [r5, #0]
 800a460:	6128      	str	r0, [r5, #16]
 800a462:	b920      	cbnz	r0, 800a46e <_svfiprintf_r+0x2e>
 800a464:	230c      	movs	r3, #12
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a46c:	e0d1      	b.n	800a612 <_svfiprintf_r+0x1d2>
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	616b      	str	r3, [r5, #20]
 800a472:	2300      	movs	r3, #0
 800a474:	9309      	str	r3, [sp, #36]	; 0x24
 800a476:	2320      	movs	r3, #32
 800a478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a480:	2330      	movs	r3, #48	; 0x30
 800a482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a62c <_svfiprintf_r+0x1ec>
 800a486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48a:	f04f 0901 	mov.w	r9, #1
 800a48e:	4623      	mov	r3, r4
 800a490:	469a      	mov	sl, r3
 800a492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a496:	b10a      	cbz	r2, 800a49c <_svfiprintf_r+0x5c>
 800a498:	2a25      	cmp	r2, #37	; 0x25
 800a49a:	d1f9      	bne.n	800a490 <_svfiprintf_r+0x50>
 800a49c:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a0:	d00b      	beq.n	800a4ba <_svfiprintf_r+0x7a>
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff ff6d 	bl	800a388 <__ssputs_r>
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f000 80aa 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b6:	445a      	add	r2, fp
 800a4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 80a2 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ce:	f10a 0a01 	add.w	sl, sl, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	9307      	str	r3, [sp, #28]
 800a4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4da:	931a      	str	r3, [sp, #104]	; 0x68
 800a4dc:	4654      	mov	r4, sl
 800a4de:	2205      	movs	r2, #5
 800a4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e4:	4851      	ldr	r0, [pc, #324]	; (800a62c <_svfiprintf_r+0x1ec>)
 800a4e6:	f7f5 fe7b 	bl	80001e0 <memchr>
 800a4ea:	9a04      	ldr	r2, [sp, #16]
 800a4ec:	b9d8      	cbnz	r0, 800a526 <_svfiprintf_r+0xe6>
 800a4ee:	06d0      	lsls	r0, r2, #27
 800a4f0:	bf44      	itt	mi
 800a4f2:	2320      	movmi	r3, #32
 800a4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f8:	0711      	lsls	r1, r2, #28
 800a4fa:	bf44      	itt	mi
 800a4fc:	232b      	movmi	r3, #43	; 0x2b
 800a4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a502:	f89a 3000 	ldrb.w	r3, [sl]
 800a506:	2b2a      	cmp	r3, #42	; 0x2a
 800a508:	d015      	beq.n	800a536 <_svfiprintf_r+0xf6>
 800a50a:	9a07      	ldr	r2, [sp, #28]
 800a50c:	4654      	mov	r4, sl
 800a50e:	2000      	movs	r0, #0
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	4621      	mov	r1, r4
 800a516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51a:	3b30      	subs	r3, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d94e      	bls.n	800a5be <_svfiprintf_r+0x17e>
 800a520:	b1b0      	cbz	r0, 800a550 <_svfiprintf_r+0x110>
 800a522:	9207      	str	r2, [sp, #28]
 800a524:	e014      	b.n	800a550 <_svfiprintf_r+0x110>
 800a526:	eba0 0308 	sub.w	r3, r0, r8
 800a52a:	fa09 f303 	lsl.w	r3, r9, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	46a2      	mov	sl, r4
 800a534:	e7d2      	b.n	800a4dc <_svfiprintf_r+0x9c>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	1d19      	adds	r1, r3, #4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	9103      	str	r1, [sp, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfbb      	ittet	lt
 800a542:	425b      	neglt	r3, r3
 800a544:	f042 0202 	orrlt.w	r2, r2, #2
 800a548:	9307      	strge	r3, [sp, #28]
 800a54a:	9307      	strlt	r3, [sp, #28]
 800a54c:	bfb8      	it	lt
 800a54e:	9204      	strlt	r2, [sp, #16]
 800a550:	7823      	ldrb	r3, [r4, #0]
 800a552:	2b2e      	cmp	r3, #46	; 0x2e
 800a554:	d10c      	bne.n	800a570 <_svfiprintf_r+0x130>
 800a556:	7863      	ldrb	r3, [r4, #1]
 800a558:	2b2a      	cmp	r3, #42	; 0x2a
 800a55a:	d135      	bne.n	800a5c8 <_svfiprintf_r+0x188>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	1d1a      	adds	r2, r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	9203      	str	r2, [sp, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfb8      	it	lt
 800a568:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a56c:	3402      	adds	r4, #2
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a63c <_svfiprintf_r+0x1fc>
 800a574:	7821      	ldrb	r1, [r4, #0]
 800a576:	2203      	movs	r2, #3
 800a578:	4650      	mov	r0, sl
 800a57a:	f7f5 fe31 	bl	80001e0 <memchr>
 800a57e:	b140      	cbz	r0, 800a592 <_svfiprintf_r+0x152>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	eba0 000a 	sub.w	r0, r0, sl
 800a586:	fa03 f000 	lsl.w	r0, r3, r0
 800a58a:	9b04      	ldr	r3, [sp, #16]
 800a58c:	4303      	orrs	r3, r0
 800a58e:	3401      	adds	r4, #1
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a596:	4826      	ldr	r0, [pc, #152]	; (800a630 <_svfiprintf_r+0x1f0>)
 800a598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59c:	2206      	movs	r2, #6
 800a59e:	f7f5 fe1f 	bl	80001e0 <memchr>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d038      	beq.n	800a618 <_svfiprintf_r+0x1d8>
 800a5a6:	4b23      	ldr	r3, [pc, #140]	; (800a634 <_svfiprintf_r+0x1f4>)
 800a5a8:	bb1b      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x1b2>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	f023 0307 	bic.w	r3, r3, #7
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	4433      	add	r3, r6
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	e767      	b.n	800a48e <_svfiprintf_r+0x4e>
 800a5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e7a5      	b.n	800a514 <_svfiprintf_r+0xd4>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	3401      	adds	r4, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f04f 0c0a 	mov.w	ip, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5da:	3a30      	subs	r2, #48	; 0x30
 800a5dc:	2a09      	cmp	r2, #9
 800a5de:	d903      	bls.n	800a5e8 <_svfiprintf_r+0x1a8>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0c5      	beq.n	800a570 <_svfiprintf_r+0x130>
 800a5e4:	9105      	str	r1, [sp, #20]
 800a5e6:	e7c3      	b.n	800a570 <_svfiprintf_r+0x130>
 800a5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e7f0      	b.n	800a5d4 <_svfiprintf_r+0x194>
 800a5f2:	ab03      	add	r3, sp, #12
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a5fa:	a904      	add	r1, sp, #16
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f7fd ff83 	bl	8008508 <_printf_float>
 800a602:	1c42      	adds	r2, r0, #1
 800a604:	4606      	mov	r6, r0
 800a606:	d1d6      	bne.n	800a5b6 <_svfiprintf_r+0x176>
 800a608:	89ab      	ldrh	r3, [r5, #12]
 800a60a:	065b      	lsls	r3, r3, #25
 800a60c:	f53f af2c 	bmi.w	800a468 <_svfiprintf_r+0x28>
 800a610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a612:	b01d      	add	sp, #116	; 0x74
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	462a      	mov	r2, r5
 800a61e:	4b06      	ldr	r3, [pc, #24]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	4638      	mov	r0, r7
 800a624:	f7fe fa14 	bl	8008a50 <_printf_i>
 800a628:	e7eb      	b.n	800a602 <_svfiprintf_r+0x1c2>
 800a62a:	bf00      	nop
 800a62c:	0800ca4c 	.word	0x0800ca4c
 800a630:	0800ca56 	.word	0x0800ca56
 800a634:	08008509 	.word	0x08008509
 800a638:	0800a389 	.word	0x0800a389
 800a63c:	0800ca52 	.word	0x0800ca52

0800a640 <__sfputc_r>:
 800a640:	6893      	ldr	r3, [r2, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	b410      	push	{r4}
 800a648:	6093      	str	r3, [r2, #8]
 800a64a:	da08      	bge.n	800a65e <__sfputc_r+0x1e>
 800a64c:	6994      	ldr	r4, [r2, #24]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	db01      	blt.n	800a656 <__sfputc_r+0x16>
 800a652:	290a      	cmp	r1, #10
 800a654:	d103      	bne.n	800a65e <__sfputc_r+0x1e>
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	f000 b98f 	b.w	800a97c <__swbuf_r>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	1c58      	adds	r0, r3, #1
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	7019      	strb	r1, [r3, #0]
 800a666:	4608      	mov	r0, r1
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <__sfputs_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	4614      	mov	r4, r2
 800a676:	18d5      	adds	r5, r2, r3
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d101      	bne.n	800a680 <__sfputs_r+0x12>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e007      	b.n	800a690 <__sfputs_r+0x22>
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	463a      	mov	r2, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ffda 	bl	800a640 <__sfputc_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d1f3      	bne.n	800a678 <__sfputs_r+0xa>
 800a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a694 <_vfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460d      	mov	r5, r1
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4614      	mov	r4, r2
 800a69e:	4698      	mov	r8, r3
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_vfiprintf_r+0x18>
 800a6a4:	6983      	ldr	r3, [r0, #24]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <_vfiprintf_r+0x18>
 800a6a8:	f7ff fa14 	bl	8009ad4 <__sinit>
 800a6ac:	4b89      	ldr	r3, [pc, #548]	; (800a8d4 <_vfiprintf_r+0x240>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	d11b      	bne.n	800a6ea <_vfiprintf_r+0x56>
 800a6b2:	6875      	ldr	r5, [r6, #4]
 800a6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b6:	07d9      	lsls	r1, r3, #31
 800a6b8:	d405      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	059a      	lsls	r2, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c2:	f7ff faaa 	bl	8009c1a <__retarget_lock_acquire_recursive>
 800a6c6:	89ab      	ldrh	r3, [r5, #12]
 800a6c8:	071b      	lsls	r3, r3, #28
 800a6ca:	d501      	bpl.n	800a6d0 <_vfiprintf_r+0x3c>
 800a6cc:	692b      	ldr	r3, [r5, #16]
 800a6ce:	b9eb      	cbnz	r3, 800a70c <_vfiprintf_r+0x78>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 f9b6 	bl	800aa44 <__swsetup_r>
 800a6d8:	b1c0      	cbz	r0, 800a70c <_vfiprintf_r+0x78>
 800a6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6dc:	07dc      	lsls	r4, r3, #31
 800a6de:	d50e      	bpl.n	800a6fe <_vfiprintf_r+0x6a>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6e4:	b01d      	add	sp, #116	; 0x74
 800a6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ea:	4b7b      	ldr	r3, [pc, #492]	; (800a8d8 <_vfiprintf_r+0x244>)
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d101      	bne.n	800a6f4 <_vfiprintf_r+0x60>
 800a6f0:	68b5      	ldr	r5, [r6, #8]
 800a6f2:	e7df      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6f4:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <_vfiprintf_r+0x248>)
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	bf08      	it	eq
 800a6fa:	68f5      	ldreq	r5, [r6, #12]
 800a6fc:	e7da      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4ed      	bmi.n	800a6e0 <_vfiprintf_r+0x4c>
 800a704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a706:	f7ff fa89 	bl	8009c1c <__retarget_lock_release_recursive>
 800a70a:	e7e9      	b.n	800a6e0 <_vfiprintf_r+0x4c>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	2320      	movs	r3, #32
 800a712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a716:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71a:	2330      	movs	r3, #48	; 0x30
 800a71c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e0 <_vfiprintf_r+0x24c>
 800a720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	4623      	mov	r3, r4
 800a72a:	469a      	mov	sl, r3
 800a72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a730:	b10a      	cbz	r2, 800a736 <_vfiprintf_r+0xa2>
 800a732:	2a25      	cmp	r2, #37	; 0x25
 800a734:	d1f9      	bne.n	800a72a <_vfiprintf_r+0x96>
 800a736:	ebba 0b04 	subs.w	fp, sl, r4
 800a73a:	d00b      	beq.n	800a754 <_vfiprintf_r+0xc0>
 800a73c:	465b      	mov	r3, fp
 800a73e:	4622      	mov	r2, r4
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ff93 	bl	800a66e <__sfputs_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	f000 80aa 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a750:	445a      	add	r2, fp
 800a752:	9209      	str	r2, [sp, #36]	; 0x24
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a2 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a75e:	2300      	movs	r3, #0
 800a760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a768:	f10a 0a01 	add.w	sl, sl, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a774:	931a      	str	r3, [sp, #104]	; 0x68
 800a776:	4654      	mov	r4, sl
 800a778:	2205      	movs	r2, #5
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4858      	ldr	r0, [pc, #352]	; (800a8e0 <_vfiprintf_r+0x24c>)
 800a780:	f7f5 fd2e 	bl	80001e0 <memchr>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	b9d8      	cbnz	r0, 800a7c0 <_vfiprintf_r+0x12c>
 800a788:	06d1      	lsls	r1, r2, #27
 800a78a:	bf44      	itt	mi
 800a78c:	2320      	movmi	r3, #32
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	0713      	lsls	r3, r2, #28
 800a794:	bf44      	itt	mi
 800a796:	232b      	movmi	r3, #43	; 0x2b
 800a798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a2:	d015      	beq.n	800a7d0 <_vfiprintf_r+0x13c>
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b4:	3b30      	subs	r3, #48	; 0x30
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d94e      	bls.n	800a858 <_vfiprintf_r+0x1c4>
 800a7ba:	b1b0      	cbz	r0, 800a7ea <_vfiprintf_r+0x156>
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	e014      	b.n	800a7ea <_vfiprintf_r+0x156>
 800a7c0:	eba0 0308 	sub.w	r3, r0, r8
 800a7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	46a2      	mov	sl, r4
 800a7ce:	e7d2      	b.n	800a776 <_vfiprintf_r+0xe2>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbb      	ittet	lt
 800a7dc:	425b      	neglt	r3, r3
 800a7de:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e2:	9307      	strge	r3, [sp, #28]
 800a7e4:	9307      	strlt	r3, [sp, #28]
 800a7e6:	bfb8      	it	lt
 800a7e8:	9204      	strlt	r2, [sp, #16]
 800a7ea:	7823      	ldrb	r3, [r4, #0]
 800a7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ee:	d10c      	bne.n	800a80a <_vfiprintf_r+0x176>
 800a7f0:	7863      	ldrb	r3, [r4, #1]
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	d135      	bne.n	800a862 <_vfiprintf_r+0x1ce>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9203      	str	r2, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfb8      	it	lt
 800a802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a806:	3402      	adds	r4, #2
 800a808:	9305      	str	r3, [sp, #20]
 800a80a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f0 <_vfiprintf_r+0x25c>
 800a80e:	7821      	ldrb	r1, [r4, #0]
 800a810:	2203      	movs	r2, #3
 800a812:	4650      	mov	r0, sl
 800a814:	f7f5 fce4 	bl	80001e0 <memchr>
 800a818:	b140      	cbz	r0, 800a82c <_vfiprintf_r+0x198>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	eba0 000a 	sub.w	r0, r0, sl
 800a820:	fa03 f000 	lsl.w	r0, r3, r0
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	4303      	orrs	r3, r0
 800a828:	3401      	adds	r4, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	482c      	ldr	r0, [pc, #176]	; (800a8e4 <_vfiprintf_r+0x250>)
 800a832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a836:	2206      	movs	r2, #6
 800a838:	f7f5 fcd2 	bl	80001e0 <memchr>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d03f      	beq.n	800a8c0 <_vfiprintf_r+0x22c>
 800a840:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <_vfiprintf_r+0x254>)
 800a842:	bb1b      	cbnz	r3, 800a88c <_vfiprintf_r+0x1f8>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	3307      	adds	r3, #7
 800a848:	f023 0307 	bic.w	r3, r3, #7
 800a84c:	3308      	adds	r3, #8
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	443b      	add	r3, r7
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
 800a856:	e767      	b.n	800a728 <_vfiprintf_r+0x94>
 800a858:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85c:	460c      	mov	r4, r1
 800a85e:	2001      	movs	r0, #1
 800a860:	e7a5      	b.n	800a7ae <_vfiprintf_r+0x11a>
 800a862:	2300      	movs	r3, #0
 800a864:	3401      	adds	r4, #1
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	4619      	mov	r1, r3
 800a86a:	f04f 0c0a 	mov.w	ip, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a874:	3a30      	subs	r2, #48	; 0x30
 800a876:	2a09      	cmp	r2, #9
 800a878:	d903      	bls.n	800a882 <_vfiprintf_r+0x1ee>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0c5      	beq.n	800a80a <_vfiprintf_r+0x176>
 800a87e:	9105      	str	r1, [sp, #20]
 800a880:	e7c3      	b.n	800a80a <_vfiprintf_r+0x176>
 800a882:	fb0c 2101 	mla	r1, ip, r1, r2
 800a886:	4604      	mov	r4, r0
 800a888:	2301      	movs	r3, #1
 800a88a:	e7f0      	b.n	800a86e <_vfiprintf_r+0x1da>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <_vfiprintf_r+0x258>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4630      	mov	r0, r6
 800a898:	f7fd fe36 	bl	8008508 <_printf_float>
 800a89c:	4607      	mov	r7, r0
 800a89e:	1c78      	adds	r0, r7, #1
 800a8a0:	d1d6      	bne.n	800a850 <_vfiprintf_r+0x1bc>
 800a8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a4:	07d9      	lsls	r1, r3, #31
 800a8a6:	d405      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	059a      	lsls	r2, r3, #22
 800a8ac:	d402      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b0:	f7ff f9b4 	bl	8009c1c <__retarget_lock_release_recursive>
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	065b      	lsls	r3, r3, #25
 800a8b8:	f53f af12 	bmi.w	800a6e0 <_vfiprintf_r+0x4c>
 800a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8be:	e711      	b.n	800a6e4 <_vfiprintf_r+0x50>
 800a8c0:	ab03      	add	r3, sp, #12
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <_vfiprintf_r+0x258>)
 800a8c8:	a904      	add	r1, sp, #16
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f7fe f8c0 	bl	8008a50 <_printf_i>
 800a8d0:	e7e4      	b.n	800a89c <_vfiprintf_r+0x208>
 800a8d2:	bf00      	nop
 800a8d4:	0800c8b0 	.word	0x0800c8b0
 800a8d8:	0800c8d0 	.word	0x0800c8d0
 800a8dc:	0800c890 	.word	0x0800c890
 800a8e0:	0800ca4c 	.word	0x0800ca4c
 800a8e4:	0800ca56 	.word	0x0800ca56
 800a8e8:	08008509 	.word	0x08008509
 800a8ec:	0800a66f 	.word	0x0800a66f
 800a8f0:	0800ca52 	.word	0x0800ca52

0800a8f4 <__sread>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	f000 fae6 	bl	800aecc <_read_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	bfab      	itete	ge
 800a904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a906:	89a3      	ldrhlt	r3, [r4, #12]
 800a908:	181b      	addge	r3, r3, r0
 800a90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a90e:	bfac      	ite	ge
 800a910:	6563      	strge	r3, [r4, #84]	; 0x54
 800a912:	81a3      	strhlt	r3, [r4, #12]
 800a914:	bd10      	pop	{r4, pc}

0800a916 <__swrite>:
 800a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	461f      	mov	r7, r3
 800a91c:	898b      	ldrh	r3, [r1, #12]
 800a91e:	05db      	lsls	r3, r3, #23
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	4616      	mov	r6, r2
 800a926:	d505      	bpl.n	800a934 <__swrite+0x1e>
 800a928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92c:	2302      	movs	r3, #2
 800a92e:	2200      	movs	r2, #0
 800a930:	f000 f9f8 	bl	800ad24 <_lseek_r>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	4632      	mov	r2, r6
 800a942:	463b      	mov	r3, r7
 800a944:	4628      	mov	r0, r5
 800a946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	f000 b869 	b.w	800aa20 <_write_r>

0800a94e <__sseek>:
 800a94e:	b510      	push	{r4, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a956:	f000 f9e5 	bl	800ad24 <_lseek_r>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	bf15      	itete	ne
 800a960:	6560      	strne	r0, [r4, #84]	; 0x54
 800a962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a96a:	81a3      	strheq	r3, [r4, #12]
 800a96c:	bf18      	it	ne
 800a96e:	81a3      	strhne	r3, [r4, #12]
 800a970:	bd10      	pop	{r4, pc}

0800a972 <__sclose>:
 800a972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a976:	f000 b8f1 	b.w	800ab5c <_close_r>
	...

0800a97c <__swbuf_r>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	460e      	mov	r6, r1
 800a980:	4614      	mov	r4, r2
 800a982:	4605      	mov	r5, r0
 800a984:	b118      	cbz	r0, 800a98e <__swbuf_r+0x12>
 800a986:	6983      	ldr	r3, [r0, #24]
 800a988:	b90b      	cbnz	r3, 800a98e <__swbuf_r+0x12>
 800a98a:	f7ff f8a3 	bl	8009ad4 <__sinit>
 800a98e:	4b21      	ldr	r3, [pc, #132]	; (800aa14 <__swbuf_r+0x98>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d12b      	bne.n	800a9ec <__swbuf_r+0x70>
 800a994:	686c      	ldr	r4, [r5, #4]
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	60a3      	str	r3, [r4, #8]
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	071a      	lsls	r2, r3, #28
 800a99e:	d52f      	bpl.n	800aa00 <__swbuf_r+0x84>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	b36b      	cbz	r3, 800aa00 <__swbuf_r+0x84>
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	6820      	ldr	r0, [r4, #0]
 800a9a8:	1ac0      	subs	r0, r0, r3
 800a9aa:	6963      	ldr	r3, [r4, #20]
 800a9ac:	b2f6      	uxtb	r6, r6
 800a9ae:	4283      	cmp	r3, r0
 800a9b0:	4637      	mov	r7, r6
 800a9b2:	dc04      	bgt.n	800a9be <__swbuf_r+0x42>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 f966 	bl	800ac88 <_fflush_r>
 800a9bc:	bb30      	cbnz	r0, 800aa0c <__swbuf_r+0x90>
 800a9be:	68a3      	ldr	r3, [r4, #8]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	60a3      	str	r3, [r4, #8]
 800a9c4:	6823      	ldr	r3, [r4, #0]
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	6022      	str	r2, [r4, #0]
 800a9ca:	701e      	strb	r6, [r3, #0]
 800a9cc:	6963      	ldr	r3, [r4, #20]
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	4283      	cmp	r3, r0
 800a9d2:	d004      	beq.n	800a9de <__swbuf_r+0x62>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	07db      	lsls	r3, r3, #31
 800a9d8:	d506      	bpl.n	800a9e8 <__swbuf_r+0x6c>
 800a9da:	2e0a      	cmp	r6, #10
 800a9dc:	d104      	bne.n	800a9e8 <__swbuf_r+0x6c>
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 f951 	bl	800ac88 <_fflush_r>
 800a9e6:	b988      	cbnz	r0, 800aa0c <__swbuf_r+0x90>
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <__swbuf_r+0x9c>)
 800a9ee:	429c      	cmp	r4, r3
 800a9f0:	d101      	bne.n	800a9f6 <__swbuf_r+0x7a>
 800a9f2:	68ac      	ldr	r4, [r5, #8]
 800a9f4:	e7cf      	b.n	800a996 <__swbuf_r+0x1a>
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <__swbuf_r+0xa0>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	bf08      	it	eq
 800a9fc:	68ec      	ldreq	r4, [r5, #12]
 800a9fe:	e7ca      	b.n	800a996 <__swbuf_r+0x1a>
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f81e 	bl	800aa44 <__swsetup_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d0cb      	beq.n	800a9a4 <__swbuf_r+0x28>
 800aa0c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa10:	e7ea      	b.n	800a9e8 <__swbuf_r+0x6c>
 800aa12:	bf00      	nop
 800aa14:	0800c8b0 	.word	0x0800c8b0
 800aa18:	0800c8d0 	.word	0x0800c8d0
 800aa1c:	0800c890 	.word	0x0800c890

0800aa20 <_write_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d07      	ldr	r5, [pc, #28]	; (800aa40 <_write_r+0x20>)
 800aa24:	4604      	mov	r4, r0
 800aa26:	4608      	mov	r0, r1
 800aa28:	4611      	mov	r1, r2
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	602a      	str	r2, [r5, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f7f7 f971 	bl	8001d16 <_write>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_write_r+0x1e>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_write_r+0x1e>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	20000750 	.word	0x20000750

0800aa44 <__swsetup_r>:
 800aa44:	4b32      	ldr	r3, [pc, #200]	; (800ab10 <__swsetup_r+0xcc>)
 800aa46:	b570      	push	{r4, r5, r6, lr}
 800aa48:	681d      	ldr	r5, [r3, #0]
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	b125      	cbz	r5, 800aa5a <__swsetup_r+0x16>
 800aa50:	69ab      	ldr	r3, [r5, #24]
 800aa52:	b913      	cbnz	r3, 800aa5a <__swsetup_r+0x16>
 800aa54:	4628      	mov	r0, r5
 800aa56:	f7ff f83d 	bl	8009ad4 <__sinit>
 800aa5a:	4b2e      	ldr	r3, [pc, #184]	; (800ab14 <__swsetup_r+0xd0>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	d10f      	bne.n	800aa80 <__swsetup_r+0x3c>
 800aa60:	686c      	ldr	r4, [r5, #4]
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa68:	0719      	lsls	r1, r3, #28
 800aa6a:	d42c      	bmi.n	800aac6 <__swsetup_r+0x82>
 800aa6c:	06dd      	lsls	r5, r3, #27
 800aa6e:	d411      	bmi.n	800aa94 <__swsetup_r+0x50>
 800aa70:	2309      	movs	r3, #9
 800aa72:	6033      	str	r3, [r6, #0]
 800aa74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa7e:	e03e      	b.n	800aafe <__swsetup_r+0xba>
 800aa80:	4b25      	ldr	r3, [pc, #148]	; (800ab18 <__swsetup_r+0xd4>)
 800aa82:	429c      	cmp	r4, r3
 800aa84:	d101      	bne.n	800aa8a <__swsetup_r+0x46>
 800aa86:	68ac      	ldr	r4, [r5, #8]
 800aa88:	e7eb      	b.n	800aa62 <__swsetup_r+0x1e>
 800aa8a:	4b24      	ldr	r3, [pc, #144]	; (800ab1c <__swsetup_r+0xd8>)
 800aa8c:	429c      	cmp	r4, r3
 800aa8e:	bf08      	it	eq
 800aa90:	68ec      	ldreq	r4, [r5, #12]
 800aa92:	e7e6      	b.n	800aa62 <__swsetup_r+0x1e>
 800aa94:	0758      	lsls	r0, r3, #29
 800aa96:	d512      	bpl.n	800aabe <__swsetup_r+0x7a>
 800aa98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa9a:	b141      	cbz	r1, 800aaae <__swsetup_r+0x6a>
 800aa9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaa0:	4299      	cmp	r1, r3
 800aaa2:	d002      	beq.n	800aaaa <__swsetup_r+0x66>
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7fd fbaf 	bl	8008208 <_free_r>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	6363      	str	r3, [r4, #52]	; 0x34
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aab4:	81a3      	strh	r3, [r4, #12]
 800aab6:	2300      	movs	r3, #0
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f043 0308 	orr.w	r3, r3, #8
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	b94b      	cbnz	r3, 800aade <__swsetup_r+0x9a>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad4:	d003      	beq.n	800aade <__swsetup_r+0x9a>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f95b 	bl	800ad94 <__smakebuf_r>
 800aade:	89a0      	ldrh	r0, [r4, #12]
 800aae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aae4:	f010 0301 	ands.w	r3, r0, #1
 800aae8:	d00a      	beq.n	800ab00 <__swsetup_r+0xbc>
 800aaea:	2300      	movs	r3, #0
 800aaec:	60a3      	str	r3, [r4, #8]
 800aaee:	6963      	ldr	r3, [r4, #20]
 800aaf0:	425b      	negs	r3, r3
 800aaf2:	61a3      	str	r3, [r4, #24]
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	b943      	cbnz	r3, 800ab0a <__swsetup_r+0xc6>
 800aaf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aafc:	d1ba      	bne.n	800aa74 <__swsetup_r+0x30>
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	0781      	lsls	r1, r0, #30
 800ab02:	bf58      	it	pl
 800ab04:	6963      	ldrpl	r3, [r4, #20]
 800ab06:	60a3      	str	r3, [r4, #8]
 800ab08:	e7f4      	b.n	800aaf4 <__swsetup_r+0xb0>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e7f7      	b.n	800aafe <__swsetup_r+0xba>
 800ab0e:	bf00      	nop
 800ab10:	2000000c 	.word	0x2000000c
 800ab14:	0800c8b0 	.word	0x0800c8b0
 800ab18:	0800c8d0 	.word	0x0800c8d0
 800ab1c:	0800c890 	.word	0x0800c890

0800ab20 <__assert_func>:
 800ab20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab22:	4614      	mov	r4, r2
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <__assert_func+0x2c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	68d8      	ldr	r0, [r3, #12]
 800ab2e:	b14c      	cbz	r4, 800ab44 <__assert_func+0x24>
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <__assert_func+0x30>)
 800ab32:	9100      	str	r1, [sp, #0]
 800ab34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab38:	4906      	ldr	r1, [pc, #24]	; (800ab54 <__assert_func+0x34>)
 800ab3a:	462b      	mov	r3, r5
 800ab3c:	f000 f8e0 	bl	800ad00 <fiprintf>
 800ab40:	f000 f9e3 	bl	800af0a <abort>
 800ab44:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <__assert_func+0x38>)
 800ab46:	461c      	mov	r4, r3
 800ab48:	e7f3      	b.n	800ab32 <__assert_func+0x12>
 800ab4a:	bf00      	nop
 800ab4c:	2000000c 	.word	0x2000000c
 800ab50:	0800ca5d 	.word	0x0800ca5d
 800ab54:	0800ca6a 	.word	0x0800ca6a
 800ab58:	0800ca98 	.word	0x0800ca98

0800ab5c <_close_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d06      	ldr	r5, [pc, #24]	; (800ab78 <_close_r+0x1c>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	f7f7 f8f1 	bl	8001d4e <_close>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_close_r+0x1a>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_close_r+0x1a>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20000750 	.word	0x20000750

0800ab7c <__sflush_r>:
 800ab7c:	898a      	ldrh	r2, [r1, #12]
 800ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	4605      	mov	r5, r0
 800ab84:	0710      	lsls	r0, r2, #28
 800ab86:	460c      	mov	r4, r1
 800ab88:	d458      	bmi.n	800ac3c <__sflush_r+0xc0>
 800ab8a:	684b      	ldr	r3, [r1, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dc05      	bgt.n	800ab9c <__sflush_r+0x20>
 800ab90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dc02      	bgt.n	800ab9c <__sflush_r+0x20>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	d0f9      	beq.n	800ab96 <__sflush_r+0x1a>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aba8:	682f      	ldr	r7, [r5, #0]
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	d032      	beq.n	800ac14 <__sflush_r+0x98>
 800abae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	075a      	lsls	r2, r3, #29
 800abb4:	d505      	bpl.n	800abc2 <__sflush_r+0x46>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	1ac0      	subs	r0, r0, r3
 800abba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abbc:	b10b      	cbz	r3, 800abc2 <__sflush_r+0x46>
 800abbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abc0:	1ac0      	subs	r0, r0, r3
 800abc2:	2300      	movs	r3, #0
 800abc4:	4602      	mov	r2, r0
 800abc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc8:	6a21      	ldr	r1, [r4, #32]
 800abca:	4628      	mov	r0, r5
 800abcc:	47b0      	blx	r6
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	d106      	bne.n	800abe2 <__sflush_r+0x66>
 800abd4:	6829      	ldr	r1, [r5, #0]
 800abd6:	291d      	cmp	r1, #29
 800abd8:	d82c      	bhi.n	800ac34 <__sflush_r+0xb8>
 800abda:	4a2a      	ldr	r2, [pc, #168]	; (800ac84 <__sflush_r+0x108>)
 800abdc:	40ca      	lsrs	r2, r1
 800abde:	07d6      	lsls	r6, r2, #31
 800abe0:	d528      	bpl.n	800ac34 <__sflush_r+0xb8>
 800abe2:	2200      	movs	r2, #0
 800abe4:	6062      	str	r2, [r4, #4]
 800abe6:	04d9      	lsls	r1, r3, #19
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	d504      	bpl.n	800abf8 <__sflush_r+0x7c>
 800abee:	1c42      	adds	r2, r0, #1
 800abf0:	d101      	bne.n	800abf6 <__sflush_r+0x7a>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b903      	cbnz	r3, 800abf8 <__sflush_r+0x7c>
 800abf6:	6560      	str	r0, [r4, #84]	; 0x54
 800abf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfa:	602f      	str	r7, [r5, #0]
 800abfc:	2900      	cmp	r1, #0
 800abfe:	d0ca      	beq.n	800ab96 <__sflush_r+0x1a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__sflush_r+0x92>
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7fd fafd 	bl	8008208 <_free_r>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	6360      	str	r0, [r4, #52]	; 0x34
 800ac12:	e7c1      	b.n	800ab98 <__sflush_r+0x1c>
 800ac14:	6a21      	ldr	r1, [r4, #32]
 800ac16:	2301      	movs	r3, #1
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b0      	blx	r6
 800ac1c:	1c41      	adds	r1, r0, #1
 800ac1e:	d1c7      	bne.n	800abb0 <__sflush_r+0x34>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0c4      	beq.n	800abb0 <__sflush_r+0x34>
 800ac26:	2b1d      	cmp	r3, #29
 800ac28:	d001      	beq.n	800ac2e <__sflush_r+0xb2>
 800ac2a:	2b16      	cmp	r3, #22
 800ac2c:	d101      	bne.n	800ac32 <__sflush_r+0xb6>
 800ac2e:	602f      	str	r7, [r5, #0]
 800ac30:	e7b1      	b.n	800ab96 <__sflush_r+0x1a>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	e7ad      	b.n	800ab98 <__sflush_r+0x1c>
 800ac3c:	690f      	ldr	r7, [r1, #16]
 800ac3e:	2f00      	cmp	r7, #0
 800ac40:	d0a9      	beq.n	800ab96 <__sflush_r+0x1a>
 800ac42:	0793      	lsls	r3, r2, #30
 800ac44:	680e      	ldr	r6, [r1, #0]
 800ac46:	bf08      	it	eq
 800ac48:	694b      	ldreq	r3, [r1, #20]
 800ac4a:	600f      	str	r7, [r1, #0]
 800ac4c:	bf18      	it	ne
 800ac4e:	2300      	movne	r3, #0
 800ac50:	eba6 0807 	sub.w	r8, r6, r7
 800ac54:	608b      	str	r3, [r1, #8]
 800ac56:	f1b8 0f00 	cmp.w	r8, #0
 800ac5a:	dd9c      	ble.n	800ab96 <__sflush_r+0x1a>
 800ac5c:	6a21      	ldr	r1, [r4, #32]
 800ac5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac60:	4643      	mov	r3, r8
 800ac62:	463a      	mov	r2, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b0      	blx	r6
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	dc06      	bgt.n	800ac7a <__sflush_r+0xfe>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac78:	e78e      	b.n	800ab98 <__sflush_r+0x1c>
 800ac7a:	4407      	add	r7, r0
 800ac7c:	eba8 0800 	sub.w	r8, r8, r0
 800ac80:	e7e9      	b.n	800ac56 <__sflush_r+0xda>
 800ac82:	bf00      	nop
 800ac84:	20400001 	.word	0x20400001

0800ac88 <_fflush_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	690b      	ldr	r3, [r1, #16]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b913      	cbnz	r3, 800ac98 <_fflush_r+0x10>
 800ac92:	2500      	movs	r5, #0
 800ac94:	4628      	mov	r0, r5
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	b118      	cbz	r0, 800aca2 <_fflush_r+0x1a>
 800ac9a:	6983      	ldr	r3, [r0, #24]
 800ac9c:	b90b      	cbnz	r3, 800aca2 <_fflush_r+0x1a>
 800ac9e:	f7fe ff19 	bl	8009ad4 <__sinit>
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <_fflush_r+0x6c>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d11b      	bne.n	800ace0 <_fflush_r+0x58>
 800aca8:	686c      	ldr	r4, [r5, #4]
 800acaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0ef      	beq.n	800ac92 <_fflush_r+0xa>
 800acb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acb4:	07d0      	lsls	r0, r2, #31
 800acb6:	d404      	bmi.n	800acc2 <_fflush_r+0x3a>
 800acb8:	0599      	lsls	r1, r3, #22
 800acba:	d402      	bmi.n	800acc2 <_fflush_r+0x3a>
 800acbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acbe:	f7fe ffac 	bl	8009c1a <__retarget_lock_acquire_recursive>
 800acc2:	4628      	mov	r0, r5
 800acc4:	4621      	mov	r1, r4
 800acc6:	f7ff ff59 	bl	800ab7c <__sflush_r>
 800acca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800accc:	07da      	lsls	r2, r3, #31
 800acce:	4605      	mov	r5, r0
 800acd0:	d4e0      	bmi.n	800ac94 <_fflush_r+0xc>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	059b      	lsls	r3, r3, #22
 800acd6:	d4dd      	bmi.n	800ac94 <_fflush_r+0xc>
 800acd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acda:	f7fe ff9f 	bl	8009c1c <__retarget_lock_release_recursive>
 800acde:	e7d9      	b.n	800ac94 <_fflush_r+0xc>
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <_fflush_r+0x70>)
 800ace2:	429c      	cmp	r4, r3
 800ace4:	d101      	bne.n	800acea <_fflush_r+0x62>
 800ace6:	68ac      	ldr	r4, [r5, #8]
 800ace8:	e7df      	b.n	800acaa <_fflush_r+0x22>
 800acea:	4b04      	ldr	r3, [pc, #16]	; (800acfc <_fflush_r+0x74>)
 800acec:	429c      	cmp	r4, r3
 800acee:	bf08      	it	eq
 800acf0:	68ec      	ldreq	r4, [r5, #12]
 800acf2:	e7da      	b.n	800acaa <_fflush_r+0x22>
 800acf4:	0800c8b0 	.word	0x0800c8b0
 800acf8:	0800c8d0 	.word	0x0800c8d0
 800acfc:	0800c890 	.word	0x0800c890

0800ad00 <fiprintf>:
 800ad00:	b40e      	push	{r1, r2, r3}
 800ad02:	b503      	push	{r0, r1, lr}
 800ad04:	4601      	mov	r1, r0
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	4805      	ldr	r0, [pc, #20]	; (800ad20 <fiprintf+0x20>)
 800ad0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0e:	6800      	ldr	r0, [r0, #0]
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	f7ff fcbf 	bl	800a694 <_vfiprintf_r>
 800ad16:	b002      	add	sp, #8
 800ad18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad1c:	b003      	add	sp, #12
 800ad1e:	4770      	bx	lr
 800ad20:	2000000c 	.word	0x2000000c

0800ad24 <_lseek_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	; (800ad44 <_lseek_r+0x20>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f7f7 f832 	bl	8001d9c <_lseek>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_lseek_r+0x1e>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_lseek_r+0x1e>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20000750 	.word	0x20000750

0800ad48 <__swhatbuf_r>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	460e      	mov	r6, r1
 800ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad50:	2900      	cmp	r1, #0
 800ad52:	b096      	sub	sp, #88	; 0x58
 800ad54:	4614      	mov	r4, r2
 800ad56:	461d      	mov	r5, r3
 800ad58:	da08      	bge.n	800ad6c <__swhatbuf_r+0x24>
 800ad5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	602a      	str	r2, [r5, #0]
 800ad62:	061a      	lsls	r2, r3, #24
 800ad64:	d410      	bmi.n	800ad88 <__swhatbuf_r+0x40>
 800ad66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6a:	e00e      	b.n	800ad8a <__swhatbuf_r+0x42>
 800ad6c:	466a      	mov	r2, sp
 800ad6e:	f000 f8d3 	bl	800af18 <_fstat_r>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	dbf1      	blt.n	800ad5a <__swhatbuf_r+0x12>
 800ad76:	9a01      	ldr	r2, [sp, #4]
 800ad78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad80:	425a      	negs	r2, r3
 800ad82:	415a      	adcs	r2, r3
 800ad84:	602a      	str	r2, [r5, #0]
 800ad86:	e7ee      	b.n	800ad66 <__swhatbuf_r+0x1e>
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	b016      	add	sp, #88	; 0x58
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad94 <__smakebuf_r>:
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad98:	079d      	lsls	r5, r3, #30
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	d507      	bpl.n	800adb0 <__smakebuf_r+0x1c>
 800ada0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	2301      	movs	r3, #1
 800adaa:	6163      	str	r3, [r4, #20]
 800adac:	b002      	add	sp, #8
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	ab01      	add	r3, sp, #4
 800adb2:	466a      	mov	r2, sp
 800adb4:	f7ff ffc8 	bl	800ad48 <__swhatbuf_r>
 800adb8:	9900      	ldr	r1, [sp, #0]
 800adba:	4605      	mov	r5, r0
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7fd fa8f 	bl	80082e0 <_malloc_r>
 800adc2:	b948      	cbnz	r0, 800add8 <__smakebuf_r+0x44>
 800adc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc8:	059a      	lsls	r2, r3, #22
 800adca:	d4ef      	bmi.n	800adac <__smakebuf_r+0x18>
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	f043 0302 	orr.w	r3, r3, #2
 800add4:	81a3      	strh	r3, [r4, #12]
 800add6:	e7e3      	b.n	800ada0 <__smakebuf_r+0xc>
 800add8:	4b0d      	ldr	r3, [pc, #52]	; (800ae10 <__smakebuf_r+0x7c>)
 800adda:	62b3      	str	r3, [r6, #40]	; 0x28
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	6020      	str	r0, [r4, #0]
 800ade0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	9b00      	ldr	r3, [sp, #0]
 800ade8:	6163      	str	r3, [r4, #20]
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	6120      	str	r0, [r4, #16]
 800adee:	b15b      	cbz	r3, 800ae08 <__smakebuf_r+0x74>
 800adf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf4:	4630      	mov	r0, r6
 800adf6:	f000 f8a1 	bl	800af3c <_isatty_r>
 800adfa:	b128      	cbz	r0, 800ae08 <__smakebuf_r+0x74>
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	f023 0303 	bic.w	r3, r3, #3
 800ae02:	f043 0301 	orr.w	r3, r3, #1
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	89a0      	ldrh	r0, [r4, #12]
 800ae0a:	4305      	orrs	r5, r0
 800ae0c:	81a5      	strh	r5, [r4, #12]
 800ae0e:	e7cd      	b.n	800adac <__smakebuf_r+0x18>
 800ae10:	08009a6d 	.word	0x08009a6d

0800ae14 <__ascii_mbtowc>:
 800ae14:	b082      	sub	sp, #8
 800ae16:	b901      	cbnz	r1, 800ae1a <__ascii_mbtowc+0x6>
 800ae18:	a901      	add	r1, sp, #4
 800ae1a:	b142      	cbz	r2, 800ae2e <__ascii_mbtowc+0x1a>
 800ae1c:	b14b      	cbz	r3, 800ae32 <__ascii_mbtowc+0x1e>
 800ae1e:	7813      	ldrb	r3, [r2, #0]
 800ae20:	600b      	str	r3, [r1, #0]
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	1e10      	subs	r0, r2, #0
 800ae26:	bf18      	it	ne
 800ae28:	2001      	movne	r0, #1
 800ae2a:	b002      	add	sp, #8
 800ae2c:	4770      	bx	lr
 800ae2e:	4610      	mov	r0, r2
 800ae30:	e7fb      	b.n	800ae2a <__ascii_mbtowc+0x16>
 800ae32:	f06f 0001 	mvn.w	r0, #1
 800ae36:	e7f8      	b.n	800ae2a <__ascii_mbtowc+0x16>

0800ae38 <memmove>:
 800ae38:	4288      	cmp	r0, r1
 800ae3a:	b510      	push	{r4, lr}
 800ae3c:	eb01 0402 	add.w	r4, r1, r2
 800ae40:	d902      	bls.n	800ae48 <memmove+0x10>
 800ae42:	4284      	cmp	r4, r0
 800ae44:	4623      	mov	r3, r4
 800ae46:	d807      	bhi.n	800ae58 <memmove+0x20>
 800ae48:	1e43      	subs	r3, r0, #1
 800ae4a:	42a1      	cmp	r1, r4
 800ae4c:	d008      	beq.n	800ae60 <memmove+0x28>
 800ae4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae56:	e7f8      	b.n	800ae4a <memmove+0x12>
 800ae58:	4402      	add	r2, r0
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	428a      	cmp	r2, r1
 800ae5e:	d100      	bne.n	800ae62 <memmove+0x2a>
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae6a:	e7f7      	b.n	800ae5c <memmove+0x24>

0800ae6c <_realloc_r>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4680      	mov	r8, r0
 800ae72:	4614      	mov	r4, r2
 800ae74:	460e      	mov	r6, r1
 800ae76:	b921      	cbnz	r1, 800ae82 <_realloc_r+0x16>
 800ae78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	f7fd ba2f 	b.w	80082e0 <_malloc_r>
 800ae82:	b92a      	cbnz	r2, 800ae90 <_realloc_r+0x24>
 800ae84:	f7fd f9c0 	bl	8008208 <_free_r>
 800ae88:	4625      	mov	r5, r4
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae90:	f000 f864 	bl	800af5c <_malloc_usable_size_r>
 800ae94:	4284      	cmp	r4, r0
 800ae96:	4607      	mov	r7, r0
 800ae98:	d802      	bhi.n	800aea0 <_realloc_r+0x34>
 800ae9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae9e:	d812      	bhi.n	800aec6 <_realloc_r+0x5a>
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7fd fa1c 	bl	80082e0 <_malloc_r>
 800aea8:	4605      	mov	r5, r0
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0ed      	beq.n	800ae8a <_realloc_r+0x1e>
 800aeae:	42bc      	cmp	r4, r7
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	bf28      	it	cs
 800aeb6:	463a      	movcs	r2, r7
 800aeb8:	f7fe feb1 	bl	8009c1e <memcpy>
 800aebc:	4631      	mov	r1, r6
 800aebe:	4640      	mov	r0, r8
 800aec0:	f7fd f9a2 	bl	8008208 <_free_r>
 800aec4:	e7e1      	b.n	800ae8a <_realloc_r+0x1e>
 800aec6:	4635      	mov	r5, r6
 800aec8:	e7df      	b.n	800ae8a <_realloc_r+0x1e>
	...

0800aecc <_read_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	; (800aeec <_read_r+0x20>)
 800aed0:	4604      	mov	r4, r0
 800aed2:	4608      	mov	r0, r1
 800aed4:	4611      	mov	r1, r2
 800aed6:	2200      	movs	r2, #0
 800aed8:	602a      	str	r2, [r5, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	f7f6 fefe 	bl	8001cdc <_read>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_read_r+0x1e>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_read_r+0x1e>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20000750 	.word	0x20000750

0800aef0 <__ascii_wctomb>:
 800aef0:	b149      	cbz	r1, 800af06 <__ascii_wctomb+0x16>
 800aef2:	2aff      	cmp	r2, #255	; 0xff
 800aef4:	bf85      	ittet	hi
 800aef6:	238a      	movhi	r3, #138	; 0x8a
 800aef8:	6003      	strhi	r3, [r0, #0]
 800aefa:	700a      	strbls	r2, [r1, #0]
 800aefc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af00:	bf98      	it	ls
 800af02:	2001      	movls	r0, #1
 800af04:	4770      	bx	lr
 800af06:	4608      	mov	r0, r1
 800af08:	4770      	bx	lr

0800af0a <abort>:
 800af0a:	b508      	push	{r3, lr}
 800af0c:	2006      	movs	r0, #6
 800af0e:	f000 f855 	bl	800afbc <raise>
 800af12:	2001      	movs	r0, #1
 800af14:	f7f6 fed8 	bl	8001cc8 <_exit>

0800af18 <_fstat_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_fstat_r+0x20>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	4611      	mov	r1, r2
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	f7f6 ff1e 	bl	8001d66 <_fstat>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d102      	bne.n	800af34 <_fstat_r+0x1c>
 800af2e:	682b      	ldr	r3, [r5, #0]
 800af30:	b103      	cbz	r3, 800af34 <_fstat_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	bf00      	nop
 800af38:	20000750 	.word	0x20000750

0800af3c <_isatty_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_isatty_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7f6 ff1d 	bl	8001d86 <_isatty>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_isatty_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_isatty_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20000750 	.word	0x20000750

0800af5c <_malloc_usable_size_r>:
 800af5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af60:	1f18      	subs	r0, r3, #4
 800af62:	2b00      	cmp	r3, #0
 800af64:	bfbc      	itt	lt
 800af66:	580b      	ldrlt	r3, [r1, r0]
 800af68:	18c0      	addlt	r0, r0, r3
 800af6a:	4770      	bx	lr

0800af6c <_raise_r>:
 800af6c:	291f      	cmp	r1, #31
 800af6e:	b538      	push	{r3, r4, r5, lr}
 800af70:	4604      	mov	r4, r0
 800af72:	460d      	mov	r5, r1
 800af74:	d904      	bls.n	800af80 <_raise_r+0x14>
 800af76:	2316      	movs	r3, #22
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af82:	b112      	cbz	r2, 800af8a <_raise_r+0x1e>
 800af84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af88:	b94b      	cbnz	r3, 800af9e <_raise_r+0x32>
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f830 	bl	800aff0 <_getpid_r>
 800af90:	462a      	mov	r2, r5
 800af92:	4601      	mov	r1, r0
 800af94:	4620      	mov	r0, r4
 800af96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af9a:	f000 b817 	b.w	800afcc <_kill_r>
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d00a      	beq.n	800afb8 <_raise_r+0x4c>
 800afa2:	1c59      	adds	r1, r3, #1
 800afa4:	d103      	bne.n	800afae <_raise_r+0x42>
 800afa6:	2316      	movs	r3, #22
 800afa8:	6003      	str	r3, [r0, #0]
 800afaa:	2001      	movs	r0, #1
 800afac:	e7e7      	b.n	800af7e <_raise_r+0x12>
 800afae:	2400      	movs	r4, #0
 800afb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afb4:	4628      	mov	r0, r5
 800afb6:	4798      	blx	r3
 800afb8:	2000      	movs	r0, #0
 800afba:	e7e0      	b.n	800af7e <_raise_r+0x12>

0800afbc <raise>:
 800afbc:	4b02      	ldr	r3, [pc, #8]	; (800afc8 <raise+0xc>)
 800afbe:	4601      	mov	r1, r0
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	f7ff bfd3 	b.w	800af6c <_raise_r>
 800afc6:	bf00      	nop
 800afc8:	2000000c 	.word	0x2000000c

0800afcc <_kill_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	4d07      	ldr	r5, [pc, #28]	; (800afec <_kill_r+0x20>)
 800afd0:	2300      	movs	r3, #0
 800afd2:	4604      	mov	r4, r0
 800afd4:	4608      	mov	r0, r1
 800afd6:	4611      	mov	r1, r2
 800afd8:	602b      	str	r3, [r5, #0]
 800afda:	f7f6 fe65 	bl	8001ca8 <_kill>
 800afde:	1c43      	adds	r3, r0, #1
 800afe0:	d102      	bne.n	800afe8 <_kill_r+0x1c>
 800afe2:	682b      	ldr	r3, [r5, #0]
 800afe4:	b103      	cbz	r3, 800afe8 <_kill_r+0x1c>
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	bd38      	pop	{r3, r4, r5, pc}
 800afea:	bf00      	nop
 800afec:	20000750 	.word	0x20000750

0800aff0 <_getpid_r>:
 800aff0:	f7f6 be52 	b.w	8001c98 <_getpid>

0800aff4 <cosf>:
 800aff4:	ee10 3a10 	vmov	r3, s0
 800aff8:	b507      	push	{r0, r1, r2, lr}
 800affa:	4a1e      	ldr	r2, [pc, #120]	; (800b074 <cosf+0x80>)
 800affc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b000:	4293      	cmp	r3, r2
 800b002:	dc06      	bgt.n	800b012 <cosf+0x1e>
 800b004:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800b078 <cosf+0x84>
 800b008:	b003      	add	sp, #12
 800b00a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b00e:	f000 be95 	b.w	800bd3c <__kernel_cosf>
 800b012:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b016:	db04      	blt.n	800b022 <cosf+0x2e>
 800b018:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b01c:	b003      	add	sp, #12
 800b01e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b022:	4668      	mov	r0, sp
 800b024:	f000 fd4a 	bl	800babc <__ieee754_rem_pio2f>
 800b028:	f000 0003 	and.w	r0, r0, #3
 800b02c:	2801      	cmp	r0, #1
 800b02e:	d009      	beq.n	800b044 <cosf+0x50>
 800b030:	2802      	cmp	r0, #2
 800b032:	d010      	beq.n	800b056 <cosf+0x62>
 800b034:	b9b0      	cbnz	r0, 800b064 <cosf+0x70>
 800b036:	eddd 0a01 	vldr	s1, [sp, #4]
 800b03a:	ed9d 0a00 	vldr	s0, [sp]
 800b03e:	f000 fe7d 	bl	800bd3c <__kernel_cosf>
 800b042:	e7eb      	b.n	800b01c <cosf+0x28>
 800b044:	eddd 0a01 	vldr	s1, [sp, #4]
 800b048:	ed9d 0a00 	vldr	s0, [sp]
 800b04c:	f001 f94c 	bl	800c2e8 <__kernel_sinf>
 800b050:	eeb1 0a40 	vneg.f32	s0, s0
 800b054:	e7e2      	b.n	800b01c <cosf+0x28>
 800b056:	eddd 0a01 	vldr	s1, [sp, #4]
 800b05a:	ed9d 0a00 	vldr	s0, [sp]
 800b05e:	f000 fe6d 	bl	800bd3c <__kernel_cosf>
 800b062:	e7f5      	b.n	800b050 <cosf+0x5c>
 800b064:	eddd 0a01 	vldr	s1, [sp, #4]
 800b068:	ed9d 0a00 	vldr	s0, [sp]
 800b06c:	2001      	movs	r0, #1
 800b06e:	f001 f93b 	bl	800c2e8 <__kernel_sinf>
 800b072:	e7d3      	b.n	800b01c <cosf+0x28>
 800b074:	3f490fd8 	.word	0x3f490fd8
 800b078:	00000000 	.word	0x00000000

0800b07c <sinf>:
 800b07c:	ee10 3a10 	vmov	r3, s0
 800b080:	b507      	push	{r0, r1, r2, lr}
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <sinf+0x84>)
 800b084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b088:	4293      	cmp	r3, r2
 800b08a:	dc07      	bgt.n	800b09c <sinf+0x20>
 800b08c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b104 <sinf+0x88>
 800b090:	2000      	movs	r0, #0
 800b092:	b003      	add	sp, #12
 800b094:	f85d eb04 	ldr.w	lr, [sp], #4
 800b098:	f001 b926 	b.w	800c2e8 <__kernel_sinf>
 800b09c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b0a0:	db04      	blt.n	800b0ac <sinf+0x30>
 800b0a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b0a6:	b003      	add	sp, #12
 800b0a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ac:	4668      	mov	r0, sp
 800b0ae:	f000 fd05 	bl	800babc <__ieee754_rem_pio2f>
 800b0b2:	f000 0003 	and.w	r0, r0, #3
 800b0b6:	2801      	cmp	r0, #1
 800b0b8:	d00a      	beq.n	800b0d0 <sinf+0x54>
 800b0ba:	2802      	cmp	r0, #2
 800b0bc:	d00f      	beq.n	800b0de <sinf+0x62>
 800b0be:	b9c0      	cbnz	r0, 800b0f2 <sinf+0x76>
 800b0c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0c4:	ed9d 0a00 	vldr	s0, [sp]
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	f001 f90d 	bl	800c2e8 <__kernel_sinf>
 800b0ce:	e7ea      	b.n	800b0a6 <sinf+0x2a>
 800b0d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0d4:	ed9d 0a00 	vldr	s0, [sp]
 800b0d8:	f000 fe30 	bl	800bd3c <__kernel_cosf>
 800b0dc:	e7e3      	b.n	800b0a6 <sinf+0x2a>
 800b0de:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0e2:	ed9d 0a00 	vldr	s0, [sp]
 800b0e6:	2001      	movs	r0, #1
 800b0e8:	f001 f8fe 	bl	800c2e8 <__kernel_sinf>
 800b0ec:	eeb1 0a40 	vneg.f32	s0, s0
 800b0f0:	e7d9      	b.n	800b0a6 <sinf+0x2a>
 800b0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0f6:	ed9d 0a00 	vldr	s0, [sp]
 800b0fa:	f000 fe1f 	bl	800bd3c <__kernel_cosf>
 800b0fe:	e7f5      	b.n	800b0ec <sinf+0x70>
 800b100:	3f490fd8 	.word	0x3f490fd8
 800b104:	00000000 	.word	0x00000000

0800b108 <asinf>:
 800b108:	b508      	push	{r3, lr}
 800b10a:	ed2d 8b02 	vpush	{d8}
 800b10e:	eeb0 8a40 	vmov.f32	s16, s0
 800b112:	f000 f87f 	bl	800b214 <__ieee754_asinf>
 800b116:	eeb4 8a48 	vcmp.f32	s16, s16
 800b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11e:	eef0 8a40 	vmov.f32	s17, s0
 800b122:	d615      	bvs.n	800b150 <asinf+0x48>
 800b124:	eeb0 0a48 	vmov.f32	s0, s16
 800b128:	f001 fa1c 	bl	800c564 <fabsf>
 800b12c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b130:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b138:	dd0a      	ble.n	800b150 <asinf+0x48>
 800b13a:	f7fd f823 	bl	8008184 <__errno>
 800b13e:	ecbd 8b02 	vpop	{d8}
 800b142:	2321      	movs	r3, #33	; 0x21
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b14a:	4804      	ldr	r0, [pc, #16]	; (800b15c <asinf+0x54>)
 800b14c:	f001 ba60 	b.w	800c610 <nanf>
 800b150:	eeb0 0a68 	vmov.f32	s0, s17
 800b154:	ecbd 8b02 	vpop	{d8}
 800b158:	bd08      	pop	{r3, pc}
 800b15a:	bf00      	nop
 800b15c:	0800ca98 	.word	0x0800ca98

0800b160 <atan2f>:
 800b160:	f000 b93e 	b.w	800b3e0 <__ieee754_atan2f>

0800b164 <powf>:
 800b164:	b508      	push	{r3, lr}
 800b166:	ed2d 8b04 	vpush	{d8-d9}
 800b16a:	eeb0 8a60 	vmov.f32	s16, s1
 800b16e:	eeb0 9a40 	vmov.f32	s18, s0
 800b172:	f000 f9d5 	bl	800b520 <__ieee754_powf>
 800b176:	eeb4 8a48 	vcmp.f32	s16, s16
 800b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17e:	eef0 8a40 	vmov.f32	s17, s0
 800b182:	d63e      	bvs.n	800b202 <powf+0x9e>
 800b184:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18c:	d112      	bne.n	800b1b4 <powf+0x50>
 800b18e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b196:	d039      	beq.n	800b20c <powf+0xa8>
 800b198:	eeb0 0a48 	vmov.f32	s0, s16
 800b19c:	f001 f9e9 	bl	800c572 <finitef>
 800b1a0:	b378      	cbz	r0, 800b202 <powf+0x9e>
 800b1a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1aa:	d52a      	bpl.n	800b202 <powf+0x9e>
 800b1ac:	f7fc ffea 	bl	8008184 <__errno>
 800b1b0:	2322      	movs	r3, #34	; 0x22
 800b1b2:	e014      	b.n	800b1de <powf+0x7a>
 800b1b4:	f001 f9dd 	bl	800c572 <finitef>
 800b1b8:	b998      	cbnz	r0, 800b1e2 <powf+0x7e>
 800b1ba:	eeb0 0a49 	vmov.f32	s0, s18
 800b1be:	f001 f9d8 	bl	800c572 <finitef>
 800b1c2:	b170      	cbz	r0, 800b1e2 <powf+0x7e>
 800b1c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b1c8:	f001 f9d3 	bl	800c572 <finitef>
 800b1cc:	b148      	cbz	r0, 800b1e2 <powf+0x7e>
 800b1ce:	eef4 8a68 	vcmp.f32	s17, s17
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	d7e9      	bvc.n	800b1ac <powf+0x48>
 800b1d8:	f7fc ffd4 	bl	8008184 <__errno>
 800b1dc:	2321      	movs	r3, #33	; 0x21
 800b1de:	6003      	str	r3, [r0, #0]
 800b1e0:	e00f      	b.n	800b202 <powf+0x9e>
 800b1e2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	d10a      	bne.n	800b202 <powf+0x9e>
 800b1ec:	eeb0 0a49 	vmov.f32	s0, s18
 800b1f0:	f001 f9bf 	bl	800c572 <finitef>
 800b1f4:	b128      	cbz	r0, 800b202 <powf+0x9e>
 800b1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b1fa:	f001 f9ba 	bl	800c572 <finitef>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d1d4      	bne.n	800b1ac <powf+0x48>
 800b202:	eeb0 0a68 	vmov.f32	s0, s17
 800b206:	ecbd 8b04 	vpop	{d8-d9}
 800b20a:	bd08      	pop	{r3, pc}
 800b20c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b210:	e7f7      	b.n	800b202 <powf+0x9e>
	...

0800b214 <__ieee754_asinf>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	ee10 5a10 	vmov	r5, s0
 800b21a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b21e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b222:	ed2d 8b04 	vpush	{d8-d9}
 800b226:	d10c      	bne.n	800b242 <__ieee754_asinf+0x2e>
 800b228:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b3a0 <__ieee754_asinf+0x18c>
 800b22c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b3a4 <__ieee754_asinf+0x190>
 800b230:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b234:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b238:	eeb0 0a67 	vmov.f32	s0, s15
 800b23c:	ecbd 8b04 	vpop	{d8-d9}
 800b240:	bd38      	pop	{r3, r4, r5, pc}
 800b242:	dd04      	ble.n	800b24e <__ieee754_asinf+0x3a>
 800b244:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b248:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b24c:	e7f6      	b.n	800b23c <__ieee754_asinf+0x28>
 800b24e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b252:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b256:	da0b      	bge.n	800b270 <__ieee754_asinf+0x5c>
 800b258:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b25c:	da52      	bge.n	800b304 <__ieee754_asinf+0xf0>
 800b25e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b3a8 <__ieee754_asinf+0x194>
 800b262:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b266:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26e:	dce5      	bgt.n	800b23c <__ieee754_asinf+0x28>
 800b270:	f001 f978 	bl	800c564 <fabsf>
 800b274:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b278:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b27c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b280:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b3ac <__ieee754_asinf+0x198>
 800b284:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b3b0 <__ieee754_asinf+0x19c>
 800b288:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b3b4 <__ieee754_asinf+0x1a0>
 800b28c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b290:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b3b8 <__ieee754_asinf+0x1a4>
 800b294:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b298:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b3bc <__ieee754_asinf+0x1a8>
 800b29c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b2a0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b3c0 <__ieee754_asinf+0x1ac>
 800b2a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b2a8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b3c4 <__ieee754_asinf+0x1b0>
 800b2ac:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b2b0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b3c8 <__ieee754_asinf+0x1b4>
 800b2b4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b2b8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b3cc <__ieee754_asinf+0x1b8>
 800b2bc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b2c0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b3d0 <__ieee754_asinf+0x1bc>
 800b2c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b2c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b2cc:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b2d0:	f000 fd30 	bl	800bd34 <__ieee754_sqrtf>
 800b2d4:	4b3f      	ldr	r3, [pc, #252]	; (800b3d4 <__ieee754_asinf+0x1c0>)
 800b2d6:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b2da:	429c      	cmp	r4, r3
 800b2dc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b2e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b2e4:	dd3d      	ble.n	800b362 <__ieee754_asinf+0x14e>
 800b2e6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b2ea:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b3d8 <__ieee754_asinf+0x1c4>
 800b2ee:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b2f2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b3a4 <__ieee754_asinf+0x190>
 800b2f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2fa:	2d00      	cmp	r5, #0
 800b2fc:	bfd8      	it	le
 800b2fe:	eeb1 0a40 	vnegle.f32	s0, s0
 800b302:	e79b      	b.n	800b23c <__ieee754_asinf+0x28>
 800b304:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b308:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b3ac <__ieee754_asinf+0x198>
 800b30c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b3b0 <__ieee754_asinf+0x19c>
 800b310:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b3c4 <__ieee754_asinf+0x1b0>
 800b314:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b318:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b3b8 <__ieee754_asinf+0x1a4>
 800b31c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b320:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b3bc <__ieee754_asinf+0x1a8>
 800b324:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b328:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b3c0 <__ieee754_asinf+0x1ac>
 800b32c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b330:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b3b4 <__ieee754_asinf+0x1a0>
 800b334:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b338:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b3c8 <__ieee754_asinf+0x1b4>
 800b33c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b340:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b3cc <__ieee754_asinf+0x1b8>
 800b344:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b348:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b3d0 <__ieee754_asinf+0x1bc>
 800b34c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b350:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b354:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b358:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b35c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b360:	e76c      	b.n	800b23c <__ieee754_asinf+0x28>
 800b362:	ee10 3a10 	vmov	r3, s0
 800b366:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b36a:	f023 030f 	bic.w	r3, r3, #15
 800b36e:	ee07 3a10 	vmov	s14, r3
 800b372:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b376:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b37a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b37e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b382:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b3a0 <__ieee754_asinf+0x18c>
 800b386:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b38a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b38e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b3dc <__ieee754_asinf+0x1c8>
 800b392:	eeb0 6a40 	vmov.f32	s12, s0
 800b396:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b39a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b39e:	e7aa      	b.n	800b2f6 <__ieee754_asinf+0xe2>
 800b3a0:	b33bbd2e 	.word	0xb33bbd2e
 800b3a4:	3fc90fdb 	.word	0x3fc90fdb
 800b3a8:	7149f2ca 	.word	0x7149f2ca
 800b3ac:	3811ef08 	.word	0x3811ef08
 800b3b0:	3a4f7f04 	.word	0x3a4f7f04
 800b3b4:	3e2aaaab 	.word	0x3e2aaaab
 800b3b8:	bd241146 	.word	0xbd241146
 800b3bc:	3e4e0aa8 	.word	0x3e4e0aa8
 800b3c0:	bea6b090 	.word	0xbea6b090
 800b3c4:	3d9dc62e 	.word	0x3d9dc62e
 800b3c8:	bf303361 	.word	0xbf303361
 800b3cc:	4001572d 	.word	0x4001572d
 800b3d0:	c019d139 	.word	0xc019d139
 800b3d4:	3f799999 	.word	0x3f799999
 800b3d8:	333bbd2e 	.word	0x333bbd2e
 800b3dc:	3f490fdb 	.word	0x3f490fdb

0800b3e0 <__ieee754_atan2f>:
 800b3e0:	ee10 2a90 	vmov	r2, s1
 800b3e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b3e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	eef0 7a40 	vmov.f32	s15, s0
 800b3f2:	dc06      	bgt.n	800b402 <__ieee754_atan2f+0x22>
 800b3f4:	ee10 0a10 	vmov	r0, s0
 800b3f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b3fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b400:	dd04      	ble.n	800b40c <__ieee754_atan2f+0x2c>
 800b402:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b406:	eeb0 0a67 	vmov.f32	s0, s15
 800b40a:	bd10      	pop	{r4, pc}
 800b40c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b410:	d103      	bne.n	800b41a <__ieee754_atan2f+0x3a>
 800b412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b416:	f000 bfd1 	b.w	800c3bc <atanf>
 800b41a:	1794      	asrs	r4, r2, #30
 800b41c:	f004 0402 	and.w	r4, r4, #2
 800b420:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b424:	b943      	cbnz	r3, 800b438 <__ieee754_atan2f+0x58>
 800b426:	2c02      	cmp	r4, #2
 800b428:	d05e      	beq.n	800b4e8 <__ieee754_atan2f+0x108>
 800b42a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b4fc <__ieee754_atan2f+0x11c>
 800b42e:	2c03      	cmp	r4, #3
 800b430:	bf08      	it	eq
 800b432:	eef0 7a47 	vmoveq.f32	s15, s14
 800b436:	e7e6      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b438:	b941      	cbnz	r1, 800b44c <__ieee754_atan2f+0x6c>
 800b43a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b500 <__ieee754_atan2f+0x120>
 800b43e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b504 <__ieee754_atan2f+0x124>
 800b442:	2800      	cmp	r0, #0
 800b444:	bfb8      	it	lt
 800b446:	eef0 7a40 	vmovlt.f32	s15, s0
 800b44a:	e7dc      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b44c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b450:	d110      	bne.n	800b474 <__ieee754_atan2f+0x94>
 800b452:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b456:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b45a:	d107      	bne.n	800b46c <__ieee754_atan2f+0x8c>
 800b45c:	2c02      	cmp	r4, #2
 800b45e:	d846      	bhi.n	800b4ee <__ieee754_atan2f+0x10e>
 800b460:	4b29      	ldr	r3, [pc, #164]	; (800b508 <__ieee754_atan2f+0x128>)
 800b462:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b466:	edd4 7a00 	vldr	s15, [r4]
 800b46a:	e7cc      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b46c:	2c02      	cmp	r4, #2
 800b46e:	d841      	bhi.n	800b4f4 <__ieee754_atan2f+0x114>
 800b470:	4b26      	ldr	r3, [pc, #152]	; (800b50c <__ieee754_atan2f+0x12c>)
 800b472:	e7f6      	b.n	800b462 <__ieee754_atan2f+0x82>
 800b474:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b478:	d0df      	beq.n	800b43a <__ieee754_atan2f+0x5a>
 800b47a:	1a5b      	subs	r3, r3, r1
 800b47c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b480:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b484:	da1a      	bge.n	800b4bc <__ieee754_atan2f+0xdc>
 800b486:	2a00      	cmp	r2, #0
 800b488:	da01      	bge.n	800b48e <__ieee754_atan2f+0xae>
 800b48a:	313c      	adds	r1, #60	; 0x3c
 800b48c:	db19      	blt.n	800b4c2 <__ieee754_atan2f+0xe2>
 800b48e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b492:	f001 f867 	bl	800c564 <fabsf>
 800b496:	f000 ff91 	bl	800c3bc <atanf>
 800b49a:	eef0 7a40 	vmov.f32	s15, s0
 800b49e:	2c01      	cmp	r4, #1
 800b4a0:	d012      	beq.n	800b4c8 <__ieee754_atan2f+0xe8>
 800b4a2:	2c02      	cmp	r4, #2
 800b4a4:	d017      	beq.n	800b4d6 <__ieee754_atan2f+0xf6>
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	d0ad      	beq.n	800b406 <__ieee754_atan2f+0x26>
 800b4aa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b510 <__ieee754_atan2f+0x130>
 800b4ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b4b2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b514 <__ieee754_atan2f+0x134>
 800b4b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b4ba:	e7a4      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4bc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b500 <__ieee754_atan2f+0x120>
 800b4c0:	e7ed      	b.n	800b49e <__ieee754_atan2f+0xbe>
 800b4c2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b518 <__ieee754_atan2f+0x138>
 800b4c6:	e7ea      	b.n	800b49e <__ieee754_atan2f+0xbe>
 800b4c8:	ee17 3a90 	vmov	r3, s15
 800b4cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b4d0:	ee07 3a90 	vmov	s15, r3
 800b4d4:	e797      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4d6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b510 <__ieee754_atan2f+0x130>
 800b4da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b4de:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b514 <__ieee754_atan2f+0x134>
 800b4e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b4e6:	e78e      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4e8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b514 <__ieee754_atan2f+0x134>
 800b4ec:	e78b      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4ee:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b51c <__ieee754_atan2f+0x13c>
 800b4f2:	e788      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b518 <__ieee754_atan2f+0x138>
 800b4f8:	e785      	b.n	800b406 <__ieee754_atan2f+0x26>
 800b4fa:	bf00      	nop
 800b4fc:	c0490fdb 	.word	0xc0490fdb
 800b500:	3fc90fdb 	.word	0x3fc90fdb
 800b504:	bfc90fdb 	.word	0xbfc90fdb
 800b508:	0800cba4 	.word	0x0800cba4
 800b50c:	0800cbb0 	.word	0x0800cbb0
 800b510:	33bbbd2e 	.word	0x33bbbd2e
 800b514:	40490fdb 	.word	0x40490fdb
 800b518:	00000000 	.word	0x00000000
 800b51c:	3f490fdb 	.word	0x3f490fdb

0800b520 <__ieee754_powf>:
 800b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b524:	ee10 4a90 	vmov	r4, s1
 800b528:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b52c:	ed2d 8b02 	vpush	{d8}
 800b530:	ee10 6a10 	vmov	r6, s0
 800b534:	eeb0 8a40 	vmov.f32	s16, s0
 800b538:	eef0 8a60 	vmov.f32	s17, s1
 800b53c:	d10c      	bne.n	800b558 <__ieee754_powf+0x38>
 800b53e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800b542:	0076      	lsls	r6, r6, #1
 800b544:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800b548:	f240 8296 	bls.w	800ba78 <__ieee754_powf+0x558>
 800b54c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b550:	ecbd 8b02 	vpop	{d8}
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b55c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b560:	dcf4      	bgt.n	800b54c <__ieee754_powf+0x2c>
 800b562:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b566:	dd08      	ble.n	800b57a <__ieee754_powf+0x5a>
 800b568:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b56c:	d1ee      	bne.n	800b54c <__ieee754_powf+0x2c>
 800b56e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b572:	0064      	lsls	r4, r4, #1
 800b574:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b578:	e7e6      	b.n	800b548 <__ieee754_powf+0x28>
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	da20      	bge.n	800b5c0 <__ieee754_powf+0xa0>
 800b57e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b582:	da2d      	bge.n	800b5e0 <__ieee754_powf+0xc0>
 800b584:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b588:	f2c0 827f 	blt.w	800ba8a <__ieee754_powf+0x56a>
 800b58c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b590:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b594:	fa48 f703 	asr.w	r7, r8, r3
 800b598:	fa07 f303 	lsl.w	r3, r7, r3
 800b59c:	4543      	cmp	r3, r8
 800b59e:	f040 8274 	bne.w	800ba8a <__ieee754_powf+0x56a>
 800b5a2:	f007 0701 	and.w	r7, r7, #1
 800b5a6:	f1c7 0702 	rsb	r7, r7, #2
 800b5aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b5ae:	d11f      	bne.n	800b5f0 <__ieee754_powf+0xd0>
 800b5b0:	2c00      	cmp	r4, #0
 800b5b2:	f280 8267 	bge.w	800ba84 <__ieee754_powf+0x564>
 800b5b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b5ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b5be:	e7c7      	b.n	800b550 <__ieee754_powf+0x30>
 800b5c0:	2700      	movs	r7, #0
 800b5c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b5c6:	d1f0      	bne.n	800b5aa <__ieee754_powf+0x8a>
 800b5c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b5cc:	f000 8254 	beq.w	800ba78 <__ieee754_powf+0x558>
 800b5d0:	dd08      	ble.n	800b5e4 <__ieee754_powf+0xc4>
 800b5d2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b8dc <__ieee754_powf+0x3bc>
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	bfa8      	it	ge
 800b5da:	eeb0 0a68 	vmovge.f32	s0, s17
 800b5de:	e7b7      	b.n	800b550 <__ieee754_powf+0x30>
 800b5e0:	2702      	movs	r7, #2
 800b5e2:	e7ee      	b.n	800b5c2 <__ieee754_powf+0xa2>
 800b5e4:	2c00      	cmp	r4, #0
 800b5e6:	f280 824a 	bge.w	800ba7e <__ieee754_powf+0x55e>
 800b5ea:	eeb1 0a68 	vneg.f32	s0, s17
 800b5ee:	e7af      	b.n	800b550 <__ieee754_powf+0x30>
 800b5f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b5f4:	d102      	bne.n	800b5fc <__ieee754_powf+0xdc>
 800b5f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b5fa:	e7a9      	b.n	800b550 <__ieee754_powf+0x30>
 800b5fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b600:	eeb0 0a48 	vmov.f32	s0, s16
 800b604:	d107      	bne.n	800b616 <__ieee754_powf+0xf6>
 800b606:	2e00      	cmp	r6, #0
 800b608:	db05      	blt.n	800b616 <__ieee754_powf+0xf6>
 800b60a:	ecbd 8b02 	vpop	{d8}
 800b60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b612:	f000 bb8f 	b.w	800bd34 <__ieee754_sqrtf>
 800b616:	f000 ffa5 	bl	800c564 <fabsf>
 800b61a:	b125      	cbz	r5, 800b626 <__ieee754_powf+0x106>
 800b61c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800b620:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b624:	d116      	bne.n	800b654 <__ieee754_powf+0x134>
 800b626:	2c00      	cmp	r4, #0
 800b628:	bfbc      	itt	lt
 800b62a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b62e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b632:	2e00      	cmp	r6, #0
 800b634:	da8c      	bge.n	800b550 <__ieee754_powf+0x30>
 800b636:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b63a:	ea55 0307 	orrs.w	r3, r5, r7
 800b63e:	d104      	bne.n	800b64a <__ieee754_powf+0x12a>
 800b640:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b644:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b648:	e782      	b.n	800b550 <__ieee754_powf+0x30>
 800b64a:	2f01      	cmp	r7, #1
 800b64c:	d180      	bne.n	800b550 <__ieee754_powf+0x30>
 800b64e:	eeb1 0a40 	vneg.f32	s0, s0
 800b652:	e77d      	b.n	800b550 <__ieee754_powf+0x30>
 800b654:	0ff0      	lsrs	r0, r6, #31
 800b656:	3801      	subs	r0, #1
 800b658:	ea57 0300 	orrs.w	r3, r7, r0
 800b65c:	d104      	bne.n	800b668 <__ieee754_powf+0x148>
 800b65e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b662:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b666:	e773      	b.n	800b550 <__ieee754_powf+0x30>
 800b668:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b66c:	dd74      	ble.n	800b758 <__ieee754_powf+0x238>
 800b66e:	4b9c      	ldr	r3, [pc, #624]	; (800b8e0 <__ieee754_powf+0x3c0>)
 800b670:	429d      	cmp	r5, r3
 800b672:	dc08      	bgt.n	800b686 <__ieee754_powf+0x166>
 800b674:	2c00      	cmp	r4, #0
 800b676:	da0b      	bge.n	800b690 <__ieee754_powf+0x170>
 800b678:	2000      	movs	r0, #0
 800b67a:	ecbd 8b02 	vpop	{d8}
 800b67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b682:	f000 be95 	b.w	800c3b0 <__math_oflowf>
 800b686:	4b97      	ldr	r3, [pc, #604]	; (800b8e4 <__ieee754_powf+0x3c4>)
 800b688:	429d      	cmp	r5, r3
 800b68a:	dd08      	ble.n	800b69e <__ieee754_powf+0x17e>
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	dcf3      	bgt.n	800b678 <__ieee754_powf+0x158>
 800b690:	2000      	movs	r0, #0
 800b692:	ecbd 8b02 	vpop	{d8}
 800b696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69a:	f000 be83 	b.w	800c3a4 <__math_uflowf>
 800b69e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b6a6:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b8e8 <__ieee754_powf+0x3c8>
 800b6aa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b6ae:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b6b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b6b6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b6ba:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6c2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b8ec <__ieee754_powf+0x3cc>
 800b6c6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800b6ca:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b8f0 <__ieee754_powf+0x3d0>
 800b6ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b6d2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b8f4 <__ieee754_powf+0x3d4>
 800b6d6:	eef0 6a67 	vmov.f32	s13, s15
 800b6da:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b6de:	ee16 3a90 	vmov	r3, s13
 800b6e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b6e6:	f023 030f 	bic.w	r3, r3, #15
 800b6ea:	ee00 3a90 	vmov	s1, r3
 800b6ee:	eee0 0a47 	vfms.f32	s1, s0, s14
 800b6f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b6f6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b6fa:	f024 040f 	bic.w	r4, r4, #15
 800b6fe:	ee07 4a10 	vmov	s14, r4
 800b702:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b706:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b712:	3f01      	subs	r7, #1
 800b714:	ea57 0200 	orrs.w	r2, r7, r0
 800b718:	ee07 4a10 	vmov	s14, r4
 800b71c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b720:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b724:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b728:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b72c:	ee17 4a10 	vmov	r4, s14
 800b730:	bf08      	it	eq
 800b732:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b736:	2c00      	cmp	r4, #0
 800b738:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b73c:	f340 817e 	ble.w	800ba3c <__ieee754_powf+0x51c>
 800b740:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b744:	f340 80f8 	ble.w	800b938 <__ieee754_powf+0x418>
 800b748:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b750:	bf4c      	ite	mi
 800b752:	2001      	movmi	r0, #1
 800b754:	2000      	movpl	r0, #0
 800b756:	e790      	b.n	800b67a <__ieee754_powf+0x15a>
 800b758:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800b75c:	bf01      	itttt	eq
 800b75e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b8f8 <__ieee754_powf+0x3d8>
 800b762:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b766:	f06f 0217 	mvneq.w	r2, #23
 800b76a:	ee17 5a90 	vmoveq	r5, s15
 800b76e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b772:	bf18      	it	ne
 800b774:	2200      	movne	r2, #0
 800b776:	3b7f      	subs	r3, #127	; 0x7f
 800b778:	4413      	add	r3, r2
 800b77a:	4a60      	ldr	r2, [pc, #384]	; (800b8fc <__ieee754_powf+0x3dc>)
 800b77c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800b780:	4295      	cmp	r5, r2
 800b782:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800b786:	dd06      	ble.n	800b796 <__ieee754_powf+0x276>
 800b788:	4a5d      	ldr	r2, [pc, #372]	; (800b900 <__ieee754_powf+0x3e0>)
 800b78a:	4295      	cmp	r5, r2
 800b78c:	f340 80a4 	ble.w	800b8d8 <__ieee754_powf+0x3b8>
 800b790:	3301      	adds	r3, #1
 800b792:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b796:	2500      	movs	r5, #0
 800b798:	4a5a      	ldr	r2, [pc, #360]	; (800b904 <__ieee754_powf+0x3e4>)
 800b79a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b79e:	ee07 1a90 	vmov	s15, r1
 800b7a2:	ed92 7a00 	vldr	s14, [r2]
 800b7a6:	4a58      	ldr	r2, [pc, #352]	; (800b908 <__ieee754_powf+0x3e8>)
 800b7a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b7ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b7b0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b7b4:	1049      	asrs	r1, r1, #1
 800b7b6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b7ba:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b7be:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b7c2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b7c6:	ee06 1a10 	vmov	s12, r1
 800b7ca:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b7ce:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b7d2:	ee14 6a90 	vmov	r6, s9
 800b7d6:	4016      	ands	r6, r2
 800b7d8:	ee05 6a90 	vmov	s11, r6
 800b7dc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b7e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b90c <__ieee754_powf+0x3ec>
 800b7e8:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b7ec:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b7f0:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b7f4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b910 <__ieee754_powf+0x3f0>
 800b7f8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b7fc:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b914 <__ieee754_powf+0x3f4>
 800b800:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b804:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b8e8 <__ieee754_powf+0x3c8>
 800b808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b80c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b918 <__ieee754_powf+0x3f8>
 800b810:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b814:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b91c <__ieee754_powf+0x3fc>
 800b818:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b81c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b820:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b824:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b828:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b82c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b830:	eef0 7a45 	vmov.f32	s15, s10
 800b834:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b83c:	ee17 1a90 	vmov	r1, s15
 800b840:	4011      	ands	r1, r2
 800b842:	ee07 1a90 	vmov	s15, r1
 800b846:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b84a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b84e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b852:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b856:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b85a:	eeb0 6a47 	vmov.f32	s12, s14
 800b85e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b862:	ee16 1a10 	vmov	r1, s12
 800b866:	4011      	ands	r1, r2
 800b868:	ee06 1a90 	vmov	s13, r1
 800b86c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b870:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b920 <__ieee754_powf+0x400>
 800b874:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b924 <__ieee754_powf+0x404>
 800b878:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b87c:	ee06 1a10 	vmov	s12, r1
 800b880:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b884:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b928 <__ieee754_powf+0x408>
 800b888:	4928      	ldr	r1, [pc, #160]	; (800b92c <__ieee754_powf+0x40c>)
 800b88a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b88e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b892:	edd1 7a00 	vldr	s15, [r1]
 800b896:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	4b24      	ldr	r3, [pc, #144]	; (800b930 <__ieee754_powf+0x410>)
 800b8a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b8a4:	eef0 7a47 	vmov.f32	s15, s14
 800b8a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b8ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b8b0:	edd5 0a00 	vldr	s1, [r5]
 800b8b4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b8b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8bc:	ee17 3a90 	vmov	r3, s15
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b8ca:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b8ce:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b8d2:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b8d6:	e70e      	b.n	800b6f6 <__ieee754_powf+0x1d6>
 800b8d8:	2501      	movs	r5, #1
 800b8da:	e75d      	b.n	800b798 <__ieee754_powf+0x278>
 800b8dc:	00000000 	.word	0x00000000
 800b8e0:	3f7ffff3 	.word	0x3f7ffff3
 800b8e4:	3f800007 	.word	0x3f800007
 800b8e8:	3eaaaaab 	.word	0x3eaaaaab
 800b8ec:	3fb8aa3b 	.word	0x3fb8aa3b
 800b8f0:	36eca570 	.word	0x36eca570
 800b8f4:	3fb8aa00 	.word	0x3fb8aa00
 800b8f8:	4b800000 	.word	0x4b800000
 800b8fc:	001cc471 	.word	0x001cc471
 800b900:	005db3d6 	.word	0x005db3d6
 800b904:	0800cbbc 	.word	0x0800cbbc
 800b908:	fffff000 	.word	0xfffff000
 800b90c:	3e6c3255 	.word	0x3e6c3255
 800b910:	3e53f142 	.word	0x3e53f142
 800b914:	3e8ba305 	.word	0x3e8ba305
 800b918:	3edb6db7 	.word	0x3edb6db7
 800b91c:	3f19999a 	.word	0x3f19999a
 800b920:	3f76384f 	.word	0x3f76384f
 800b924:	3f763800 	.word	0x3f763800
 800b928:	369dc3a0 	.word	0x369dc3a0
 800b92c:	0800cbcc 	.word	0x0800cbcc
 800b930:	0800cbc4 	.word	0x0800cbc4
 800b934:	3338aa3c 	.word	0x3338aa3c
 800b938:	f040 8095 	bne.w	800ba66 <__ieee754_powf+0x546>
 800b93c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b934 <__ieee754_powf+0x414>
 800b940:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b944:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b948:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b950:	f73f aefa 	bgt.w	800b748 <__ieee754_powf+0x228>
 800b954:	15db      	asrs	r3, r3, #23
 800b956:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b95a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b95e:	4103      	asrs	r3, r0
 800b960:	4423      	add	r3, r4
 800b962:	494b      	ldr	r1, [pc, #300]	; (800ba90 <__ieee754_powf+0x570>)
 800b964:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b968:	3a7f      	subs	r2, #127	; 0x7f
 800b96a:	4111      	asrs	r1, r2
 800b96c:	ea23 0101 	bic.w	r1, r3, r1
 800b970:	ee07 1a10 	vmov	s14, r1
 800b974:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b97c:	f1c2 0217 	rsb	r2, r2, #23
 800b980:	4110      	asrs	r0, r2
 800b982:	2c00      	cmp	r4, #0
 800b984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b988:	bfb8      	it	lt
 800b98a:	4240      	neglt	r0, r0
 800b98c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b990:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ba94 <__ieee754_powf+0x574>
 800b994:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ba98 <__ieee754_powf+0x578>
 800b998:	ee17 3a10 	vmov	r3, s14
 800b99c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b9a0:	f023 030f 	bic.w	r3, r3, #15
 800b9a4:	ee07 3a10 	vmov	s14, r3
 800b9a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ac:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b9b0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b9b4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ba9c <__ieee754_powf+0x57c>
 800b9b8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b9bc:	eef0 7a40 	vmov.f32	s15, s0
 800b9c0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b9c4:	eeb0 6a67 	vmov.f32	s12, s15
 800b9c8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b9cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b9d0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b9d4:	eddf 6a32 	vldr	s13, [pc, #200]	; 800baa0 <__ieee754_powf+0x580>
 800b9d8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800baa4 <__ieee754_powf+0x584>
 800b9dc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b9e0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800baa8 <__ieee754_powf+0x588>
 800b9e4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b9e8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800baac <__ieee754_powf+0x58c>
 800b9ec:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b9f0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800bab0 <__ieee754_powf+0x590>
 800b9f4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b9f8:	eef0 6a67 	vmov.f32	s13, s15
 800b9fc:	eee6 6a47 	vfms.f32	s13, s12, s14
 800ba00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ba04:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ba08:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ba0c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ba10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ba14:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ba18:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ba1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba20:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba24:	ee10 3a10 	vmov	r3, s0
 800ba28:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ba2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba30:	da1f      	bge.n	800ba72 <__ieee754_powf+0x552>
 800ba32:	f000 fdf3 	bl	800c61c <scalbnf>
 800ba36:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ba3a:	e589      	b.n	800b550 <__ieee754_powf+0x30>
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	; (800bab4 <__ieee754_powf+0x594>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	dd07      	ble.n	800ba52 <__ieee754_powf+0x532>
 800ba42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4a:	bf4c      	ite	mi
 800ba4c:	2001      	movmi	r0, #1
 800ba4e:	2000      	movpl	r0, #0
 800ba50:	e61f      	b.n	800b692 <__ieee754_powf+0x172>
 800ba52:	d108      	bne.n	800ba66 <__ieee754_powf+0x546>
 800ba54:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba58:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba60:	f6ff af78 	blt.w	800b954 <__ieee754_powf+0x434>
 800ba64:	e7ed      	b.n	800ba42 <__ieee754_powf+0x522>
 800ba66:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ba6a:	f73f af73 	bgt.w	800b954 <__ieee754_powf+0x434>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e78c      	b.n	800b98c <__ieee754_powf+0x46c>
 800ba72:	ee00 3a10 	vmov	s0, r3
 800ba76:	e7de      	b.n	800ba36 <__ieee754_powf+0x516>
 800ba78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba7c:	e568      	b.n	800b550 <__ieee754_powf+0x30>
 800ba7e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bab8 <__ieee754_powf+0x598>
 800ba82:	e565      	b.n	800b550 <__ieee754_powf+0x30>
 800ba84:	eeb0 0a48 	vmov.f32	s0, s16
 800ba88:	e562      	b.n	800b550 <__ieee754_powf+0x30>
 800ba8a:	2700      	movs	r7, #0
 800ba8c:	e58d      	b.n	800b5aa <__ieee754_powf+0x8a>
 800ba8e:	bf00      	nop
 800ba90:	007fffff 	.word	0x007fffff
 800ba94:	35bfbe8c 	.word	0x35bfbe8c
 800ba98:	3f317200 	.word	0x3f317200
 800ba9c:	3f317218 	.word	0x3f317218
 800baa0:	b5ddea0e 	.word	0xb5ddea0e
 800baa4:	3331bb4c 	.word	0x3331bb4c
 800baa8:	388ab355 	.word	0x388ab355
 800baac:	bb360b61 	.word	0xbb360b61
 800bab0:	3e2aaaab 	.word	0x3e2aaaab
 800bab4:	43160000 	.word	0x43160000
 800bab8:	00000000 	.word	0x00000000

0800babc <__ieee754_rem_pio2f>:
 800babc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800babe:	ee10 6a10 	vmov	r6, s0
 800bac2:	4b8e      	ldr	r3, [pc, #568]	; (800bcfc <__ieee754_rem_pio2f+0x240>)
 800bac4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bac8:	429d      	cmp	r5, r3
 800baca:	b087      	sub	sp, #28
 800bacc:	eef0 7a40 	vmov.f32	s15, s0
 800bad0:	4604      	mov	r4, r0
 800bad2:	dc05      	bgt.n	800bae0 <__ieee754_rem_pio2f+0x24>
 800bad4:	2300      	movs	r3, #0
 800bad6:	ed80 0a00 	vstr	s0, [r0]
 800bada:	6043      	str	r3, [r0, #4]
 800badc:	2000      	movs	r0, #0
 800bade:	e01a      	b.n	800bb16 <__ieee754_rem_pio2f+0x5a>
 800bae0:	4b87      	ldr	r3, [pc, #540]	; (800bd00 <__ieee754_rem_pio2f+0x244>)
 800bae2:	429d      	cmp	r5, r3
 800bae4:	dc46      	bgt.n	800bb74 <__ieee754_rem_pio2f+0xb8>
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bd04 <__ieee754_rem_pio2f+0x248>
 800baec:	4b86      	ldr	r3, [pc, #536]	; (800bd08 <__ieee754_rem_pio2f+0x24c>)
 800baee:	f025 050f 	bic.w	r5, r5, #15
 800baf2:	dd1f      	ble.n	800bb34 <__ieee754_rem_pio2f+0x78>
 800baf4:	429d      	cmp	r5, r3
 800baf6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bafa:	d00e      	beq.n	800bb1a <__ieee754_rem_pio2f+0x5e>
 800bafc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bd0c <__ieee754_rem_pio2f+0x250>
 800bb00:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bb04:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bb08:	ed80 0a00 	vstr	s0, [r0]
 800bb0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb10:	2001      	movs	r0, #1
 800bb12:	edc4 7a01 	vstr	s15, [r4, #4]
 800bb16:	b007      	add	sp, #28
 800bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb1a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bd10 <__ieee754_rem_pio2f+0x254>
 800bb1e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bd14 <__ieee754_rem_pio2f+0x258>
 800bb22:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bb26:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bb2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb2e:	edc0 6a00 	vstr	s13, [r0]
 800bb32:	e7eb      	b.n	800bb0c <__ieee754_rem_pio2f+0x50>
 800bb34:	429d      	cmp	r5, r3
 800bb36:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb3a:	d00e      	beq.n	800bb5a <__ieee754_rem_pio2f+0x9e>
 800bb3c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bd0c <__ieee754_rem_pio2f+0x250>
 800bb40:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bb44:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bb48:	ed80 0a00 	vstr	s0, [r0]
 800bb4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb54:	edc4 7a01 	vstr	s15, [r4, #4]
 800bb58:	e7dd      	b.n	800bb16 <__ieee754_rem_pio2f+0x5a>
 800bb5a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bd10 <__ieee754_rem_pio2f+0x254>
 800bb5e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bd14 <__ieee754_rem_pio2f+0x258>
 800bb62:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bb66:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bb6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb6e:	edc0 6a00 	vstr	s13, [r0]
 800bb72:	e7eb      	b.n	800bb4c <__ieee754_rem_pio2f+0x90>
 800bb74:	4b68      	ldr	r3, [pc, #416]	; (800bd18 <__ieee754_rem_pio2f+0x25c>)
 800bb76:	429d      	cmp	r5, r3
 800bb78:	dc72      	bgt.n	800bc60 <__ieee754_rem_pio2f+0x1a4>
 800bb7a:	f000 fcf3 	bl	800c564 <fabsf>
 800bb7e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bd1c <__ieee754_rem_pio2f+0x260>
 800bb82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bb86:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb92:	ee17 0a90 	vmov	r0, s15
 800bb96:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bd04 <__ieee754_rem_pio2f+0x248>
 800bb9a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb9e:	281f      	cmp	r0, #31
 800bba0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bd0c <__ieee754_rem_pio2f+0x250>
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	eeb1 6a47 	vneg.f32	s12, s14
 800bbac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bbb0:	ee16 2a90 	vmov	r2, s13
 800bbb4:	dc1c      	bgt.n	800bbf0 <__ieee754_rem_pio2f+0x134>
 800bbb6:	495a      	ldr	r1, [pc, #360]	; (800bd20 <__ieee754_rem_pio2f+0x264>)
 800bbb8:	1e47      	subs	r7, r0, #1
 800bbba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bbbe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bbc2:	428b      	cmp	r3, r1
 800bbc4:	d014      	beq.n	800bbf0 <__ieee754_rem_pio2f+0x134>
 800bbc6:	6022      	str	r2, [r4, #0]
 800bbc8:	ed94 7a00 	vldr	s14, [r4]
 800bbcc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbd6:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbda:	da9c      	bge.n	800bb16 <__ieee754_rem_pio2f+0x5a>
 800bbdc:	eeb1 7a47 	vneg.f32	s14, s14
 800bbe0:	eeb1 0a40 	vneg.f32	s0, s0
 800bbe4:	ed84 7a00 	vstr	s14, [r4]
 800bbe8:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbec:	4240      	negs	r0, r0
 800bbee:	e792      	b.n	800bb16 <__ieee754_rem_pio2f+0x5a>
 800bbf0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bbf4:	15eb      	asrs	r3, r5, #23
 800bbf6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bbfa:	2d08      	cmp	r5, #8
 800bbfc:	dde3      	ble.n	800bbc6 <__ieee754_rem_pio2f+0x10a>
 800bbfe:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bd10 <__ieee754_rem_pio2f+0x254>
 800bc02:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bd14 <__ieee754_rem_pio2f+0x258>
 800bc06:	eef0 6a40 	vmov.f32	s13, s0
 800bc0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bc0e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bc12:	eea6 0a27 	vfma.f32	s0, s12, s15
 800bc16:	eef0 7a40 	vmov.f32	s15, s0
 800bc1a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bc1e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bc22:	ee15 2a90 	vmov	r2, s11
 800bc26:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bc2a:	1a5b      	subs	r3, r3, r1
 800bc2c:	2b19      	cmp	r3, #25
 800bc2e:	dc04      	bgt.n	800bc3a <__ieee754_rem_pio2f+0x17e>
 800bc30:	edc4 5a00 	vstr	s11, [r4]
 800bc34:	eeb0 0a66 	vmov.f32	s0, s13
 800bc38:	e7c6      	b.n	800bbc8 <__ieee754_rem_pio2f+0x10c>
 800bc3a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bd24 <__ieee754_rem_pio2f+0x268>
 800bc3e:	eeb0 0a66 	vmov.f32	s0, s13
 800bc42:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bc46:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bc4a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bd28 <__ieee754_rem_pio2f+0x26c>
 800bc4e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc52:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bc56:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bc5a:	ed84 7a00 	vstr	s14, [r4]
 800bc5e:	e7b3      	b.n	800bbc8 <__ieee754_rem_pio2f+0x10c>
 800bc60:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bc64:	db06      	blt.n	800bc74 <__ieee754_rem_pio2f+0x1b8>
 800bc66:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc6a:	edc0 7a01 	vstr	s15, [r0, #4]
 800bc6e:	edc0 7a00 	vstr	s15, [r0]
 800bc72:	e733      	b.n	800badc <__ieee754_rem_pio2f+0x20>
 800bc74:	15ea      	asrs	r2, r5, #23
 800bc76:	3a86      	subs	r2, #134	; 0x86
 800bc78:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bc7c:	ee07 3a90 	vmov	s15, r3
 800bc80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc84:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bd2c <__ieee754_rem_pio2f+0x270>
 800bc88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc90:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bca0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bca4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb4:	edcd 7a05 	vstr	s15, [sp, #20]
 800bcb8:	d11e      	bne.n	800bcf8 <__ieee754_rem_pio2f+0x23c>
 800bcba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc2:	bf14      	ite	ne
 800bcc4:	2302      	movne	r3, #2
 800bcc6:	2301      	moveq	r3, #1
 800bcc8:	4919      	ldr	r1, [pc, #100]	; (800bd30 <__ieee754_rem_pio2f+0x274>)
 800bcca:	9101      	str	r1, [sp, #4]
 800bccc:	2102      	movs	r1, #2
 800bcce:	9100      	str	r1, [sp, #0]
 800bcd0:	a803      	add	r0, sp, #12
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	f000 f892 	bl	800bdfc <__kernel_rem_pio2f>
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	f6bf af1c 	bge.w	800bb16 <__ieee754_rem_pio2f+0x5a>
 800bcde:	edd4 7a00 	vldr	s15, [r4]
 800bce2:	eef1 7a67 	vneg.f32	s15, s15
 800bce6:	edc4 7a00 	vstr	s15, [r4]
 800bcea:	edd4 7a01 	vldr	s15, [r4, #4]
 800bcee:	eef1 7a67 	vneg.f32	s15, s15
 800bcf2:	edc4 7a01 	vstr	s15, [r4, #4]
 800bcf6:	e779      	b.n	800bbec <__ieee754_rem_pio2f+0x130>
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e7e5      	b.n	800bcc8 <__ieee754_rem_pio2f+0x20c>
 800bcfc:	3f490fd8 	.word	0x3f490fd8
 800bd00:	4016cbe3 	.word	0x4016cbe3
 800bd04:	3fc90f80 	.word	0x3fc90f80
 800bd08:	3fc90fd0 	.word	0x3fc90fd0
 800bd0c:	37354443 	.word	0x37354443
 800bd10:	37354400 	.word	0x37354400
 800bd14:	2e85a308 	.word	0x2e85a308
 800bd18:	43490f80 	.word	0x43490f80
 800bd1c:	3f22f984 	.word	0x3f22f984
 800bd20:	0800cbd4 	.word	0x0800cbd4
 800bd24:	2e85a300 	.word	0x2e85a300
 800bd28:	248d3132 	.word	0x248d3132
 800bd2c:	43800000 	.word	0x43800000
 800bd30:	0800cc54 	.word	0x0800cc54

0800bd34 <__ieee754_sqrtf>:
 800bd34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bd38:	4770      	bx	lr
	...

0800bd3c <__kernel_cosf>:
 800bd3c:	ee10 3a10 	vmov	r3, s0
 800bd40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bd48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bd4c:	da05      	bge.n	800bd5a <__kernel_cosf+0x1e>
 800bd4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd52:	ee17 2a90 	vmov	r2, s15
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d03d      	beq.n	800bdd6 <__kernel_cosf+0x9a>
 800bd5a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bd5e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bddc <__kernel_cosf+0xa0>
 800bd62:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bde0 <__kernel_cosf+0xa4>
 800bd66:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bde4 <__kernel_cosf+0xa8>
 800bd6a:	4a1f      	ldr	r2, [pc, #124]	; (800bde8 <__kernel_cosf+0xac>)
 800bd6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bd70:	4293      	cmp	r3, r2
 800bd72:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bdec <__kernel_cosf+0xb0>
 800bd76:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bd7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bdf0 <__kernel_cosf+0xb4>
 800bd7e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bd82:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bdf4 <__kernel_cosf+0xb8>
 800bd86:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bd8a:	eeb0 7a66 	vmov.f32	s14, s13
 800bd8e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bd92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bd96:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bd9a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bd9e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bda2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bda6:	dc04      	bgt.n	800bdb2 <__kernel_cosf+0x76>
 800bda8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bdac:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bdb0:	4770      	bx	lr
 800bdb2:	4a11      	ldr	r2, [pc, #68]	; (800bdf8 <__kernel_cosf+0xbc>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	bfda      	itte	le
 800bdb8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bdbc:	ee06 3a90 	vmovle	s13, r3
 800bdc0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bdc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bdc8:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bdcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdd4:	4770      	bx	lr
 800bdd6:	eeb0 0a46 	vmov.f32	s0, s12
 800bdda:	4770      	bx	lr
 800bddc:	ad47d74e 	.word	0xad47d74e
 800bde0:	310f74f6 	.word	0x310f74f6
 800bde4:	3d2aaaab 	.word	0x3d2aaaab
 800bde8:	3e999999 	.word	0x3e999999
 800bdec:	b493f27c 	.word	0xb493f27c
 800bdf0:	37d00d01 	.word	0x37d00d01
 800bdf4:	bab60b61 	.word	0xbab60b61
 800bdf8:	3f480000 	.word	0x3f480000

0800bdfc <__kernel_rem_pio2f>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	ed2d 8b04 	vpush	{d8-d9}
 800be04:	b0d9      	sub	sp, #356	; 0x164
 800be06:	4688      	mov	r8, r1
 800be08:	9002      	str	r0, [sp, #8]
 800be0a:	49bb      	ldr	r1, [pc, #748]	; (800c0f8 <__kernel_rem_pio2f+0x2fc>)
 800be0c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800be14:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800be18:	1e59      	subs	r1, r3, #1
 800be1a:	1d13      	adds	r3, r2, #4
 800be1c:	db27      	blt.n	800be6e <__kernel_rem_pio2f+0x72>
 800be1e:	f1b2 0b03 	subs.w	fp, r2, #3
 800be22:	bf48      	it	mi
 800be24:	f102 0b04 	addmi.w	fp, r2, #4
 800be28:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800be2c:	1c45      	adds	r5, r0, #1
 800be2e:	00ec      	lsls	r4, r5, #3
 800be30:	1a47      	subs	r7, r0, r1
 800be32:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800be36:	9403      	str	r4, [sp, #12]
 800be38:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800be3c:	eb0a 0c01 	add.w	ip, sl, r1
 800be40:	ae1c      	add	r6, sp, #112	; 0x70
 800be42:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800be46:	2400      	movs	r4, #0
 800be48:	4564      	cmp	r4, ip
 800be4a:	dd12      	ble.n	800be72 <__kernel_rem_pio2f+0x76>
 800be4c:	9b01      	ldr	r3, [sp, #4]
 800be4e:	ac1c      	add	r4, sp, #112	; 0x70
 800be50:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800be54:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800be58:	f04f 0c00 	mov.w	ip, #0
 800be5c:	45d4      	cmp	ip, sl
 800be5e:	dc27      	bgt.n	800beb0 <__kernel_rem_pio2f+0xb4>
 800be60:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800be64:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800be68:	4627      	mov	r7, r4
 800be6a:	2600      	movs	r6, #0
 800be6c:	e016      	b.n	800be9c <__kernel_rem_pio2f+0xa0>
 800be6e:	2000      	movs	r0, #0
 800be70:	e7dc      	b.n	800be2c <__kernel_rem_pio2f+0x30>
 800be72:	42e7      	cmn	r7, r4
 800be74:	bf5d      	ittte	pl
 800be76:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800be7a:	ee07 3a90 	vmovpl	s15, r3
 800be7e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800be82:	eef0 7a47 	vmovmi.f32	s15, s14
 800be86:	ece6 7a01 	vstmia	r6!, {s15}
 800be8a:	3401      	adds	r4, #1
 800be8c:	e7dc      	b.n	800be48 <__kernel_rem_pio2f+0x4c>
 800be8e:	ecf9 6a01 	vldmia	r9!, {s13}
 800be92:	ed97 7a00 	vldr	s14, [r7]
 800be96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be9a:	3601      	adds	r6, #1
 800be9c:	428e      	cmp	r6, r1
 800be9e:	f1a7 0704 	sub.w	r7, r7, #4
 800bea2:	ddf4      	ble.n	800be8e <__kernel_rem_pio2f+0x92>
 800bea4:	eceb 7a01 	vstmia	fp!, {s15}
 800bea8:	f10c 0c01 	add.w	ip, ip, #1
 800beac:	3404      	adds	r4, #4
 800beae:	e7d5      	b.n	800be5c <__kernel_rem_pio2f+0x60>
 800beb0:	ab08      	add	r3, sp, #32
 800beb2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800beb6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c104 <__kernel_rem_pio2f+0x308>
 800beba:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c100 <__kernel_rem_pio2f+0x304>
 800bebe:	9304      	str	r3, [sp, #16]
 800bec0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bec4:	4656      	mov	r6, sl
 800bec6:	00b3      	lsls	r3, r6, #2
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	ab58      	add	r3, sp, #352	; 0x160
 800becc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bed0:	ac08      	add	r4, sp, #32
 800bed2:	ab44      	add	r3, sp, #272	; 0x110
 800bed4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bed8:	46a4      	mov	ip, r4
 800beda:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bede:	4637      	mov	r7, r6
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	f1a0 0004 	sub.w	r0, r0, #4
 800bee6:	dc4f      	bgt.n	800bf88 <__kernel_rem_pio2f+0x18c>
 800bee8:	4628      	mov	r0, r5
 800beea:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800beee:	f000 fb95 	bl	800c61c <scalbnf>
 800bef2:	eeb0 8a40 	vmov.f32	s16, s0
 800bef6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800befa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800befe:	f000 fb45 	bl	800c58c <floorf>
 800bf02:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bf06:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bf10:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bf14:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bf18:	ee17 9a90 	vmov	r9, s15
 800bf1c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bf20:	dd44      	ble.n	800bfac <__kernel_rem_pio2f+0x1b0>
 800bf22:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800bf26:	ab08      	add	r3, sp, #32
 800bf28:	f1c5 0e08 	rsb	lr, r5, #8
 800bf2c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bf30:	fa47 f00e 	asr.w	r0, r7, lr
 800bf34:	4481      	add	r9, r0
 800bf36:	fa00 f00e 	lsl.w	r0, r0, lr
 800bf3a:	1a3f      	subs	r7, r7, r0
 800bf3c:	f1c5 0007 	rsb	r0, r5, #7
 800bf40:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bf44:	4107      	asrs	r7, r0
 800bf46:	2f00      	cmp	r7, #0
 800bf48:	dd3f      	ble.n	800bfca <__kernel_rem_pio2f+0x1ce>
 800bf4a:	f04f 0e00 	mov.w	lr, #0
 800bf4e:	f109 0901 	add.w	r9, r9, #1
 800bf52:	4673      	mov	r3, lr
 800bf54:	4576      	cmp	r6, lr
 800bf56:	dc6b      	bgt.n	800c030 <__kernel_rem_pio2f+0x234>
 800bf58:	2d00      	cmp	r5, #0
 800bf5a:	dd04      	ble.n	800bf66 <__kernel_rem_pio2f+0x16a>
 800bf5c:	2d01      	cmp	r5, #1
 800bf5e:	d078      	beq.n	800c052 <__kernel_rem_pio2f+0x256>
 800bf60:	2d02      	cmp	r5, #2
 800bf62:	f000 8081 	beq.w	800c068 <__kernel_rem_pio2f+0x26c>
 800bf66:	2f02      	cmp	r7, #2
 800bf68:	d12f      	bne.n	800bfca <__kernel_rem_pio2f+0x1ce>
 800bf6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bf6e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bf72:	b353      	cbz	r3, 800bfca <__kernel_rem_pio2f+0x1ce>
 800bf74:	4628      	mov	r0, r5
 800bf76:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bf7a:	f000 fb4f 	bl	800c61c <scalbnf>
 800bf7e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bf82:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bf86:	e020      	b.n	800bfca <__kernel_rem_pio2f+0x1ce>
 800bf88:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bf8c:	3f01      	subs	r7, #1
 800bf8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf96:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bf9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf9e:	ecac 0a01 	vstmia	ip!, {s0}
 800bfa2:	ed90 0a00 	vldr	s0, [r0]
 800bfa6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bfaa:	e799      	b.n	800bee0 <__kernel_rem_pio2f+0xe4>
 800bfac:	d105      	bne.n	800bfba <__kernel_rem_pio2f+0x1be>
 800bfae:	1e70      	subs	r0, r6, #1
 800bfb0:	ab08      	add	r3, sp, #32
 800bfb2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800bfb6:	11ff      	asrs	r7, r7, #7
 800bfb8:	e7c5      	b.n	800bf46 <__kernel_rem_pio2f+0x14a>
 800bfba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bfbe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bfc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc6:	da31      	bge.n	800c02c <__kernel_rem_pio2f+0x230>
 800bfc8:	2700      	movs	r7, #0
 800bfca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd2:	f040 809b 	bne.w	800c10c <__kernel_rem_pio2f+0x310>
 800bfd6:	1e74      	subs	r4, r6, #1
 800bfd8:	46a4      	mov	ip, r4
 800bfda:	2000      	movs	r0, #0
 800bfdc:	45d4      	cmp	ip, sl
 800bfde:	da4a      	bge.n	800c076 <__kernel_rem_pio2f+0x27a>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d07a      	beq.n	800c0da <__kernel_rem_pio2f+0x2de>
 800bfe4:	ab08      	add	r3, sp, #32
 800bfe6:	3d08      	subs	r5, #8
 800bfe8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 8081 	beq.w	800c0f4 <__kernel_rem_pio2f+0x2f8>
 800bff2:	4628      	mov	r0, r5
 800bff4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bff8:	00a5      	lsls	r5, r4, #2
 800bffa:	f000 fb0f 	bl	800c61c <scalbnf>
 800bffe:	aa44      	add	r2, sp, #272	; 0x110
 800c000:	1d2b      	adds	r3, r5, #4
 800c002:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c104 <__kernel_rem_pio2f+0x308>
 800c006:	18d1      	adds	r1, r2, r3
 800c008:	4622      	mov	r2, r4
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	f280 80ae 	bge.w	800c16c <__kernel_rem_pio2f+0x370>
 800c010:	4622      	mov	r2, r4
 800c012:	2a00      	cmp	r2, #0
 800c014:	f2c0 80cc 	blt.w	800c1b0 <__kernel_rem_pio2f+0x3b4>
 800c018:	a944      	add	r1, sp, #272	; 0x110
 800c01a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c01e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c0fc <__kernel_rem_pio2f+0x300>
 800c022:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800c026:	2000      	movs	r0, #0
 800c028:	1aa1      	subs	r1, r4, r2
 800c02a:	e0b6      	b.n	800c19a <__kernel_rem_pio2f+0x39e>
 800c02c:	2702      	movs	r7, #2
 800c02e:	e78c      	b.n	800bf4a <__kernel_rem_pio2f+0x14e>
 800c030:	6820      	ldr	r0, [r4, #0]
 800c032:	b94b      	cbnz	r3, 800c048 <__kernel_rem_pio2f+0x24c>
 800c034:	b118      	cbz	r0, 800c03e <__kernel_rem_pio2f+0x242>
 800c036:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	2001      	movs	r0, #1
 800c03e:	f10e 0e01 	add.w	lr, lr, #1
 800c042:	3404      	adds	r4, #4
 800c044:	4603      	mov	r3, r0
 800c046:	e785      	b.n	800bf54 <__kernel_rem_pio2f+0x158>
 800c048:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c04c:	6020      	str	r0, [r4, #0]
 800c04e:	4618      	mov	r0, r3
 800c050:	e7f5      	b.n	800c03e <__kernel_rem_pio2f+0x242>
 800c052:	1e74      	subs	r4, r6, #1
 800c054:	a808      	add	r0, sp, #32
 800c056:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c05a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c05e:	f10d 0c20 	add.w	ip, sp, #32
 800c062:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c066:	e77e      	b.n	800bf66 <__kernel_rem_pio2f+0x16a>
 800c068:	1e74      	subs	r4, r6, #1
 800c06a:	a808      	add	r0, sp, #32
 800c06c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c070:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c074:	e7f3      	b.n	800c05e <__kernel_rem_pio2f+0x262>
 800c076:	ab08      	add	r3, sp, #32
 800c078:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c07c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c080:	4318      	orrs	r0, r3
 800c082:	e7ab      	b.n	800bfdc <__kernel_rem_pio2f+0x1e0>
 800c084:	f10c 0c01 	add.w	ip, ip, #1
 800c088:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c08c:	2c00      	cmp	r4, #0
 800c08e:	d0f9      	beq.n	800c084 <__kernel_rem_pio2f+0x288>
 800c090:	9b05      	ldr	r3, [sp, #20]
 800c092:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c096:	eb0d 0003 	add.w	r0, sp, r3
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	18f4      	adds	r4, r6, r3
 800c09e:	ab1c      	add	r3, sp, #112	; 0x70
 800c0a0:	1c77      	adds	r7, r6, #1
 800c0a2:	384c      	subs	r0, #76	; 0x4c
 800c0a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0a8:	4466      	add	r6, ip
 800c0aa:	42be      	cmp	r6, r7
 800c0ac:	f6ff af0b 	blt.w	800bec6 <__kernel_rem_pio2f+0xca>
 800c0b0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c0b4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c0b8:	ee07 3a90 	vmov	s15, r3
 800c0bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0c0:	f04f 0c00 	mov.w	ip, #0
 800c0c4:	ece4 7a01 	vstmia	r4!, {s15}
 800c0c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800c0cc:	46a1      	mov	r9, r4
 800c0ce:	458c      	cmp	ip, r1
 800c0d0:	dd07      	ble.n	800c0e2 <__kernel_rem_pio2f+0x2e6>
 800c0d2:	ece0 7a01 	vstmia	r0!, {s15}
 800c0d6:	3701      	adds	r7, #1
 800c0d8:	e7e7      	b.n	800c0aa <__kernel_rem_pio2f+0x2ae>
 800c0da:	9804      	ldr	r0, [sp, #16]
 800c0dc:	f04f 0c01 	mov.w	ip, #1
 800c0e0:	e7d2      	b.n	800c088 <__kernel_rem_pio2f+0x28c>
 800c0e2:	ecfe 6a01 	vldmia	lr!, {s13}
 800c0e6:	ed39 7a01 	vldmdb	r9!, {s14}
 800c0ea:	f10c 0c01 	add.w	ip, ip, #1
 800c0ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c0f2:	e7ec      	b.n	800c0ce <__kernel_rem_pio2f+0x2d2>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	e775      	b.n	800bfe4 <__kernel_rem_pio2f+0x1e8>
 800c0f8:	0800cf98 	.word	0x0800cf98
 800c0fc:	0800cf6c 	.word	0x0800cf6c
 800c100:	43800000 	.word	0x43800000
 800c104:	3b800000 	.word	0x3b800000
 800c108:	00000000 	.word	0x00000000
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	eeb0 0a48 	vmov.f32	s0, s16
 800c112:	1a98      	subs	r0, r3, r2
 800c114:	f000 fa82 	bl	800c61c <scalbnf>
 800c118:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c100 <__kernel_rem_pio2f+0x304>
 800c11c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c124:	db19      	blt.n	800c15a <__kernel_rem_pio2f+0x35e>
 800c126:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c104 <__kernel_rem_pio2f+0x308>
 800c12a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c12e:	aa08      	add	r2, sp, #32
 800c130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c134:	1c74      	adds	r4, r6, #1
 800c136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c13a:	3508      	adds	r5, #8
 800c13c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c144:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c148:	ee10 3a10 	vmov	r3, s0
 800c14c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c150:	ee17 3a90 	vmov	r3, s15
 800c154:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c158:	e74b      	b.n	800bff2 <__kernel_rem_pio2f+0x1f6>
 800c15a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c15e:	aa08      	add	r2, sp, #32
 800c160:	ee10 3a10 	vmov	r3, s0
 800c164:	4634      	mov	r4, r6
 800c166:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c16a:	e742      	b.n	800bff2 <__kernel_rem_pio2f+0x1f6>
 800c16c:	a808      	add	r0, sp, #32
 800c16e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c172:	9001      	str	r0, [sp, #4]
 800c174:	ee07 0a90 	vmov	s15, r0
 800c178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c17c:	3a01      	subs	r2, #1
 800c17e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c182:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c186:	ed61 7a01 	vstmdb	r1!, {s15}
 800c18a:	e73e      	b.n	800c00a <__kernel_rem_pio2f+0x20e>
 800c18c:	ecfc 6a01 	vldmia	ip!, {s13}
 800c190:	ecb6 7a01 	vldmia	r6!, {s14}
 800c194:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c198:	3001      	adds	r0, #1
 800c19a:	4550      	cmp	r0, sl
 800c19c:	dc01      	bgt.n	800c1a2 <__kernel_rem_pio2f+0x3a6>
 800c19e:	4288      	cmp	r0, r1
 800c1a0:	ddf4      	ble.n	800c18c <__kernel_rem_pio2f+0x390>
 800c1a2:	a858      	add	r0, sp, #352	; 0x160
 800c1a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c1a8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c1ac:	3a01      	subs	r2, #1
 800c1ae:	e730      	b.n	800c012 <__kernel_rem_pio2f+0x216>
 800c1b0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c1b2:	2a02      	cmp	r2, #2
 800c1b4:	dc09      	bgt.n	800c1ca <__kernel_rem_pio2f+0x3ce>
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	dc2a      	bgt.n	800c210 <__kernel_rem_pio2f+0x414>
 800c1ba:	d043      	beq.n	800c244 <__kernel_rem_pio2f+0x448>
 800c1bc:	f009 0007 	and.w	r0, r9, #7
 800c1c0:	b059      	add	sp, #356	; 0x164
 800c1c2:	ecbd 8b04 	vpop	{d8-d9}
 800c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d1f5      	bne.n	800c1bc <__kernel_rem_pio2f+0x3c0>
 800c1d0:	ab30      	add	r3, sp, #192	; 0xc0
 800c1d2:	442b      	add	r3, r5
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4620      	mov	r0, r4
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	f1a1 0104 	sub.w	r1, r1, #4
 800c1e0:	dc51      	bgt.n	800c286 <__kernel_rem_pio2f+0x48a>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	2901      	cmp	r1, #1
 800c1e6:	f1a2 0204 	sub.w	r2, r2, #4
 800c1ea:	dc5c      	bgt.n	800c2a6 <__kernel_rem_pio2f+0x4aa>
 800c1ec:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	2c01      	cmp	r4, #1
 800c1f4:	dc67      	bgt.n	800c2c6 <__kernel_rem_pio2f+0x4ca>
 800c1f6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c1fa:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c1fe:	2f00      	cmp	r7, #0
 800c200:	d167      	bne.n	800c2d2 <__kernel_rem_pio2f+0x4d6>
 800c202:	edc8 6a00 	vstr	s13, [r8]
 800c206:	ed88 7a01 	vstr	s14, [r8, #4]
 800c20a:	edc8 7a02 	vstr	s15, [r8, #8]
 800c20e:	e7d5      	b.n	800c1bc <__kernel_rem_pio2f+0x3c0>
 800c210:	aa30      	add	r2, sp, #192	; 0xc0
 800c212:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800c216:	4413      	add	r3, r2
 800c218:	4622      	mov	r2, r4
 800c21a:	2a00      	cmp	r2, #0
 800c21c:	da24      	bge.n	800c268 <__kernel_rem_pio2f+0x46c>
 800c21e:	b34f      	cbz	r7, 800c274 <__kernel_rem_pio2f+0x478>
 800c220:	eef1 7a47 	vneg.f32	s15, s14
 800c224:	edc8 7a00 	vstr	s15, [r8]
 800c228:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c22c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c230:	aa31      	add	r2, sp, #196	; 0xc4
 800c232:	2301      	movs	r3, #1
 800c234:	429c      	cmp	r4, r3
 800c236:	da20      	bge.n	800c27a <__kernel_rem_pio2f+0x47e>
 800c238:	b10f      	cbz	r7, 800c23e <__kernel_rem_pio2f+0x442>
 800c23a:	eef1 7a67 	vneg.f32	s15, s15
 800c23e:	edc8 7a01 	vstr	s15, [r8, #4]
 800c242:	e7bb      	b.n	800c1bc <__kernel_rem_pio2f+0x3c0>
 800c244:	aa30      	add	r2, sp, #192	; 0xc0
 800c246:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c108 <__kernel_rem_pio2f+0x30c>
 800c24a:	4413      	add	r3, r2
 800c24c:	2c00      	cmp	r4, #0
 800c24e:	da05      	bge.n	800c25c <__kernel_rem_pio2f+0x460>
 800c250:	b10f      	cbz	r7, 800c256 <__kernel_rem_pio2f+0x45a>
 800c252:	eef1 7a67 	vneg.f32	s15, s15
 800c256:	edc8 7a00 	vstr	s15, [r8]
 800c25a:	e7af      	b.n	800c1bc <__kernel_rem_pio2f+0x3c0>
 800c25c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c260:	3c01      	subs	r4, #1
 800c262:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c266:	e7f1      	b.n	800c24c <__kernel_rem_pio2f+0x450>
 800c268:	ed73 7a01 	vldmdb	r3!, {s15}
 800c26c:	3a01      	subs	r2, #1
 800c26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c272:	e7d2      	b.n	800c21a <__kernel_rem_pio2f+0x41e>
 800c274:	eef0 7a47 	vmov.f32	s15, s14
 800c278:	e7d4      	b.n	800c224 <__kernel_rem_pio2f+0x428>
 800c27a:	ecb2 7a01 	vldmia	r2!, {s14}
 800c27e:	3301      	adds	r3, #1
 800c280:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c284:	e7d6      	b.n	800c234 <__kernel_rem_pio2f+0x438>
 800c286:	edd1 7a00 	vldr	s15, [r1]
 800c28a:	edd1 6a01 	vldr	s13, [r1, #4]
 800c28e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c292:	3801      	subs	r0, #1
 800c294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c298:	ed81 7a00 	vstr	s14, [r1]
 800c29c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a0:	edc1 7a01 	vstr	s15, [r1, #4]
 800c2a4:	e799      	b.n	800c1da <__kernel_rem_pio2f+0x3de>
 800c2a6:	edd2 7a00 	vldr	s15, [r2]
 800c2aa:	edd2 6a01 	vldr	s13, [r2, #4]
 800c2ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c2b2:	3901      	subs	r1, #1
 800c2b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2b8:	ed82 7a00 	vstr	s14, [r2]
 800c2bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c0:	edc2 7a01 	vstr	s15, [r2, #4]
 800c2c4:	e78e      	b.n	800c1e4 <__kernel_rem_pio2f+0x3e8>
 800c2c6:	ed33 7a01 	vldmdb	r3!, {s14}
 800c2ca:	3c01      	subs	r4, #1
 800c2cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2d0:	e78f      	b.n	800c1f2 <__kernel_rem_pio2f+0x3f6>
 800c2d2:	eef1 6a66 	vneg.f32	s13, s13
 800c2d6:	eeb1 7a47 	vneg.f32	s14, s14
 800c2da:	edc8 6a00 	vstr	s13, [r8]
 800c2de:	ed88 7a01 	vstr	s14, [r8, #4]
 800c2e2:	eef1 7a67 	vneg.f32	s15, s15
 800c2e6:	e790      	b.n	800c20a <__kernel_rem_pio2f+0x40e>

0800c2e8 <__kernel_sinf>:
 800c2e8:	ee10 3a10 	vmov	r3, s0
 800c2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c2f4:	da04      	bge.n	800c300 <__kernel_sinf+0x18>
 800c2f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c2fa:	ee17 3a90 	vmov	r3, s15
 800c2fe:	b35b      	cbz	r3, 800c358 <__kernel_sinf+0x70>
 800c300:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c304:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c35c <__kernel_sinf+0x74>
 800c308:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c360 <__kernel_sinf+0x78>
 800c30c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c310:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c364 <__kernel_sinf+0x7c>
 800c314:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c318:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c368 <__kernel_sinf+0x80>
 800c31c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c320:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c36c <__kernel_sinf+0x84>
 800c324:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c328:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c32c:	b930      	cbnz	r0, 800c33c <__kernel_sinf+0x54>
 800c32e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c370 <__kernel_sinf+0x88>
 800c332:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c336:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c33a:	4770      	bx	lr
 800c33c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c340:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c344:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c348:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c34c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c374 <__kernel_sinf+0x8c>
 800c350:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c354:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c360:	b2d72f34 	.word	0xb2d72f34
 800c364:	3638ef1b 	.word	0x3638ef1b
 800c368:	b9500d01 	.word	0xb9500d01
 800c36c:	3c088889 	.word	0x3c088889
 800c370:	be2aaaab 	.word	0xbe2aaaab
 800c374:	3e2aaaab 	.word	0x3e2aaaab

0800c378 <with_errnof>:
 800c378:	b513      	push	{r0, r1, r4, lr}
 800c37a:	4604      	mov	r4, r0
 800c37c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c380:	f7fb ff00 	bl	8008184 <__errno>
 800c384:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c388:	6004      	str	r4, [r0, #0]
 800c38a:	b002      	add	sp, #8
 800c38c:	bd10      	pop	{r4, pc}

0800c38e <xflowf>:
 800c38e:	b130      	cbz	r0, 800c39e <xflowf+0x10>
 800c390:	eef1 7a40 	vneg.f32	s15, s0
 800c394:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c398:	2022      	movs	r0, #34	; 0x22
 800c39a:	f7ff bfed 	b.w	800c378 <with_errnof>
 800c39e:	eef0 7a40 	vmov.f32	s15, s0
 800c3a2:	e7f7      	b.n	800c394 <xflowf+0x6>

0800c3a4 <__math_uflowf>:
 800c3a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c3ac <__math_uflowf+0x8>
 800c3a8:	f7ff bff1 	b.w	800c38e <xflowf>
 800c3ac:	10000000 	.word	0x10000000

0800c3b0 <__math_oflowf>:
 800c3b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c3b8 <__math_oflowf+0x8>
 800c3b4:	f7ff bfeb 	b.w	800c38e <xflowf>
 800c3b8:	70000000 	.word	0x70000000

0800c3bc <atanf>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	ee10 5a10 	vmov	r5, s0
 800c3c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c3c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c3ca:	eef0 7a40 	vmov.f32	s15, s0
 800c3ce:	db10      	blt.n	800c3f2 <atanf+0x36>
 800c3d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c3d4:	dd04      	ble.n	800c3e0 <atanf+0x24>
 800c3d6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c3da:	eeb0 0a67 	vmov.f32	s0, s15
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c518 <atanf+0x15c>
 800c3e4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c51c <atanf+0x160>
 800c3e8:	2d00      	cmp	r5, #0
 800c3ea:	bfd8      	it	le
 800c3ec:	eef0 7a40 	vmovle.f32	s15, s0
 800c3f0:	e7f3      	b.n	800c3da <atanf+0x1e>
 800c3f2:	4b4b      	ldr	r3, [pc, #300]	; (800c520 <atanf+0x164>)
 800c3f4:	429c      	cmp	r4, r3
 800c3f6:	dc10      	bgt.n	800c41a <atanf+0x5e>
 800c3f8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c3fc:	da0a      	bge.n	800c414 <atanf+0x58>
 800c3fe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c524 <atanf+0x168>
 800c402:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c412:	dce2      	bgt.n	800c3da <atanf+0x1e>
 800c414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c418:	e013      	b.n	800c442 <atanf+0x86>
 800c41a:	f000 f8a3 	bl	800c564 <fabsf>
 800c41e:	4b42      	ldr	r3, [pc, #264]	; (800c528 <atanf+0x16c>)
 800c420:	429c      	cmp	r4, r3
 800c422:	dc4f      	bgt.n	800c4c4 <atanf+0x108>
 800c424:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c428:	429c      	cmp	r4, r3
 800c42a:	dc41      	bgt.n	800c4b0 <atanf+0xf4>
 800c42c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c430:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c434:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c438:	2300      	movs	r3, #0
 800c43a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c43e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c448:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c52c <atanf+0x170>
 800c44c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c530 <atanf+0x174>
 800c450:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c534 <atanf+0x178>
 800c454:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c458:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c45c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c538 <atanf+0x17c>
 800c460:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c464:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c53c <atanf+0x180>
 800c468:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c46c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800c540 <atanf+0x184>
 800c470:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c474:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c544 <atanf+0x188>
 800c478:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c47c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800c548 <atanf+0x18c>
 800c480:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c484:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800c54c <atanf+0x190>
 800c488:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c48c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800c550 <atanf+0x194>
 800c490:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c494:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800c554 <atanf+0x198>
 800c498:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c49c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c4a0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c4a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c4a8:	d121      	bne.n	800c4ee <atanf+0x132>
 800c4aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4ae:	e794      	b.n	800c3da <atanf+0x1e>
 800c4b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c4b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c4b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c4bc:	2301      	movs	r3, #1
 800c4be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c4c2:	e7be      	b.n	800c442 <atanf+0x86>
 800c4c4:	4b24      	ldr	r3, [pc, #144]	; (800c558 <atanf+0x19c>)
 800c4c6:	429c      	cmp	r4, r3
 800c4c8:	dc0b      	bgt.n	800c4e2 <atanf+0x126>
 800c4ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c4dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4e0:	e7af      	b.n	800c442 <atanf+0x86>
 800c4e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c4e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e7a9      	b.n	800c442 <atanf+0x86>
 800c4ee:	4a1b      	ldr	r2, [pc, #108]	; (800c55c <atanf+0x1a0>)
 800c4f0:	491b      	ldr	r1, [pc, #108]	; (800c560 <atanf+0x1a4>)
 800c4f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c4f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c4fa:	ed93 0a00 	vldr	s0, [r3]
 800c4fe:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c502:	ed92 0a00 	vldr	s0, [r2]
 800c506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c50a:	2d00      	cmp	r5, #0
 800c50c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c510:	bfb8      	it	lt
 800c512:	eef1 7a67 	vneglt.f32	s15, s15
 800c516:	e760      	b.n	800c3da <atanf+0x1e>
 800c518:	3fc90fdb 	.word	0x3fc90fdb
 800c51c:	bfc90fdb 	.word	0xbfc90fdb
 800c520:	3edfffff 	.word	0x3edfffff
 800c524:	7149f2ca 	.word	0x7149f2ca
 800c528:	3f97ffff 	.word	0x3f97ffff
 800c52c:	3c8569d7 	.word	0x3c8569d7
 800c530:	3d4bda59 	.word	0x3d4bda59
 800c534:	bd6ef16b 	.word	0xbd6ef16b
 800c538:	3d886b35 	.word	0x3d886b35
 800c53c:	3dba2e6e 	.word	0x3dba2e6e
 800c540:	3e124925 	.word	0x3e124925
 800c544:	3eaaaaab 	.word	0x3eaaaaab
 800c548:	bd15a221 	.word	0xbd15a221
 800c54c:	bd9d8795 	.word	0xbd9d8795
 800c550:	bde38e38 	.word	0xbde38e38
 800c554:	be4ccccd 	.word	0xbe4ccccd
 800c558:	401bffff 	.word	0x401bffff
 800c55c:	0800cfa4 	.word	0x0800cfa4
 800c560:	0800cfb4 	.word	0x0800cfb4

0800c564 <fabsf>:
 800c564:	ee10 3a10 	vmov	r3, s0
 800c568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c56c:	ee00 3a10 	vmov	s0, r3
 800c570:	4770      	bx	lr

0800c572 <finitef>:
 800c572:	b082      	sub	sp, #8
 800c574:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c578:	9801      	ldr	r0, [sp, #4]
 800c57a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c57e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c582:	bfac      	ite	ge
 800c584:	2000      	movge	r0, #0
 800c586:	2001      	movlt	r0, #1
 800c588:	b002      	add	sp, #8
 800c58a:	4770      	bx	lr

0800c58c <floorf>:
 800c58c:	ee10 3a10 	vmov	r3, s0
 800c590:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c594:	3a7f      	subs	r2, #127	; 0x7f
 800c596:	2a16      	cmp	r2, #22
 800c598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c59c:	dc2a      	bgt.n	800c5f4 <floorf+0x68>
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	da11      	bge.n	800c5c6 <floorf+0x3a>
 800c5a2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c604 <floorf+0x78>
 800c5a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	dd05      	ble.n	800c5c0 <floorf+0x34>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	da23      	bge.n	800c600 <floorf+0x74>
 800c5b8:	4a13      	ldr	r2, [pc, #76]	; (800c608 <floorf+0x7c>)
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	bf18      	it	ne
 800c5be:	4613      	movne	r3, r2
 800c5c0:	ee00 3a10 	vmov	s0, r3
 800c5c4:	4770      	bx	lr
 800c5c6:	4911      	ldr	r1, [pc, #68]	; (800c60c <floorf+0x80>)
 800c5c8:	4111      	asrs	r1, r2
 800c5ca:	420b      	tst	r3, r1
 800c5cc:	d0fa      	beq.n	800c5c4 <floorf+0x38>
 800c5ce:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c604 <floorf+0x78>
 800c5d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5de:	ddef      	ble.n	800c5c0 <floorf+0x34>
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	bfbe      	ittt	lt
 800c5e4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c5e8:	fa40 f202 	asrlt.w	r2, r0, r2
 800c5ec:	189b      	addlt	r3, r3, r2
 800c5ee:	ea23 0301 	bic.w	r3, r3, r1
 800c5f2:	e7e5      	b.n	800c5c0 <floorf+0x34>
 800c5f4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c5f8:	d3e4      	bcc.n	800c5c4 <floorf+0x38>
 800c5fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5fe:	4770      	bx	lr
 800c600:	2300      	movs	r3, #0
 800c602:	e7dd      	b.n	800c5c0 <floorf+0x34>
 800c604:	7149f2ca 	.word	0x7149f2ca
 800c608:	bf800000 	.word	0xbf800000
 800c60c:	007fffff 	.word	0x007fffff

0800c610 <nanf>:
 800c610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c618 <nanf+0x8>
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	7fc00000 	.word	0x7fc00000

0800c61c <scalbnf>:
 800c61c:	ee10 3a10 	vmov	r3, s0
 800c620:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c624:	d025      	beq.n	800c672 <scalbnf+0x56>
 800c626:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c62a:	d302      	bcc.n	800c632 <scalbnf+0x16>
 800c62c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c630:	4770      	bx	lr
 800c632:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c636:	d122      	bne.n	800c67e <scalbnf+0x62>
 800c638:	4b2a      	ldr	r3, [pc, #168]	; (800c6e4 <scalbnf+0xc8>)
 800c63a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c6e8 <scalbnf+0xcc>
 800c63e:	4298      	cmp	r0, r3
 800c640:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c644:	db16      	blt.n	800c674 <scalbnf+0x58>
 800c646:	ee10 3a10 	vmov	r3, s0
 800c64a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c64e:	3a19      	subs	r2, #25
 800c650:	4402      	add	r2, r0
 800c652:	2afe      	cmp	r2, #254	; 0xfe
 800c654:	dd15      	ble.n	800c682 <scalbnf+0x66>
 800c656:	ee10 3a10 	vmov	r3, s0
 800c65a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c6ec <scalbnf+0xd0>
 800c65e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c6f0 <scalbnf+0xd4>
 800c662:	2b00      	cmp	r3, #0
 800c664:	eeb0 7a67 	vmov.f32	s14, s15
 800c668:	bfb8      	it	lt
 800c66a:	eef0 7a66 	vmovlt.f32	s15, s13
 800c66e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c672:	4770      	bx	lr
 800c674:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c6f4 <scalbnf+0xd8>
 800c678:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c67c:	4770      	bx	lr
 800c67e:	0dd2      	lsrs	r2, r2, #23
 800c680:	e7e6      	b.n	800c650 <scalbnf+0x34>
 800c682:	2a00      	cmp	r2, #0
 800c684:	dd06      	ble.n	800c694 <scalbnf+0x78>
 800c686:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c68a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c68e:	ee00 3a10 	vmov	s0, r3
 800c692:	4770      	bx	lr
 800c694:	f112 0f16 	cmn.w	r2, #22
 800c698:	da1a      	bge.n	800c6d0 <scalbnf+0xb4>
 800c69a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c69e:	4298      	cmp	r0, r3
 800c6a0:	ee10 3a10 	vmov	r3, s0
 800c6a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6a8:	dd0a      	ble.n	800c6c0 <scalbnf+0xa4>
 800c6aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c6ec <scalbnf+0xd0>
 800c6ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c6f0 <scalbnf+0xd4>
 800c6b2:	eef0 7a40 	vmov.f32	s15, s0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bf18      	it	ne
 800c6ba:	eeb0 0a47 	vmovne.f32	s0, s14
 800c6be:	e7db      	b.n	800c678 <scalbnf+0x5c>
 800c6c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c6f4 <scalbnf+0xd8>
 800c6c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c6f8 <scalbnf+0xdc>
 800c6c8:	eef0 7a40 	vmov.f32	s15, s0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	e7f3      	b.n	800c6b8 <scalbnf+0x9c>
 800c6d0:	3219      	adds	r2, #25
 800c6d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c6da:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c6fc <scalbnf+0xe0>
 800c6de:	ee07 3a10 	vmov	s14, r3
 800c6e2:	e7c4      	b.n	800c66e <scalbnf+0x52>
 800c6e4:	ffff3cb0 	.word	0xffff3cb0
 800c6e8:	4c000000 	.word	0x4c000000
 800c6ec:	7149f2ca 	.word	0x7149f2ca
 800c6f0:	f149f2ca 	.word	0xf149f2ca
 800c6f4:	0da24260 	.word	0x0da24260
 800c6f8:	8da24260 	.word	0x8da24260
 800c6fc:	33000000 	.word	0x33000000

0800c700 <_init>:
 800c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c702:	bf00      	nop
 800c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c706:	bc08      	pop	{r3}
 800c708:	469e      	mov	lr, r3
 800c70a:	4770      	bx	lr

0800c70c <_fini>:
 800c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70e:	bf00      	nop
 800c710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c712:	bc08      	pop	{r3}
 800c714:	469e      	mov	lr, r3
 800c716:	4770      	bx	lr
